package userinterface;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.virtual_parse_stack;
import java.lang.reflect.Field;


parser code
{: 
    public List<String> SynErr = new ArrayList();
    public List<CupError> Errs = new ArrayList();
    private Symbol s;

    

    public final Class getSymbolContainer() {
        return sym.class;
    }

    public void syntax_error(Symbol cur_token){
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) cur_token);
        List<Integer> ids = expected_token_ids();
        CupError cupError = new CupError(s.right + 1, s.left + 1, s.value);
        for (Integer expected : ids) {
                String aux = symbl_name_from_id(expected);
                cupError.addExpected(aux);
        }
        Errs.add(cupError);
    }

    public void unrecovered_syntax_error(Symbol cur_token){
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) cur_token);
        List<Integer> ids = expected_token_ids();
        CupError cupError = new CupError(s.right + 1, s.left + 1, s.value);
        for (Integer expected : ids) {
                String aux = symbl_name_from_id(expected);
                cupError.addExpected(aux);
        }
        Errs.add(cupError);
    }

    public String symbl_name_from_id(int id) {
        Field[] fields = getSymbolContainer().getFields();
        for(Field f : fields){
            try {
                  if (f.getInt(null)==id) return f.getName();
            } catch (IllegalArgumentException e) {
            } catch (IllegalAccessException e) {
            }
        }
        return "Simbolo Invalido id";
    }

    public List<Integer> expected_token_ids() {
        List<Integer> ret = new ArrayList();
        int parse_state = ((Symbol)stack.peek()).parse_state ;
        short[] row = action_tab[parse_state];
        for (int i = 0; i<row.length; i+=2){
                if (row[i]==-1) continue;
                if (!validate_expected_symbol(row[i])) continue;
                ret.add(new Integer(row[i]));
        }
        return ret;
    }

    protected static final int _error_sync_size(){
        return 1;
    }

    private boolean validate_expected_symbol(int id){
        short lhs,rhs_size;
        int act;
        try {
            virtual_parse_stack vstack = new virtual_parse_stack(stack);
            for (;;)
            {
                act = get_action(vstack.top(), id);
                if (act == 0) return false;
                if (act > 0)
                {
                        vstack.push(act-1);
                        if (!advance_lookahead()) return true;
                }
                else
                {
                        if ((-act)-1 == start_production())  return true;
                        lhs = production_tab[(-act)-1][0];
                        rhs_size = production_tab[(-act)-1][1];
                        for (int i = 0; i < rhs_size; i++) vstack.pop();
                        vstack.push(get_reduce(vstack.top(), lhs));
                }
            }
        } catch (Exception e) {
                e.printStackTrace();
        }
        return true;
    }
:};
action code {:
    
    public List<Simbolo> Simbolos = new ArrayList();
    public List<TSError> TSerrores = new ArrayList();

    //BDD
    Simbolo s1 = new Simbolo();
    s1.SetId("master");
    s1.SetAtributos("tipo=bdd");
    Simbolos.add(s1);
    
    //BDD
    Simbolo s2 = new Simbolo();
    s2.SetId("motociclismo");
    s2.SetAtributos("tipo=bdd","ambito=master");
    Simbolos.add(s2);

    //ESQUEMA
    Simbolo s8 = new Simbolo();
    s8.SetId("NASCAR");
    s8.SetAtributos("tipo=esquema","ambito=motociclismo");
    Simbolos.add(s8);
   
 //------------------------------------REVISAR AMBITO--------------------------------
    //TABLA
    Simbolo s3 = new Simbolo();
    s3.SetId("carrera");
    s3.SetAtributos("tipo=tabla","ambito=motociclismo.NASCAR");
    Simbolos.add(s3);

    Simbolo s4 = new Simbolo();
    s4.SetId("NombreGP");
    s4.SetAtributos("tipo=varchar(15)","ambito=motociclismo.NASCAR.carrera");
    Simbolos.add(s4);

    //CAMPO
    Simbolo s5 = new Simbolo();
    s5.SetId("Año");
    s5.SetAtributos("tipo=varchar(4)","ambito=motociclismo.NASCAR.carrera");
    Simbolos.add(s5);

    //CAMPO
    Simbolo s6 = new Simbolo();
    s6.SetId("FechaHoraInicio");
    s6.SetAtributos("tipo=varchar(25)","ambito=motociclismo.NASCAR.carrera");
    Simbolos.add(s6);

    //CAMPO
    Simbolo s7 = new Simbolo();
    s7.SetId("NumVueltas");
    s7.SetAtributos("tipo=int","ambito=motociclismo.NASCAR.carrera");
    Simbolos.add(s7);

    //CAMPO
    Simbolo s9 = new Simbolo();
    s9.SetId("NombreCircuito");
    s9.SetAtributos("tipo=varchar(15)","ambito=motociclismo.NASCAR.carrera");
    Simbolos.add(s9);

//----------------------------------FIN-----------------------------------

    //TABLA
    Simbolo s10 = new Simbolo();
    s10.SetId("circuito");
    s10.SetAtributos("tipo=tabla","ambito=motociclismo.NASCAR");
    Simbolos.add(s10);

    //CAMPO
    Simbolo s11 = new Simbolo();
    s11.SetId("Nombre");
    s11.SetAtributos("tipo=varchar(15)","ambito=motociclismo.NASCAR.circuito");
    Simbolos.add(s11);

    //CAMPO
    Simbolo s12 = new Simbolo();
    s12.SetId("Pais");
    s12.SetAtributos("tipo=varchar(15)","ambito=motociclismo.NASCAR.circuito");
    Simbolos.add(s12);

    //CAMPO
    Simbolo s13 = new Simbolo();
    s13.SetId("Tipo");
    s13.SetAtributos("tipo=varchar(15)","ambito=motociclismo.NASCAR.circuito");
    Simbolos.add(s13);

    //CAMPO
    Simbolo s14 = new Simbolo();
    s14.SetId("Longitud");
    s14.SetAtributos("tipo=float(4,1)","ambito=motociclismo.NASCAR.circuito");
    Simbolos.add(s14);

    //CAMPO
    Simbolo s15 = new Simbolo();
    s15.SetId("Diseñador");
    s15.SetAtributos("tipo=varchar(20)","ambito=motociclismo.NASCAR.circuito");
    Simbolos.add(s15);

    //ESQUEMA
    Simbolo s16 = new Simbolo();
    s16.SetId("dbo");
    s16.SetAtributos("tipo=esquema","ambito=motociclismo");
    Simbolos.add(s16);

    //TABLA
    Simbolo s17 = new Simbolo();
    s17.SetId("CONSULTAS_SQL");
    s17.SetAtributos("tipo=tabla","ambito=motociclismo.dbo");
    Simbolos.add(s17);
    

    //CAMPO
    Simbolo s18 = new Simbolo();
    s18.SetId("ID_CONSULTA");
    s18.SetAtributos("tipo=int","ambito=motociclismo.dbo.CONSULTAS_SQL");
    Simbolos.add(s18);

    //CAMPO
    Simbolo s19 = new Simbolo();
    s19.SetId("CONSULTA");
    s19.SetAtributos("tipo=varchar(800)","ambito=motociclismo.dbo.CONSULTAS_SQL");
    Simbolos.add(s19);

    //TABLA
    Simbolo s20 = new Simbolo();
    s20.SetId("Escuderia");
    s20.SetAtributos("tipo=tabla","ambito=motociclismo.NASCAR");
    Simbolos.add(s20);

    //CAMPO
    Simbolo s21 = new Simbolo();
    s21.SetId("Nombre");
    s21.SetAtributos("tipo=varchar(20)","ambito=motociclismo.NASCAR.Escuderia");
    Simbolos.add(s21);

    //CAMPO
    Simbolo s22 = new Simbolo();
    s22.SetId("Manager");
    s22.SetAtributos("tipo=varchar(15)","ambito=motociclismo.NASCAR.Escuderia");
    Simbolos.add(s22);

    //CAMPO
    Simbolo s23 = new Simbolo();
    s23.SetId("FabricanteMotor");
    s23.SetAtributos("tipo=varchar(15)","ambito=motociclismo.NASCAR.Escuderia");
    Simbolos.add(s23);

    //CAMPO
    Simbolo s24 = new Simbolo();
    s24.SetId("Sede");
    s24.SetAtributos("tipo=varchar(15)","ambito=motociclismo.NASCAR.Escuderia");
    Simbolos.add(s24);

    //TABLA
    Simbolo s25 = new Simbolo();
    s25.SetId("Piloto");
    s25.SetAtributos("tipo=tabla","ambito=motociclismo.NASCAR");
    Simbolos.add(s25);

    //CAMPO
    Simbolo s26 = new Simbolo();
    s26.SetId("Codigo");
    s26.SetAtributos("tipo=int","ambito=motociclismo.NASCAR.Piloto");
    Simbolos.add(s26);

    //CAMPO
    Simbolo s27 = new Simbolo();
    s27.SetId("Nombre");
    s27.SetAtributos("tipo=varchar(50)","ambito=motociclismo.NASCAR.Piloto");
    Simbolos.add(s27);

    //CAMPO
    Simbolo s28 = new Simbolo();
    s28.SetId("Nacionalidad");
    s28.SetAtributos("tipo=varchar(15)","ambito=motociclismo.NASCAR.Piloto");
    Simbolos.add(s28);

    //CAMPO
    Simbolo s29 = new Simbolo();
    s29.SetId("FechaNacimiento");
    s29.SetAtributos("tipo=varchar(25)","ambito=motociclismo.NASCAR.Piloto");
    Simbolos.add(s29);

    //CAMPO
    Simbolo s30 = new Simbolo();
    s30.SetId("CarreraDebut");
    s30.SetAtributos("tipo=varchar(20)","ambito=motociclismo.NASCAR.Piloto");
    Simbolos.add(s30);

    //CAMPO
    Simbolo s31 = new Simbolo();
    s31.SetId("NombreEscuderia");
    s31.SetAtributos("tipo=varchar(20)","ambito=motociclismo.NASCAR.Piloto");
    Simbolos.add(s31);

    //TABLA
    Simbolo s32 = new Simbolo();
    s32.SetId("Resultado");
    s32.SetAtributos("tipo=tabla","ambito=motociclismo.NASCAR");
    Simbolos.add(s32);

    //CAMPO
    Simbolo s33 = new Simbolo();
    s33.SetId("NombreGP");
    s33.SetAtributos("tipo=varchar(15)","ambito=motociclismo.NASCAR.Resultado");
    Simbolos.add(s33);

    //CAMPO
    Simbolo s34 = new Simbolo();
    s34.SetId("Año");
    s34.SetAtributos("tipo=varchar(4)","ambito=motociclismo.NASCAR.Resultado");
    Simbolos.add(s34);

    //CAMPO
    Simbolo s35 = new Simbolo();
    s35.SetId("CodPiloto");
    s35.SetAtributos("tipo=int","ambito=motociclismo.NASCAR.Resultado");
    Simbolos.add(s35);

    //CAMPO
    Simbolo s36 = new Simbolo();
    s36.SetId("Puesto");
    s36.SetAtributos("tipo=int","ambito=motociclismo.NASCAR.Resultado");
    Simbolos.add(s36);

    //CAMPO
    Simbolo s37 = new Simbolo();
    s37.SetId("DistanciaGanador");
    s37.SetAtributos("tipo=varchar(25)","ambito=motociclismo.NASCAR.Resultado");
    Simbolos.add(s37);

    //BDD
    Simbolo s38 = new Simbolo();
    s38.SetId("Veterinaria");
    s38.SetAtributos("tipo=bdd");
    Simbolos.add(s38);

    //ESQUEMA
    Simbolo s39 = new Simbolo();
    s39.SetId("dbo");
    s39.SetAtributos("tipo=esquema","ambito=veterinaria");
    Simbolos.add(s39);

//------------------REVISAR AMBITO-----------------------------------
    //TABLA
    Simbolo s40 = new Simbolo();
    s40.SetId("CalendarioVacunacion");
    s40.SetAtributos("tipo=tabla","ambito=veterinaria.dbo");
    Simbolos.add(s40);

    //CAMPO
    Simbolo s41 = new Simbolo();
    s41.SetId("Fecha");
    s41.SetAtributos("tipo=varchar(8)","ambito=veterinaria.dbo.CalendarioVacunacion");
    Simbolos.add(s41);

    //CAMPO
    Simbolo s42 = new Simbolo();
    s42.SetId("Enfermedad");
    s42.SetAtributos("tipo=varchar(50)","ambito=veterinaria.dbo.CalendarioVacunacion");
    Simbolos.add(s42);

    //CAMPO
    Simbolo s43 = new Simbolo();
    s43.SetId("CodigoPaciente");
    s43.SetAtributos("tipo=varchar(8)","ambito=veterinaria.dbo.CalendarioVacunacion");
    Simbolos.add(s43);

//----------------------------------FIN-----------------------------------
    

    //TABLA
    Simbolo s44 = new Simbolo();
    s44.SetId("Cliente");
    s44.SetAtributos("tipo=tabla","ambito=veterinaria.dbo");
    Simbolos.add(s44);

    //CAMPO
    Simbolo s45 = new Simbolo();
    s45.SetId("DPI");
    s45.SetAtributos("tipo=varchar(13)","ambito=veterinaria.dbo.Cliente");
    Simbolos.add(s45);

    //CAMPO
    Simbolo s46 = new Simbolo();
    s46.SetId("NIT");
    s46.SetAtributos("tipo=varchar(12)","ambito=veterinaria.dbo.Cliente");
    Simbolos.add(s46);

    //CAMPO
    Simbolo s47 = new Simbolo();
    s47.SetId("Nombre");
    s47.SetAtributos("tipo=varchar(50)","ambito=veterinaria.dbo.Cliente");
    Simbolos.add(s47);

    //CAMPO
    Simbolo s48 = new Simbolo();
    s48.SetId("Numero");
    s48.SetAtributos("tipo=varchar(8)","ambito=veterinaria.dbo.Cliente");
    Simbolos.add(s48);

    //CAMPO
    Simbolo s49 = new Simbolo();
    s49.SetId("Direccion");
    s49.SetAtributos("tipo=varchar(800)","ambito=veterinaria.dbo.Cliente");
    Simbolos.add(s49);

    //CAMPO
    Simbolo s50 = new Simbolo();
    s50.SetId("Correo");
    s50.SetAtributos("tipo=varchar(800)","ambito=veterinaria.dbo.Cliente");
    Simbolos.add(s50);

    //TABLA
    Simbolo s51 = new Simbolo();
    s51.SetId("Clinica");
    s51.SetAtributos("tipo=tabla","ambito=veterinaria.dbo");
    Simbolos.add(s51);

    //CAMPO
    Simbolo s52 = new Simbolo();
    s52.SetId("Codigo");
    s52.SetAtributos("tipo=int","ambito=veterinaria.dbo.Clinica");
    Simbolos.add(s52);

    //CAMPO
    Simbolo s53 = new Simbolo();
    s53.SetId("Nombre");
    s53.SetAtributos("tipo=varchar(50)","ambito=veterinaria.dbo.Clinica");
    Simbolos.add(s53);

    //CAMPO
    Simbolo s54 = new Simbolo();
    s54.SetId("Direccion");
    s54.SetAtributos("tipo=varchar(800)","ambito=veterinaria.dbo.Clinica");
    Simbolos.add(s54);

    //TABLA
    Simbolo s55 = new Simbolo();
    s55.SetId("Consulta");
    s55.SetAtributos("tipo=tabla","ambito=veterinaria.dbo");
    Simbolos.add(s55);

    //CAMPO
    Simbolo s56 = new Simbolo();
    s56.SetId("Sala");
    s56.SetAtributos("tipo=varchar(20)","ambito=veterinaria.dbo.Consulta");
    Simbolos.add(s56);

    //CAMPO
    Simbolo s57 = new Simbolo();
    s57.SetId("PrecioFijo");
    s57.SetAtributos("tipo=float(4,2)","ambito=veterinaria.dbo.Consulta");
    Simbolos.add(s57);

    //CAMPO
    Simbolo s58 = new Simbolo();
    s58.SetId("NumeroOperaciones");
    s58.SetAtributos("tipo=int","ambito=veterinaria.dbo.Consulta");
    Simbolos.add(s58);

    //CAMPO
    Simbolo s59 = new Simbolo();
    s59.SetId("NumeroVacunas");
    s59.SetAtributos("tipo=int","ambito=veterinaria.dbo.Consulta");
    Simbolos.add(s59);

    //CAMPO
    Simbolo s60 = new Simbolo();
    s60.SetId("NumeroPruebasEspecificas");
    s60.SetAtributos("tipo=int","ambito=veterinaria.dbo.Consulta");
    Simbolos.add(s60);

    //CAMPO
    Simbolo s61 = new Simbolo();
    s61.SetId("PrecioOperaciones");
    s61.SetAtributos("tipo=float(4,2)","ambito=veterinaria.dbo.Consulta");
    Simbolos.add(s61);

    //CAMPO
    Simbolo s62 = new Simbolo();
    s62.SetId("PrecioVacunas");
    s62.SetAtributos("tipo=float(4,2)","ambito=veterinaria.dbo.Consulta");
    Simbolos.add(s62);

    //CAMPO
    Simbolo s63 = new Simbolo();
    s63.SetId("PrecioPruebasEspecificas");
    s63.SetAtributos("tipo=float(4,2)","ambito=veterinaria.dbo.Consulta");
    Simbolos.add(s63);

    //CAMPO
    Simbolo s64 = new Simbolo();
    s64.SetId("CodigoPaciente");
    s64.SetAtributos("tipo=varchar(8)","ambito=veterinaria.dbo.Consulta");
    Simbolos.add(s64);

    //CAMPO
    Simbolo s65 = new Simbolo();
    s65.SetId("NombreVeterinario");
    s65.SetAtributos("tipo=varchar(50)","ambito=veterinaria.dbo.Consulta");
    Simbolos.add(s65);

    //CAMPO
    Simbolo s66 = new Simbolo();
    s66.SetId("FECHA");
    s66.SetAtributos("tipo=varchar(8)","ambito=veterinaria.dbo.Consulta");
    Simbolos.add(s66);

    //TABLA
    Simbolo s67 = new Simbolo();
    s67.SetId("Diagnostico");
    s67.SetAtributos("tipo=tabla","ambito=veterinaria.dbo");
    Simbolos.add(s67);

    //CAMPO
    Simbolo s68 = new Simbolo();
    s68.SetId("Resultado");
    s68.SetAtributos("tipo=varchar(20)","ambito=veterinaria.dbo.Diagnostico");
    Simbolos.add(s68);

    //CAMPO
    Simbolo s69 = new Simbolo();
    s69.SetId("PruebaEspecifica");
    s69.SetAtributos("tipo=varchar(20)","ambito=veterinaria.dbo.Diagnostico");
    Simbolos.add(s69);

    //CAMPO
    Simbolo s70 = new Simbolo();
    s70.SetId("Lugar");
    s70.SetAtributos("tipo=varchar(15)","ambito=veterinaria.dbo.Diagnostico");
    Simbolos.add(s70);

    //CAMPO
    Simbolo s71 = new Simbolo();
    s71.SetId("FechaPrueba");
    s71.SetAtributos("tipo=varchar(800)","ambito=veterinaria.dbo.Diagnostico");
    Simbolos.add(s71);

    //CAMPO
    Simbolo s72 = new Simbolo();
    s72.SetId("CodigoPaciente");
    s72.SetAtributos("tipo=varchar(8)","ambito=veterinaria.dbo.Diagnostico");
    Simbolos.add(s72);

    //TABLA
    Simbolo s73 = new Simbolo();
    s73.SetId("Factura");
    s73.SetAtributos("tipo=tabla","ambito=veterinaria.dbo");
    Simbolos.add(s73);

    //CAMPO
    Simbolo s74 = new Simbolo();
    s74.SetId("Numero");
    s74.SetAtributos("tipo=varchar(10)","ambito=veterinaria.dbo.Factura");
    Simbolos.add(s74);

    //CAMPO
    Simbolo s75 = new Simbolo();
    s75.SetId("Detalle");
    s75.SetAtributos("tipo=varchar(50)","ambito=veterinaria.dbo.Factura");
    Simbolos.add(s75);

    //CAMPO
    Simbolo s76 = new Simbolo();
    s76.SetId("Importe");
    s76.SetAtributos("tipo=float(4,2)","ambito=veterinaria.dbo.Factura");
    Simbolos.add(s76);

    //CAMPO
    Simbolo s77 = new Simbolo();
    s77.SetId("TOTAL");
    s77.SetAtributos("tipo=float(4,2)","ambito=veterinaria.dbo.Factura");
    Simbolos.add(s77);

    //CAMPO
    Simbolo s78 = new Simbolo();
    s78.SetId("CodigoClinica");
    s78.SetAtributos("tipo=int","ambito=veterinaria.dbo.Factura");
    Simbolos.add(s78);

    //CAMPO
    Simbolo s79 = new Simbolo();
    s79.SetId("NITCliente");
    s79.SetAtributos("tipo=varchar(12)","ambito=veterinaria.dbo.Factura");
    Simbolos.add(s79);

    //TABLA
    Simbolo s80 = new Simbolo();
    s80.SetId("HistorialMedico");
    s80.SetAtributos("tipo=tabla","ambito=veterinaria.dbo");
    Simbolos.add(s80);

    //CAMPO
    Simbolo s81 = new Simbolo();
    s81.SetId("MotivoVisita");
    s81.SetAtributos("tipo=varchar(20)","ambito=veterinaria.dbo.HistorialMedico");
    Simbolos.add(s81);

    //CAMPO
    Simbolo s82 = new Simbolo();
    s82.SetId("FechaVisita");
    s82.SetAtributos("tipo=varchar(800)","ambito=veterinaria.dbo.HistorialMedico");
    Simbolos.add(s82);


    //CAMPO
    Simbolo s83 = new Simbolo();
    s83.SetId("CodigoPaciente");
    s83.SetAtributos("tipo=varchar(8)","ambito=veterinaria.dbo.HistorialMedico");
    Simbolos.add(s83);

    //CAMPO
    Simbolo s84 = new Simbolo();
    s84.SetId("ResultadoDiagnostico");
    s84.SetAtributos("tipo=varchar(20)","ambito=veterinaria.dbo.HistorialMedico");
    Simbolos.add(s84);

    //TABLA
    Simbolo s85 = new Simbolo();
    s85.SetId("Laboratorio");
    s85.SetAtributos("tipo=tabla","ambito=veterinaria.dbo");
    Simbolos.add(s85);

    //CAMPO
    Simbolo s86 = new Simbolo();
    s86.SetId("NIT");
    s86.SetAtributos("tipo=varchar(12)","ambito=veterinaria.dbo.Laboratorio");
    Simbolos.add(s86);

    //CAMPO
    Simbolo s87 = new Simbolo();
    s87.SetId("Nombre");
    s87.SetAtributos("tipo=varchar(50)","ambito=veterinaria.dbo.Laboratorio");
    Simbolos.add(s87);

    //CAMPO
    Simbolo s88 = new Simbolo();
    s88.SetId("Direccion");
    s88.SetAtributos("tipo=varchar(800)","ambito=veterinaria.dbo.Laboratorio");
    Simbolos.add(s88);

    //TABLA
    Simbolo s89 = new Simbolo();
    s89.SetId("Medicina");
    s89.SetAtributos("tipo=tabla","ambito=veterinaria.dbo");
    Simbolos.add(s89);

    //CAMPO
    Simbolo s90 = new Simbolo();
    s90.SetId("Codigo");
    s90.SetAtributos("tipo=int","ambito=veterinaria.dbo.Medicina");
    Simbolos.add(s90);

    //CAMPO
    Simbolo s91 = new Simbolo();
    s91.SetId("Nombre");
    s91.SetAtributos("tipo=varchar(50)","ambito=veterinaria.dbo.Medicina");
    Simbolos.add(s91);

    //CAMPO
    Simbolo s92 = new Simbolo();
    s92.SetId("PrecioUnitario");
    s92.SetAtributos("tipo=numeric(10,2)","ambito=veterinaria.dbo.Medicina");
    Simbolos.add(s92);

    //TABLA
    Simbolo s93 = new Simbolo();
    s93.SetId("OperacionQuirurgica");
    s93.SetAtributos("tipo=tabla","ambito=veterinaria.dbo");
    Simbolos.add(s93);

    //CAMPO
    Simbolo s94 = new Simbolo();
    s94.SetId("CodigoClinica");
    s94.SetAtributos("tipo=int","ambito=veterinaria.dbo.OperacionQuirurgica");
    Simbolos.add(s94);

    //CAMPO
    Simbolo s95 = new Simbolo();
    s95.SetId("Quirofano");
    s95.SetAtributos("tipo=varchar(15)","ambito=veterinaria.dbo.OperacionQuirurgica");
    Simbolos.add(s95);

    //CAMPO
    Simbolo s96 = new Simbolo();
    s96.SetId("NombreVeterinario");
    s96.SetAtributos("tipo=varchar(50)","ambito=veterinaria.dbo.OperacionQuirurgica");
    Simbolos.add(s96);

    //CAMPO
    Simbolo s97 = new Simbolo();
    s97.SetId("Fecha");
    s97.SetAtributos("tipo=varchar(800)","ambito=veterinaria.dbo.OperacionQuirurgica");
    Simbolos.add(s97);

    //CAMPO
    Simbolo s98 = new Simbolo();
    s98.SetId("Duracion");
    s98.SetAtributos("tipo=varchar(20)","ambito=veterinaria.dbo.OperacionQuirurgica");
    Simbolos.add(s98);

    //CAMPO
    Simbolo s99 = new Simbolo();
    s99.SetId("Obervaciones");
    s99.SetAtributos("tipo=varchar(800)","ambito=veterinaria.dbo.OperacionQuirurgica");
    Simbolos.add(s99);

    //TABLA
    Simbolo s100 = new Simbolo();
    s100.SetId("Paciente");
    s100.SetAtributos("tipo=tabla","ambito=veterinaria.dbo");
    Simbolos.add(s100);

    //CAMPO
    Simbolo s101 = new Simbolo();
    s101.SetId("Codigo");
    s101.SetAtributos("tipo=varchar(8)","ambito=veterinaria.dbo.Paciente");
    Simbolos.add(s101);

    //CAMPO
    Simbolo s102 = new Simbolo();
    s102.SetId("Nombre");
    s102.SetAtributos("tipo=varchar(800)","ambito=veterinaria.dbo.Paciente");
    Simbolos.add(s102);

    //CAMPO
    Simbolo s103 = new Simbolo();
    s103.SetId("Especie");
    s103.SetAtributos("tipo=varchar(800)","ambito=veterinaria.dbo.Paciente");
    Simbolos.add(s103);

    //CAMPO
    Simbolo s104 = new Simbolo();
    s104.SetId("Raza");
    s104.SetAtributos("tipo=varchar(800)","ambito=veterinaria.dbo.Paciente");
    Simbolos.add(s104);

    //CAMPO
    Simbolo s105 = new Simbolo();
    s105.SetId("ColorPelo");
    s105.SetAtributos("tipo=varchar(800)","ambito=veterinaria.dbo.Paciente");
    Simbolos.add(s105);

    //CAMPO
    Simbolo s106 = new Simbolo();
    s106.SetId("FechaNacimiento");
    s106.SetAtributos("tipo=varchar(800)","ambito=veterinaria.dbo.Paciente");
    Simbolos.add(s106);

    //CAMPO
    Simbolo s107 = new Simbolo();
    s107.SetId("PesoMedio");
    s107.SetAtributos("tipo=varchar(800)","ambito=veterinaria.dbo.Paciente");
    Simbolos.add(s107);

    //CAMPO
    Simbolo s108 = new Simbolo();
    s108.SetId("CodigoClinica");
    s108.SetAtributos("tipo=int","ambito=veterinaria.dbo.Paciente");
    Simbolos.add(s108);

    //CAMPO
    Simbolo s109 = new Simbolo();
    s109.SetId("NITCliente");
    s109.SetAtributos("tipo=varchar(12)","ambito=veterinaria.dbo.Paciente");
    Simbolos.add(s109);

    //TABLA
    Simbolo s110 = new Simbolo();
    s110.SetId("Producto");
    s110.SetAtributos("tipo=tabla","ambito=veterinaria.dbo");
    Simbolos.add(s110);

    //CAMPO
    Simbolo s111 = new Simbolo();
    s111.SetId("Codigo");
    s111.SetAtributos("tipo=int","ambito=veterinaria.dbo.Producto");
    Simbolos.add(s111);

    //CAMPO
    Simbolo s112 = new Simbolo();
    s112.SetId("Nombre");
    s112.SetAtributos("tipo=varchar(50)","ambito=veterinaria.dbo.Producto");
    Simbolos.add(s112);

    //CAMPO
    Simbolo s113 = new Simbolo();
    s113.SetId("PrecioUnitario");
    s113.SetAtributos("tipo=numeric(10,2)","ambito=veterinaria.dbo.Producto");
    Simbolos.add(s113);

    //TABLA
    Simbolo s114 = new Simbolo();
    s114.SetId("Proveedor");
    s114.SetAtributos("tipo=tabla","ambito=veterinaria.dbo");
    Simbolos.add(s114);

    //CAMPO
    Simbolo s115 = new Simbolo();
    s115.SetId("NIT");
    s115.SetAtributos("tipo=varchar(12)","ambito=veterinaria.dbo.Proveedor");
    Simbolos.add(s115);

    //CAMPO
    Simbolo s116 = new Simbolo();
    s116.SetId("Nombre");
    s116.SetAtributos("tipo=varchar(50)","ambito=veterinaria.dbo.Proveedor");
    Simbolos.add(s116);

    //CAMPO
    Simbolo s117 = new Simbolo();
    s117.SetId("Direccion");
    s117.SetAtributos("tipo=varchar(800)","ambito=veterinaria.dbo.Proveedor");
    Simbolos.add(s117);

    //TABLA
    Simbolo s118 = new Simbolo();
    s118.SetId("SuministraFarmacia");
    s118.SetAtributos("tipo=tabla","ambito=veterinaria.dbo");
    Simbolos.add(s118);

    //CAMPO
    Simbolo s119 = new Simbolo();
    s119.SetId("NITLaboratorio");
    s119.SetAtributos("tipo=varchar(12)","ambito=veterinaria.dbo.SuministraFarmacia");
    Simbolos.add(s119);

    //CAMPO
    Simbolo s120 = new Simbolo();
    s120.SetId("CodigoMedicina");
    s120.SetAtributos("tipo=int","ambito=veterinaria.dbo.SuministraFarmacia");
    Simbolos.add(s120);

    //TABLA
    Simbolo s121 = new Simbolo();
    s121.SetId("SuministraTienda");
    s121.SetAtributos("tipo=tabla","ambito=veterinaria.dbo");
    Simbolos.add(s121);

    //CAMPO
    Simbolo s122 = new Simbolo();
    s122.SetId("NITProveedor");
    s122.SetAtributos("tipo=varchar(12)","ambito=veterinaria.dbo.SuministraTienda");
    Simbolos.add(s122);

   //CAMPO
    Simbolo s123 = new Simbolo();
    s123.SetId("CodigoProducto");
    s123.SetAtributos("tipo=int","ambito=veterinaria.dbo.SuministraFarmacia");
    Simbolos.add(s123);

    //TABLA
    Simbolo s124 = new Simbolo();
    s124.SetId("Tratamiento");
    s124.SetAtributos("tipo=tabla","ambito=veterinaria.dbo");
    Simbolos.add(s124);

    //CAMPO
    Simbolo s125 = new Simbolo();
    s125.SetId("Medicamento");
    s125.SetAtributos("tipo=varchar(20)","ambito=veterinaria.dbo.Tratamiento");
    Simbolos.add(s125);

    //CAMPO
    Simbolo s126 = new Simbolo();
    s126.SetId("Dosificacion");
    s126.SetAtributos("tipo=varchar(800)","ambito=veterinaria.dbo.Tratamiento");
    Simbolos.add(s126);

    //CAMPO
    Simbolo s127 = new Simbolo();
    s127.SetId("Duracion");
    s127.SetAtributos("tipo=varchar(20)","ambito=veterinaria.dbo.Tratamiento");
    Simbolos.add(s127);

    //CAMPO
    Simbolo s128 = new Simbolo();
    s128.SetId("Resultado");
    s128.SetAtributos("tipo=varchar(20)","ambito=veterinaria.dbo.Tratamiento");
    Simbolos.add(s128);

    //CAMPO
    Simbolo s129 = new Simbolo();
    s129.SetId("CodigoPaciente");
    s129.SetAtributos("tipo=varchar(8)","ambito=veterinaria.dbo.Tratamiento");
    Simbolos.add(s129);

    //TABLA
    Simbolo s130 = new Simbolo();
    s130.SetId("VentaFarmacia");
    s130.SetAtributos("tipo=tabla","ambito=veterinaria.dbo");
    Simbolos.add(s130);

    //CAMPO
    Simbolo s131 = new Simbolo();
    s131.SetId("NITCliente");
    s131.SetAtributos("tipo=varchar(12)","ambito=veterinaria.dbo.VentaFarmacia");
    Simbolos.add(s131);

    //CAMPO
    Simbolo s132 = new Simbolo();
    s132.SetId("CodigoMedicina");
    s132.SetAtributos("tipo=int","ambito=veterinaria.dbo.VentaFarmacia");
    Simbolos.add(s132);

    //CAMPO
    Simbolo s133 = new Simbolo();
    s133.SetId("CodigoMedicina");
    s133.SetAtributos("tipo=varchar(800)","ambito=veterinaria.dbo.VentaFarmacia");
    Simbolos.add(s133);

    //CAMPO
    Simbolo s134 = new Simbolo();
    s134.SetId("CodigoClinica");
    s134.SetAtributos("tipo=int","ambito=veterinaria.dbo.VentaFarmacia");
    Simbolos.add(s134);

    //TABLA
    Simbolo s135 = new Simbolo();
    s135.SetId("VentaTienda");
    s135.SetAtributos("tipo=tabla","ambito=veterinaria.dbo");
    Simbolos.add(s135);

    //CAMPO
    Simbolo s136 = new Simbolo();
    s136.SetId("NITCliente");
    s136.SetAtributos("tipo=varchar(12)","ambito=veterinaria.dbo.VentaTienda");
    Simbolos.add(s136);

    //CAMPO
    Simbolo s137 = new Simbolo();
    s137.SetId("CodigoProducto");
    s137.SetAtributos("tipo=int","ambito=veterinaria.dbo.VentaTienda");
    Simbolos.add(s137);

    //CAMPO
    Simbolo s138 = new Simbolo();
    s138.SetId("Fecha");
    s138.SetAtributos("tipo=varchar(800)","ambito=veterinaria.dbo.VentaTienda");
    Simbolos.add(s138);

    //CAMPO
    Simbolo s139 = new Simbolo();
    s139.SetId("CodigoClinica");
    s139.SetAtributos("tipo=int","ambito=veterinaria.dbo.VentaTienda");
    Simbolos.add(s139);

   //TABLA
    Simbolo s140 = new Simbolo();
    s140.SetId("Veterinario");
    s140.SetAtributos("tipo=tabla","ambito=veterinaria.dbo");
    Simbolos.add(s140);

    //CAMPO
    Simbolo s141 = new Simbolo();
    s141.SetId("Nombre");
    s141.SetAtributos("tipo=varchar(50)","ambito=veterinaria.dbo.Veterinario");
    Simbolos.add(s141);

    //CAMPO
    Simbolo s142 = new Simbolo();
    s142.SetId("SalarioBase");
    s142.SetAtributos("tipo=float(4,2)","ambito=veterinaria.dbo.Veterinario");
    Simbolos.add(s142);

    //CAMPO
    Simbolo s143 = new Simbolo();
    s143.SetId("Salario");
    s143.SetAtributos("tipo=float(4,2)","ambito=veterinaria.dbo.Veterinario");
    Simbolos.add(s143);




:};

terminal Igual,Suma,Resta,Multiplicacion,Division,Identificador,Entero,
         Porcentaje,Menor,MenorIgual,Mayor,MayorIgual,NoIgual,PyC,Coma,Punto,Arroba,
         Numeral,Corchetes,Llaves,Parentesis,AbreCorchetes,AbreParentesis,
         AbreLlaves,CierraLlaves,IdentificadorError,CadenaError,Flotante,MalComentario,Igual2,Numeral2,Cadena,FlotanteError,Not2,
         CierraCorchetes,CierraParentesis,
         BIGINT,BINARY,DATETIME,DATETIME2,DATETIMEOFFSET,HIERARCHYID,IMAGE,MONEY,NTEXT,NVARCHAR,ROWVERSION,
         SMALLDATETIME,SMALLMONEY,SQL_VARIANT,TEXT,TINYINT,UNIQUEIDENTIFIER,VARBINARY,XML,
         ERROR,ADD,AND,OR,EXTERNAL,FETCH,PUBLIC,ALTER,FILE,RAISERROR,
         FILLFACTOR,READ,ANY,FOR,READTEXT,AS,FOREIGN,RECONFIGURE,FREETEXT,REFERENCES,AUTHORIZATION,FREETEXTTABLE,REPLICATION,BACKUP,FROM,
         RESTORE,BEGIN,FULL,RESTRICT,BETWEEN,FUNCTION,RETURN,BREAK,GOTO,REVERT,BROWSE,GRANT,REVOKE,BULK,GROUP,RIGHT,BY,HAVING,ROLLBACK,
         CASCADE,HOLDLOCK,ROWCOUNT,CASE,IDENTITY,ROWGUIDCOL,CHECK,IDENTITY_INSERT,RULE,CHECKPOINT,IDENTITYCOL,SAVE,CLOSE,IF,SCHEMA,CLUSTERED,
         IN,SECURITYAUDIT,COALESCE,INDEX,SELECT,COLLATE,INNER,SEMANTICKEYPHRASETABLE,COLUMN,INSERT,SEMANTICSIMILARITYDETAILSTABLE,COMMIT,
         INTERSECT,SEMANTICSIMILARITYTABLE,COMPUTE,INTO,SESSION_USER,CONSTRAINT,IS,SET,CONTAINS,JOIN,SETUSER,CONTAINSTABLE,KEY,SHUTDOWN,
         CONTINUE,KILL,SOME,CONVERT,LEFT,STATISTICS,CREATE,LIKE,SYSTEM_USER,CROSS,LINENO,TABLE,CURRENT,LOAD,TABLESAMPLE,CURRENT_DATE,MERGE,
         TEXTSIZE,CURRENT_TIME,NATIONAL,THEN,CURRENT_TIMESTAMP,NOCHECK,TO,CURRENT_USER,NONCLUSTERED,TOP,CURSOR,NOT,TRAN,DATABASE,NULL,
         TRANSACTION,DBCC,NULLIF,TRIGGER,DEALLOCATE,OF,TRUNCATE,DECLARE,OFF,TRY_CONVERT,DEFAULT,OFFSETS,TSEQUAL,DELETE,UNION,DENY,OPEN,
         UNIQUE,DESC,OPENDATASOURCE,UNPIVOT,DISK,OPENQUERY,UPDATE,DISTINCT,OPENROWSET,UPDATETEXT,DISTRIBUTED,OPENXML,USE,DOUBLE,OPTION,
         USER,DROP,VALUES,DUMP,ORDER,ARYING,ELSE,OUTER,VIEW,END,OVER,WAITFOR,ERRLVL,PERCENT,WHEN,ESCAPE,PIVOT,WHERE,EXCEPT,PLAN,WHILE,
         EXEC,PRECISION,WITH,EXECUTE,PRIMARY,WITHIN_GROUP,EXISTS,PRINT,WRITETEXT,EXIT,PROC,ABSOLUTE,OVERLAPS,ACTION,PAD,ADA,PARTIAL,PASCAL,
         ALL,EXTRACT,POSITION,ALLOCATE,FALSE,PREPARE,FIRST,PRESERVE,FLOAT,ARE,PRIOR,PRIVILEGES,ASC,FORTRAN,PROCEDURE,ASSERTION,FOUND,AT,REAL,
         AVG,GET,GLOBAL,RELATIVE,GO,BIT,BIT_LENGTH,BOTH,ROWS,HOUR,CASCADED,SCROLL,IMMEDIATE,SECOND,CAST,SECTION,CATALOG,INCLUDE,CHAR,SESSION,
         CHAR_LENGTH,INDICATOR,CHARACT,INITIALLY,CHARACTER_LENGTH,SIZE,INPUT,SMALLINT,INSENSITIVE,SPACE,INT,SQL,COLLATION,INTEGER,SQLCA,SQLCODE,
         INTERVAL,SQLERROR,CONNECT,SQLSTATE,CONNECTION,SQLWARNING,ISOLATION,SUBSTRING,CONSTRAINTS,SUM,LANGUAGE,CORRESPONDING,LAST,TEMPORARY,COUNT,
         LEADING,TIME,LEVEL,TIMESTAMP,TIMEZONE_HOUR,LOCAL,TIMEZONE_MINUTE,LOWER,MATCH,TRAILING,MAX,MIN,TRANSLATE,DATE,MINUTE,TRANSLATION,DAY,MODULE,
         TRIM,MONTH,TRUE,DEC,NAMES,DECIMAL,NATURAL,UNKNOWN,NCHAR,DEFERRABLE,NEXT,UPPER,DEFERRED,NO,USAGE,NONE,USING,DESCRIBE,VALUE,DESCRIPTOR,DIAGNOSTICS,
         NUMERIC,VARCHAR,DISCONNECT,OCTET_LENGTH,VARYING,DOMAIN,ON,ONLY,WHENEVER,WORK,END_EXEC,WRITE,YEAR,OUTPUT,ZONE,EXCEPTION,OUT,READONLY,ENCRYPTION,
         RETURNS,SCHEMABINDING,CALLED,INLINE,CALLER,SELF,OWNER,RECOMPILE,MARK,FORWARD_ONLY,STATIC,KEYSET,DYNAMIC,FAST_FORWARD,READ_ONLY,SCROLL_LOCKS,OPTIMISTIC,
         TYPE_WARNING,NAME,FILENAME,KB,GB,TB,MB,MAXSIZE,UNLIMITED,FILEGROWTH,MODULAR,DELAYED_DURABILITY;

non terminal OperadoresBooleanos, Inicial, InicialA, DML, DDL, TCL, TSQL, Final, ID, Object2, Object2A, Object3, Object3A, Object4, Object4A, IFE, Variable, Tipo_dato, 
    Tipo_datoD, Tipo_datoA, Tipo_datoB, Tipo_datoC, Drop, DropA, DropTable, DropTableA, DropUser, DropDatabase, DropDatabaseA, DropView, DropViewA,
    DropIndex, DropIndexA, DropIndexB, Truncate, Alias, AliasA, Expresion, ExpresionA, ExpresionB, ExpresionC, ExpresionD, ExpresionE, ExpresionF,
    Not, Top, TopA, Expresiones, NSC, NSCA, NPred, NPredA, NPredC, Where, SelectColumns, SelectColumnsA, ColumnList,NSEarit,NSEaritA,NSEaritB,NSEaritC,NSEaritD,NSEaritE,NSEaritF,NSEarits,
    ColumnListA, ColumnListB, Select, SelectA, Having, Order, OrderA, OrderB, OrderC, Group, GroupA, Insert, InsertInto , InsertColumnList , InsertExpresion,
    InsertExpresionA, InsertExpresionB , InsertValores , InsertValoresA , Delete, FromDelete, DeleteA, DeleteB, DeleteC, Server, Update, UpdateA, UpdateB,
    UpdateC, FromUpdate, FromSelect, FromSelectA, Join, Type, Outer, Create, CreateA,CreateUser, CreateDB, CreateDBA, CreateDBB, Primary, FileSpecs,
    FileSpec, COLLATEDB, Filename, Optionals, Optionals_A, Optional, Size, Size_A, Maxsize, Maxsize_A, Filegrowth, Filegrowth_A, CreateView, CreateIndex,
    CreateIndexA, ColumnIndex, ColumnIndexA, ColumnIndexB, IncludeIndex, OptionalOn, CreateTable, FileGroup, NFR, CNC, CNCA, ColumnDef, ColumnDefA, 
    ColumnDefD, ColumnDefE, ColumnDefF, ColumnDefG, ColumnDefH, ColumnConstr, ColumnConstrA, ColumnConstrB, ColumnConstrC, 
    ColumnConstrD, ColumnConstrE, ColumnConstrF, ColumnConstrG, ColumnConstrH, ColumnConstrI, TableConstr, TableConstrA, TableConstrB, TableConstrC, 
    TableConstrD, TableConstrE, TableIndex, Alter, AlterA, AlterDatabase, AlterDBA, AlterDBB, AlterUser, AlterView, AlterViewA, AlterTable, 
    AlterTableA, AlterColumn, AlterColumnC, AlterColumnA, AlterColumnD, AlterColumnE, AlterTableDrop , AlterTableDropA , AlterTableDropB, AlterTableDropC,
    AlterTableDropD, BeginTran, BeginTranA, BeginTranB, BeginTranC, SavePoint, Name, NameA, TranName, Commit, CommitA, Rollback, RollbackA, Procedure, 
    SP_Reservada, NumSP, ParamsSP, ParamsA_SP, ParamsB_SP, TipoD_SP, TipoD_SP1, TipoD_SP2, TipoD_SP3, ProcOption, ProcOption1, ProcOption2, ClauseExec, 
    ProcOptionRec, Clause, ReplicationSP, StartSP, StmtSP, StmtSP1, StmtSP2, Function, Params, OrAlter, Param, Param_A, Param_B, As, ReadOnly, Type_Return, 
    Data, Table, SCT, DType, With, FuncOpc, FuncOpcA, FuncOpcB, FuncOpcC, VariableList, VariableLista, CursorDeclare, CursorDeclarea, 
    CursorDeclareb, CursorDeclarec, CursorDeclared, CursorDeclaree, CursorDeclaref, CursorDeclareg, InicialB, NFR1, NFR2,ColumnDefV,ColumnDefX,ColumnDefW,
    ColumnDefZ,ColumnDefY,Sizew,Sizenw,ExecProcedure,RepeatProcedure,RepeatProcedureA,Data_Type,EXECUTE_AS_CLAUSE,CallFunction,FunctionContent,FunctionContentA,
    DTypes,NameDB,FileDB,FinalTran,CommitB,OnOff,DropProcedure,DropProcedureA,DropFunction;

    precedence right NOT;
    precedence left Igual,NoIgual,Mayor,MayorIgual,Menor,MenorIgual;
    precedence left Suma,Resta,Multiplicacion,Division;
    precedence left AbreParentesis;
 
    start with Inicial;
     
    Inicial ::= InicialA |;

    InicialA ::= DML Inicial | DDL Inicial | TCL Inicial | TSQL Final Inicial | USE Object4 Final Inicial;

    InicialB ::= DML Inicial | DDL Inicial | TCL Inicial | TSQL Final Inicial | USE Object4 Final Inicial | SavePoint Final InicialB;

    DML ::= Select Final | Insert Final | Delete Final | Update Final | error Final;

    DDL ::= Create Final| Alter Final | Drop Final | Truncate Final | error;

    TCL ::= BeginTran Final InicialB FinalTran;

    TSQL ::= CursorDeclare | ExecProcedure;

    Final ::= PyC | GO;

    ID ::= Identificador | AbreCorchetes Identificador CierraCorchetes;

    Object2 ::= ID Object2A;

    Object2A ::= Punto ID |;

    Object3 ::= ID Object3A;

    Object3A ::= Punto Object2 |;

    Object4 ::= ID Object4A;

    Object4A ::= Punto Object3 |;

    IFE ::= IF EXISTS |;

    Variable ::= Arroba Identificador;

    Tipo_dato ::= Tipo_datoD Tipo_datoB;

    Tipo_datoD ::= Tipo_datoA | AbreCorchetes Tipo_datoA CierraCorchetes;

    Tipo_datoA ::= VARCHAR | INTEGER | FLOAT | DATE | BIT | DOUBLE | CHAR | CURSOR | NCHAR 
                    | REAL | TIME | INT | DECIMAL | SMALLINT | NUMERIC | BIGINT 
                    | BINARY | DATETIME | DATETIME2 | DATETIMEOFFSET | HIERARCHYID | IMAGE 
                    | MONEY | NTEXT | NVARCHAR | ROWVERSION | SMALLDATETIME | SMALLMONEY 
                    | SQL_VARIANT | TEXT | TINYINT | UNIQUEIDENTIFIER | VARBINARY | XML ;

    Tipo_datoB ::= AbreParentesis Entero Tipo_datoC CierraParentesis |;

    Tipo_datoC ::= Coma Entero |;

    Drop ::= DROP DropA;
    
    DropA ::= DropTable | DropUser | DropDatabase | DropView | DropIndex | DropProcedure | DropFunction;

    DropTable:dt ::= TABLE IFE:ife Object3:tabla DropTableA {::}

    DropTableA:dta ::=  Coma Object3:tabla DropTableA {::}
                        |;

    DropUser ::= USER IFE ID;

    DropDatabase ::= DATABASE IFE ID DropDatabaseA;

    DropDatabaseA ::= Coma ID DropDatabaseA |;

    DropView ::= VIEW IFE Object2 DropViewA;

    DropViewA ::= Coma Object2 DropViewA |;

    DropIndex ::= INDEX IFE DropIndexA DropIndexB;

    DropIndexA ::= ID ON Object3;

    DropIndexB ::= Coma DropIndexA DropIndexB |;

    DropProcedure ::= SP_Reservada IFE Object2 DropProcedureA;
    
    DropProcedureA ::= Coma Object2 DropProcedureA |;

    DropFunction ::= FUNCTION IFE Object2 DropProcedureA;

    Truncate ::= TRUNCATE TABLE Object3;

    Alias ::= AS AliasA | AliasA |;

    AliasA ::= ID | Cadena;

    Expresion ::= ExpresionB ExpresionA;

    ExpresionA ::= Suma ExpresionB ExpresionA | Resta ExpresionB ExpresionA |;

    ExpresionB ::= ExpresionD ExpresionC;

    ExpresionC ::= Multiplicacion ExpresionD ExpresionC | Division ExpresionD ExpresionC |;

    ExpresionD ::= AbreParentesis Expresion CierraParentesis | ExpresionE;

    ExpresionE ::= Object4 CallFunction | Entero | Flotante | Cadena | NULL | Variable
        | SUM AbreParentesis ExpresionF
	| AVG AbreParentesis ExpresionF
	| MIN AbreParentesis ExpresionF
	| MAX AbreParentesis ExpresionF
	| COUNT AbreParentesis ExpresionF;

    CallFunction ::= AbreParentesis FunctionContent CierraParentesis |;

    FunctionContent ::= DType FunctionContentA;

    FunctionContentA ::= Coma FunctionContent|;

    ExpresionF ::= Object4 CierraParentesis
	| Entero CierraParentesis
	| Multiplicacion CierraParentesis;

    Not ::= NOT |;

    Top ::= TOP AbreParentesis Entero CierraParentesis TopA |;

    TopA ::= PERCENT |;

    OperadoresBooleanos ::= Igual | NoIgual | Mayor | MayorIgual | Menor | MenorIgual;

    NSC ::= Not NPred NSCA;

    NSCA    ::= AND NSC
            | OR NSC
            |;

    NPred   ::= NSEarit NPredA;

    NPredA  ::= OperadoresBooleanos NSEarit
            | IS Not NULL
            | Not NPredC
            |;

    NPredC  ::= IN AbreParentesis NSEarit NSEarits CierraParentesis
            | BETWEEN NSEarit AND NSEarit
            | LIKE NSEarit;

    NSEarits    ::= Coma NSEarit NSEarits
                |;

    NSEarit     ::= NSEaritB NSEaritA;

    NSEaritA    ::= Suma NSEaritB NSEaritA
                | Resta NSEaritB NSEaritA
                |;

    NSEaritB    ::= NSEaritD NSEaritC;

    NSEaritC    ::= Multiplicacion NSEaritD NSEaritC
                | Division NSEaritD NSEaritC
                |;

    NSEaritD    ::= AbreParentesis NSC CierraParentesis
                | NSEaritE;

    NSEaritE    ::= Object2 CallFunction
                | Entero
                | Flotante
                | Cadena
                | Variable
                | SUM AbreParentesis NSEaritF
                | AVG AbreParentesis NSEaritF
                | MIN AbreParentesis NSEaritF
                | MAX AbreParentesis NSEaritF
                | COUNT AbreParentesis NSEaritF;

    NSEaritF    ::= Object2 CierraParentesis
                | Entero CierraParentesis
                | Multiplicacion CierraParentesis;

    Where ::= WHERE NSC|;

    SelectColumns ::= Expresion Alias SelectColumnsA| Multiplicacion SelectColumnsA;

    SelectColumnsA ::= Coma Expresion Alias SelectColumnsA |;

    ColumnList ::= AbreParentesis ColumnListA CierraParentesis;

    ColumnListA ::= ID ColumnListB;

    ColumnListB ::= Coma ID ColumnListB |;

    Select ::= SELECT SelectA Top SelectColumns FromSelect Where Group Having Order;

    SelectA ::= ALL | DISTINCT |;

    Having ::= HAVING NSC |;

    Order ::= ORDER BY Expresion OrderA OrderB OrderC |;

    OrderA ::= COLLATE ID |;

    OrderB ::= ASC | DESC |;

    OrderC ::= Coma Expresion OrderA OrderB|;

    Group ::= GROUP BY Expresion GroupA |;

    GroupA ::= Coma Expresion GroupA |;

    Insert ::= INSERT Top InsertInto Object3 InsertColumnList InsertValores;

    InsertInto ::= INTO |;

    InsertColumnList ::= ColumnList |;

    InsertExpresion ::= InsertExpresionA InsertExpresionB;

    InsertExpresionA ::= DEFAULT | Entero | Flotante | Cadena;

    InsertExpresionB ::= Coma InsertExpresionA InsertExpresionB |;

    InsertValores ::= VALUES AbreParentesis InsertExpresion CierraParentesis InsertValoresA | DEFAULT VALUES |;

    InsertValoresA ::= Coma AbreParentesis InsertExpresion CierraParentesis InsertValoresA |;

    Delete ::= DELETE Top FromDelete DeleteA;

    FromDelete ::= FROM |;

    DeleteA ::= OPENQUERY Server | Object3 DeleteB Where;

    DeleteB ::= FROM Object3 DeleteC|;

    DeleteC ::= Coma Object3 DeleteC |;

    Server ::= AbreParentesis ID Coma Cadena CierraParentesis;

    Update ::= UPDATE Top Object3 SET UpdateA FromUpdate Where;

    UpdateA ::= ID Igual UpdateB UpdateC;

    UpdateB ::= DEFAULT | Expresion;

    UpdateC ::= Coma UpdateA|;

    FromUpdate ::= FROM Object3 DeleteC |;

    FromSelect ::= FROM Object3 Alias Join FromSelectA |;

    FromSelectA ::= Coma Object3 Alias Join |;

    Join ::= Type JOIN Object3 Alias ON NSC Join |;

    Type ::= INNER | RIGHT Outer | LEFT Outer | FULL Outer |;

    Outer ::= OUTER |;

    Create ::= CREATE CreateA;

    CreateA ::= CreateTable | CreateDB | CreateIndex | CreateUser | CreateView | Procedure | Function;

    CreateUser ::= USER Identificador;

    CreateDB ::= DATABASE ID CreateDBA;

    CreateDBA ::= CreateDBB COLLATEDB;

    CreateDBB ::= ON Primary FileSpecs |;

    Primary ::= PRIMARY |;

    FileSpecs ::= FileSpec Coma FileSpecs | FileSpec;

    FileSpec ::= AbreParentesis NameDB Igual Cadena Coma FileDB Igual Cadena Optionals CierraParentesis ;

    NameDB ::= NAME|NAMES;

    FileDB ::= FILE|FILENAME;

    COLLATEDB ::= COLLATE ID |;

    Optionals ::= Coma Optional Optionals|;

    Optional ::= Size | Maxsize | Filegrowth;

    Size ::= Sizew | Sizenw;

    Sizew ::= SIZE Igual Entero Size_A;

    Sizenw ::= SIZE Igual Entero;

    Size_A ::= KB| MB | GB | TB;

    Maxsize ::= MAXSIZE Igual Maxsize_A;

    Maxsize_A ::= Entero Size_A | UNLIMITED;

    Filegrowth ::= FILEGROWTH Igual Entero Filegrowth_A;

    Filegrowth_A ::= Size_A | MODULAR |;

    CreateView ::= VIEW Object2 AS Select;

    CreateIndex ::= CreateIndexA ColumnConstrC INDEX ID ON Object3 ColumnIndex IncludeIndex Where OptionalOn;

    CreateIndexA ::= UNIQUE|;

    ColumnIndex ::= AbreParentesis ColumnIndexA CierraParentesis;

    ColumnIndexA ::= ID OrderB ColumnIndexB;

    ColumnIndexB ::= Coma ID OrderB ColumnIndexB |;

    IncludeIndex ::= INCLUDE ColumnList |;

    OptionalOn ::= ON ID AbreParentesis ID CierraParentesis |;

    CreateTable ::= TABLE Object3 AbreParentesis CNC CNCA CierraParentesis FileGroup;

    FileGroup ::= ON PRIMARY|;

    NFR ::= NOT NFR1|;
    
    NFR1 ::= FOR REPLICATION NFR2| NULL;
    
    NFR2 ::= NOT ColumnDefG|;

    CNC ::= ColumnDef | TableConstr | TableIndex;

    CNCA ::= Coma CNC CNCA |;

    ColumnDef ::= ID Tipo_dato ColumnDefA ColumnDefZ;

    ColumnDefZ ::= CONSTRAINT ID ColumnDefY|ColumnDefY|;

    ColumnDefY ::= DEFAULT ColumnDefD ColumnDefE NFR ColumnDefH ColumnConstr
                    |IDENTITY ColumnDefF NFR ColumnDefH ColumnConstr
                    |ColumnDefX ColumnDefW ColumnDefH ColumnConstr
                    |ROWGUIDCOL ColumnConstr
                    |ColumnConstrB ColumnConstr;
    
    ColumnDefX ::= NOT|;

    ColumnDefW ::= NULL|FOR REPLICATION ColumnDefV;

    ColumnDefV ::= NOT NULL| NULL|;

    ColumnDefA ::= COLLATE ID |;

    ColumnDefD ::= Entero | Flotante | Cadena | NULL;

    ColumnDefE ::= IDENTITY ColumnDefF |;

    ColumnDefF ::= AbreParentesis Entero Coma Entero CierraParentesis |;

    ColumnDefG ::= NULL|;

    ColumnDefH ::= ROWGUIDCOL |;

    ColumnConstr ::= ColumnConstrA ColumnConstrB ColumnConstr |;

    ColumnConstrA ::= CONSTRAINT ID |;

    ColumnConstrB ::= PRIMARY KEY ColumnConstrC 
        | UNIQUE ColumnConstrC
	| ColumnConstrD REFERENCES Object2 ColumnConstrE ColumnConstrF NFR
	| CHECK NFR AbreParentesis NSC CierraParentesis;

    ColumnConstrC ::= CLUSTERED | NONCLUSTERED |;

    ColumnConstrD ::= FOREIGN KEY |;

    ColumnConstrE ::= AbreParentesis ID CierraParentesis |;

    ColumnConstrF ::= ON ColumnConstrG ColumnConstrF|;

    ColumnConstrG ::= DELETE ColumnConstrI|UPDATE ColumnConstrI;

    ColumnConstrH ::= NULL | DEFAULT;

    ColumnConstrI ::= CASCADE | SET ColumnConstrH;

    TableConstr ::= ColumnConstrA TableConstrA;

    TableConstrA ::= PRIMARY KEY ColumnConstrC TableConstrB
	| UNIQUE ColumnConstrC TableConstrB
	| FOREIGN KEY TableConstrD REFERENCES Object2 ColumnConstrE ColumnConstrF NFR
	| CHECK NFR AbreParentesis NSC CierraParentesis;

    TableConstrB ::= AbreParentesis ID OrderB TableConstrC CierraParentesis;

    TableConstrC ::= Coma ID OrderB TableConstrC |;

    TableConstrD ::= AbreParentesis ID TableConstrE CierraParentesis;

    TableConstrE ::= Coma ID TableConstrE |;

    TableIndex ::= INDEX ID ColumnConstrC TableConstrB;

    Alter ::= ALTER AlterA;

    AlterA ::= AlterTable | AlterUser | AlterDatabase | AlterView | Procedure | Function;

    AlterDatabase ::= DATABASE AlterDBA AlterDBB;

    AlterDBA ::= ID | CURRENT;

    AlterDBB ::= COLLATE ID | SET ROLLBACK IMMEDIATE;

    AlterUser ::= USER ID;

    AlterView  ::= VIEW Object2 AlterViewA AS Select;

    AlterViewA ::= ColumnList |;

    AlterTable ::= TABLE Object3 AlterTableA;

    AlterTableA ::= AlterColumn| ADD CNC CNCA| AlterTableDrop;

    AlterColumn ::= ALTER COLUMN ID AlterColumnC;

    AlterColumnC ::= AlterColumnA | AlterColumnD AlterColumnE;

    AlterColumnA ::= Tipo_dato ColumnDefA ColumnDefG;

    AlterColumnD ::= ADD | DROP;

    AlterColumnE ::= ROWGUIDCOL | NOT FOR REPLICATION;

    AlterTableDrop ::= DROP AlterTableDropA AlterTableDropC;

    AlterTableDropA ::= AlterTableDropB IFE ID | COLUMN IFE ID;

    AlterTableDropB ::= CONSTRAINT |;

    AlterTableDropC ::= Coma AlterTableDropA AlterTableDropC |;

    BeginTran ::= BEGIN TranName BeginTranA;

    BeginTranA ::= Name BeginTranB |;

    BeginTranB ::= WITH MARK BeginTranC |;

    BeginTranC ::= Cadena |;

    FinalTran ::= Commit Final|Rollback Final;

    SavePoint ::= SAVE TranName Name;

    Name ::= ID | Variable;

    NameA ::= ID | Variable |;

    TranName ::= TRAN | TRANSACTION;

    Commit ::= COMMIT CommitA CommitB;

    CommitA ::= TranName NameA |;
    
    CommitB ::= WITH AbreParentesis DELAYED_DURABILITY Igual OnOff CierraParentesis|;
    
    OnOff ::= ON| OFF;

    Rollback ::= ROLLBACK RollbackA;

    RollbackA ::= TranName NameA |;
	
    Procedure ::= OrAlter SP_Reservada Object2 NumSP ParamsSP ProcOption ReplicationSP AS StartSP;

    SP_Reservada ::=  PROC | PROCEDURE;

    NumSP ::= PyC Entero |;

    ParamsSP ::= ParamsA_SP |;

    ParamsA_SP ::= Variable TipoD_SP ParamsB_SP;

    ParamsB_SP ::= Coma ParamsA_SP |;

    TipoD_SP ::= Tipo_dato TipoD_SP1 TipoD_SP2
	| CURSOR VARYING TipoD_SP3
	| ID READONLY;

    TipoD_SP1 ::= Igual DEFAULT |;

    TipoD_SP2 ::= TipoD_SP3 |;

    TipoD_SP3 ::= OUT | OUTPUT;

    ProcOption ::= WITH ProcOption1 |;

    ProcOption1 ::= ProcOption2 ProcOptionRec;

    ProcOption2 ::= ENCRYPTION | RECOMPILE | ClauseExec AS Clause;

    ClauseExec ::= EXECUTE | EXEC;

    ProcOptionRec ::= Coma ProcOption1 |;

    Clause ::= CALLER | SELF | OWNER | ID;

    ReplicationSP ::= FOR REPLICATION |;

    StartSP ::= BEGIN StmtSP END;

    StmtSP ::= DML StmtSP1;

    StmtSP1 ::= DML StmtSP2 |;

    StmtSP2 ::= DML |;

    CursorDeclare ::= DECLARE ID CURSOR CursorDeclarea CursorDeclareb CursorDeclarec CursorDeclared CursorDeclaree FOR Select CursorDeclaref;
    
    CursorDeclarea ::= LOCAL|GLOBAL|;
    
    CursorDeclareb ::= SCROLL|FORWARD_ONLY|;
    
    CursorDeclarec ::= STATIC|KEYSET|DYNAMIC|FAST_FORWARD|;
    
    CursorDeclared ::= READ_ONLY|SCROLL_LOCKS|OPTIMISTIC|;
    
    CursorDeclaree ::= TYPE_WARNING|;
    
    CursorDeclaref ::= FOR UPDATE CursorDeclareg|;
    
    CursorDeclareg ::= OF ColumnListA|;

    Function  ::= OrAlter FUNCTION Object2 AbreParentesis Params CierraParentesis RETURNS Type_Return;

    Params ::= Param_A |;

    OrAlter ::= OR ALTER|;

    Param ::= Variable As Tipo_dato ReadOnly;

    Param_A ::= Param Param_B;

    Param_B ::= Coma Param_A|;

    As ::= AS |;

    ReadOnly ::= READONLY|;

    Type_Return ::= Data | Table;

    Data ::= Tipo_datoA With As BEGIN DML RETURN Expresion END;

    Table ::= TABLE With As RETURN SCT;

    SCT ::= AbreParentesis Select CierraParentesis | Select;

    DTypes ::= AbreParentesis DType CierraParentesis  | DType;

    DType ::= Variable | Entero | Flotante | Cadena;

    With ::= WITH FuncOpc|;

    FuncOpc ::= FuncOpcA FuncOpcB;

    FuncOpcA ::= ENCRYPTION  | SCHEMABINDING | RETURNS NULL ON NULL INPUT | CALLED ON NULL INPUT | EXECUTE_AS_CLAUSE | INLINE Igual FuncOpcC;

    FuncOpcB ::= Coma FuncOpc |;

    FuncOpcC ::= ON | OFF;

    EXECUTE_AS_CLAUSE ::= ClauseExec AS Clause;

    ExecProcedure ::= ClauseExec Object2 | ClauseExec Object2 AbreParentesis RepeatProcedure CierraParentesis | ClauseExec Object2 RepeatProcedure;

    RepeatProcedure ::= Variable Igual Data_Type RepeatProcedureA | Data_Type RepeatProcedureA; 

    RepeatProcedureA ::= Coma RepeatProcedure|;

    Data_Type ::=  Entero | Flotante | Cadena;