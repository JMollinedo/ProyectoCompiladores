package userinterface;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.virtual_parse_stack;
import java.lang.reflect.Field;
import java.util.LinkedList;
import java.util.Queue;
action code {:

    public List<Simbolo> Simbolos = new ArrayList();
    public List<TSError> TSerrores = new ArrayList();
    public Queue<String> Ambito = new LinkedList();

    private void DefaultVals()
    {
        //BDD master
        Simbolo simb = new Simbolo("master");
        simb.setAtributos("tipo=bdd");
        Simbolos.add(simb);

        //ESQUEMA dbo
        simb = new Simbolo("dbo");
        simb.setAtributos("tipo=esquema","base=master");
        Simbolos.add(simb);

        //BDD Motociclismo
        simb = new Simbolo("Motociclismo");
        simb.setAtributos("tipo=bdd");
        Simbolos.add(simb);

        //ESQUEMA dbo
        simb = new Simbolo("dbo");
        simb.setAtributos("tipo=esquema","base=Motociclismo");
        Simbolos.add(simb);

        //ESQUEMA NASCAR
        simb = new Simbolo("NASCAR");
        simb.setAtributos("tipo=esquema","base=Motociclismo");
        Simbolos.add(simb);

        //TABLA Carrera
        simb = new Simbolo("Carrera");
        simb.setAtributos("tipo=tabla","base=Motociclismo","esquema=NASCAR");
        Simbolos.add(simb);

        simb = new Simbolo("NombreGP");
        simb.setAtributos("tipo=campo","base=Motociclismo","esquema=NASCAR","tabla=Carrera","tipoDato=VARCHAR","largoMax=15","nulable=False");
        Simbolos.add(simb);
        
        simb = new Simbolo("Año");
        simb.setAtributos("tipo=campo","base=Motociclismo","esquema=NASCAR","tabla=Carrera","tipoDato=VARCHAR","largoMax=4","nulable=False");
        Simbolos.add(simb);
        
        simb = new Simbolo("FechaHoraInicio");
        simb.setAtributos("tipo=campo","base=Motociclismo","esquema=NASCAR","tabla=Carrera","tipoDato=VARCHAR","largoMax=25","nulable=False");
        Simbolos.add(simb);
        
        simb = new Simbolo("NumVueltas");
        simb.setAtributos("tipo=campo","base=Motociclismo","esquema=NASCAR","tabla=Carrera","tipoDato=INT","nulable=False");
        Simbolos.add(simb);
        
        simb = new Simbolo("NombreCircuito");
        simb.setAtributos("tipo=campo","base=Motociclismo","esquema=NASCAR","tabla=Carrera","tipoDato=VARCHAR","largoMax=15","nulable=False");
        Simbolos.add(simb);

        //TABLA Circuito
        simb = new Simbolo("Circuito");
        simb.setAtributos("tipo=tabla","base=Motociclismo","esquema=NASCAR");
        Simbolos.add(simb);

        simb = new Simbolo("Nombre");
        simb.setAtributos("tipo=campo","base=Motociclismo","esquema=NASCAR","tabla=Circuito","tipoDato=VARCHAR","largoMax=15","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("Pais");
        simb.setAtributos("tipo=campo","base=Motociclismo","esquema=NASCAR","tabla=Circuito","tipoDato=VARCHAR","largoMax=15","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("Tipo");
        simb.setAtributos("tipo=campo","base=Motociclismo","esquema=NASCAR","tabla=Circuito","tipoDato=VARCHAR","largoMax=15","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("Longitud");
        simb.setAtributos("tipo=campo","base=Motociclismo","esquema=NASCAR","tabla=Circuito","tipoDato=FLOAT","largoMax=4","decimal=1","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("Diseñador");
        simb.setAtributos("tipo=campo","base=Motociclismo","esquema=NASCAR","tabla=Circuito","tipoDato=VARCHAR","largoMax=20","nulable=False");
        Simbolos.add(simb);

        //TABLA CONSULTAS_SQL
        simb = new Simbolo("CONSULTAS_SQL");
        simb.setAtributos("tipo=tabla","base=Motociclismo","esquema=dbo");
        Simbolos.add(simb);

        simb = new Simbolo("ID_CONSULTA");
        simb.setAtributos("tipo=campo","base=Motociclismo","esquema=dbo","tabla=CONSULTAS_SQL","tipoDato=INT","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("CONSULTA");
        simb.setAtributos("tipo=campo","base=Motociclismo","esquema=dbo","tabla=CONSULTAS_SQL","tipoDato=VARCHAR","largoMax=800","nulable=False");
        Simbolos.add(simb);

        //TABLA Escuderia
        simb = new Simbolo("Escuderia");
        simb.setAtributos("tipo=tabla","base=Motociclismo","esquema=NASCAR");
        Simbolos.add(simb);

        simb = new Simbolo("Nombre");
        simb.setAtributos("tipo=campo","base=Motociclismo","esquema=NASCAR","tabla=Escuderia","tipoDato=VARCHAR","largoMax=20","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("Manager");
        simb.setAtributos("tipo=campo","base=Motociclismo","esquema=NASCAR","tabla=Escuderia","tipoDato=VARCHAR","largoMax=15","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("FabricanteMotor");
        simb.setAtributos("tipo=campo","base=Motociclismo","esquema=NASCAR","tabla=Escuderia","tipoDato=VARCHAR","largoMax=15","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("Sede");
        simb.setAtributos("tipo=campo","base=Motociclismo","esquema=NASCAR","tabla=Escuderia","tipoDato=VARCHAR","largoMax=15","nulable=False");
        Simbolos.add(simb);

        //TABLA Piloto
        simb = new Simbolo("Piloto");
        simb.setAtributos("tipo=tabla","base=Motociclismo","esquema=NASCAR");
        Simbolos.add(simb);

        simb = new Simbolo("Codigo");
        simb.setAtributos("tipo=campo","base=Motociclismo","esquema=NASCAR","tabla=Piloto","tipoDato=INT","nulable=False","identidad=True","inicial=1","salto=1");
        Simbolos.add(simb);

        simb = new Simbolo("Nombre");
        simb.setAtributos("tipo=campo","base=Motociclismo","esquema=NASCAR","tabla=Piloto","tipoDato=VARCHAR","largoMax=50","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("Nacionalidad");
        simb.setAtributos("tipo=campo","base=Motociclismo","esquema=NASCAR","tabla=Piloto","tipoDato=VARCHAR","largoMax=15","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("FechaNacimiento");
        simb.setAtributos("tipo=campo","base=Motociclismo","esquema=NASCAR","tabla=Piloto","tipoDato=VARCHAR","largoMax=25","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("CarreraDebut");
        simb.setAtributos("tipo=campo","base=Motociclismo","esquema=NASCAR","tabla=Piloto","tipoDato=VARCHAR","largoMax=20","nulable=False");
        Simbolos.add(simb);
        
        simb = new Simbolo("NombreEscuderia");
        simb.setAtributos("tipo=campo","base=Motociclismo","esquema=NASCAR","tabla=Piloto","tipoDato=VARCHAR","largoMax=20","nulable=False");
        Simbolos.add(simb);

        //TABLA Resultado
        simb = new Simbolo("Resultado");
        simb.setAtributos("tipo=tabla","base=Motociclismo","esquema=NASCAR");
        Simbolos.add(simb);

        simb = new Simbolo("NombreGP");
        simb.setAtributos("tipo=campo","base=Motociclismo","esquema=NASCAR","tabla=Resultado","tipoDato=VARCHAR","largoMax=15","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("Año");
        simb.setAtributos("tipo=campo","base=Motociclismo","esquema=NASCAR","tabla=Resultado","tipoDato=VARCHAR","largoMax=4","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("CodPiloto");
        simb.setAtributos("tipo=campo","base=Motociclismo","esquema=NASCAR","tabla=Resultado","tipoDato=INT","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("Puesto");
        simb.setAtributos("tipo=campo","base=Motociclismo","esquema=NASCAR","tabla=Resultado","tipoDato=INT","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("DistanciaGanador");
        simb.setAtributos("tipo=campo","base=Motociclismo","esquema=NASCAR","tabla=Resultado","tipoDato=VARCHAR","largoMax=25","nulable=False");
        Simbolos.add(simb);

        //Veterinaria

        //BDD Veterinaria
        simb = new Simbolo("Veterinaria");
        simb.setAtributos("tipo=bdd");
        Simbolos.add(simb);

        //ESQUEMA dbo
        simb = new Simbolo("dbo");
        simb.setAtributos("tipo=esquema","base=Veterinaria");
        Simbolos.add(simb);

        //TABLA Calendario Vacunacion
        simb = new Simbolo("CalendarioVacunacion");
        simb.setAtributos("tipo=tabla","base=Veterinaria","esquema=dbo");
        Simbolos.add(simb);

        simb = new Simbolo("Fecha");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=CalendarioVacunacion","tipoDato=VARCHAR","largoMax=8","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("Enfermedad");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=CalendarioVacunacion","tipoDato=VARCHAR","largoMax=50","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("CodigoPaciente");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=CalendarioVacunacion","tipoDato=VARCHAR","largoMax=8","nulable=False");
        Simbolos.add(simb);

        //TABLA Cliente
        simb = new Simbolo("Cliente");
        simb.setAtributos("tipo=tabla","base=Veterinaria","esquema=dbo");
        Simbolos.add(simb);

        simb = new Simbolo("DPI");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Cliente","tipoDato=VARCHAR","largoMax=13","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("NIT");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Cliente","tipoDato=VARCHAR","largoMax=12","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("Nombre");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Cliente","tipoDato=VARCHAR","largoMax=50","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("Numero");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Cliente","tipoDato=VARCHAR","largoMax=8","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("Direccion");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Cliente","tipoDato=VARCHAR","largoMax=800","nulable=True");
        Simbolos.add(simb);

        simb = new Simbolo("Correo");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Cliente","tipoDato=VARCHAR","largoMax=800","nulable=True");
        Simbolos.add(simb);

        //TABLA Clinica
        simb = new Simbolo("Clinica");
        simb.setAtributos("tipo=tabla","base=Veterinaria","esquema=dbo");
        Simbolos.add(simb);

        simb = new Simbolo("Codigo");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Clinica","tipoDato=INT","nulable=False","identidad=True","inicial=1","salto=1");
        Simbolos.add(simb);

        simb = new Simbolo("Nombre");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Clinica","tipoDato=VARCHAR","largoMax=50","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("Direccion");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Clinica","tipoDato=VARCHAR","largoMax=800","nulable=False");
        Simbolos.add(simb);

        //TABLA Consulta
        simb = new Simbolo("Consulta");
        simb.setAtributos("tipo=tabla","base=Veterinaria","esquema=dbo");
        Simbolos.add(simb);

        simb = new Simbolo("Sala");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Consulta","tipoDato=VARCHAR","largoMax=20","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("PrecioFijo");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Consulta","tipoDato=FLOAT","largoMax=4","decimal=2","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("NumerosOperaciones");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Consulta","tipoDato=INT","nulable=True");
        Simbolos.add(simb);

        simb = new Simbolo("NumerosVacunas");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Consulta","tipoDato=INT","nulable=True");
        Simbolos.add(simb);

        simb = new Simbolo("NumerosPruebasEspecificas");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Consulta","tipoDato=INT","nulable=True");
        Simbolos.add(simb);

        simb = new Simbolo("PrecioOperaciones");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Consulta","tipoDato=FLOAT","largoMax=4","decimal=2","nulable=True");
        Simbolos.add(simb);

        simb = new Simbolo("PrecioVacunas");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Consulta","tipoDato=FLOAT","largoMax=4","decimal=2","nulable=True");
        Simbolos.add(simb);

        simb = new Simbolo("PrecioPruebasEspecificas");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Consulta","tipoDato=FLOAT","largoMax=4","decimal=2","nulable=True");
        Simbolos.add(simb);

        simb = new Simbolo("CodigoPaciente");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Consulta","tipoDato=VARCHAR","largoMax=8","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("NombreVeterinario");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Consulta","tipoDato=VARCHAR","largoMax=50","nulable=True");
        Simbolos.add(simb);

        simb = new Simbolo("FECHA");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Consulta","tipoDato=VARCHAR","largoMax=8","nulable=True");
        Simbolos.add(simb);

        //TABLA Diagnostico
        simb = new Simbolo("Diagnostico");
        simb.setAtributos("tipo=tabla","base=Veterinaria","esquema=dbo");
        Simbolos.add(simb);

        simb = new Simbolo("Resultado");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Diagnostico","tipoDato=VARCHAR","largoMax=20","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("PruebaEspecifica");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Diagnostico","tipoDato=VARCHAR","largoMax=20","nulable=True");
        Simbolos.add(simb);

        simb = new Simbolo("Lugar");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Diagnostico","tipoDato=VARCHAR","largoMax=15","nulable=True");
        Simbolos.add(simb);

        simb = new Simbolo("FechaPrueba");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Diagnostico","tipoDato=VARCHAR","largoMax=800","nulable=True");
        Simbolos.add(simb);        

        simb = new Simbolo("CodigoPaciente");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Diagnostico","tipoDato=VARCHAR","largoMax=8","nulable=True");
        Simbolos.add(simb);

        //TABLA Factura
        simb = new Simbolo("Factura");
        simb.setAtributos("tipo=tabla","base=Veterinaria","esquema=dbo");
        Simbolos.add(simb);

        simb = new Simbolo("Numero");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Factura","tipoDato=VARCHAR","largoMax=10","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("Detalle");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Factura","tipoDato=VARCHAR","largoMax=50","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("Importe");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Factura","tipoDato=FLOAT","largoMax=4","decimal=2","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("TOTAL");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Factura","tipoDato=FLOAT","largoMax=4","decimal=2","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("CodigoClinica");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Factura","tipoDato=INT","nulable=True");
        Simbolos.add(simb);

        simb = new Simbolo("NITCliente");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Factura","tipoDato=VARCHAR","largoMax=12","nulable=False");
        Simbolos.add(simb);

        //TABLA Historial Medico
        simb = new Simbolo("HistorialMedico");
        simb.setAtributos("tipo=tabla","base=Veterinaria","esquema=dbo");
        Simbolos.add(simb);

        simb = new Simbolo("MotivoVisita");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=HistorialMedico","tipoDato=VARCHAR","largoMax=20","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("FechaVisita");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=HistorialMedico","tipoDato=VARCHAR","largoMax=800","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("CodigoPaciente");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=HistorialMedico","tipoDato=VARCHAR","largoMax=8","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("ResultadoDiagnostico");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=HistorialMedico","tipoDato=VARCHAR","largoMax=20","nulable=False");
        Simbolos.add(simb);

        //TABLA Laboratorio
        simb = new Simbolo("Laboratorio");
        simb.setAtributos("tipo=tabla","base=Veterinaria","esquema=dbo");
        Simbolos.add(simb);

        simb = new Simbolo("NIT");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Laboratorio","tipoDato=VARCHAR","largoMax=12","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("Nombre");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Laboratorio","tipoDato=VARCHAR","largoMax=50","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("Direccion");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Laboratorio","tipoDato=VARCHAR","largoMax=800","nulable=False");
        Simbolos.add(simb);

        //TABLA Medicina
        simb = new Simbolo("Medicina");
        simb.setAtributos("tipo=tabla","base=Veterinaria","esquema=dbo");
        Simbolos.add(simb);

        simb = new Simbolo("Codigo");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Medicina","tipoDato=INT","nulable=False","identidad=True","inicio=1","salto=1");
        Simbolos.add(simb);

        simb = new Simbolo("Nombre");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Medicina","tipoDato=VARCHAR","largoMax=50","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("PrecioUnitario");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Medicina","tipoDato=NUMERIC","largoMax=10","decimal=2","nulable=False");
        Simbolos.add(simb);

        //TABLA
        simb = new Simbolo("OperacionQuirurgica");
        simb.setAtributos("tipo=tabla","base=Veterinaria","esquema=dbo");
        Simbolos.add(simb);

        simb = new Simbolo("CodigoClinica");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=OperacionQuirurgica","tipoDato=INT","nulable=True");
        Simbolos.add(simb);

        simb = new Simbolo("Quirofano");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=OperacionQuirurgica","tipoDato=VARCHAR","largoMax=15","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("NombreVeterinario");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=OperacionQuirurgica","tipoDato=VARCHAR","largoMax=50","nulable=True");
        Simbolos.add(simb);

        simb = new Simbolo("Fecha");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=OperacionQuirurgica","tipoDato=VARCHAR","largoMax=800","nulable=True");
        Simbolos.add(simb);

        simb = new Simbolo("Duracion");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=OperacionQuirurgica","tipoDato=VARCHAR","largoMax=20","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("Observaciones");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=OperacionQuirurgica","tipoDato=VARCHAR","largoMax=800","nulable=True");
        Simbolos.add(simb);

        //TABLA
        simb = new Simbolo("Paciente");
        simb.setAtributos("tipo=tabla","base=Veterinaria","esquema=dbo");
        Simbolos.add(simb);

        simb = new Simbolo("Codigo");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Paciente","tipoDato=VARCHAR","largoMax=8","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("Nombre");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Paciente","tipoDato=VARCHAR","largoMax=800","nulable=True");
        Simbolos.add(simb);

        simb = new Simbolo("Especie");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Paciente","tipoDato=VARCHAR","largoMax=800","nulable=True");
        Simbolos.add(simb);

        simb = new Simbolo("Raza");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Paciente","tipoDato=VARCHAR","largoMax=800","nulable=True");
        Simbolos.add(simb);

        simb = new Simbolo("ColorPelo");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Paciente","tipoDato=VARCHAR","largoMax=800","nulable=True");
        Simbolos.add(simb);

        simb = new Simbolo("FechaNacimiento");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Paciente","tipoDato=VARCHAR","largoMax=800","nulable=True");
        Simbolos.add(simb);

        simb = new Simbolo("PesoMedio");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Paciente","tipoDato=VARCHAR","largoMax=800","nulable=True");
        Simbolos.add(simb);

        simb = new Simbolo("CodigoClinica");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Paciente","tipoDato=INT","nulable=True");
        Simbolos.add(simb);

        simb = new Simbolo("NITCliente");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Paciente","tipoDato=VARCHAR","largoMax=12","nulable=True");
        Simbolos.add(simb);

        //TABLA Producto
        simb = new Simbolo("Producto");
        simb.setAtributos("tipo=tabla","base=Veterinaria","esquema=dbo");
        Simbolos.add(simb);

        simb = new Simbolo("Codigo");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Producto","tipoDato=INT","identidad=True","inicio=1","salto=1","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("Nombre");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Producto","tipoDato=VARCHAR","largoMax=50","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("PrecioUnitario");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Producto","tipoDato=NUMERIC","largoMax=10","decimal=2","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("Proveedor");
        simb.setAtributos("tipo=tabla","base=Veterinaria","esquema=dbo");
        Simbolos.add(simb);

        simb = new Simbolo("NIT");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Proveedor","tipoDato=VARCHAR","largoMax=12","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("Nombre");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Proveedor","tipoDato=VARCHAR","largoMax=50","nulable=False");
        Simbolos.add(simb);
        
        simb = new Simbolo("Direccion");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Proveedor","tipoDato=VARCHAR","largoMax=800","nulable=False");
        Simbolos.add(simb);
        
        simb = new Simbolo("SuministraFarmacia");
        simb.setAtributos("tipo=tabla","base=Veterinaria","esquema=dbo");
        Simbolos.add(simb);
        
        simb = new Simbolo("NITLaboratorio");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=SuministraFarmacia","tipoDato=VARCHAR","largoMax=12","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("CodigoMedicina");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=SuministraFarmacia","tipoDato=INT","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("SuministraTienda");
        simb.setAtributos("tipo=tabla","base=Veterinaria","esquema=dbo");
        Simbolos.add(simb);
        
        simb = new Simbolo("NITProveedor");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=SuministraTienda","tipoDato=VARCHAR","largoMax=12","nulable=False");
        Simbolos.add(simb);        
        
        simb = new Simbolo("CodigoProducto");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=SuministraTienda","tipoDato=INT","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("Tratamiento");
        simb.setAtributos("tipo=tabla","base=Veterinaria","esquema=dbo"); 
        Simbolos.add(simb);

        simb = new Simbolo("Medicamento");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Tratamiento","tipoDato=VARCHAR","largoMax=20","nulable=False");
        Simbolos.add(simb);
        
        simb = new Simbolo("Dosificacion");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Tratamiento","tipoDato=VARCHAR","largoMax=800","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("Duracion");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Tratamiento","tipoDato=VARCHAR","largoMax=20","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("Resultado");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Tratamiento","tipoDato=VARCHAR","largoMax=20","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("CodigoPaciente");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Tratamiento","tipoDato=VARCHAR","largoMax=8","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("VentaFarmacia");
        simb.setAtributos("tipo=tabla","base=Veterinaria","esquema=dbo");
        Simbolos.add(simb);
        
        simb = new Simbolo("NITCliente");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=VentaFarmacia","tipoDato=VARCHAR","largoMax=12","nulable=False");
        Simbolos.add(simb);
        
        simb = new Simbolo("CodigoMedicina");
        simb.setAtributos("tipo=campo","base=Vetarinaria","esquema=dbo","tabla=VentaFarmacia","tipoDato=INT","nulable=False");
        Simbolos.add(simb);
        
        simb = new Simbolo("Fecha");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=VentaFarmacia","tipoDato=VARCHAR","largoMax=800","nulable=False");
        Simbolos.add(simb);
        
        simb = new Simbolo("CodigoClinica");
        simb.setAtributos("tipo=campo","base=Vetarinaria","esquema=dbo","tabla=VentaFarmacia","tipoDato=INT","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("VentaTienda");
        simb.setAtributos("tipo=tabla","base=Veterinaria","esquema=dbo");
        Simbolos.add(simb);
        
        simb = new Simbolo("NITCliente");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=VentaTienda","tipoDato=VARCHAR","largoMax=12","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("CodigoProducto");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=VentaTienda","tipoDato=INT","nulable=False");
        Simbolos.add(simb);
        
        simb = new Simbolo("Fecha");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=VentaTienda","tipoDato=VARCHAR","largoMax=800","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("CodigoClinica");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=VentaTienda","tipoDato=INT","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("Veterinario");
        simb.setAtributos("tipo=tabla","base=Veterinaria","esquema=dbo");
        Simbolos.add(simb);

        simb = new Simbolo("Nombre");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Venterinario","tipoDato=VARCHAR","largoMax=50","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("SalarioBase");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Venterinario","tipoDato=FLOAT","largoMax=4","decimal=2","nulable=False");
        Simbolos.add(simb);

        simb = new Simbolo("Salario");
        simb.setAtributos("tipo=campo","base=Veterinaria","esquema=dbo","tabla=Ventario","tipoDato=FLOAT","largoMax=4","decimal=2","nulable=False");
        Simbolos.add(simb);
    }
:};
parser code
{: 
    public List<String> SynErr = new ArrayList();
    public List<CupError> Errs = new ArrayList();
    private Symbol s;

    

    public final Class getSymbolContainer() {
        return sym.class;
    }

    public void syntax_error(Symbol cur_token){
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) cur_token);
        List<Integer> ids = expected_token_ids();
        CupError cupError = new CupError(s.right + 1, s.left + 1, s.value);
        for (Integer expected : ids) {
                String aux = symbl_name_from_id(expected);
                cupError.addExpected(aux);
        }
        Errs.add(cupError);
    }

    public void unrecovered_syntax_error(Symbol cur_token){
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) cur_token);
        List<Integer> ids = expected_token_ids();
        CupError cupError = new CupError(s.right + 1, s.left + 1, s.value);
        for (Integer expected : ids) {
                String aux = symbl_name_from_id(expected);
                cupError.addExpected(aux);
        }
        Errs.add(cupError);
    }

    public String symbl_name_from_id(int id) {
        Field[] fields = getSymbolContainer().getFields();
        for(Field f : fields){
            try {
                  if (f.getInt(null)==id) return f.getName();
            } catch (IllegalArgumentException e) {
            } catch (IllegalAccessException e) {
            }
        }
        return "Simbolo Invalido id";
    }

    public List<Integer> expected_token_ids() {
        List<Integer> ret = new ArrayList();
        int parse_state = ((Symbol)stack.peek()).parse_state ;
        short[] row = action_tab[parse_state];
        for (int i = 0; i<row.length; i+=2){
                if (row[i]==-1) continue;
                if (!validate_expected_symbol(row[i])) continue;
                ret.add(new Integer(row[i]));
        }
        return ret;
    }

    protected static final int _error_sync_size(){
        return 1;
    }

    private boolean validate_expected_symbol(int id){
        short lhs,rhs_size;
        int act;
        try {
            virtual_parse_stack vstack = new virtual_parse_stack(stack);
            for (;;)
            {
                act = get_action(vstack.top(), id);
                if (act == 0) return false;
                if (act > 0)
                {
                        vstack.push(act-1);
                        if (!advance_lookahead()) return true;
                }
                else
                {
                        if ((-act)-1 == start_production())  return true;
                        lhs = production_tab[(-act)-1][0];
                        rhs_size = production_tab[(-act)-1][1];
                        for (int i = 0; i < rhs_size; i++) vstack.pop();
                        vstack.push(get_reduce(vstack.top(), lhs));
                }
            }
        } catch (Exception e) {
                e.printStackTrace();
        }
        return true;
    }

    public List<Simbolo> TablaSimbolos(){
        return action_obj.Simbolos;
    }
:};

terminal Igual,Suma,Resta,Multiplicacion,Division,Identificador,Entero,
         Porcentaje,Menor,MenorIgual,Mayor,MayorIgual,NoIgual,PyC,Coma,Punto,Arroba,
         Numeral,Corchetes,Llaves,Parentesis,AbreCorchetes,AbreParentesis,
         AbreLlaves,CierraLlaves,IdentificadorError,CadenaError,Flotante,MalComentario,Igual2,Numeral2,Cadena,FlotanteError,Not2,
         CierraCorchetes,CierraParentesis,
         BIGINT,BINARY,DATETIME,DATETIME2,DATETIMEOFFSET,HIERARCHYID,IMAGE,MONEY,NTEXT,NVARCHAR,ROWVERSION,
         SMALLDATETIME,SMALLMONEY,SQL_VARIANT,TEXT,TINYINT,UNIQUEIDENTIFIER,VARBINARY,XML,
         ERROR,ADD,AND,OR,EXTERNAL,FETCH,PUBLIC,ALTER,FILE,RAISERROR,
         FILLFACTOR,READ,ANY,FOR,READTEXT,AS,FOREIGN,RECONFIGURE,FREETEXT,REFERENCES,AUTHORIZATION,FREETEXTTABLE,REPLICATION,BACKUP,FROM,
         RESTORE,BEGIN,FULL,RESTRICT,BETWEEN,FUNCTION,RETURN,BREAK,GOTO,REVERT,BROWSE,GRANT,REVOKE,BULK,GROUP,RIGHT,BY,HAVING,ROLLBACK,
         CASCADE,HOLDLOCK,ROWCOUNT,CASE,IDENTITY,ROWGUIDCOL,CHECK,IDENTITY_INSERT,RULE,CHECKPOINT,IDENTITYCOL,SAVE,CLOSE,IF,SCHEMA,CLUSTERED,
         IN,SECURITYAUDIT,COALESCE,INDEX,SELECT,COLLATE,INNER,SEMANTICKEYPHRASETABLE,COLUMN,INSERT,SEMANTICSIMILARITYDETAILSTABLE,COMMIT,
         INTERSECT,SEMANTICSIMILARITYTABLE,COMPUTE,INTO,SESSION_USER,CONSTRAINT,IS,SET,CONTAINS,JOIN,SETUSER,CONTAINSTABLE,KEY,SHUTDOWN,
         CONTINUE,KILL,SOME,CONVERT,LEFT,STATISTICS,CREATE,LIKE,SYSTEM_USER,CROSS,LINENO,TABLE,CURRENT,LOAD,TABLESAMPLE,CURRENT_DATE,MERGE,
         TEXTSIZE,CURRENT_TIME,NATIONAL,THEN,CURRENT_TIMESTAMP,NOCHECK,TO,CURRENT_USER,NONCLUSTERED,TOP,CURSOR,NOT,TRAN,DATABASE,NULL,
         TRANSACTION,DBCC,NULLIF,TRIGGER,DEALLOCATE,OF,TRUNCATE,DECLARE,OFF,TRY_CONVERT,DEFAULT,OFFSETS,TSEQUAL,DELETE,UNION,DENY,OPEN,
         UNIQUE,DESC,OPENDATASOURCE,UNPIVOT,DISK,OPENQUERY,UPDATE,DISTINCT,OPENROWSET,UPDATETEXT,DISTRIBUTED,OPENXML,USE,DOUBLE,OPTION,
         USER,DROP,VALUES,DUMP,ORDER,ARYING,ELSE,OUTER,VIEW,END,OVER,WAITFOR,ERRLVL,PERCENT,WHEN,ESCAPE,PIVOT,WHERE,EXCEPT,PLAN,WHILE,
         EXEC,PRECISION,WITH,EXECUTE,PRIMARY,WITHIN_GROUP,EXISTS,PRINT,WRITETEXT,EXIT,PROC,ABSOLUTE,OVERLAPS,ACTION,PAD,ADA,PARTIAL,PASCAL,
         ALL,EXTRACT,POSITION,ALLOCATE,FALSE,PREPARE,FIRST,PRESERVE,FLOAT,ARE,PRIOR,PRIVILEGES,ASC,FORTRAN,PROCEDURE,ASSERTION,FOUND,AT,REAL,
         AVG,GET,GLOBAL,RELATIVE,GO,BIT,BIT_LENGTH,BOTH,ROWS,HOUR,CASCADED,SCROLL,IMMEDIATE,SECOND,CAST,SECTION,CATALOG,INCLUDE,CHAR,SESSION,
         CHAR_LENGTH,INDICATOR,CHARACT,INITIALLY,CHARACTER_LENGTH,SIZE,INPUT,SMALLINT,INSENSITIVE,SPACE,INT,SQL,COLLATION,INTEGER,SQLCA,SQLCODE,
         INTERVAL,SQLERROR,CONNECT,SQLSTATE,CONNECTION,SQLWARNING,ISOLATION,SUBSTRING,CONSTRAINTS,SUM,LANGUAGE,CORRESPONDING,LAST,TEMPORARY,COUNT,
         LEADING,TIME,LEVEL,TIMESTAMP,TIMEZONE_HOUR,LOCAL,TIMEZONE_MINUTE,LOWER,MATCH,TRAILING,MAX,MIN,TRANSLATE,DATE,MINUTE,TRANSLATION,DAY,MODULE,
         TRIM,MONTH,TRUE,DEC,NAMES,DECIMAL,NATURAL,UNKNOWN,NCHAR,DEFERRABLE,NEXT,UPPER,DEFERRED,NO,USAGE,NONE,USING,DESCRIBE,VALUE,DESCRIPTOR,DIAGNOSTICS,
         NUMERIC,VARCHAR,DISCONNECT,OCTET_LENGTH,VARYING,DOMAIN,ON,ONLY,WHENEVER,WORK,END_EXEC,WRITE,YEAR,OUTPUT,ZONE,EXCEPTION,OUT,READONLY,ENCRYPTION,
         RETURNS,SCHEMABINDING,CALLED,INLINE,CALLER,SELF,OWNER,RECOMPILE,MARK,FORWARD_ONLY,STATIC,KEYSET,DYNAMIC,FAST_FORWARD,READ_ONLY,SCROLL_LOCKS,OPTIMISTIC,
         TYPE_WARNING,NAME,FILENAME,KB,GB,TB,MB,MAXSIZE,UNLIMITED,FILEGROWTH,MODULAR,DELAYED_DURABILITY;
non terminal OperadoresBooleanos, Inicial, InicialA, DML, DDL, TCL, TSQL, Final, Object2, Object2A, Object3, Object3A, Object4, Object4A, IFE, Drop, DropA, DropTable, DropTableA, DropUser, DropDatabase, DropDatabaseA, DropView, DropViewA,
    DropIndex, DropIndexA, DropIndexB, Truncate, Alias, AliasA, Expresion, ExpresionA, ExpresionB, ExpresionC, ExpresionD, ExpresionE, ExpresionF,
    Not, Top, TopA, Expresiones, NSC, NSCA, NPred, NPredA, NPredC, Where, SelectColumns, SelectColumnsA, ColumnList,NSEarit,NSEaritA,NSEaritB,NSEaritC,NSEaritD,NSEaritE,NSEaritF,NSEarits,
    ColumnListA, ColumnListB, Select, SelectA, Having, Order, OrderA, OrderB, OrderC, Group, GroupA, Insert, InsertInto , InsertColumnList , InsertExpresion,
    InsertExpresionA, InsertExpresionB , InsertValores , InsertValoresA , Delete, FromDelete, DeleteA, DeleteB, DeleteC, Server, Update, UpdateA, UpdateB,
    UpdateC, FromUpdate, FromSelect, FromSelectA, Join, Type, Outer, Create, CreateA,CreateUser, CreateDB, CreateDBA, CreateDBB, Primary, FileSpecs,
    FileSpec, COLLATEDB, Filename, Optionals, Optionals_A, Optional, Size, Size_A, Maxsize, Maxsize_A, Filegrowth, Filegrowth_A, CreateView, CreateIndex,
    CreateIndexA, ColumnIndex, ColumnIndexA, ColumnIndexB, IncludeIndex, OptionalOn, CreateTable, FileGroup, NFR, CNC, CNCA, ColumnDef, ColumnDefA, 
    ColumnDefD, ColumnDefE, ColumnDefF, ColumnDefG, ColumnDefH, ColumnConstr, ColumnConstrA, ColumnConstrB, ColumnConstrC, 
    ColumnConstrD, ColumnConstrE, ColumnConstrF, ColumnConstrG, ColumnConstrH, ColumnConstrI, TableConstr, TableConstrA, TableConstrB, TableConstrC, 
    TableConstrD, TableConstrE, TableIndex, Alter, AlterA, AlterDatabase, AlterDBA, AlterDBB, AlterUser, AlterView, AlterViewA, AlterTable, 
    AlterTableA, AlterColumn, AlterColumnC, AlterColumnA, AlterColumnD, AlterColumnE, AlterTableDrop , AlterTableDropA , AlterTableDropB, AlterTableDropC,
    AlterTableDropD, BeginTran, BeginTranA, BeginTranB, BeginTranC, SavePoint, Name, NameA, TranName, Commit, CommitA, Rollback, RollbackA, Procedure, 
    SP_Reservada, NumSP, ParamsSP, ParamsA_SP, ParamsB_SP, TipoD_SP, TipoD_SP1, TipoD_SP2, TipoD_SP3, ProcOption, ProcOption1, ProcOption2, ClauseExec, 
    ProcOptionRec, Clause, ReplicationSP, StartSP, StmtSP, StmtSP1, StmtSP2, Function, Params, OrAlter, Param, Param_A, Param_B, As, ReadOnly, Type_Return, 
    Data, Table, SCT, DType, With, FuncOpc, FuncOpcA, FuncOpcB, FuncOpcC, VariableList, VariableLista, CursorDeclare, CursorDeclarea, 
    CursorDeclareb, CursorDeclarec, CursorDeclared, CursorDeclaree, CursorDeclaref, CursorDeclareg, InicialB, NFR1, NFR2,ColumnDefV,ColumnDefX,ColumnDefW,
    ColumnDefZ,ColumnDefY,Sizew,Sizenw,ExecProcedure,RepeatProcedure,RepeatProcedureA,EXECUTE_AS_CLAUSE,CallFunction,FunctionContent,FunctionContentA,
    DTypes,NameDB,FileDB,FinalTran,CommitB,OnOff,DropProcedure,DropProcedureA,DropFunction;

non terminal Simbolo Tipo_dato,Tipo_datoA,Tipo_datoB,Tipo_datoC,Tipo_datoD,ID,DeclareVariable,ValorVariable,Data_Type,Variable;
    precedence right NOT;
    precedence left Igual,NoIgual,Mayor,MayorIgual,Menor,MenorIgual;
    precedence left Suma,Resta,Multiplicacion,Division;
    precedence left AbreParentesis;
 
    start with Inicial;
     
    Inicial ::= InicialA |;

    InicialA ::= DML Inicial | DDL Inicial | TCL Inicial | TSQL Final Inicial | USE Object4 Final Inicial;

    InicialB ::= DML Inicial | DDL Inicial | TCL Inicial | TSQL Final Inicial | USE Object4 Final Inicial | SavePoint Final InicialB;

    DML ::= Select Final | Insert Final | Delete Final | Update Final | error Final;

    DDL ::= Create Final| Alter Final | Drop Final | Truncate Final | error;

    TCL ::= BeginTran Final InicialB FinalTran;

    TSQL ::= CursorDeclare | ExecProcedure | DeclareVariable;

    Final ::= PyC | GO;

    ID ::= Identificador :ID1 {:
        RESULT = new Simbolo("Identificador");
        RESULT.setAtributos("valor="+ID1.toString());                
    :} | AbreCorchetes Identificador:ID1 CierraCorchetes{:
        RESULT = new Simbolo("Identificador");
        RESULT.setAtributos("valor="+ID1.toString());   
    :};

    Object2 ::= ID Object2A;

    Object2A ::= Punto ID |;

    Object3 ::= ID Object3A;

    Object3A ::= Punto Object2 |;

    Object4 ::= ID Object4A;

    Object4A ::= Punto Object3 |;

    IFE ::= IF EXISTS |;

    Variable ::= Arroba Identificador:ID{:
        RESULT = new Simbolo(ID.toString());        
    :};

    Tipo_dato ::= Tipo_datoD:TD Tipo_datoB:TB {:
        RESULT = new Simbolo("Tipo_Dato");
        if(!(TB==null)){
            RESULT.setAtributos("tipoDato="+TD.getAtributo("tipoDato"),"largoMax="+TB.getAtributo("dimension"));
        if(TB.existsAtributo("dimension2")){
            RESULT.setAtributos("decimal="+TB.getAtributo("dimension2"));
        }
        }else{
            RESULT.setAtributos("tipoDato="+TD.getAtributo("tipoDato"));
        }
        
        :};

    Tipo_datoD ::= Tipo_datoA:TA {:RESULT = new Simbolo("Tipo_datoD");
        RESULT.setAtributos("tipoDato="+TA.getAtributo("tipoDato"));:} 
        | AbreCorchetes Tipo_datoA:TA CierraCorchetes{:RESULT = new Simbolo("Tipo_datoD");
        RESULT.setAtributos("tipoDato="+TA.getAtributo("tipoDato"));:};

    Tipo_datoA ::= VARCHAR {:RESULT = new Simbolo("Tipo_datoA");
        RESULT.setAtributos("tipoDato=VARCHAR");:} | INTEGER {:RESULT = new Simbolo("Tipo_datoA");
        RESULT.setAtributos("tipoDato=INTEGER");:} | FLOAT {:RESULT = new Simbolo("Tipo_datoA");
        RESULT.setAtributos("tipoDato=FLOAT");:}  | DATE {{:RESULT = new Simbolo("Tipo_datoA");
        RESULT.setAtributos("tipoDato=DATE");:}} | BIT {:RESULT = new Simbolo("Tipo_datoA");
        RESULT.setAtributos("tipoDato=BIT");:} | DOUBLE {:RESULT = new Simbolo("Tipo_datoA");
        RESULT.setAtributos("tipoDato=DOUBLE");:} | CHAR {:RESULT = new Simbolo("Tipo_datoA");
        RESULT.setAtributos("tipoDato=CHAR");:} | CURSOR {:RESULT = new Simbolo("Tipo_datoA");
        RESULT.setAtributos("tipoDato=CURSOR");:} | NCHAR {:RESULT = new Simbolo("Tipo_datoA");
        RESULT.setAtributos("tipoDato=NCHAR");:} 
                    | REAL {:RESULT = new Simbolo("Tipo_datoA");
        RESULT.setAtributos("tipoDato=REAL");:} | TIME {:RESULT = new Simbolo("Tipo_datoA");
        RESULT.setAtributos("tipoDato=TIME");:} | INT {:RESULT = new Simbolo("Tipo_datoA");
        RESULT.setAtributos("tipoDato=INT");:} | DECIMAL {:RESULT = new Simbolo("Tipo_datoA");
        RESULT.setAtributos("tipoDato=DECIMAL");:} | SMALLINT {:RESULT = new Simbolo("Tipo_datoA");
        RESULT.setAtributos("tipoDato=SMALLINT");:} | NUMERIC {:RESULT = new Simbolo("Tipo_datoA");
        RESULT.setAtributos("tipoDato=NUMERIC");:} | BIGINT {:RESULT = new Simbolo("Tipo_datoA");
        RESULT.setAtributos("tipoDato=BIGINT");:} 
                    | BINARY {:RESULT = new Simbolo("Tipo_datoA");
        RESULT.setAtributos("tipoDato=BINARY");:} | DATETIME {:RESULT = new Simbolo("Tipo_datoA");
        RESULT.setAtributos("tipoDato=DATETIME");:} | DATETIME2 {:RESULT = new Simbolo("Tipo_datoA");
        RESULT.setAtributos("tipoDato=DATETIME2");:} | DATETIMEOFFSET {:RESULT = new Simbolo("Tipo_datoA");
        RESULT.setAtributos("tipoDato=DATETIMEOFFSET");:} | HIERARCHYID {:RESULT = new Simbolo("Tipo_datoA");
        RESULT.setAtributos("tipoDato=HIERARCHYID");:} | IMAGE {:RESULT = new Simbolo("Tipo_datoA");
        RESULT.setAtributos("tipoDato=IMAGE");:} 
                    | MONEY {:RESULT = new Simbolo("Tipo_datoA");
        RESULT.setAtributos("tipoDato=MONEY");:} | NTEXT {:RESULT = new Simbolo("Tipo_datoA");
        RESULT.setAtributos("tipoDato=NTEXT");:} | NVARCHAR {:RESULT = new Simbolo("Tipo_datoA");
        RESULT.setAtributos("tipoDato=NVARCHAR");:} | ROWVERSION {:RESULT = new Simbolo("Tipo_datoA");
        RESULT.setAtributos("tipoDato=ROWVERSION");:} | SMALLDATETIME {:RESULT = new Simbolo("Tipo_datoA");
        RESULT.setAtributos("tipoDato=SMALLDATETIME");:} | SMALLMONEY {:RESULT = new Simbolo("Tipo_datoA");
        RESULT.setAtributos("tipoDato=SMALLMONEY");:} 
                    | SQL_VARIANT {:RESULT = new Simbolo("Tipo_datoA");
        RESULT.setAtributos("tipoDato=SQL_VARIANT");:} | TEXT {:RESULT = new Simbolo("Tipo_datoA");
        RESULT.setAtributos("tipoDato=TEXT");:} | TINYINT {:RESULT = new Simbolo("Tipo_datoA");
        RESULT.setAtributos("tipoDato=TINYINT");:} | UNIQUEIDENTIFIER {:RESULT = new Simbolo("Tipo_datoA");
        RESULT.setAtributos("tipoDato=UNIQUEIDENTIFIER");:} | VARBINARY {:RESULT = new Simbolo("Tipo_datoA");
        RESULT.setAtributos("tipoDato=VARBINARY");:} | XML {:RESULT = new Simbolo("Tipo_datoA");
        RESULT.setAtributos("tipoDato=XML");:} ;

    Tipo_datoB ::= AbreParentesis Entero:num Tipo_datoC:TC CierraParentesis {:
        RESULT = new Simbolo("Tipo_datoB");
        RESULT.setAtributos("dimension="+num.toString());
        if(!(TC == null)){
             RESULT.setAtributos("dimension2="+TC.getAtributo("dimension"));                
        }:} |{:RESULT=null;:};

    Tipo_datoC ::= Coma Entero:num {:RESULT = new Simbolo("Tipo_datoC");
                            RESULT.setAtributos("dimension="+num.toString(),"tipoDato=INT");:}|{:RESULT = null;:};

    Drop ::= DROP DropA;
    
    DropA ::= DropTable | DropUser | DropDatabase | DropView | DropIndex | DropProcedure | DropFunction;

    DropTable ::= TABLE IFE:ife Object3:tabla DropTableA {::};

    DropTableA ::=  Coma Object3:tabla DropTableA {::}
                        |;

    DropUser ::= USER IFE ID;

    DropDatabase ::= DATABASE IFE ID DropDatabaseA;

    DropDatabaseA ::= Coma ID DropDatabaseA |;

    DropView ::= VIEW IFE Object2 DropViewA;

    DropViewA ::= Coma Object2 DropViewA |;

    DropIndex ::= INDEX IFE DropIndexA DropIndexB;

    DropIndexA ::= ID ON Object3;

    DropIndexB ::= Coma DropIndexA DropIndexB |;

    DropProcedure ::= SP_Reservada IFE Object2 DropProcedureA;
    
    DropProcedureA ::= Coma Object2 DropProcedureA |;

    DropFunction ::= FUNCTION IFE Object2 DropProcedureA;

    Truncate ::= TRUNCATE TABLE Object3;

    Alias ::= AS AliasA | AliasA |;

    AliasA ::= ID | Cadena;

    Expresion ::= ExpresionB ExpresionA;

    ExpresionA ::= Suma ExpresionB ExpresionA | Resta ExpresionB ExpresionA |;

    ExpresionB ::= ExpresionD ExpresionC;

    ExpresionC ::= Multiplicacion ExpresionD ExpresionC | Division ExpresionD ExpresionC |;

    ExpresionD ::= AbreParentesis Expresion CierraParentesis | ExpresionE;

    ExpresionE ::= Object4 CallFunction | Entero | Flotante | Cadena | NULL | Variable
        | SUM AbreParentesis ExpresionF
	| AVG AbreParentesis ExpresionF
	| MIN AbreParentesis ExpresionF
	| MAX AbreParentesis ExpresionF
	| COUNT AbreParentesis ExpresionF;

    CallFunction ::= AbreParentesis FunctionContent CierraParentesis |;

    FunctionContent ::= DType FunctionContentA;

    FunctionContentA ::= Coma FunctionContent|;

    ExpresionF ::= Object4 CierraParentesis
	| Entero CierraParentesis
	| Multiplicacion CierraParentesis;

    Not ::= NOT |;

    Top ::= TOP AbreParentesis Entero CierraParentesis TopA |;

    TopA ::= PERCENT |;

    OperadoresBooleanos ::= Igual | NoIgual | Mayor | MayorIgual | Menor | MenorIgual;

    NSC ::= Not NPred NSCA;

    NSCA    ::= AND NSC
            | OR NSC
            |;

    NPred   ::= NSEarit NPredA;

    NPredA  ::= OperadoresBooleanos NSEarit
            | IS Not NULL
            | Not NPredC
            |;

    NPredC  ::= IN AbreParentesis NSEarit NSEarits CierraParentesis
            | BETWEEN NSEarit AND NSEarit
            | LIKE NSEarit;

    NSEarits    ::= Coma NSEarit NSEarits
                |;

    NSEarit     ::= NSEaritB NSEaritA;

    NSEaritA    ::= Suma NSEaritB NSEaritA
                | Resta NSEaritB NSEaritA
                |;

    NSEaritB    ::= NSEaritD NSEaritC;

    NSEaritC    ::= Multiplicacion NSEaritD NSEaritC
                | Division NSEaritD NSEaritC
                |;

    NSEaritD    ::= AbreParentesis NSC CierraParentesis
                | NSEaritE;

    NSEaritE    ::= Object2 CallFunction
                | Entero
                | Flotante
                | Cadena
                | Variable
                | SUM AbreParentesis NSEaritF
                | AVG AbreParentesis NSEaritF
                | MIN AbreParentesis NSEaritF
                | MAX AbreParentesis NSEaritF
                | COUNT AbreParentesis NSEaritF;

    NSEaritF    ::= Object2 CierraParentesis
                | Entero CierraParentesis
                | Multiplicacion CierraParentesis;

    Where ::= WHERE NSC|;

    SelectColumns ::= Expresion Alias SelectColumnsA| Multiplicacion SelectColumnsA;

    SelectColumnsA ::= Coma Expresion Alias SelectColumnsA |;

    ColumnList ::= AbreParentesis ColumnListA CierraParentesis;

    ColumnListA ::= ID ColumnListB;

    ColumnListB ::= Coma ID ColumnListB |;

    Select ::= SELECT SelectA Top SelectColumns FromSelect Where Group Having Order;

    SelectA ::= ALL | DISTINCT |;

    Having ::= HAVING NSC |;

    Order ::= ORDER BY Expresion OrderA OrderB OrderC |;

    OrderA ::= COLLATE ID |;

    OrderB ::= ASC | DESC |;

    OrderC ::= Coma Expresion OrderA OrderB|;

    Group ::= GROUP BY Expresion GroupA |;

    GroupA ::= Coma Expresion GroupA |;

    Insert ::= INSERT Top InsertInto Object3 InsertColumnList InsertValores;

    InsertInto ::= INTO |;

    InsertColumnList ::= ColumnList |;

    InsertExpresion ::= InsertExpresionA InsertExpresionB;

    InsertExpresionA ::= DEFAULT | Entero | Flotante | Cadena;

    InsertExpresionB ::= Coma InsertExpresionA InsertExpresionB |;

    InsertValores ::= VALUES AbreParentesis InsertExpresion CierraParentesis InsertValoresA | DEFAULT VALUES |;

    InsertValoresA ::= Coma AbreParentesis InsertExpresion CierraParentesis InsertValoresA |;

    Delete ::= DELETE Top FromDelete DeleteA;

    FromDelete ::= FROM |;

    DeleteA ::= OPENQUERY Server | Object3 DeleteB Where;

    DeleteB ::= FROM Object3 DeleteC|;

    DeleteC ::= Coma Object3 DeleteC |;

    Server ::= AbreParentesis ID Coma Cadena CierraParentesis;

    Update ::= UPDATE Top Object3 SET UpdateA FromUpdate Where;

    UpdateA ::= ID Igual UpdateB UpdateC;

    UpdateB ::= DEFAULT | Expresion;

    UpdateC ::= Coma UpdateA|;

    FromUpdate ::= FROM Object3 DeleteC |;

    FromSelect ::= FROM Object3 Alias Join FromSelectA |;

    FromSelectA ::= Coma Object3 Alias Join |;

    Join ::= Type JOIN Object3 Alias ON NSC Join |;

    Type ::= INNER | RIGHT Outer | LEFT Outer | FULL Outer |;

    Outer ::= OUTER |;

    Create ::= CREATE CreateA;

    CreateA ::= CreateTable | CreateDB | CreateIndex | CreateUser | CreateView | Procedure | Function;

    CreateUser ::= USER Identificador;

    CreateDB ::= DATABASE ID CreateDBA;

    CreateDBA ::= CreateDBB COLLATEDB;

    CreateDBB ::= ON Primary FileSpecs |;

    Primary ::= PRIMARY |;

    FileSpecs ::= FileSpec Coma FileSpecs | FileSpec;

    FileSpec ::= AbreParentesis NameDB Igual Cadena Coma FileDB Igual Cadena Optionals CierraParentesis ;

    NameDB ::= NAME|NAMES;

    FileDB ::= FILE|FILENAME;

    COLLATEDB ::= COLLATE ID |;

    Optionals ::= Coma Optional Optionals|;

    Optional ::= Size | Maxsize | Filegrowth;

    Size ::= Sizew | Sizenw;

    Sizew ::= SIZE Igual Entero Size_A;

    Sizenw ::= SIZE Igual Entero;

    Size_A ::= KB| MB | GB | TB;

    Maxsize ::= MAXSIZE Igual Maxsize_A;

    Maxsize_A ::= Entero Size_A | UNLIMITED;

    Filegrowth ::= FILEGROWTH Igual Entero Filegrowth_A;

    Filegrowth_A ::= Size_A | MODULAR |;

    CreateView ::= VIEW Object2 AS Select;

    CreateIndex ::= CreateIndexA ColumnConstrC INDEX ID ON Object3 ColumnIndex IncludeIndex Where OptionalOn;

    CreateIndexA ::= UNIQUE|;

    ColumnIndex ::= AbreParentesis ColumnIndexA CierraParentesis;

    ColumnIndexA ::= ID OrderB ColumnIndexB;

    ColumnIndexB ::= Coma ID OrderB ColumnIndexB |;

    IncludeIndex ::= INCLUDE ColumnList |;

    OptionalOn ::= ON ID AbreParentesis ID CierraParentesis |;

    CreateTable ::= TABLE Object3 AbreParentesis CNC CNCA CierraParentesis FileGroup;

    FileGroup ::= ON PRIMARY|;

    NFR ::= NOT NFR1|;
    
    NFR1 ::= FOR REPLICATION NFR2| NULL;
    
    NFR2 ::= NOT ColumnDefG|;

    CNC ::= ColumnDef | TableConstr | TableIndex;

    CNCA ::= Coma CNC CNCA |;

    ColumnDef ::= ID Tipo_dato ColumnDefA ColumnDefZ;

    ColumnDefZ ::= CONSTRAINT ID ColumnDefY|ColumnDefY|;

    ColumnDefY ::= DEFAULT ColumnDefD ColumnDefE NFR ColumnDefH ColumnConstr
                    |IDENTITY ColumnDefF NFR ColumnDefH ColumnConstr
                    |ColumnDefX ColumnDefW ColumnDefH ColumnConstr
                    |ROWGUIDCOL ColumnConstr
                    |ColumnConstrB ColumnConstr;
    
    ColumnDefX ::= NOT|;

    ColumnDefW ::= NULL|FOR REPLICATION ColumnDefV;

    ColumnDefV ::= NOT NULL| NULL|;

    ColumnDefA ::= COLLATE ID |;

    ColumnDefD ::= Entero | Flotante | Cadena | NULL;

    ColumnDefE ::= IDENTITY ColumnDefF |;

    ColumnDefF ::= AbreParentesis Entero Coma Entero CierraParentesis |;

    ColumnDefG ::= NULL|;

    ColumnDefH ::= ROWGUIDCOL |;

    ColumnConstr ::= ColumnConstrA ColumnConstrB ColumnConstr |;

    ColumnConstrA ::= CONSTRAINT ID |;

    ColumnConstrB ::= PRIMARY KEY ColumnConstrC 
        | UNIQUE ColumnConstrC
	| ColumnConstrD REFERENCES Object2 ColumnConstrE ColumnConstrF NFR
	| CHECK NFR AbreParentesis NSC CierraParentesis;

    ColumnConstrC ::= CLUSTERED | NONCLUSTERED |;

    ColumnConstrD ::= FOREIGN KEY |;

    ColumnConstrE ::= AbreParentesis ID CierraParentesis |;

    ColumnConstrF ::= ON ColumnConstrG ColumnConstrF|;

    ColumnConstrG ::= DELETE ColumnConstrI|UPDATE ColumnConstrI;

    ColumnConstrH ::= NULL | DEFAULT;

    ColumnConstrI ::= CASCADE | SET ColumnConstrH;

    TableConstr ::= ColumnConstrA TableConstrA;

    TableConstrA ::= PRIMARY KEY ColumnConstrC TableConstrB
	| UNIQUE ColumnConstrC TableConstrB
	| FOREIGN KEY TableConstrD REFERENCES Object2 ColumnConstrE ColumnConstrF NFR
	| CHECK NFR AbreParentesis NSC CierraParentesis;

    TableConstrB ::= AbreParentesis ID OrderB TableConstrC CierraParentesis;

    TableConstrC ::= Coma ID OrderB TableConstrC |;

    TableConstrD ::= AbreParentesis ID TableConstrE CierraParentesis;

    TableConstrE ::= Coma ID TableConstrE |;

    TableIndex ::= INDEX ID ColumnConstrC TableConstrB;

    Alter ::= ALTER AlterA;

    AlterA ::= AlterTable | AlterUser | AlterDatabase | AlterView | Procedure | Function;

    AlterDatabase ::= DATABASE AlterDBA AlterDBB;

    AlterDBA ::= ID | CURRENT;

    AlterDBB ::= COLLATE ID | SET ROLLBACK IMMEDIATE;

    AlterUser ::= USER ID;

    AlterView  ::= VIEW Object2 AlterViewA AS Select;

    AlterViewA ::= ColumnList |;

    AlterTable ::= TABLE Object3 AlterTableA;

    AlterTableA ::= AlterColumn| ADD CNC CNCA| AlterTableDrop;

    AlterColumn ::= ALTER COLUMN ID AlterColumnC;

    AlterColumnC ::= AlterColumnA | AlterColumnD AlterColumnE;

    AlterColumnA ::= Tipo_dato ColumnDefA ColumnDefG;

    AlterColumnD ::= ADD | DROP;

    AlterColumnE ::= ROWGUIDCOL | NOT FOR REPLICATION;

    AlterTableDrop ::= DROP AlterTableDropA AlterTableDropC;

    AlterTableDropA ::= AlterTableDropB IFE ID | COLUMN IFE ID;

    AlterTableDropB ::= CONSTRAINT |;

    AlterTableDropC ::= Coma AlterTableDropA AlterTableDropC |;

    BeginTran ::= BEGIN TranName BeginTranA;

    BeginTranA ::= Name BeginTranB |;

    BeginTranB ::= WITH MARK BeginTranC |;

    BeginTranC ::= Cadena |;

    FinalTran ::= Commit Final|Rollback Final;

    SavePoint ::= SAVE TranName Name;

    Name ::= ID | Variable;

    NameA ::= ID | Variable |;

    TranName ::= TRAN | TRANSACTION;

    Commit ::= COMMIT CommitA CommitB;

    CommitA ::= TranName NameA |;
    
    CommitB ::= WITH AbreParentesis DELAYED_DURABILITY Igual OnOff CierraParentesis|;
    
    OnOff ::= ON| OFF;

    Rollback ::= ROLLBACK RollbackA;

    RollbackA ::= TranName NameA |;
	
    Procedure ::= OrAlter SP_Reservada Object2 NumSP ParamsSP ProcOption ReplicationSP AS StartSP;

    SP_Reservada ::=  PROC | PROCEDURE;

    NumSP ::= PyC Entero |;

    ParamsSP ::= ParamsA_SP |;

    ParamsA_SP ::= Variable TipoD_SP ParamsB_SP;

    ParamsB_SP ::= Coma ParamsA_SP |;

    TipoD_SP ::= Tipo_dato TipoD_SP1 TipoD_SP2
	| CURSOR VARYING TipoD_SP3
	| ID READONLY;

    TipoD_SP1 ::= Igual DEFAULT |;

    TipoD_SP2 ::= TipoD_SP3 |;

    TipoD_SP3 ::= OUT | OUTPUT;

    ProcOption ::= WITH ProcOption1 |;

    ProcOption1 ::= ProcOption2 ProcOptionRec;

    ProcOption2 ::= ENCRYPTION | RECOMPILE | ClauseExec AS Clause;

    ClauseExec ::= EXECUTE | EXEC;

    ProcOptionRec ::= Coma ProcOption1 |;

    Clause ::= CALLER | SELF | OWNER | ID;

    ReplicationSP ::= FOR REPLICATION |;

    StartSP ::= BEGIN StmtSP END;

    StmtSP ::= DML StmtSP1;

    StmtSP1 ::= DML StmtSP2 |;

    StmtSP2 ::= DML |;

    DeclareVariable ::= DECLARE Variable:V As Tipo_dato:TD ValorVariable:VV{:
       if(!(Simbolo.encontrarId(Simbolos,V.getId()).size()==0)){
            System.out.println("*ERROR:Existe una variable con el nombre: "+ V.getId()+"*");
        }else{
            RESULT = new Simbolo(V.getId());
            RESULT.setAtributos("tipo=variable","tipoDato="+TD.getAtributo("tipoDato"),"valor=default");
            if(!(VV == null)){
                if(VV.getAtributo("tipoDato").equals(TD.getAtributo("tipoDato"))){
                    RESULT.setAtributo("valor",VV.getId());
                    Simbolos.add(RESULT);
                }else{
                       System.out.println("*ERROR: LA VARIABLE " +  V.getId() +" NO ES DE TIPO :" + VV.getAtributo("tipoDato")+ "ES TIPO: " + TD.getAtributo("tipoDato")); 
                }    
            }else{
                    Simbolos.add(RESULT);
            }                                    
        }
    :};    

    ValorVariable ::= Igual Data_Type:DT{:
        RESULT = DT;        
    :}| {:RESULT =null;:};
    CursorDeclare ::= DECLARE ID CURSOR CursorDeclarea CursorDeclareb CursorDeclarec CursorDeclared CursorDeclaree FOR Select CursorDeclaref;
    
    CursorDeclarea ::= LOCAL|GLOBAL|;
    
    CursorDeclareb ::= SCROLL|FORWARD_ONLY|;
    
    CursorDeclarec ::= STATIC|KEYSET|DYNAMIC|FAST_FORWARD|;
    
    CursorDeclared ::= READ_ONLY|SCROLL_LOCKS|OPTIMISTIC|;
    
    CursorDeclaree ::= TYPE_WARNING|;
    
    CursorDeclaref ::= FOR UPDATE CursorDeclareg|;
    
    CursorDeclareg ::= OF ColumnListA|;

    Function  ::= OrAlter FUNCTION Object2 AbreParentesis Params CierraParentesis RETURNS Type_Return;

    Params ::= Param_A |;

    OrAlter ::= OR ALTER|;

    Param ::= Variable As Tipo_dato ReadOnly;

    Param_A ::= Param Param_B;

    Param_B ::= Coma Param_A|;

    As ::= AS |;

    ReadOnly ::= READONLY|;

    Type_Return ::= Data | Table;

    Data ::= Tipo_datoA With As BEGIN DML RETURN Expresion END;

    Table ::= TABLE With As RETURN SCT;

    SCT ::= AbreParentesis Select CierraParentesis | Select;

    DTypes ::= AbreParentesis DType CierraParentesis  | DType;

    DType ::= Variable | Entero | Flotante | Cadena;

    With ::= WITH FuncOpc|;

    FuncOpc ::= FuncOpcA FuncOpcB;

    FuncOpcA ::= ENCRYPTION  | SCHEMABINDING | RETURNS NULL ON NULL INPUT | CALLED ON NULL INPUT | EXECUTE_AS_CLAUSE | INLINE Igual FuncOpcC;

    FuncOpcB ::= Coma FuncOpc |;

    FuncOpcC ::= ON | OFF;

    EXECUTE_AS_CLAUSE ::= ClauseExec AS Clause;

    ExecProcedure ::= ClauseExec Object2 | ClauseExec Object2 AbreParentesis RepeatProcedure CierraParentesis | ClauseExec Object2 RepeatProcedure;

    RepeatProcedure ::= Variable Igual Data_Type RepeatProcedureA | Data_Type RepeatProcedureA; 

    RepeatProcedureA ::= Coma RepeatProcedure|;

    Data_Type ::=  Entero:Entero {:
        RESULT = new Simbolo(Entero.toString());
        RESULT.setAtributos("tipoDato=INT");        
    :} | Flotante:flotante{:
    RESULT = new Simbolo(flotante.toString());
        RESULT.setAtributos("tipoDato=FLOAT");
    :}| Cadena:cad{:
    RESULT = new Simbolo(cad.toString());
        RESULT.setAtributos("tipoDato=VARCHAR");
    :};