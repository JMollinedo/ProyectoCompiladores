package userinterface;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import java.util.LinkedList;
import java_cup.runtime.virtual_parse_stack;
import java.lang.reflect.Field;


parser code
{: 
    public LinkedList<String> SyntacticErrors = new LinkedList<String>();
    private Symbol s;

    public final Class getSymbolContainer() {
        return sym.class;
    }


    public void syntax_error(Symbol cur_token){
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) cur_token);
        String Auxiliar = "";
        List<Integer> ids = expected_token_ids();
        LinkedList<String> list = new LinkedList<String>(); 
        for (Integer expected : ids) {
                  Auxiliar = symbl_name_from_id(expected);
                  Auxiliar = " " + Auxiliar + " ";
                  list.add(Auxiliar);
        }
        SyntacticErrors.add("* Error Sintactico. Columna: " + (s.left+1) + " Linea: " + (s.right+1) + ". Simbolo:  \'" + s.value + "\'  * Se esperaba: " + list);
    }

    public void unrecovered_syntax_error(Symbol cur_token){
      java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) cur_token);
        String Auxiliar = "";
        List<Integer> ids = expected_token_ids();
        LinkedList<String> list = new LinkedList<String>(); 
        for (Integer expected : ids) {
                  Auxiliar = symbl_name_from_id(expected);
                  Auxiliar = " " + Auxiliar + " ";
                  list.add(Auxiliar);
        }
        SyntacticErrors.add("* Error Sintactico. Columna: " + (s.left+1) + " Linea: " + (s.right+1) + ". Simbolo:  \'" + s.value + "\'  * Se esperaba: " + list);
    }


    public String symbl_name_from_id(int id) {
	  Field[] fields = getSymbolContainer().getFields();
	  for(Field f : fields){
		  try {
			if (f.getInt(null)==id)
			  return f.getName();
		} catch (IllegalArgumentException e) {
			//e.printStackTrace();
		} catch (IllegalAccessException e) {
			//e.printStackTrace();
		}
	  }
	  return "Simbolo Invalido id";
    }
   

     public List<Integer> expected_token_ids() {
        List<Integer> ret = new LinkedList<Integer>();
	  int parse_state = ((Symbol)stack.peek()).parse_state ;
	  short[] row = action_tab[parse_state];
	  for (int i = 0; i<row.length; i+=2){
		  if (row[i]==-1) continue;
		  if (!validate_expected_symbol(row[i])) continue;
		  ret.add(new Integer(row[i]));
	  }
	  return ret;

    }

    protected static final int _error_sync_size(){
    return 1;
    }

    private boolean validate_expected_symbol(int id){
	  short lhs,rhs_size;
	  int act;
	  try {
		  virtual_parse_stack vstack = new virtual_parse_stack(stack);
		  for (;;)
		  {
			  act = get_action(vstack.top(), id);

			  if (act == 0) return false;

			  if (act > 0)
			  {
				  vstack.push(act-1);

				  if (!advance_lookahead()) return true;
			  }
			  else
			  {
				  if ((-act)-1 == start_production())  return true;

				  lhs = production_tab[(-act)-1][0];
				  rhs_size = production_tab[(-act)-1][1];
				  for (int i = 0; i < rhs_size; i++) vstack.pop();

				  vstack.push(get_reduce(vstack.top(), lhs));
			  }
		  }

	  } catch (Exception e) {
		  e.printStackTrace();
	  }
	  return true;
  }
:};

terminal Igual,Suma,Resta,Multiplicacion,Division,Identificador,Entero,
         Flotan,Porcentaje,Menor,MenorIgual,Mayor,MayorIgual,NoIgual,PyC,Coma,Punto,Arroba,
         Numeral,Corchetes,Llaves,Parentesis,AbreCorchetes,AbreParentesis,
         AbreLlaves,CierraLlaves,IdentificadorError,CadenaError,Flotante,MalComentario,Igual2,Numeral2,Cadena,FlotanteError,Not2,
         CierraCorchetes,CierraParentesis,
         BIGINT,BINARY,DATETIME,DATETIME2,DATETIMEOFFSET,HIERARCHYID,IMAGE,MONEY,NTEXT,NVARCHAR,ROWVERSION,
         SMALLDATETIME,SMALLMONEY,SQL_VARIANT,TEXT,TINYINT,UNIQUEIDENTIFIER,VARBINARY,XML,
         ERROR,ADD,AND,OR,EXTERNAL,FETCH,PUBLIC,ALTER,FILE,RAISERROR,
         FILLFACTOR,READ,ANY,FOR,READTEXT,AS,FOREIGN,RECONFIGURE,FREETEXT,REFERENCES,AUTHORIZATION,FREETEXTTABLE,REPLICATION,BACKUP,FROM,
         RESTORE,BEGIN,FULL,RESTRICT,BETWEEN,FUNCTION,RETURN,BREAK,GOTO,REVERT,BROWSE,GRANT,REVOKE,BULK,GROUP,RIGHT,BY,HAVING,ROLLBACK,
         CASCADE,HOLDLOCK,ROWCOUNT,CASE,IDENTITY,ROWGUIDCOL,CHECK,IDENTITY_INSERT,RULE,CHECKPOINT,IDENTITYCOL,SAVE,CLOSE,IF,SCHEMA,CLUSTERED,
         IN,SECURITYAUDIT,COALESCE,INDEX,SELECT,COLLATE,INNER,SEMANTICKEYPHRASETABLE,COLUMN,INSERT,SEMANTICSIMILARITYDETAILSTABLE,COMMIT,
         INTERSECT,SEMANTICSIMILARITYTABLE,COMPUTE,INTO,SESSION_USER,CONSTRAINT,IS,SET,CONTAINS,JOIN,SETUSER,CONTAINSTABLE,KEY,SHUTDOWN,
         CONTINUE,KILL,SOME,CONVERT,LEFT,STATISTICS,CREATE,LIKE,SYSTEM_USER,CROSS,LINENO,TABLE,CURRENT,LOAD,TABLESAMPLE,CURRENT_DATE,MERGE,
         TEXTSIZE,CURRENT_TIME,NATIONAL,THEN,CURRENT_TIMESTAMP,NOCHECK,TO,CURRENT_USER,NONCLUSTERED,TOP,CURSOR,NOT,TRAN,DATABASE,NULL,
         TRANSACTION,DBCC,NULLIF,TRIGGER,DEALLOCATE,OF,TRUNCATE,DECLARE,OFF,TRY_CONVERT,DEFAULT,OFFSETS,TSEQUAL,DELETE,UNION,DENY,OPEN,
         UNIQUE,DESC,OPENDATASOURCE,UNPIVOT,DISK,OPENQUERY,UPDATE,DISTINCT,OPENROWSET,UPDATETEXT,DISTRIBUTED,OPENXML,USE,DOUBLE,OPTION,
         USER,DROP,VALUES,DUMP,ORDER,ARYING,ELSE,OUTER,VIEW,END,OVER,WAITFOR,ERRLVL,PERCENT,WHEN,ESCAPE,PIVOT,WHERE,EXCEPT,PLAN,WHILE,
         EXEC,PRECISION,WITH,EXECUTE,PRIMARY,WITHIN_GROUP,EXISTS,PRINT,WRITETEXT,EXIT,PROC,ABSOLUTE,OVERLAPS,ACTION,PAD,ADA,PARTIAL,PASCAL,
         ALL,EXTRACT,POSITION,ALLOCATE,FALSE,PREPARE,FIRST,PRESERVE,FLOAT,ARE,PRIOR,PRIVILEGES,ASC,FORTRAN,PROCEDURE,ASSERTION,FOUND,AT,REAL,
         AVG,GET,GLOBAL,RELATIVE,GO,BIT,BIT_LENGTH,BOTH,ROWS,HOUR,CASCADED,SCROLL,IMMEDIATE,SECOND,CAST,SECTION,CATALOG,INCLUDE,CHAR,SESSION,
         CHAR_LENGTH,INDICATOR,CHARACT,INITIALLY,CHARACTER_LENGTH,SIZE,INPUT,SMALLINT,INSENSITIVE,SPACE,INT,SQL,COLLATION,INTEGER,SQLCA,SQLCODE,
         INTERVAL,SQLERROR,CONNECT,SQLSTATE,CONNECTION,SQLWARNING,ISOLATION,SUBSTRING,CONSTRAINTS,SUM,LANGUAGE,CORRESPONDING,LAST,TEMPORARY,COUNT,
         LEADING,TIME,LEVEL,TIMESTAMP,TIMEZONE_HOUR,LOCAL,TIMEZONE_MINUTE,LOWER,MATCH,TRAILING,MAX,MIN,TRANSLATE,DATE,MINUTE,TRANSLATION,DAY,MODULE,
         TRIM,MONTH,TRUE,DEC,NAMES,DECIMAL,NATURAL,UNKNOWN,NCHAR,DEFERRABLE,NEXT,UPPER,DEFERRED,NO,USAGE,NONE,USING,DESCRIBE,VALUE,DESCRIPTOR,DIAGNOSTICS,
         NUMERIC,VARCHAR,DISCONNECT,OCTET_LENGTH,VARYING,DOMAIN,ON,ONLY,WHENEVER,WORK,END_EXEC,WRITE,YEAR,OUTPUT,ZONE,EXCEPTION,OUT,READONLY,ENCRYPTION,
         RETURNS,SCHEMABINDING,CALLED,INLINE,CALLER,SELF,OWNER,RECOMPILE,MARK,FORWARD_ONLY,STATIC,KEYSET,DYNAMIC,FAST_FORWARD,READ_ONLY,SCROLL_LOCKS,OPTIMISTIC,
         TYPE_WARNING,NAME,FILENAME,KB,GB,TB,MB,MAXSIZE,UNLIMITED,FILEGROWTH,MODULAR;

non terminal OperadoresBooleanos, Inicial, InicialA, DML, DDL, TCL, TSQL, Final, ID, Object2, Object2A, Object3, Object3A, Object4, Object4A, IFE, Variable, Tipo_dato, 
    Tipo_datoD, Tipo_datoA, Tipo_datoB, Tipo_datoC, Drop, DropA, DropTable, DropTableA, DropUser, DropDatabase, DropDatabaseA, DropView, DropViewA,
    DropIndex, DropIndexA, DropIndexB, Truncate, Alias, AliasA, Expresion, ExpresionA, ExpresionB, ExpresionC, ExpresionD, ExpresionE, ExpresionF,
    Not, Top, TopA, Expresiones, SearchCondition, SearchConditionA, Predicado, PredicadoA, PredicadoC, Where, SelectColumns, SelectColumnsA, ColumnList,
    ColumnListA, ColumnListB, Select, SelectA, Having, Order, OrderA, OrderB, OrderC, Group, GroupA, Insert, InsertInto , InsertColumnList , InsertExpresion,
    InsertExpresionA, InsertExpresionB , InsertValores , InsertValoresA , Delete, FromDelete, DeleteA, DeleteB, DeleteC, Server, Update, UpdateA, UpdateB,
    UpdateC, FromUpdate, FromSelect, FromSelectA, Join, Type, Outer, Create, CreateA,CreateUser, CreateDB, CreateDBA, CreateDBB, Primary, FileSpecs,
    FileSpec, COLLATEDB, Filename, Optionals, Optionals_A, Optional, Size, Size_A, Maxsize, Maxsize_A, Filegrowth, Filegrowth_A, CreateView, CreateIndex,
    CreateIndexA, ColumnIndex, ColumnIndexA, ColumnIndexB, IncludeIndex, OptionalOn, CreateTable, FileGroup, NFR, CNC, CNCA, ColumnDef, ColumnDefA, 
    ColumnDefD, ColumnDefE, ColumnDefF, ColumnDefG, ColumnDefH, ColumnConstr, ColumnConstrA, ColumnConstrB, ColumnConstrC, 
    ColumnConstrD, ColumnConstrE, ColumnConstrF, ColumnConstrG, ColumnConstrH, ColumnConstrI, TableConstr, TableConstrA, TableConstrB, TableConstrC, 
    TableConstrD, TableConstrE, TableIndex, Alter, AlterA, AlterDatabase, AlterDBA, AlterDBB, AlterUser, AlterView, AlterViewA, AlterTable, 
    AlterTableA, AlterColumn, AlterColumnC, AlterColumnA, AlterColumnD, AlterColumnE, AlterTableDrop , AlterTableDropA , AlterTableDropB, AlterTableDropC,
    AlterTableDropD, BeginTran, BeginTranA, BeginTranB, BeginTranC, SavePoint, Name, NameA, TranName, Commit, CommitA, Rollback, RollbackA, Procedure, 
    SP_Reservada, NumSP, ParamsSP, ParamsA_SP, ParamsB_SP, TipoD_SP, TipoD_SP1, TipoD_SP2, TipoD_SP3, ProcOption, ProcOption1, ProcOption2, ClauseExec, 
    ProcOptionRec, Clause, ReplicationSP, StartSP, StmtSP, StmtSP1, StmtSP2, Function, Params, OrAlter, Param, Param_A, Param_B, As, ReadOnly, Type_Return, 
    Data, Table, SCT, DType, With, FuncOpc, FuncOpcA, FuncOpcB, FuncOpcC, VariableList, VariableLista, CursorDeclare, CursorDeclarea, 
    CursorDeclareb, CursorDeclarec, CursorDeclared, CursorDeclaree, CursorDeclaref, CursorDeclareg, InicialB, NFR1, NFR2,ColumnDefV,ColumnDefX,ColumnDefW,ColumnDefZ,ColumnDefY,
    Sizew,Sizenw,ExecProcedure,RepeatProcedure,RepeatProcedureA,Data_Type,EXECUTE_AS_CLAUSE;

    precedence right NOT;
    precedence left AbreParentesis;
 
    start with Inicial;
     
    Inicial ::= InicialA Final Inicial | error Final Inicial |;

    InicialA ::= DML | DDL | TCL | TSQL;

    DML ::= Select | Insert | Delete | Update;

    DDL ::= Create | Alter | Drop | Truncate;

    TCL ::= BeginTran | Rollback | Commit | SavePoint;

    TSQL ::= CursorDeclare | ExecProcedure;

    Final ::= PyC | GO;

    ID ::= Identificador | AbreCorchetes Identificador CierraCorchetes;

    Object2 ::= ID Object2A;

    Object2A ::= Punto ID |;

    Object3 ::= ID Object3A;

    Object3A ::= Punto Object2 |;

    Object4 ::= ID Object4A;

    Object4A ::= Punto Object3 |;

    IFE ::= IF EXISTS |;

    Variable ::= Arroba Identificador;

    Tipo_dato ::= Tipo_datoD Tipo_datoB;

    Tipo_datoD ::= Tipo_datoA | AbreCorchetes Tipo_datoA CierraCorchetes;

    Tipo_datoA ::= VARCHAR | INTEGER | FLOAT | DATE | BIT | DOUBLE | CHAR | CURSOR | NCHAR 
                    | REAL | TIME | INT | DECIMAL | SMALLINT | NUMERIC | BIGINT 
                    | BINARY | DATETIME | DATETIME2 | DATETIMEOFFSET | HIERARCHYID | IMAGE 
                    | MONEY | NTEXT | NVARCHAR | ROWVERSION | SMALLDATETIME | SMALLMONEY 
                    | SQL_VARIANT | TEXT | TINYINT | UNIQUEIDENTIFIER | VARBINARY | XML ;

    Tipo_datoB ::= AbreParentesis Entero Tipo_datoC CierraParentesis |;

    Tipo_datoC ::= Coma Entero |;

    Drop ::= DROP DropA;
    
    DropA ::= DropTable | DropUser | DropDatabase | DropView | DropIndex;

    DropTable ::= TABLE IFE Object3 DropTableA;

    DropTableA ::= Coma Object3 DropTableA |;

    DropUser ::= USER IFE ID;

    DropDatabase ::= DATABASE IFE ID DropDatabaseA;

    DropDatabaseA ::= Coma ID DropDatabaseA |;

    DropView ::= VIEW IFE Object2 DropViewA;

    DropViewA ::= Coma Object2 DropViewA |;

    DropIndex ::= INDEX IFE DropIndexA DropIndexB;

    DropIndexA ::= ID ON Object3;

    DropIndexB ::= Coma DropIndexA DropIndexB |;

    Truncate ::= TRUNCATE TABLE Object3;

    Alias ::= AS AliasA | AliasA |;

    AliasA ::= ID | Cadena;

    Expresion ::= ExpresionB ExpresionA;

    ExpresionA ::= Suma ExpresionB ExpresionA | Resta ExpresionB ExpresionA |;

    ExpresionB ::= ExpresionD ExpresionC;

    ExpresionC ::= Multiplicacion ExpresionD ExpresionC | Division ExpresionD ExpresionC |;

    ExpresionD ::= AbreParentesis Expresion PredicadoC CierraParentesis | ExpresionE;

    ExpresionE ::= Object4 | Entero | Flotan | Cadena | NULL | Variable
        | SUM AbreParentesis ExpresionF
	| AVG AbreParentesis ExpresionF
	| MIN AbreParentesis ExpresionF
	| MAX AbreParentesis ExpresionF
	| COUNT AbreParentesis ExpresionF;

    ExpresionF ::= Object4 CierraParentesis
	| Entero CierraParentesis
	| Multiplicacion CierraParentesis;

    Not ::= NOT |;

    Top ::= TOP AbreParentesis Entero CierraParentesis TopA |;

    TopA ::= PERCENT |;

    Expresiones ::= Coma Expresion Expresiones |;

    SearchCondition ::= Not Predicado SearchConditionA | AbreParentesis SearchCondition CierraParentesis SearchConditionA;

    SearchConditionA ::= AND SearchCondition|OR SearchCondition|;

    Predicado ::= Expresion PredicadoA;

    OperadoresBooleanos ::= Igual | NoIgual | Mayor | MayorIgual | Menor | MenorIgual;

    PredicadoA ::= OperadoresBooleanos Expresion| IS Not NULL | Not PredicadoC;

    PredicadoC ::= IN AbreParentesis Expresion Expresiones CierraParentesis
	| BETWEEN Expresion AND Expresion
	| LIKE Expresion;

    Where ::= WHERE SearchCondition |;

    SelectColumns ::= Expresion Alias SelectColumnsA| Multiplicacion SelectColumnsA;

    SelectColumnsA ::= Coma Expresion Alias SelectColumnsA |;

    ColumnList ::= AbreParentesis ColumnListA CierraParentesis;

    ColumnListA ::= ID ColumnListB;

    ColumnListB ::= Coma ID ColumnListB |;

    Select ::= SELECT SelectA Top SelectColumns FromSelect Where Group Having Order;

    SelectA ::= ALL | DISTINCT |;

    Having ::= HAVING SearchCondition |;

    Order ::= ORDER BY Expresion OrderA OrderB OrderC |;

    OrderA ::= COLLATE ID |;

    OrderB ::= ASC | DESC |;

    OrderC ::= Expresion OrderA OrderB |;

    Group ::= GROUP BY Expresion GroupA |;

    GroupA ::= Coma Expresion GroupA |;

    Insert ::= INSERT Top InsertInto Object3 InsertColumnList InsertValores;

    InsertInto ::= INTO |;

    InsertColumnList ::= ColumnList |;

    InsertExpresion ::= InsertExpresionA InsertExpresionB;

    InsertExpresionA ::= DEFAULT | Entero | Flotan | Cadena;

    InsertExpresionB ::= Coma InsertExpresionA InsertExpresionB |;

    InsertValores ::= VALUES AbreParentesis InsertExpresion CierraParentesis InsertValoresA | DEFAULT VALUES |;

    InsertValoresA ::= Coma AbreParentesis InsertExpresion CierraParentesis InsertValoresA |;

    Delete ::= DELETE Top FromDelete DeleteA;

    FromDelete ::= FROM |;

    DeleteA ::= OPENQUERY Server | Object3 DeleteB Where;

    DeleteB ::= FROM Object3 DeleteC;

    DeleteC ::= Coma Object3 DeleteC |;

    Server ::= AbreParentesis ID Coma Entero CierraParentesis;

    Update ::= UPDATE Top Object3 SET UpdateA FromUpdate Where;

    UpdateA ::= ID Igual UpdateB UpdateC;

    UpdateB ::= DEFAULT | Expresion;

    UpdateC ::= Coma UpdateA|;

    FromUpdate ::= FROM Object3 DeleteC |;

    FromSelect ::= FROM Object3 Alias Join FromSelectA |;

    FromSelectA ::= Coma Object3 Alias Join |;

    Join ::= Type JOIN Object3 Alias ON SearchCondition Join |;

    Type ::= INNER | RIGHT Outer | LEFT Outer | FULL Outer |;

    Outer ::= OUTER |;

    Create ::= CREATE CreateA;

    CreateA ::= CreateTable | CreateDB | CreateIndex | CreateUser | CreateView | Procedure | Function;

    CreateUser ::= USER Identificador;

    CreateDB ::= DATABASE ID CreateDBA;

    CreateDBA ::= CreateDBB COLLATEDB;

    CreateDBB ::= ON Primary FileSpecs |;

    Primary ::= PRIMARY |;

    FileSpecs ::= FileSpec Coma FileSpecs | FileSpec;

    FileSpec ::= AbreParentesis NAME Igual Cadena Coma FILENAME Igual Cadena Optionals CierraParentesis;

    COLLATEDB ::= COLLATE ID |;

    Optionals ::= Coma Optional Optionals|;

    Optional ::= Size | Maxsize | Filegrowth;

    Size ::= Sizew | Sizenw;

    Sizew ::= SIZE Igual Entero Size_A;

    Sizenw ::= SIZE Igual Entero;

    Size_A ::= KB| MB | GB | TB;

    Maxsize ::= MAXSIZE Igual Maxsize_A;

    Maxsize_A ::= Entero Size_A | UNLIMITED;

    Filegrowth ::= FILEGROWTH Igual Entero Filegrowth_A;

    Filegrowth_A ::= Size_A | MODULAR |;

    CreateView ::= VIEW Object2 AS Select;

    CreateIndex ::= CreateIndexA ColumnConstrC INDEX ID ON Object3 ColumnIndex IncludeIndex Where OptionalOn;

    CreateIndexA ::= UNIQUE|;

    ColumnIndex ::= AbreParentesis ColumnIndexA CierraParentesis;

    ColumnIndexA ::= ID OrderB ColumnIndexB;

    ColumnIndexB ::= Coma ID OrderB ColumnIndexB |;

    IncludeIndex ::= INCLUDE ColumnList |;

    OptionalOn ::= ON ID AbreParentesis ID CierraParentesis |;

    CreateTable ::= TABLE Object3 AbreParentesis CNC CNCA CierraParentesis FileGroup;

    FileGroup ::= ON PRIMARY|;

    NFR ::= NOT NFR1|;
    
    NFR1 ::= FOR REPLICATION NFR2| NULL;
    
    NFR2 ::= NOT ColumnDefG|;

    CNC ::= ColumnDef | TableConstr | TableIndex;

    CNCA ::= Coma CNC CNCA |;

    ColumnDef ::= ID Tipo_dato ColumnDefA ColumnDefZ;

    ColumnDefZ ::= CONSTRAINT ID ColumnDefY|ColumnDefY|;

    ColumnDefY ::= DEFAULT ColumnDefD ColumnDefE NFR ColumnDefH ColumnConstr|IDENTITY ColumnDefF NFR ColumnDefH ColumnConstr|ColumnDefX ColumnDefW ColumnDefH ColumnConstr|ROWGUIDCOL ColumnConstr|ColumnConstrB ColumnConstr;
    
    ColumnDefX ::= NOT|;

    ColumnDefW ::= NULL|FOR REPLICATION ColumnDefV;

    ColumnDefV ::= NOT NULL| NULL|;

    ColumnDefA ::= COLLATE ID |;

    ColumnDefD ::= Entero | Flotan | Cadena | NULL;

    ColumnDefE ::= IDENTITY ColumnDefF |;

    ColumnDefF ::= AbreParentesis Entero Coma Entero CierraParentesis |;

    ColumnDefG ::= NULL|;

    ColumnDefH ::= ROWGUIDCOL |;

    ColumnConstr ::= ColumnConstrA ColumnConstrB ColumnConstr |;

    ColumnConstrA ::= CONSTRAINT ID |;

    ColumnConstrB ::= PRIMARY KEY ColumnConstrC 
        | UNIQUE ColumnConstrC
	| ColumnConstrD REFERENCES Object2 ColumnConstrE ColumnConstrF NFR
	| CHECK NFR AbreParentesis SearchCondition CierraParentesis;

    ColumnConstrC ::= CLUSTERED | NONCLUSTERED |;

    ColumnConstrD ::= FOREIGN KEY |;

    ColumnConstrE ::= AbreParentesis ID CierraParentesis |;

    ColumnConstrF ::= ON ColumnConstrG ColumnConstrF|;

    ColumnConstrG ::= DELETE ColumnConstrI|UPDATE ColumnConstrI;

    ColumnConstrH ::= NULL | DEFAULT;

    ColumnConstrI ::= CASCADE | SET ColumnConstrH;

    TableConstr ::= ColumnConstrA TableConstrA;

    TableConstrA ::= PRIMARY KEY ColumnConstrC TableConstrB
	| UNIQUE ColumnConstrC TableConstrB
	| FOREIGN KEY TableConstrD REFERENCES Object2 ColumnConstrE ColumnConstrF NFR
	| CHECK NFR AbreParentesis SearchCondition CierraParentesis;

    TableConstrB ::= AbreParentesis ID OrderB TableConstrC CierraParentesis;

    TableConstrC ::= Coma ID OrderB TableConstrC |;

    TableConstrD ::= AbreParentesis ID TableConstrE CierraParentesis;

    TableConstrE ::= Coma ID TableConstrE |;

    TableIndex ::= INDEX ID ColumnConstrC TableConstrB;

    Alter ::= ALTER AlterA;

    AlterA ::= AlterTable | AlterUser | AlterDatabase | AlterView | Procedure | Function;

    AlterDatabase ::= DATABASE AlterDBA AlterDBB;

    AlterDBA ::= ID | CURRENT;

    AlterDBB ::= COLLATE ID | SET ROLLBACK IMMEDIATE;

    AlterUser ::= USER ID;

    AlterView  ::= VIEW Object2 AlterViewA AS Select;

    AlterViewA ::= ColumnList |;

    AlterTable ::= TABLE Object3 AlterTableA;

    AlterTableA ::= AlterColumn| ADD CNC CNCA| AlterTableDrop;

    AlterColumn ::= ALTER COLUMN ID AlterColumnC;

    AlterColumnC ::= AlterColumnA | AlterColumnD AlterColumnE;

    AlterColumnA ::= Tipo_dato ColumnDefA ColumnDefG;

    AlterColumnD ::= ADD | DROP;

    AlterColumnE ::= ROWGUIDCOL | NOT FOR REPLICATION;

    AlterTableDrop ::= DROP AlterTableDropA AlterTableDropC;

    AlterTableDropA ::= AlterTableDropB IFE ID | COLUMN IFE ID;

    AlterTableDropB ::= CONSTRAINT |;

    AlterTableDropC ::= Coma AlterTableDropA AlterTableDropC |;

    BeginTran ::= BEGIN TranName BeginTranA;

    BeginTranA ::= Name BeginTranB |;

    BeginTranB ::= WITH MARK BeginTranC |;

    BeginTranC ::= Cadena |;

    SavePoint ::= SAVE TranName Name;

    Name ::= ID | Variable;

    NameA ::= ID | Variable |;

    TranName ::= TRAN | TRANSACTION;

    Commit ::= COMMIT CommitA;

    CommitA ::= TranName NameA |;

    Rollback ::= ROLLBACK RollbackA;

    RollbackA ::= TranName NameA |;
	
    Procedure ::= OrAlter SP_Reservada Object2 NumSP ParamsSP ProcOption ReplicationSP AS StartSP;

    SP_Reservada ::=  PROC | PROCEDURE;

    NumSP ::= PyC Entero |;

    ParamsSP ::= ParamsA_SP |;

    ParamsA_SP ::= Variable TipoD_SP ParamsB_SP;

    ParamsB_SP ::= Coma ParamsA_SP |;

    TipoD_SP ::= Tipo_dato TipoD_SP1 TipoD_SP2
	| CURSOR VARYING TipoD_SP3
	| ID READONLY;

    TipoD_SP1 ::= Igual DEFAULT |;

    TipoD_SP2 ::= TipoD_SP3 |;

    TipoD_SP3 ::= OUT | OUTPUT;

    ProcOption ::= WITH ProcOption1 |;

    ProcOption1 ::= ProcOption2 ProcOptionRec;

    ProcOption2 ::= ENCRYPTION | RECOMPILE | ClauseExec AS Clause;

    ClauseExec ::= EXECUTE | EXEC;

    ProcOptionRec ::= Coma ProcOption1 |;

    Clause ::= CALLER | SELF | OWNER | ID;

    ReplicationSP ::= FOR REPLICATION |;

    StartSP ::= BEGIN StmtSP END;

    StmtSP ::= DML Final StmtSP1;

    StmtSP1 ::= DML Final StmtSP2 |;

    StmtSP2 ::= DML Final |;

    CursorDeclare ::= DECLARE ID CURSOR CursorDeclarea CursorDeclareb CursorDeclarec CursorDeclared CursorDeclaree FOR Select CursorDeclaref;
    
    CursorDeclarea ::= LOCAL|GLOBAL|;
    
    CursorDeclareb ::= SCROLL|FORWARD_ONLY|;
    
    CursorDeclarec ::= STATIC|KEYSET|DYNAMIC|FAST_FORWARD|;
    
    CursorDeclared ::= READ_ONLY|SCROLL_LOCKS|OPTIMISTIC|;
    
    CursorDeclaree ::= TYPE_WARNING|;
    
    CursorDeclaref ::= FOR UPDATE CursorDeclareg|;
    
    CursorDeclareg ::= OF ColumnListA|;

    Function  ::= OrAlter FUNCTION Object2 AbreParentesis Params CierraParentesis RETURNS Type_Return;

    Params ::= Param_A |;

    OrAlter ::= OR ALTER|;

    Param ::= Variable As Tipo_datoA ReadOnly;

    Param_A ::= Param Param_B;

    Param_B ::= Coma Param_A|;

    As ::= AS |;

    ReadOnly ::= READONLY|;

    Type_Return ::= Data | Table;

    Data ::= Tipo_datoA With As BEGIN DML RETURN DType END;

    Table ::= TABLE With As RETURN SCT;

    SCT ::= AbreParentesis Select CierraParentesis | Select;

    DType ::= Variable | Entero | Flotante | Cadena;

    With ::= WITH FuncOpc;

    FuncOpc ::= FuncOpcA FuncOpcB;

    FuncOpcA ::= ENCRYPTION  | SCHEMABINDING | RETURNS NULL ON NULL INPUT | CALLED ON NULL INPUT | EXECUTE_AS_CLAUSE | INLINE Igual FuncOpcC;

    FuncOpcB ::= Coma FuncOpc |;

    FuncOpcC ::= ON | OFF;

    EXECUTE_AS_CLAUSE ::= ClauseExec AS Clause;

    ExecProcedure ::= ClauseExec Object2 | ClauseExec Object2 AbreParentesis RepeatProcedure CierraParentesis | ClauseExec Object2 RepeatProcedure;

    RepeatProcedure ::= Variable Igual Data_Type RepeatProcedureA | Data_Type RepeatProcedureA; 

    RepeatProcedureA ::= Coma RepeatProcedure|;

    Data_Type ::=  Entero | Flotante | Cadena;