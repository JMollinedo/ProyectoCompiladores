
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Oct 31 16:47:31 CST 2019
//----------------------------------------------------

package userinterface;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.virtual_parse_stack;
import java.lang.reflect.Field;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Oct 31 16:47:31 CST 2019
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u022c\000\002\002\004\000\002\003\003\000\002\003" +
    "\002\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\005\000\002\004\006\000\002\350\004\000" +
    "\002\350\004\000\002\350\004\000\002\350\005\000\002" +
    "\350\006\000\002\350\004\000\002\005\004\000\002\005" +
    "\004\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\004\000" +
    "\002\006\004\000\002\007\006\000\002\010\003\000\002" +
    "\010\003\000\002\011\003\000\002\011\003\000\002\012" +
    "\003\000\002\012\005\000\002\013\004\000\002\014\004" +
    "\000\002\014\002\000\002\015\004\000\002\016\004\000" +
    "\002\016\002\000\002\017\004\000\002\020\004\000\002" +
    "\020\002\000\002\021\004\000\002\021\002\000\002\022" +
    "\004\000\002\023\004\000\002\024\003\000\002\024\005" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\026\006\000\002\026" +
    "\002\000\002\027\004\000\002\027\002\000\002\030\004" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\032\006\000\002\033\005\000\002\033" +
    "\002\000\002\034\005\000\002\035\006\000\002\036\005" +
    "\000\002\036\002\000\002\037\006\000\002\040\005\000" +
    "\002\040\002\000\002\041\006\000\002\042\005\000\002" +
    "\043\005\000\002\043\002\000\002\u0100\006\000\002\u0101" +
    "\005\000\002\u0101\002\000\002\u0102\006\000\002\044\005" +
    "\000\002\045\004\000\002\045\003\000\002\045\002\000" +
    "\002\046\003\000\002\046\003\000\002\047\004\000\002" +
    "\050\005\000\002\050\005\000\002\050\002\000\002\051" +
    "\004\000\002\052\005\000\002\052\005\000\002\052\002" +
    "\000\002\053\005\000\002\053\003\000\002\054\004\000" +
    "\002\054\003\000\002\054\003\000\002\054\003\000\002" +
    "\054\003\000\002\054\003\000\002\054\005\000\002\054" +
    "\005\000\002\054\005\000\002\054\005\000\002\054\005" +
    "\000\002\367\005\000\002\367\002\000\002\370\004\000" +
    "\002\371\004\000\002\371\002\000\002\055\004\000\002" +
    "\055\004\000\002\055\004\000\002\056\003\000\002\056" +
    "\002\000\002\057\007\000\002\057\002\000\002\060\003" +
    "\000\002\060\002\000\002\061\005\000\002\061\002\000" +
    "\002\062\005\000\002\062\006\000\002\063\004\000\002" +
    "\063\004\000\002\063\002\000\002\064\004\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\065\004\000" +
    "\002\065\005\000\002\065\004\000\002\066\007\000\002" +
    "\066\006\000\002\066\004\000\002\067\004\000\002\067" +
    "\002\000\002\070\005\000\002\070\004\000\002\071\006" +
    "\000\002\071\002\000\002\072\005\000\002\073\004\000" +
    "\002\074\005\000\002\074\002\000\002\075\013\000\002" +
    "\076\003\000\002\076\003\000\002\076\002\000\002\077" +
    "\004\000\002\077\002\000\002\100\010\000\002\100\002" +
    "\000\002\101\004\000\002\101\002\000\002\102\003\000" +
    "\002\102\003\000\002\102\002\000\002\103\006\000\002" +
    "\103\002\000\002\104\006\000\002\104\002\000\002\105" +
    "\005\000\002\105\002\000\002\106\010\000\002\107\003" +
    "\000\002\107\002\000\002\110\003\000\002\110\002\000" +
    "\002\111\004\000\002\112\003\000\002\112\003\000\002" +
    "\112\003\000\002\112\003\000\002\113\005\000\002\113" +
    "\002\000\002\114\007\000\002\114\004\000\002\114\002" +
    "\000\002\115\007\000\002\115\002\000\002\116\006\000" +
    "\002\117\003\000\002\117\002\000\002\120\004\000\002" +
    "\120\005\000\002\121\005\000\002\121\002\000\002\122" +
    "\005\000\002\122\002\000\002\123\007\000\002\124\011" +
    "\000\002\125\006\000\002\126\003\000\002\126\003\000" +
    "\002\127\004\000\002\127\002\000\002\130\005\000\002" +
    "\130\002\000\002\131\007\000\002\131\002\000\002\132" +
    "\006\000\002\132\002\000\002\133\011\000\002\133\002" +
    "\000\002\134\003\000\002\134\004\000\002\134\004\000" +
    "\002\134\004\000\002\134\002\000\002\135\003\000\002" +
    "\135\002\000\002\136\004\000\002\137\003\000\002\137" +
    "\003\000\002\137\003\000\002\137\003\000\002\137\003" +
    "\000\002\137\003\000\002\137\003\000\002\140\004\000" +
    "\002\141\005\000\002\142\004\000\002\143\005\000\002" +
    "\143\002\000\002\144\003\000\002\144\002\000\002\145" +
    "\005\000\002\145\003\000\002\146\014\000\002\373\003" +
    "\000\002\373\003\000\002\374\003\000\002\374\003\000" +
    "\002\147\004\000\002\147\002\000\002\151\005\000\002" +
    "\151\002\000\002\153\003\000\002\153\003\000\002\153" +
    "\003\000\002\154\003\000\002\154\003\000\002\360\006" +
    "\000\002\361\005\000\002\155\003\000\002\155\003\000" +
    "\002\155\003\000\002\155\003\000\002\156\005\000\002" +
    "\157\004\000\002\157\003\000\002\160\006\000\002\161" +
    "\003\000\002\161\003\000\002\161\002\000\002\162\006" +
    "\000\002\163\014\000\002\164\003\000\002\164\002\000" +
    "\002\165\005\000\002\166\005\000\002\167\006\000\002" +
    "\167\002\000\002\170\004\000\002\170\002\000\002\171" +
    "\007\000\002\171\002\000\002\172\011\000\002\173\004" +
    "\000\002\173\002\000\002\174\004\000\002\174\002\000" +
    "\002\351\005\000\002\351\003\000\002\352\004\000\002" +
    "\352\002\000\002\175\003\000\002\175\003\000\002\175" +
    "\003\000\002\176\005\000\002\176\002\000\002\177\006" +
    "\000\002\356\005\000\002\356\003\000\002\356\002\000" +
    "\002\357\010\000\002\357\007\000\002\357\006\000\002" +
    "\357\004\000\002\357\004\000\002\354\003\000\002\354" +
    "\002\000\002\355\003\000\002\355\005\000\002\353\004" +
    "\000\002\353\003\000\002\353\002\000\002\200\004\000" +
    "\002\200\002\000\002\201\003\000\002\201\003\000\002" +
    "\201\003\000\002\201\003\000\002\202\004\000\002\202" +
    "\002\000\002\203\007\000\002\203\002\000\002\204\003" +
    "\000\002\204\002\000\002\205\003\000\002\205\002\000" +
    "\002\206\005\000\002\206\002\000\002\207\004\000\002" +
    "\207\002\000\002\210\005\000\002\210\004\000\002\210" +
    "\010\000\002\210\007\000\002\211\003\000\002\211\003" +
    "\000\002\211\002\000\002\212\004\000\002\212\002\000" +
    "\002\213\005\000\002\213\002\000\002\214\005\000\002" +
    "\214\002\000\002\215\004\000\002\215\004\000\002\216" +
    "\003\000\002\216\003\000\002\217\003\000\002\217\004" +
    "\000\002\220\004\000\002\221\006\000\002\221\005\000" +
    "\002\221\012\000\002\221\007\000\002\222\007\000\002" +
    "\223\006\000\002\223\002\000\002\224\006\000\002\225" +
    "\005\000\002\225\002\000\002\226\006\000\002\227\004" +
    "\000\002\230\003\000\002\230\003\000\002\230\003\000" +
    "\002\230\003\000\002\230\003\000\002\230\003\000\002" +
    "\231\005\000\002\232\003\000\002\232\003\000\002\233" +
    "\004\000\002\233\005\000\002\234\004\000\002\235\007" +
    "\000\002\236\003\000\002\236\002\000\002\237\005\000" +
    "\002\240\003\000\002\240\005\000\002\240\003\000\002" +
    "\241\006\000\002\242\003\000\002\242\004\000\002\243" +
    "\005\000\002\244\003\000\002\244\003\000\002\245\003" +
    "\000\002\245\005\000\002\246\005\000\002\247\005\000" +
    "\002\247\005\000\002\250\003\000\002\250\002\000\002" +
    "\251\005\000\002\251\002\000\002\253\005\000\002\254" +
    "\004\000\002\254\002\000\002\255\005\000\002\255\002" +
    "\000\002\256\003\000\002\256\002\000\002\375\004\000" +
    "\002\375\004\000\002\257\005\000\002\260\003\000\002" +
    "\260\003\000\002\261\003\000\002\261\003\000\002\261" +
    "\002\000\002\262\003\000\002\262\003\000\002\263\005" +
    "\000\002\264\004\000\002\264\002\000\002\376\010\000" +
    "\002\376\002\000\002\377\003\000\002\377\003\000\002" +
    "\265\004\000\002\266\004\000\002\266\002\000\002\267" +
    "\013\000\002\270\003\000\002\270\003\000\002\271\004" +
    "\000\002\271\002\000\002\272\003\000\002\272\002\000" +
    "\002\273\005\000\002\274\004\000\002\274\002\000\002" +
    "\275\005\000\002\275\005\000\002\275\004\000\002\276" +
    "\004\000\002\276\002\000\002\277\003\000\002\277\002" +
    "\000\002\300\003\000\002\300\003\000\002\301\004\000" +
    "\002\301\002\000\002\302\004\000\002\303\003\000\002" +
    "\303\003\000\002\303\005\000\002\304\003\000\002\304" +
    "\003\000\002\305\004\000\002\305\002\000\002\306\003" +
    "\000\002\306\003\000\002\306\003\000\002\306\003\000" +
    "\002\307\004\000\002\307\002\000\002\310\005\000\002" +
    "\311\004\000\002\312\004\000\002\312\002\000\002\313" +
    "\003\000\002\313\002\000\002\340\015\000\002\341\003" +
    "\000\002\341\003\000\002\341\002\000\002\342\003\000" +
    "\002\342\003\000\002\342\002\000\002\343\003\000\002" +
    "\343\003\000\002\343\003\000\002\343\003\000\002\343" +
    "\002\000\002\344\003\000\002\344\003\000\002\344\003" +
    "\000\002\344\002\000\002\345\003\000\002\345\002\000" +
    "\002\346\005\000\002\346\002\000\002\347\004\000\002" +
    "\347\002\000\002\314\012\000\002\315\003\000\002\315" +
    "\002\000\002\316\004\000\002\316\002\000\002\317\006" +
    "\000\002\320\004\000\002\321\004\000\002\321\002\000" +
    "\002\322\003\000\002\322\002\000\002\323\003\000\002" +
    "\323\002\000\002\324\003\000\002\324\003\000\002\325" +
    "\012\000\002\326\007\000\002\327\005\000\002\327\003" +
    "\000\002\372\005\000\002\372\003\000\002\330\003\000" +
    "\002\330\003\000\002\330\003\000\002\330\003\000\002" +
    "\331\004\000\002\331\002\000\002\332\004\000\002\333" +
    "\003\000\002\333\003\000\002\333\007\000\002\333\006" +
    "\000\002\333\003\000\002\333\005\000\002\334\004\000" +
    "\002\334\002\000\002\335\003\000\002\335\003\000\002" +
    "\366\005\000\002\362\004\000\002\362\007\000\002\362" +
    "\005\000\002\363\006\000\002\363\004\000\002\364\004" +
    "\000\002\364\002\000\002\365\003\000\002\365\003\000" +
    "\002\365\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u03c7\000\040\002\uffff\003\033\102\030\125\022\173" +
    "\010\200\026\227\023\267\013\270\040\276\035\310\036" +
    "\316\034\322\032\346\004\351\041\001\002\000\010\011" +
    "\ufe2b\031\ufe2b\112\ufe2b\001\002\000\006\021\uffe9\u010f\uffe9" +
    "\001\002\000\006\021\046\u010f\045\001\002\000\004\002" +
    "\u03c8\001\002\000\044\007\uff4a\011\uff4a\012\uff4a\024\uff4a" +
    "\031\uff4a\032\uff4a\037\uff4a\043\uff4a\253\uff4a\260\uff4a\311" +
    "\u0383\370\u0384\u010b\uff4a\u0138\uff4a\u013d\uff4a\u0148\uff4a\u0149\uff4a" +
    "\001\002\000\006\011\050\031\051\001\002\000\044\002" +
    "\uffff\003\033\102\030\125\022\146\uffff\173\010\200\026" +
    "\202\uffff\227\023\267\013\270\040\276\035\310\036\316" +
    "\034\322\032\346\004\351\041\001\002\000\004\234\u0370" +
    "\001\002\000\006\021\uffe8\u010f\uffe8\001\002\000\044\002" +
    "\uffff\003\033\102\030\125\022\146\uffff\173\010\200\026" +
    "\202\uffff\227\023\267\013\270\040\276\035\310\036\316" +
    "\034\322\032\346\004\351\041\001\002\000\006\021\046" +
    "\u010f\045\001\002\000\006\021\046\u010f\045\001\002\000" +
    "\006\021\046\u010f\045\001\002\000\006\021\046\u010f\045" +
    "\001\002\000\006\256\u02d8\261\u02d5\001\002\000\032\076" +
    "\u0135\131\ufe02\166\ufedb\172\ufedb\234\u0301\252\ufedb\257\u02fa" +
    "\302\u02fd\321\u02fc\331\u0300\360\ufe02\u0106\ufe02\001\002\000" +
    "\006\021\046\u010f\045\001\002\000\006\021\046\u010f\045" +
    "\001\002\000\012\011\uff6e\031\uff6e\206\uff6e\253\115\001" +
    "\002\000\006\021\046\u010f\045\001\002\000\022\076\u0135" +
    "\131\ufe02\234\u0132\257\u012c\321\u012e\331\u0133\360\ufe02\u0106" +
    "\ufe02\001\002\000\044\002\uffff\003\033\102\030\125\022" +
    "\146\uffff\173\010\200\026\202\uffff\227\023\267\013\270" +
    "\040\276\035\310\036\316\034\322\032\346\004\351\041" +
    "\001\002\000\022\131\375\172\363\234\372\257\362\321" +
    "\364\331\371\360\367\u0106\365\001\002\000\006\021\046" +
    "\u010f\045\001\002\000\006\011\050\031\051\001\002\000" +
    "\014\011\uff6e\031\uff6e\123\uff6e\253\115\307\uff6e\001\002" +
    "\000\010\011\uff6e\031\uff6e\253\115\001\002\000\006\021" +
    "\046\u010f\045\001\002\000\006\011\050\031\051\001\002" +
    "\000\010\011\ufe2c\031\ufe2c\112\ufe2c\001\002\000\010\002" +
    "\000\146\000\202\000\001\002\000\006\021\046\u010f\045" +
    "\001\002\000\050\002\ufff2\003\ufff2\102\ufff2\125\ufff2\132" +
    "\ufff2\146\ufff2\173\ufff2\200\ufff2\202\ufff2\227\ufff2\267\ufff2" +
    "\270\ufff2\276\ufff2\310\ufff2\316\ufff2\322\ufff2\332\ufff2\346" +
    "\ufff2\351\ufff2\001\002\000\052\002\uffe6\003\uffe6\102\uffe6" +
    "\125\uffe6\132\uffe6\146\uffe6\162\uffe6\173\uffe6\200\uffe6\202" +
    "\uffe6\227\uffe6\267\uffe6\270\uffe6\276\uffe6\310\uffe6\316\uffe6" +
    "\322\uffe6\332\uffe6\346\uffe6\351\uffe6\001\002\000\052\002" +
    "\uffe7\003\uffe7\102\uffe7\125\uffe7\132\uffe7\146\uffe7\162\uffe7" +
    "\173\uffe7\200\uffe7\202\uffe7\227\uffe7\267\uffe7\270\uffe7\276" +
    "\uffe7\310\uffe7\316\uffe7\322\uffe7\332\uffe7\346\uffe7\351\uffe7" +
    "\001\002\000\004\254\054\001\002\000\312\004\uffe5\005" +
    "\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\014\uffe5" +
    "\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023" +
    "\uffe5\024\uffe5\031\uffe5\032\uffe5\037\uffe5\043\uffe5\047\uffe5" +
    "\050\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056" +
    "\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5\064\uffe5" +
    "\065\uffe5\066\uffe5\067\uffe5\070\uffe5\071\uffe5\072\uffe5\074" +
    "\uffe5\075\uffe5\076\uffe5\102\uffe5\110\uffe5\112\uffe5\113\uffe5" +
    "\116\uffe5\123\uffe5\125\uffe5\126\uffe5\130\uffe5\132\uffe5\142" +
    "\uffe5\143\uffe5\145\uffe5\153\uffe5\154\uffe5\155\uffe5\166\uffe5" +
    "\167\uffe5\174\uffe5\175\uffe5\210\uffe5\211\uffe5\212\uffe5\214" +
    "\uffe5\225\uffe5\230\uffe5\252\uffe5\254\uffe5\255\uffe5\260\uffe5" +
    "\273\uffe5\302\uffe5\303\uffe5\317\uffe5\322\uffe5\323\uffe5\325" +
    "\uffe5\342\uffe5\350\uffe5\352\uffe5\u0100\uffe5\u0104\uffe5\u010a\uffe5" +
    "\u010f\uffe5\u0110\uffe5\u011d\uffe5\u0126\uffe5\u0129\uffe5\u012c\uffe5\u013f" +
    "\uffe5\u014b\uffe5\u0155\uffe5\u0158\uffe5\u0165\uffe5\u0166\uffe5\u016b\uffe5" +
    "\u0176\uffe5\001\002\000\004\011\052\001\002\000\004\046" +
    "\053\001\002\000\312\004\uffe4\005\uffe4\006\uffe4\007\uffe4" +
    "\010\uffe4\011\uffe4\012\uffe4\014\uffe4\015\uffe4\016\uffe4\017" +
    "\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\031\uffe4" +
    "\032\uffe4\037\uffe4\043\uffe4\047\uffe4\050\uffe4\051\uffe4\052" +
    "\uffe4\053\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4" +
    "\061\uffe4\062\uffe4\063\uffe4\064\uffe4\065\uffe4\066\uffe4\067" +
    "\uffe4\070\uffe4\071\uffe4\072\uffe4\074\uffe4\075\uffe4\076\uffe4" +
    "\102\uffe4\110\uffe4\112\uffe4\113\uffe4\116\uffe4\123\uffe4\125" +
    "\uffe4\126\uffe4\130\uffe4\132\uffe4\142\uffe4\143\uffe4\145\uffe4" +
    "\153\uffe4\154\uffe4\155\uffe4\166\uffe4\167\uffe4\174\uffe4\175" +
    "\uffe4\210\uffe4\211\uffe4\212\uffe4\214\uffe4\225\uffe4\230\uffe4" +
    "\252\uffe4\254\uffe4\255\uffe4\260\uffe4\273\uffe4\302\uffe4\303" +
    "\uffe4\317\uffe4\322\uffe4\323\uffe4\325\uffe4\342\uffe4\350\uffe4" +
    "\352\uffe4\u0100\uffe4\u0104\uffe4\u010a\uffe4\u010f\uffe4\u0110\uffe4\u011d" +
    "\uffe4\u0126\uffe4\u0129\uffe4\u012c\uffe4\u013f\uffe4\u014b\uffe4\u0155\uffe4" +
    "\u0158\uffe4\u0165\uffe4\u0166\uffe4\u016b\uffe4\u0176\uffe4\001\002\000" +
    "\034\110\ufe19\u010d\055\u0116\ufe19\u0143\056\u0181\ufe19\u0182\ufe19" +
    "\u0183\ufe19\u0184\ufe19\u0185\ufe19\u0186\ufe19\u0187\ufe19\u0188\ufe19\u0189" +
    "\ufe19\001\002\000\030\110\ufe1a\u0116\ufe1a\u0181\ufe1a\u0182\ufe1a" +
    "\u0183\ufe1a\u0184\ufe1a\u0185\ufe1a\u0186\ufe1a\u0187\ufe1a\u0188\ufe1a\u0189" +
    "\ufe1a\001\002\000\030\110\ufe1b\u0116\ufe1b\u0181\ufe1b\u0182\ufe1b" +
    "\u0183\ufe1b\u0184\ufe1b\u0185\ufe1b\u0186\ufe1b\u0187\ufe1b\u0188\ufe1b\u0189" +
    "\ufe1b\001\002\000\030\110\ufe16\u0116\062\u0181\060\u0182\ufe16" +
    "\u0183\ufe16\u0184\ufe16\u0185\ufe16\u0186\ufe16\u0187\ufe16\u0188\ufe16\u0189" +
    "\ufe16\001\002\000\024\110\ufe17\u0182\ufe17\u0183\ufe17\u0184\ufe17" +
    "\u0185\ufe17\u0186\ufe17\u0187\ufe17\u0188\ufe17\u0189\ufe17\001\002\000" +
    "\024\110\ufe11\u0182\063\u0183\064\u0184\066\u0185\065\u0186\ufe11" +
    "\u0187\ufe11\u0188\ufe11\u0189\ufe11\001\002\000\024\110\ufe18\u0182" +
    "\ufe18\u0183\ufe18\u0184\ufe18\u0185\ufe18\u0186\ufe18\u0187\ufe18\u0188\ufe18" +
    "\u0189\ufe18\001\002\000\014\110\ufe15\u0186\ufe15\u0187\ufe15\u0188" +
    "\ufe15\u0189\ufe15\001\002\000\014\110\ufe14\u0186\ufe14\u0187\ufe14" +
    "\u0188\ufe14\u0189\ufe14\001\002\000\014\110\ufe12\u0186\ufe12\u0187" +
    "\ufe12\u0188\ufe12\u0189\ufe12\001\002\000\014\110\ufe13\u0186\ufe13" +
    "\u0187\ufe13\u0188\ufe13\u0189\ufe13\001\002\000\014\110\ufe0d\u0186" +
    "\073\u0187\071\u0188\072\u0189\ufe0d\001\002\000\006\110\ufe0b" +
    "\u0189\075\001\002\000\006\110\ufe0f\u0189\ufe0f\001\002\000" +
    "\006\110\ufe0e\u0189\ufe0e\001\002\000\006\110\ufe10\u0189\ufe10" +
    "\001\002\000\004\110\076\001\002\000\004\110\ufe0c\001" +
    "\002\000\004\173\010\001\002\000\010\021\ufe09\110\101" +
    "\u010f\ufe09\001\002\000\006\021\ufe1c\u010f\ufe1c\001\002\000" +
    "\004\310\102\001\002\000\010\021\ufe07\266\104\u010f\ufe07" +
    "\001\002\000\006\021\ufe0a\u010f\ufe0a\001\002\000\006\011" +
    "\050\031\051\001\002\000\012\021\uff4e\022\110\047\uff4e" +
    "\u010f\uff4e\001\002\000\006\021\ufe08\u010f\ufe08\001\002\000" +
    "\010\021\uff50\047\uff50\u010f\uff50\001\002\000\006\011\050" +
    "\031\051\001\002\000\012\021\uff4e\022\110\047\uff4e\u010f" +
    "\uff4e\001\002\000\010\021\uff4f\047\uff4f\u010f\uff4f\001\002" +
    "\000\044\002\uffee\003\uffee\102\uffee\125\uffee\146\uffee\173" +
    "\uffee\200\uffee\202\uffee\227\uffee\267\uffee\270\uffee\276\uffee" +
    "\310\uffee\316\uffee\322\uffee\346\uffee\351\uffee\001\002\000" +
    "\006\011\050\031\051\001\002\000\004\032\116\001\002" +
    "\000\004\012\117\001\002\000\004\047\120\001\002\000" +
    "\046\007\uff6c\011\uff6c\012\uff6c\024\uff6c\031\uff6c\032\uff6c" +
    "\037\uff6c\043\uff6c\123\uff6c\206\uff6c\260\uff6c\307\uff6c\336" +
    "\122\u010b\uff6c\u0138\uff6c\u013d\uff6c\u0148\uff6c\u0149\uff6c\001\002" +
    "\000\044\007\uff6f\011\uff6f\012\uff6f\024\uff6f\031\uff6f\032" +
    "\uff6f\037\uff6f\043\uff6f\123\uff6f\206\uff6f\260\uff6f\307\uff6f" +
    "\u010b\uff6f\u0138\uff6f\u013d\uff6f\u0148\uff6f\u0149\uff6f\001\002\000" +
    "\044\007\uff6d\011\uff6d\012\uff6d\024\uff6d\031\uff6d\032\uff6d" +
    "\037\uff6d\043\uff6d\123\uff6d\206\uff6d\260\uff6d\307\uff6d\u010b" +
    "\uff6d\u0138\uff6d\u013d\uff6d\u0148\uff6d\u0149\uff6d\001\002\000\142" +
    "\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde\014" +
    "\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde" +
    "\023\324\031\uffde\032\uffde\043\uffde\047\uffde\074\uffde\075" +
    "\uffde\076\uffde\102\uffde\110\uffde\112\uffde\123\uffde\126\uffde" +
    "\130\uffde\142\uffde\143\uffde\145\uffde\167\uffde\174\uffde\175" +
    "\uffde\211\uffde\212\uffde\214\uffde\225\uffde\230\uffde\255\uffde" +
    "\273\uffde\303\uffde\322\uffde\323\uffde\325\uffde\342\uffde\u0104" +
    "\uffde\u010f\uffde\u016b\uffde\001\002\000\004\212\125\001\002" +
    "\000\006\011\050\031\051\001\002\000\004\004\314\001" +
    "\002\000\012\021\uff18\123\131\342\uff18\u010f\uff18\001\002" +
    "\000\010\021\uff56\342\137\u010f\uff56\001\002\000\006\011" +
    "\050\031\051\001\002\000\012\021\uff21\022\133\342\uff21" +
    "\u010f\uff21\001\002\000\006\011\050\031\051\001\002\000" +
    "\010\021\uff19\342\uff19\u010f\uff19\001\002\000\012\021\uff21" +
    "\022\133\342\uff21\u010f\uff21\001\002\000\010\021\uff22\342" +
    "\uff22\u010f\uff22\001\002\000\036\011\uff70\012\uff70\024\uff70" +
    "\031\uff70\032\141\037\uff70\043\uff70\255\144\260\uff70\u010b" +
    "\uff70\u0138\uff70\u013d\uff70\u0148\uff70\u0149\uff70\001\002\000\006" +
    "\021\uff1f\u010f\uff1f\001\002\000\036\011\uff70\012\uff70\024" +
    "\uff70\031\uff70\032\141\037\uff70\043\uff70\255\144\260\uff70" +
    "\u010b\uff70\u0138\uff70\u013d\uff70\u0148\uff70\u0149\uff70\001\002\000" +
    "\034\011\050\012\146\024\147\031\051\032\163\037\152" +
    "\043\157\260\165\u010b\160\u0138\145\u013d\166\u0148\164\u0149" +
    "\162\001\002\000\022\021\uff57\047\uff57\110\uff57\142\uff57" +
    "\145\uff57\325\uff57\u010f\uff57\u016b\uff57\001\002\000\042\011" +
    "\uff71\012\uff71\024\uff71\031\uff71\032\uff71\037\uff71\043\uff71" +
    "\130\uff71\167\uff71\230\uff71\260\uff71\u010b\uff71\u0138\uff71\u013d" +
    "\uff71\u0148\uff71\u0149\uff71\001\002\000\004\032\307\001\002" +
    "\000\122\004\uff83\005\uff83\006\uff83\007\uff83\010\uff83\011" +
    "\uff83\014\uff83\015\uff83\016\uff83\017\uff83\020\uff83\021\uff83" +
    "\022\uff83\031\uff83\043\uff83\047\uff83\075\uff83\076\uff83\110" +
    "\uff83\112\uff83\123\uff83\126\uff83\130\uff83\142\uff83\143\uff83" +
    "\145\uff83\167\uff83\174\uff83\175\uff83\211\uff83\214\uff83\225" +
    "\uff83\230\uff83\255\uff83\303\uff83\325\uff83\342\uff83\u0104\uff83" +
    "\u010f\uff83\u016b\uff83\001\002\000\004\011\306\001\002\000" +
    "\122\004\uff85\005\uff85\006\uff85\007\uff85\010\uff85\011\uff85" +
    "\014\uff85\015\uff85\016\uff85\017\uff85\020\uff85\021\uff85\022" +
    "\uff85\031\uff85\043\uff85\047\uff85\075\uff85\076\uff85\110\uff85" +
    "\112\uff85\123\uff85\126\uff85\130\uff85\142\uff85\143\uff85\145" +
    "\uff85\167\uff85\174\uff85\175\uff85\211\uff85\214\uff85\225\uff85" +
    "\230\uff85\255\uff85\303\uff85\325\uff85\342\uff85\u0104\uff85\u010f" +
    "\uff85\u016b\uff85\001\002\000\030\004\261\014\254\015\255" +
    "\016\260\017\257\020\252\130\uff70\167\uff70\211\263\230" +
    "\uff70\255\144\001\002\000\122\004\uff82\005\uff82\006\uff82" +
    "\007\uff82\010\uff82\011\uff82\014\uff82\015\uff82\016\uff82\017" +
    "\uff82\020\uff82\021\uff82\022\uff82\031\uff82\043\uff82\047\uff82" +
    "\075\uff82\076\uff82\110\uff82\112\uff82\123\uff82\126\uff82\130" +
    "\uff82\142\uff82\143\uff82\145\uff82\167\uff82\174\uff82\175\uff82" +
    "\211\uff82\214\uff82\225\uff82\230\uff82\255\uff82\303\uff82\325" +
    "\uff82\342\uff82\u0104\uff82\u010f\uff82\u016b\uff82\001\002\000\122" +
    "\004\uff87\005\uff87\006\uff87\007\245\010\243\011\uff87\014" +
    "\uff87\015\uff87\016\uff87\017\uff87\020\uff87\021\uff87\022\uff87" +
    "\031\uff87\043\uff87\047\uff87\075\uff87\076\uff87\110\uff87\112" +
    "\uff87\123\uff87\126\uff87\130\uff87\142\uff87\143\uff87\145\uff87" +
    "\167\uff87\174\uff87\175\uff87\211\uff87\214\uff87\225\uff87\230" +
    "\uff87\255\uff87\303\uff87\325\uff87\342\uff87\u0104\uff87\u010f\uff87" +
    "\u016b\uff87\001\002\000\116\004\uff8b\005\235\006\234\011" +
    "\uff8b\014\uff8b\015\uff8b\016\uff8b\017\uff8b\020\uff8b\021\uff8b" +
    "\022\uff8b\031\uff8b\043\uff8b\047\uff8b\075\uff8b\076\uff8b\110" +
    "\uff8b\112\uff8b\123\uff8b\126\uff8b\130\uff8b\142\uff8b\143\uff8b" +
    "\145\uff8b\167\uff8b\174\uff8b\175\uff8b\211\uff8b\214\uff8b\225" +
    "\uff8b\230\uff8b\255\uff8b\303\uff8b\325\uff8b\342\uff8b\u0104\uff8b" +
    "\u010f\uff8b\u016b\uff8b\001\002\000\126\004\uffdb\005\uffdb\006" +
    "\uffdb\007\uffdb\010\uffdb\011\uffdb\014\uffdb\015\uffdb\016\uffdb" +
    "\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\232\031\uffdb\032" +
    "\uffdb\043\uffdb\047\uffdb\075\uffdb\076\uffdb\110\uffdb\112\uffdb" +
    "\123\uffdb\126\uffdb\130\uffdb\142\uffdb\143\uffdb\145\uffdb\167" +
    "\uffdb\174\uffdb\175\uffdb\211\uffdb\214\uffdb\225\uffdb\230\uffdb" +
    "\255\uffdb\303\uffdb\325\uffdb\342\uffdb\u0104\uffdb\u010f\uffdb\u016b" +
    "\uffdb\001\002\000\044\021\uff65\022\uff65\047\uff65\075\224" +
    "\076\225\110\uff65\126\uff65\142\uff65\143\uff65\145\uff65\175" +
    "\uff65\214\uff65\225\uff65\325\uff65\342\uff65\u010f\uff65\u016b\uff65" +
    "\001\002\000\122\004\uff81\005\uff81\006\uff81\007\uff81\010" +
    "\uff81\011\uff81\014\uff81\015\uff81\016\uff81\017\uff81\020\uff81" +
    "\021\uff81\022\uff81\031\uff81\043\uff81\047\uff81\075\uff81\076" +
    "\uff81\110\uff81\112\uff81\123\uff81\126\uff81\130\uff81\142\uff81" +
    "\143\uff81\145\uff81\167\uff81\174\uff81\175\uff81\211\uff81\214" +
    "\uff81\225\uff81\230\uff81\255\uff81\303\uff81\325\uff81\342\uff81" +
    "\u0104\uff81\u010f\uff81\u016b\uff81\001\002\000\004\032\222\001" +
    "\002\000\122\004\uff7f\005\uff7f\006\uff7f\007\uff7f\010\uff7f" +
    "\011\uff7f\014\uff7f\015\uff7f\016\uff7f\017\uff7f\020\uff7f\021" +
    "\uff7f\022\uff7f\031\uff7f\043\uff7f\047\uff7f\075\uff7f\076\uff7f" +
    "\110\uff7f\112\uff7f\123\uff7f\126\uff7f\130\uff7f\142\uff7f\143" +
    "\uff7f\145\uff7f\167\uff7f\174\uff7f\175\uff7f\211\uff7f\214\uff7f" +
    "\225\uff7f\230\uff7f\255\uff7f\303\uff7f\325\uff7f\342\uff7f\u0104" +
    "\uff7f\u010f\uff7f\u016b\uff7f\001\002\000\004\032\220\001\002" +
    "\000\034\011\050\012\146\024\147\031\051\032\163\037" +
    "\152\043\157\260\165\u010b\160\u0138\145\u013d\166\u0148\164" +
    "\u0149\162\001\002\000\004\032\214\001\002\000\122\004" +
    "\uff80\005\uff80\006\uff80\007\uff80\010\uff80\011\uff80\014\uff80" +
    "\015\uff80\016\uff80\017\uff80\020\uff80\021\uff80\022\uff80\031" +
    "\uff80\043\uff80\047\uff80\075\uff80\076\uff80\110\uff80\112\uff80" +
    "\123\uff80\126\uff80\130\uff80\142\uff80\143\uff80\145\uff80\167" +
    "\uff80\174\uff80\175\uff80\211\uff80\214\uff80\225\uff80\230\uff80" +
    "\255\uff80\303\uff80\325\uff80\342\uff80\u0104\uff80\u010f\uff80\u016b" +
    "\uff80\001\002\000\004\032\204\001\002\000\124\004\uff78" +
    "\005\uff78\006\uff78\007\uff78\010\uff78\011\uff78\014\uff78\015" +
    "\uff78\016\uff78\017\uff78\020\uff78\021\uff78\022\uff78\031\uff78" +
    "\032\170\043\uff78\047\uff78\075\uff78\076\uff78\110\uff78\112" +
    "\uff78\123\uff78\126\uff78\130\uff78\142\uff78\143\uff78\145\uff78" +
    "\167\uff78\174\uff78\175\uff78\211\uff78\214\uff78\225\uff78\230" +
    "\uff78\255\uff78\303\uff78\325\uff78\342\uff78\u0104\uff78\u010f\uff78" +
    "\u016b\uff78\001\002\000\012\012\176\024\147\037\172\043" +
    "\175\001\002\000\122\004\uff84\005\uff84\006\uff84\007\uff84" +
    "\010\uff84\011\uff84\014\uff84\015\uff84\016\uff84\017\uff84\020" +
    "\uff84\021\uff84\022\uff84\031\uff84\043\uff84\047\uff84\075\uff84" +
    "\076\uff84\110\uff84\112\uff84\123\uff84\126\uff84\130\uff84\142" +
    "\uff84\143\uff84\145\uff84\167\uff84\174\uff84\175\uff84\211\uff84" +
    "\214\uff84\225\uff84\230\uff84\255\uff84\303\uff84\325\uff84\342" +
    "\uff84\u0104\uff84\u010f\uff84\u016b\uff84\001\002\000\010\022\ufdef" +
    "\047\ufdef\332\ufdef\001\002\000\006\022\202\047\uff75\001" +
    "\002\000\010\022\ufdf1\047\ufdf1\332\ufdf1\001\002\000\010" +
    "\022\ufdee\047\ufdee\332\ufdee\001\002\000\010\022\ufdf0\047" +
    "\ufdf0\332\ufdf0\001\002\000\004\047\200\001\002\000\122" +
    "\004\uff79\005\uff79\006\uff79\007\uff79\010\uff79\011\uff79\014" +
    "\uff79\015\uff79\016\uff79\017\uff79\020\uff79\021\uff79\022\uff79" +
    "\031\uff79\043\uff79\047\uff79\075\uff79\076\uff79\110\uff79\112" +
    "\uff79\123\uff79\126\uff79\130\uff79\142\uff79\143\uff79\145\uff79" +
    "\167\uff79\174\uff79\175\uff79\211\uff79\214\uff79\225\uff79\230" +
    "\uff79\255\uff79\303\uff79\325\uff79\342\uff79\u0104\uff79\u010f\uff79" +
    "\u016b\uff79\001\002\000\004\047\uff77\001\002\000\012\012" +
    "\176\024\147\037\172\043\175\001\002\000\004\047\uff76" +
    "\001\002\000\012\007\207\011\050\012\210\031\051\001" +
    "\002\000\004\047\213\001\002\000\122\004\uff7a\005\uff7a" +
    "\006\uff7a\007\uff7a\010\uff7a\011\uff7a\014\uff7a\015\uff7a\016" +
    "\uff7a\017\uff7a\020\uff7a\021\uff7a\022\uff7a\031\uff7a\043\uff7a" +
    "\047\uff7a\075\uff7a\076\uff7a\110\uff7a\112\uff7a\123\uff7a\126" +
    "\uff7a\130\uff7a\142\uff7a\143\uff7a\145\uff7a\167\uff7a\174\uff7a" +
    "\175\uff7a\211\uff7a\214\uff7a\225\uff7a\230\uff7a\255\uff7a\303" +
    "\uff7a\325\uff7a\342\uff7a\u0104\uff7a\u010f\uff7a\u016b\uff7a\001\002" +
    "\000\004\047\212\001\002\000\004\047\211\001\002\000" +
    "\122\004\uff73\005\uff73\006\uff73\007\uff73\010\uff73\011\uff73" +
    "\014\uff73\015\uff73\016\uff73\017\uff73\020\uff73\021\uff73\022" +
    "\uff73\031\uff73\043\uff73\047\uff73\075\uff73\076\uff73\110\uff73" +
    "\112\uff73\123\uff73\126\uff73\130\uff73\142\uff73\143\uff73\145" +
    "\uff73\167\uff73\174\uff73\175\uff73\211\uff73\214\uff73\225\uff73" +
    "\230\uff73\255\uff73\303\uff73\325\uff73\342\uff73\u0104\uff73\u010f" +
    "\uff73\u016b\uff73\001\002\000\122\004\uff72\005\uff72\006\uff72" +
    "\007\uff72\010\uff72\011\uff72\014\uff72\015\uff72\016\uff72\017" +
    "\uff72\020\uff72\021\uff72\022\uff72\031\uff72\043\uff72\047\uff72" +
    "\075\uff72\076\uff72\110\uff72\112\uff72\123\uff72\126\uff72\130" +
    "\uff72\142\uff72\143\uff72\145\uff72\167\uff72\174\uff72\175\uff72" +
    "\211\uff72\214\uff72\225\uff72\230\uff72\255\uff72\303\uff72\325" +
    "\uff72\342\uff72\u0104\uff72\u010f\uff72\u016b\uff72\001\002\000\122" +
    "\004\uff74\005\uff74\006\uff74\007\uff74\010\uff74\011\uff74\014" +
    "\uff74\015\uff74\016\uff74\017\uff74\020\uff74\021\uff74\022\uff74" +
    "\031\uff74\043\uff74\047\uff74\075\uff74\076\uff74\110\uff74\112" +
    "\uff74\123\uff74\126\uff74\130\uff74\142\uff74\143\uff74\145\uff74" +
    "\167\uff74\174\uff74\175\uff74\211\uff74\214\uff74\225\uff74\230" +
    "\uff74\255\uff74\303\uff74\325\uff74\342\uff74\u0104\uff74\u010f\uff74" +
    "\u016b\uff74\001\002\000\012\007\207\011\050\012\210\031" +
    "\051\001\002\000\122\004\uff7b\005\uff7b\006\uff7b\007\uff7b" +
    "\010\uff7b\011\uff7b\014\uff7b\015\uff7b\016\uff7b\017\uff7b\020" +
    "\uff7b\021\uff7b\022\uff7b\031\uff7b\043\uff7b\047\uff7b\075\uff7b" +
    "\076\uff7b\110\uff7b\112\uff7b\123\uff7b\126\uff7b\130\uff7b\142" +
    "\uff7b\143\uff7b\145\uff7b\167\uff7b\174\uff7b\175\uff7b\211\uff7b" +
    "\214\uff7b\225\uff7b\230\uff7b\255\uff7b\303\uff7b\325\uff7b\342" +
    "\uff7b\u0104\uff7b\u010f\uff7b\u016b\uff7b\001\002\000\004\047\217" +
    "\001\002\000\122\004\uff86\005\uff86\006\uff86\007\uff86\010" +
    "\uff86\011\uff86\014\uff86\015\uff86\016\uff86\017\uff86\020\uff86" +
    "\021\uff86\022\uff86\031\uff86\043\uff86\047\uff86\075\uff86\076" +
    "\uff86\110\uff86\112\uff86\123\uff86\126\uff86\130\uff86\142\uff86" +
    "\143\uff86\145\uff86\167\uff86\174\uff86\175\uff86\211\uff86\214" +
    "\uff86\225\uff86\230\uff86\255\uff86\303\uff86\325\uff86\342\uff86" +
    "\u0104\uff86\u010f\uff86\u016b\uff86\001\002\000\012\007\207\011" +
    "\050\012\210\031\051\001\002\000\122\004\uff7c\005\uff7c" +
    "\006\uff7c\007\uff7c\010\uff7c\011\uff7c\014\uff7c\015\uff7c\016" +
    "\uff7c\017\uff7c\020\uff7c\021\uff7c\022\uff7c\031\uff7c\043\uff7c" +
    "\047\uff7c\075\uff7c\076\uff7c\110\uff7c\112\uff7c\123\uff7c\126" +
    "\uff7c\130\uff7c\142\uff7c\143\uff7c\145\uff7c\167\uff7c\174\uff7c" +
    "\175\uff7c\211\uff7c\214\uff7c\225\uff7c\230\uff7c\255\uff7c\303" +
    "\uff7c\325\uff7c\342\uff7c\u0104\uff7c\u010f\uff7c\u016b\uff7c\001\002" +
    "\000\012\007\207\011\050\012\210\031\051\001\002\000" +
    "\122\004\uff7d\005\uff7d\006\uff7d\007\uff7d\010\uff7d\011\uff7d" +
    "\014\uff7d\015\uff7d\016\uff7d\017\uff7d\020\uff7d\021\uff7d\022" +
    "\uff7d\031\uff7d\043\uff7d\047\uff7d\075\uff7d\076\uff7d\110\uff7d" +
    "\112\uff7d\123\uff7d\126\uff7d\130\uff7d\142\uff7d\143\uff7d\145" +
    "\uff7d\167\uff7d\174\uff7d\175\uff7d\211\uff7d\214\uff7d\225\uff7d" +
    "\230\uff7d\255\uff7d\303\uff7d\325\uff7d\342\uff7d\u0104\uff7d\u010f" +
    "\uff7d\u016b\uff7d\001\002\000\036\011\uff70\012\uff70\024\uff70" +
    "\031\uff70\032\141\037\uff70\043\uff70\255\144\260\uff70\u010b" +
    "\uff70\u0138\uff70\u013d\uff70\u0148\uff70\u0149\uff70\001\002\000\036" +
    "\011\uff70\012\uff70\024\uff70\031\uff70\032\141\037\uff70\043" +
    "\uff70\255\144\260\uff70\u010b\uff70\u0138\uff70\u013d\uff70\u0148\uff70" +
    "\u0149\uff70\001\002\000\040\021\uff69\022\uff69\047\uff69\110" +
    "\uff69\126\uff69\142\uff69\143\uff69\145\uff69\175\uff69\214\uff69" +
    "\225\uff69\325\uff69\342\uff69\u010f\uff69\u016b\uff69\001\002\000" +
    "\040\021\uff66\022\uff66\047\uff66\110\uff66\126\uff66\142\uff66" +
    "\143\uff66\145\uff66\175\uff66\214\uff66\225\uff66\325\uff66\342" +
    "\uff66\u010f\uff66\u016b\uff66\001\002\000\040\021\uff67\022\uff67" +
    "\047\uff67\110\uff67\126\uff67\142\uff67\143\uff67\145\uff67\175" +
    "\uff67\214\uff67\225\uff67\325\uff67\342\uff67\u010f\uff67\u016b\uff67" +
    "\001\002\000\124\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010" +
    "\uffdd\011\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd" +
    "\021\uffdd\022\uffdd\031\uffdd\032\uffdd\043\uffdd\047\uffdd\075" +
    "\uffdd\076\uffdd\110\uffdd\112\uffdd\123\uffdd\126\uffdd\130\uffdd" +
    "\142\uffdd\143\uffdd\145\uffdd\167\uffdd\174\uffdd\175\uffdd\211" +
    "\uffdd\214\uffdd\225\uffdd\230\uffdd\255\uffdd\303\uffdd\325\uffdd" +
    "\342\uffdd\u0104\uffdd\u010f\uffdd\u016b\uffdd\001\002\000\006\011" +
    "\050\031\051\001\002\000\124\004\uffdc\005\uffdc\006\uffdc" +
    "\007\uffdc\010\uffdc\011\uffdc\014\uffdc\015\uffdc\016\uffdc\017" +
    "\uffdc\020\uffdc\021\uffdc\022\uffdc\031\uffdc\032\uffdc\043\uffdc" +
    "\047\uffdc\075\uffdc\076\uffdc\110\uffdc\112\uffdc\123\uffdc\126" +
    "\uffdc\130\uffdc\142\uffdc\143\uffdc\145\uffdc\167\uffdc\174\uffdc" +
    "\175\uffdc\211\uffdc\214\uffdc\225\uffdc\230\uffdc\255\uffdc\303" +
    "\uffdc\325\uffdc\342\uffdc\u0104\uffdc\u010f\uffdc\u016b\uffdc\001\002" +
    "\000\034\011\050\012\146\024\147\031\051\032\163\037" +
    "\152\043\157\260\165\u010b\160\u0138\145\u013d\166\u0148\164" +
    "\u0149\162\001\002\000\034\011\050\012\146\024\147\031" +
    "\051\032\163\037\152\043\157\260\165\u010b\160\u0138\145" +
    "\u013d\166\u0148\164\u0149\162\001\002\000\112\004\uff8e\011" +
    "\uff8e\014\uff8e\015\uff8e\016\uff8e\017\uff8e\020\uff8e\021\uff8e" +
    "\022\uff8e\031\uff8e\043\uff8e\047\uff8e\075\uff8e\076\uff8e\110" +
    "\uff8e\112\uff8e\123\uff8e\126\uff8e\130\uff8e\142\uff8e\143\uff8e" +
    "\145\uff8e\167\uff8e\174\uff8e\175\uff8e\211\uff8e\214\uff8e\225" +
    "\uff8e\230\uff8e\255\uff8e\303\uff8e\325\uff8e\342\uff8e\u0104\uff8e" +
    "\u010f\uff8e\u016b\uff8e\001\002\000\116\004\uff8b\005\235\006" +
    "\234\011\uff8b\014\uff8b\015\uff8b\016\uff8b\017\uff8b\020\uff8b" +
    "\021\uff8b\022\uff8b\031\uff8b\043\uff8b\047\uff8b\075\uff8b\076" +
    "\uff8b\110\uff8b\112\uff8b\123\uff8b\126\uff8b\130\uff8b\142\uff8b" +
    "\143\uff8b\145\uff8b\167\uff8b\174\uff8b\175\uff8b\211\uff8b\214" +
    "\uff8b\225\uff8b\230\uff8b\255\uff8b\303\uff8b\325\uff8b\342\uff8b" +
    "\u0104\uff8b\u010f\uff8b\u016b\uff8b\001\002\000\112\004\uff8d\011" +
    "\uff8d\014\uff8d\015\uff8d\016\uff8d\017\uff8d\020\uff8d\021\uff8d" +
    "\022\uff8d\031\uff8d\043\uff8d\047\uff8d\075\uff8d\076\uff8d\110" +
    "\uff8d\112\uff8d\123\uff8d\126\uff8d\130\uff8d\142\uff8d\143\uff8d" +
    "\145\uff8d\167\uff8d\174\uff8d\175\uff8d\211\uff8d\214\uff8d\225" +
    "\uff8d\230\uff8d\255\uff8d\303\uff8d\325\uff8d\342\uff8d\u0104\uff8d" +
    "\u010f\uff8d\u016b\uff8d\001\002\000\116\004\uff8b\005\235\006" +
    "\234\011\uff8b\014\uff8b\015\uff8b\016\uff8b\017\uff8b\020\uff8b" +
    "\021\uff8b\022\uff8b\031\uff8b\043\uff8b\047\uff8b\075\uff8b\076" +
    "\uff8b\110\uff8b\112\uff8b\123\uff8b\126\uff8b\130\uff8b\142\uff8b" +
    "\143\uff8b\145\uff8b\167\uff8b\174\uff8b\175\uff8b\211\uff8b\214" +
    "\uff8b\225\uff8b\230\uff8b\255\uff8b\303\uff8b\325\uff8b\342\uff8b" +
    "\u0104\uff8b\u010f\uff8b\u016b\uff8b\001\002\000\112\004\uff8c\011" +
    "\uff8c\014\uff8c\015\uff8c\016\uff8c\017\uff8c\020\uff8c\021\uff8c" +
    "\022\uff8c\031\uff8c\043\uff8c\047\uff8c\075\uff8c\076\uff8c\110" +
    "\uff8c\112\uff8c\123\uff8c\126\uff8c\130\uff8c\142\uff8c\143\uff8c" +
    "\145\uff8c\167\uff8c\174\uff8c\175\uff8c\211\uff8c\214\uff8c\225" +
    "\uff8c\230\uff8c\255\uff8c\303\uff8c\325\uff8c\342\uff8c\u0104\uff8c" +
    "\u010f\uff8c\u016b\uff8c\001\002\000\034\011\050\012\146\024" +
    "\147\031\051\032\163\037\152\043\157\260\165\u010b\160" +
    "\u0138\145\u013d\166\u0148\164\u0149\162\001\002\000\116\004" +
    "\uff8a\005\uff8a\006\uff8a\011\uff8a\014\uff8a\015\uff8a\016\uff8a" +
    "\017\uff8a\020\uff8a\021\uff8a\022\uff8a\031\uff8a\043\uff8a\047" +
    "\uff8a\075\uff8a\076\uff8a\110\uff8a\112\uff8a\123\uff8a\126\uff8a" +
    "\130\uff8a\142\uff8a\143\uff8a\145\uff8a\167\uff8a\174\uff8a\175" +
    "\uff8a\211\uff8a\214\uff8a\225\uff8a\230\uff8a\255\uff8a\303\uff8a" +
    "\325\uff8a\342\uff8a\u0104\uff8a\u010f\uff8a\u016b\uff8a\001\002\000" +
    "\034\011\050\012\146\024\147\031\051\032\163\037\152" +
    "\043\157\260\165\u010b\160\u0138\145\u013d\166\u0148\164\u0149" +
    "\162\001\002\000\122\004\uff87\005\uff87\006\uff87\007\245" +
    "\010\243\011\uff87\014\uff87\015\uff87\016\uff87\017\uff87\020" +
    "\uff87\021\uff87\022\uff87\031\uff87\043\uff87\047\uff87\075\uff87" +
    "\076\uff87\110\uff87\112\uff87\123\uff87\126\uff87\130\uff87\142" +
    "\uff87\143\uff87\145\uff87\167\uff87\174\uff87\175\uff87\211\uff87" +
    "\214\uff87\225\uff87\230\uff87\255\uff87\303\uff87\325\uff87\342" +
    "\uff87\u0104\uff87\u010f\uff87\u016b\uff87\001\002\000\116\004\uff89" +
    "\005\uff89\006\uff89\011\uff89\014\uff89\015\uff89\016\uff89\017" +
    "\uff89\020\uff89\021\uff89\022\uff89\031\uff89\043\uff89\047\uff89" +
    "\075\uff89\076\uff89\110\uff89\112\uff89\123\uff89\126\uff89\130" +
    "\uff89\142\uff89\143\uff89\145\uff89\167\uff89\174\uff89\175\uff89" +
    "\211\uff89\214\uff89\225\uff89\230\uff89\255\uff89\303\uff89\325" +
    "\uff89\342\uff89\u0104\uff89\u010f\uff89\u016b\uff89\001\002\000\122" +
    "\004\uff87\005\uff87\006\uff87\007\245\010\243\011\uff87\014" +
    "\uff87\015\uff87\016\uff87\017\uff87\020\uff87\021\uff87\022\uff87" +
    "\031\uff87\043\uff87\047\uff87\075\uff87\076\uff87\110\uff87\112" +
    "\uff87\123\uff87\126\uff87\130\uff87\142\uff87\143\uff87\145\uff87" +
    "\167\uff87\174\uff87\175\uff87\211\uff87\214\uff87\225\uff87\230" +
    "\uff87\255\uff87\303\uff87\325\uff87\342\uff87\u0104\uff87\u010f\uff87" +
    "\u016b\uff87\001\002\000\116\004\uff88\005\uff88\006\uff88\011" +
    "\uff88\014\uff88\015\uff88\016\uff88\017\uff88\020\uff88\021\uff88" +
    "\022\uff88\031\uff88\043\uff88\047\uff88\075\uff88\076\uff88\110" +
    "\uff88\112\uff88\123\uff88\126\uff88\130\uff88\142\uff88\143\uff88" +
    "\145\uff88\167\uff88\174\uff88\175\uff88\211\uff88\214\uff88\225" +
    "\uff88\230\uff88\255\uff88\303\uff88\325\uff88\342\uff88\u0104\uff88" +
    "\u010f\uff88\u016b\uff88\001\002\000\034\011\uff62\012\uff62\024" +
    "\uff62\031\uff62\032\uff62\037\uff62\043\uff62\260\uff62\u010b\uff62" +
    "\u0138\uff62\u013d\uff62\u0148\uff62\u0149\uff62\001\002\000\010\130" +
    "\271\167\270\230\267\001\002\000\034\011\uff5f\012\uff5f" +
    "\024\uff5f\031\uff5f\032\uff5f\037\uff5f\043\uff5f\260\uff5f\u010b" +
    "\uff5f\u0138\uff5f\u013d\uff5f\u0148\uff5f\u0149\uff5f\001\002\000\034" +
    "\011\uff5e\012\uff5e\024\uff5e\031\uff5e\032\uff5e\037\uff5e\043" +
    "\uff5e\260\uff5e\u010b\uff5e\u0138\uff5e\u013d\uff5e\u0148\uff5e\u0149\uff5e" +
    "\001\002\000\034\011\050\012\146\024\147\031\051\032" +
    "\163\037\152\043\157\260\165\u010b\160\u0138\145\u013d\166" +
    "\u0148\164\u0149\162\001\002\000\034\011\uff60\012\uff60\024" +
    "\uff60\031\uff60\032\uff60\037\uff60\043\uff60\260\uff60\u010b\uff60" +
    "\u0138\uff60\u013d\uff60\u0148\uff60\u0149\uff60\001\002\000\034\011" +
    "\uff61\012\uff61\024\uff61\031\uff61\032\uff61\037\uff61\043\uff61" +
    "\260\uff61\u010b\uff61\u0138\uff61\u013d\uff61\u0148\uff61\u0149\uff61\001" +
    "\002\000\034\011\uff63\012\uff63\024\uff63\031\uff63\032\uff63" +
    "\037\uff63\043\uff63\260\uff63\u010b\uff63\u0138\uff63\u013d\uff63\u0148" +
    "\uff63\u0149\uff63\001\002\000\044\021\uff64\022\uff64\047\uff64" +
    "\075\uff64\076\uff64\110\uff64\126\uff64\142\uff64\143\uff64\145" +
    "\uff64\175\uff64\214\uff64\225\uff64\325\uff64\342\uff64\u010f\uff64" +
    "\u016b\uff64\001\002\000\006\255\144\260\uff70\001\002\000" +
    "\004\260\265\001\002\000\044\021\uff5c\022\uff5c\047\uff5c" +
    "\075\uff5c\076\uff5c\110\uff5c\126\uff5c\142\uff5c\143\uff5c\145" +
    "\uff5c\175\uff5c\214\uff5c\225\uff5c\325\uff5c\342\uff5c\u010f\uff5c" +
    "\u016b\uff5c\001\002\000\044\021\uff5d\022\uff5d\047\uff5d\075" +
    "\uff5d\076\uff5d\110\uff5d\126\uff5d\142\uff5d\143\uff5d\145\uff5d" +
    "\175\uff5d\214\uff5d\225\uff5d\325\uff5d\342\uff5d\u010f\uff5d\u016b" +
    "\uff5d\001\002\000\034\011\050\012\146\024\147\031\051" +
    "\032\163\037\152\043\157\260\165\u010b\160\u0138\145\u013d" +
    "\166\u0148\164\u0149\162\001\002\000\004\032\276\001\002" +
    "\000\034\011\050\012\146\024\147\031\051\032\163\037" +
    "\152\043\157\260\165\u010b\160\u0138\145\u013d\166\u0148\164" +
    "\u0149\162\001\002\000\044\021\uff5b\022\uff5b\047\uff5b\075" +
    "\uff5b\076\uff5b\110\uff5b\126\uff5b\142\uff5b\143\uff5b\145\uff5b" +
    "\175\uff5b\214\uff5b\225\uff5b\325\uff5b\342\uff5b\u010f\uff5b\u016b" +
    "\uff5b\001\002\000\004\075\274\001\002\000\034\011\050" +
    "\012\146\024\147\031\051\032\163\037\152\043\157\260" +
    "\165\u010b\160\u0138\145\u013d\166\u0148\164\u0149\162\001\002" +
    "\000\044\021\uff59\022\uff59\047\uff59\075\uff59\076\uff59\110" +
    "\uff59\126\uff59\142\uff59\143\uff59\145\uff59\175\uff59\214\uff59" +
    "\225\uff59\325\uff59\342\uff59\u010f\uff59\u016b\uff59\001\002\000" +
    "\034\011\050\012\146\024\147\031\051\032\163\037\152" +
    "\043\157\260\165\u010b\160\u0138\145\u013d\166\u0148\164\u0149" +
    "\162\001\002\000\006\022\300\047\uff6a\001\002\000\034" +
    "\011\050\012\146\024\147\031\051\032\163\037\152\043" +
    "\157\260\165\u010b\160\u0138\145\u013d\166\u0148\164\u0149\162" +
    "\001\002\000\004\047\302\001\002\000\044\021\uff5a\022" +
    "\uff5a\047\uff5a\075\uff5a\076\uff5a\110\uff5a\126\uff5a\142\uff5a" +
    "\143\uff5a\145\uff5a\175\uff5a\214\uff5a\225\uff5a\325\uff5a\342" +
    "\uff5a\u010f\uff5a\u016b\uff5a\001\002\000\006\022\300\047\uff6a" +
    "\001\002\000\004\047\uff6b\001\002\000\044\021\uff58\022" +
    "\uff58\047\uff58\075\uff58\076\uff58\110\uff58\126\uff58\142\uff58" +
    "\143\uff58\145\uff58\175\uff58\214\uff58\225\uff58\325\uff58\342" +
    "\uff58\u010f\uff58\u016b\uff58\001\002\000\232\004\uffd8\005\uffd8" +
    "\006\uffd8\007\uffd8\010\uffd8\011\uffd8\014\uffd8\015\uffd8\016" +
    "\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\031\uffd8\043\uffd8" +
    "\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8\055" +
    "\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8\062\uffd8\063\uffd8" +
    "\064\uffd8\065\uffd8\066\uffd8\067\uffd8\070\uffd8\071\uffd8\072" +
    "\uffd8\075\uffd8\076\uffd8\110\uffd8\112\uffd8\123\uffd8\126\uffd8" +
    "\130\uffd8\142\uffd8\143\uffd8\145\uffd8\167\uffd8\174\uffd8\175" +
    "\uffd8\211\uffd8\214\uffd8\225\uffd8\230\uffd8\254\uffd8\255\uffd8" +
    "\303\uffd8\317\uffd8\325\uffd8\332\uffd8\342\uffd8\350\uffd8\u0100" +
    "\uffd8\u0104\uffd8\u010a\uffd8\u010f\uffd8\u0110\uffd8\u011d\uffd8\u0126\uffd8" +
    "\u0129\uffd8\u012c\uffd8\u013f\uffd8\u014b\uffd8\u0155\uffd8\u0158\uffd8\u0165" +
    "\uffd8\u0166\uffd8\u016b\uffd8\001\002\000\012\007\207\011\050" +
    "\012\210\031\051\001\002\000\122\004\uff7e\005\uff7e\006" +
    "\uff7e\007\uff7e\010\uff7e\011\uff7e\014\uff7e\015\uff7e\016\uff7e" +
    "\017\uff7e\020\uff7e\021\uff7e\022\uff7e\031\uff7e\043\uff7e\047" +
    "\uff7e\075\uff7e\076\uff7e\110\uff7e\112\uff7e\123\uff7e\126\uff7e" +
    "\130\uff7e\142\uff7e\143\uff7e\145\uff7e\167\uff7e\174\uff7e\175" +
    "\uff7e\211\uff7e\214\uff7e\225\uff7e\230\uff7e\255\uff7e\303\uff7e" +
    "\325\uff7e\342\uff7e\u0104\uff7e\u010f\uff7e\u016b\uff7e\001\002\000" +
    "\004\047\312\001\002\000\044\021\uff65\022\uff65\047\uff65" +
    "\075\224\076\225\110\uff65\126\uff65\142\uff65\143\uff65\145" +
    "\uff65\175\uff65\214\uff65\225\uff65\325\uff65\342\uff65\u010f\uff65" +
    "\u016b\uff65\001\002\000\040\021\uff68\022\uff68\047\uff68\110" +
    "\uff68\126\uff68\142\uff68\143\uff68\145\uff68\175\uff68\214\uff68" +
    "\225\uff68\325\uff68\342\uff68\u010f\uff68\u016b\uff68\001\002\000" +
    "\036\011\050\012\146\024\147\031\051\032\163\037\152" +
    "\043\157\260\165\273\317\u010b\160\u0138\145\u013d\166\u0148" +
    "\164\u0149\162\001\002\000\014\021\uff1a\022\320\123\uff1a" +
    "\342\uff1a\u010f\uff1a\001\002\000\014\021\uff1c\022\uff1c\123" +
    "\uff1c\342\uff1c\u010f\uff1c\001\002\000\014\021\uff1d\022\uff1d" +
    "\123\uff1d\342\uff1d\u010f\uff1d\001\002\000\006\011\050\031" +
    "\051\001\002\000\012\021\uff1e\123\uff1e\342\uff1e\u010f\uff1e" +
    "\001\002\000\012\021\uff1b\123\uff1b\342\uff1b\u010f\uff1b\001" +
    "\002\000\140\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0" +
    "\011\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021" +
    "\uffe0\022\uffe0\031\uffe0\032\uffe0\043\uffe0\047\uffe0\074\uffe0" +
    "\075\uffe0\076\uffe0\102\uffe0\110\uffe0\112\uffe0\123\uffe0\126" +
    "\uffe0\130\uffe0\142\uffe0\143\uffe0\145\uffe0\167\uffe0\174\uffe0" +
    "\175\uffe0\211\uffe0\212\uffe0\214\uffe0\225\uffe0\230\uffe0\255" +
    "\uffe0\273\uffe0\303\uffe0\322\uffe0\323\uffe0\325\uffe0\342\uffe0" +
    "\u0104\uffe0\u010f\uffe0\u016b\uffe0\001\002\000\006\011\050\031" +
    "\051\001\002\000\166\004\uffe1\005\uffe1\006\uffe1\007\uffe1" +
    "\010\uffe1\011\uffe1\012\uffe1\014\uffe1\015\uffe1\016\uffe1\017" +
    "\uffe1\020\uffe1\021\uffe1\022\uffe1\023\330\024\uffe1\031\uffe1" +
    "\032\uffe1\037\uffe1\043\uffe1\047\uffe1\074\uffe1\075\uffe1\076" +
    "\uffe1\102\uffe1\110\uffe1\112\uffe1\113\uffe1\116\uffe1\123\uffe1" +
    "\126\uffe1\130\uffe1\142\uffe1\143\uffe1\145\uffe1\155\uffe1\167" +
    "\uffe1\174\uffe1\175\uffe1\210\uffe1\211\uffe1\212\uffe1\214\uffe1" +
    "\225\uffe1\230\uffe1\255\uffe1\273\uffe1\302\uffe1\303\uffe1\322" +
    "\uffe1\323\uffe1\325\uffe1\342\uffe1\350\uffe1\352\uffe1\u0104\uffe1" +
    "\u010f\uffe1\u016b\uffe1\001\002\000\140\004\uffdf\005\uffdf\006" +
    "\uffdf\007\uffdf\010\uffdf\011\uffdf\014\uffdf\015\uffdf\016\uffdf" +
    "\017\uffdf\020\uffdf\021\uffdf\022\uffdf\031\uffdf\032\uffdf\043" +
    "\uffdf\047\uffdf\074\uffdf\075\uffdf\076\uffdf\102\uffdf\110\uffdf" +
    "\112\uffdf\123\uffdf\126\uffdf\130\uffdf\142\uffdf\143\uffdf\145" +
    "\uffdf\167\uffdf\174\uffdf\175\uffdf\211\uffdf\212\uffdf\214\uffdf" +
    "\225\uffdf\230\uffdf\255\uffdf\273\uffdf\303\uffdf\322\uffdf\323" +
    "\uffdf\325\uffdf\342\uffdf\u0104\uffdf\u010f\uffdf\u016b\uffdf\001\002" +
    "\000\164\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011" +
    "\uffe3\012\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3" +
    "\021\uffe3\022\uffe3\024\uffe3\031\uffe3\032\uffe3\037\uffe3\043" +
    "\uffe3\047\uffe3\074\uffe3\075\uffe3\076\uffe3\102\uffe3\110\uffe3" +
    "\112\uffe3\113\uffe3\116\uffe3\123\uffe3\126\uffe3\130\uffe3\142" +
    "\uffe3\143\uffe3\145\uffe3\155\uffe3\167\uffe3\174\uffe3\175\uffe3" +
    "\210\uffe3\211\uffe3\212\uffe3\214\uffe3\225\uffe3\230\uffe3\255" +
    "\uffe3\273\uffe3\302\uffe3\303\uffe3\322\uffe3\323\uffe3\325\uffe3" +
    "\342\uffe3\350\uffe3\352\uffe3\u0104\uffe3\u010f\uffe3\u016b\uffe3\001" +
    "\002\000\006\011\050\031\051\001\002\000\164\004\uffe2" +
    "\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\014" +
    "\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2" +
    "\024\uffe2\031\uffe2\032\uffe2\037\uffe2\043\uffe2\047\uffe2\074" +
    "\uffe2\075\uffe2\076\uffe2\102\uffe2\110\uffe2\112\uffe2\113\uffe2" +
    "\116\uffe2\123\uffe2\126\uffe2\130\uffe2\142\uffe2\143\uffe2\145" +
    "\uffe2\155\uffe2\167\uffe2\174\uffe2\175\uffe2\210\uffe2\211\uffe2" +
    "\212\uffe2\214\uffe2\225\uffe2\230\uffe2\255\uffe2\273\uffe2\302" +
    "\uffe2\303\uffe2\322\uffe2\323\uffe2\325\uffe2\342\uffe2\350\uffe2" +
    "\352\uffe2\u0104\uffe2\u010f\uffe2\u016b\uffe2\001\002\000\012\011" +
    "\uff27\031\uff27\123\333\307\uff27\001\002\000\010\011\uff28" +
    "\031\uff28\307\uff28\001\002\000\010\011\050\031\051\307" +
    "\337\001\002\000\006\021\uff29\u010f\uff29\001\002\000\012" +
    "\021\uff23\123\346\342\uff23\u010f\uff23\001\002\000\004\032" +
    "\340\001\002\000\006\011\050\031\051\001\002\000\006" +
    "\021\uff26\u010f\uff26\001\002\000\004\022\343\001\002\000" +
    "\004\012\344\001\002\000\004\047\345\001\002\000\006" +
    "\021\uff20\u010f\uff20\001\002\000\006\011\050\031\051\001" +
    "\002\000\010\021\uff56\342\137\u010f\uff56\001\002\000\006" +
    "\021\uff25\u010f\uff25\001\002\000\012\021\uff21\022\133\342" +
    "\uff21\u010f\uff21\001\002\000\010\021\uff24\342\uff24\u010f\uff24" +
    "\001\002\000\006\021\046\u010f\045\001\002\000\044\002" +
    "\uffff\003\033\102\030\125\022\146\uffff\173\010\200\026" +
    "\202\uffff\227\023\267\013\270\040\276\035\310\036\316" +
    "\034\322\032\346\004\351\041\001\002\000\010\002\ufffa" +
    "\146\ufffa\202\ufffa\001\002\000\050\002\uffef\003\uffef\102" +
    "\uffef\125\uffef\132\uffef\146\uffef\173\uffef\200\uffef\202\uffef" +
    "\227\uffef\267\uffef\270\uffef\276\uffef\310\uffef\316\uffef\322" +
    "\uffef\332\uffef\346\uffef\351\uffef\001\002\000\006\021\uffa8" +
    "\u010f\uffa8\001\002\000\006\021\uffad\u010f\uffad\001\002\000" +
    "\006\021\uffab\u010f\uffab\001\002\000\010\011\uffd9\031\uffd9" +
    "\164\u0100\001\002\000\010\011\uffd9\031\uffd9\164\u0100\001" +
    "\002\000\010\011\uffd9\031\uffd9\164\u0100\001\002\000\010" +
    "\011\ufe43\031\ufe43\164\ufe43\001\002\000\006\021\uffa7\u010f" +
    "\uffa7\001\002\000\010\011\ufe44\031\ufe44\164\ufe44\001\002" +
    "\000\006\021\uffac\u010f\uffac\001\002\000\010\011\uffd9\031" +
    "\uffd9\164\u0100\001\002\000\010\011\uffd9\031\uffd9\164\u0100" +
    "\001\002\000\006\021\uffae\u010f\uffae\001\002\000\010\011" +
    "\uffd9\031\uffd9\164\u0100\001\002\000\010\011\uffd9\031\uffd9" +
    "\164\u0100\001\002\000\006\021\uffa9\u010f\uffa9\001\002\000" +
    "\006\021\uffaa\u010f\uffaa\001\002\000\004\354\u0107\001\002" +
    "\000\006\011\050\031\051\001\002\000\010\021\uff96\022" +
    "\u0104\u010f\uff96\001\002\000\006\021\uff95\u010f\uff95\001\002" +
    "\000\006\011\050\031\051\001\002\000\010\021\uff96\022" +
    "\u0104\u010f\uff96\001\002\000\006\021\uff97\u010f\uff97\001\002" +
    "\000\006\011\uffda\031\uffda\001\002\000\006\011\050\031" +
    "\051\001\002\000\010\021\uff96\022\u0104\u010f\uff96\001\002" +
    "\000\006\021\uff98\u010f\uff98\001\002\000\006\011\050\031" +
    "\051\001\002\000\010\021\uffa4\022\u010d\u010f\uffa4\001\002" +
    "\000\006\011\050\031\051\001\002\000\006\021\uffa6\u010f" +
    "\uffa6\001\002\000\010\021\uffa4\022\u010d\u010f\uffa4\001\002" +
    "\000\006\021\uffa5\u010f\uffa5\001\002\000\006\011\050\031" +
    "\051\001\002\000\010\021\uff9d\022\u0113\u010f\uff9d\001\002" +
    "\000\006\011\050\031\051\001\002\000\006\021\uff9f\u010f" +
    "\uff9f\001\002\000\010\021\uff9d\022\u0113\u010f\uff9d\001\002" +
    "\000\006\021\uff9e\u010f\uff9e\001\002\000\006\011\050\031" +
    "\051\001\002\000\006\021\uffa3\u010f\uffa3\001\002\000\006" +
    "\011\050\031\051\001\002\000\004\u016b\u0120\001\002\000" +
    "\010\021\uff99\022\u011d\u010f\uff99\001\002\000\006\021\uff9c" +
    "\u010f\uff9c\001\002\000\006\011\050\031\051\001\002\000" +
    "\010\021\uff99\022\u011d\u010f\uff99\001\002\000\006\021\uff9a" +
    "\u010f\uff9a\001\002\000\006\011\050\031\051\001\002\000" +
    "\010\021\uff9b\022\uff9b\u010f\uff9b\001\002\000\006\011\050" +
    "\031\051\001\002\000\010\021\uffa0\022\u0124\u010f\uffa0\001" +
    "\002\000\006\011\050\031\051\001\002\000\006\021\uffa2" +
    "\u010f\uffa2\001\002\000\010\021\uffa0\022\u0124\u010f\uffa0\001" +
    "\002\000\006\021\uffa1\u010f\uffa1\001\002\000\010\002\ufffc" +
    "\146\ufffc\202\ufffc\001\002\000\006\021\ufe82\u010f\ufe82\001" +
    "\002\000\006\021\ufe7d\u010f\ufe7d\001\002\000\010\131\u0230" +
    "\360\367\u0106\365\001\002\000\010\011\050\031\051\235" +
    "\u0227\001\002\000\006\021\ufe7e\u010f\ufe7e\001\002\000\006" +
    "\011\050\031\051\001\002\000\006\021\ufe81\u010f\ufe81\001" +
    "\002\000\006\021\ufe80\u010f\ufe80\001\002\000\006\021\ufe83" +
    "\u010f\ufe83\001\002\000\006\011\050\031\051\001\002\000" +
    "\006\011\050\031\051\001\002\000\006\021\ufe7f\u010f\ufe7f" +
    "\001\002\000\004\102\u0136\001\002\000\010\131\ufe03\360" +
    "\ufe03\u0106\ufe03\001\002\000\006\032\u0139\112\ufe74\001\002" +
    "\000\004\112\ufe75\001\002\000\006\011\050\031\051\001" +
    "\002\000\004\112\u013b\001\002\000\004\173\010\001\002" +
    "\000\006\021\ufe76\u010f\ufe76\001\002\000\004\047\u013e\001" +
    "\002\000\020\021\uff51\112\uff51\273\uff51\323\uff51\342\uff51" +
    "\u010f\uff51\u016b\uff51\001\002\000\010\074\u0142\102\u0141\322" +
    "\u0144\001\002\000\006\021\ufe73\u010f\ufe73\001\002\000\004" +
    "\177\u0216\001\002\000\022\011\050\031\051\113\ufea3\155" +
    "\ufea3\172\u0152\210\u0156\302\ufea3\352\ufea3\001\002\000\006" +
    "\021\ufe72\u010f\ufe72\001\002\000\014\011\ufe63\031\ufe63\164" +
    "\ufe63\177\u0148\210\u0147\001\002\000\006\021\ufe70\u010f\ufe70" +
    "\001\002\000\010\021\ufe61\022\u014e\u010f\ufe61\001\002\000" +
    "\010\011\ufe64\031\ufe64\164\ufe64\001\002\000\010\011\uffd9" +
    "\031\uffd9\164\u0100\001\002\000\010\011\uffd9\031\uffd9\164" +
    "\u0100\001\002\000\006\011\050\031\051\001\002\000\010" +
    "\021\ufe66\022\ufe66\u010f\ufe66\001\002\000\006\011\050\031" +
    "\051\001\002\000\010\021\ufe65\022\ufe65\u010f\ufe65\001\002" +
    "\000\014\011\ufe63\031\ufe63\164\ufe63\177\u0148\210\u0147\001" +
    "\002\000\006\021\ufe67\u010f\ufe67\001\002\000\010\021\ufe61" +
    "\022\u014e\u010f\ufe61\001\002\000\006\021\ufe62\u010f\ufe62\001" +
    "\002\000\006\011\050\031\051\001\002\000\012\021\ufec8" +
    "\022\ufec8\047\ufec8\u010f\ufec8\001\002\000\012\021\ufec9\022" +
    "\ufec9\047\ufec9\u010f\ufec9\001\002\000\010\021\ufec5\022\u020f" +
    "\u010f\ufec5\001\002\000\006\011\050\031\051\001\002\000" +
    "\110\031\u019c\050\u01af\051\u01bb\052\u019d\053\u01bf\054\u01b3" +
    "\055\u01a5\056\u01a1\057\u01bc\060\u01b2\061\u01b1\062\u01c0\063" +
    "\u01a9\064\u01ad\065\u01a7\066\u01be\067\u01a4\070\u01aa\071\u01b9" +
    "\072\u01bd\254\u01b6\317\u019e\u0100\u01b8\u010a\u01b5\u0110\u01b4\u011d" +
    "\u019b\u0126\u01ba\u0129\u01a2\u012c\u019f\u013f\u01a0\u014b\u01a3\u0155\u01b0" +
    "\u0158\u01b7\u0165\u01a6\u0166\u01ae\001\002\000\012\113\u015b\155" +
    "\u015a\302\u015e\352\u015c\001\002\000\012\021\ufec7\022\ufec7" +
    "\047\ufec7\u010f\ufec7\001\002\000\006\032\ufece\255\u017a\001" +
    "\002\000\004\217\u0171\001\002\000\004\217\u016e\001\002" +
    "\000\012\021\ufe8f\022\ufe8f\047\ufe8f\u010f\ufe8f\001\002\000" +
    "\010\032\ufe9c\166\u015f\252\u0160\001\002\000\032\021\ufe9e" +
    "\022\ufe9e\032\ufe9e\047\ufe9e\113\ufe9e\116\ufe9e\155\ufe9e\172" +
    "\ufe9e\210\ufe9e\302\ufe9e\352\ufe9e\u010f\ufe9e\001\002\000\032" +
    "\021\ufe9d\022\ufe9d\032\ufe9d\047\ufe9d\113\ufe9d\116\ufe9d\155" +
    "\ufe9d\172\ufe9d\210\ufe9d\302\ufe9d\352\ufe9d\u010f\ufe9d\001\002" +
    "\000\004\032\u0162\001\002\000\006\011\050\031\051\001" +
    "\002\000\012\021\ufe8d\022\ufe8d\047\ufe8d\u010f\ufe8d\001\002" +
    "\000\012\022\uff41\047\uff41\303\u0166\u0104\u0165\001\002\000" +
    "\014\021\uff43\022\uff43\047\uff43\110\uff43\u010f\uff43\001\002" +
    "\000\014\021\uff42\022\uff42\047\uff42\110\uff42\u010f\uff42\001" +
    "\002\000\006\022\u0169\047\ufe88\001\002\000\004\047\u016d" +
    "\001\002\000\006\011\050\031\051\001\002\000\012\022" +
    "\uff41\047\uff41\303\u0166\u0104\u0165\001\002\000\006\022\u0169" +
    "\047\ufe88\001\002\000\004\047\ufe89\001\002\000\012\021" +
    "\ufe8a\022\ufe8a\047\ufe8a\u010f\ufe8a\001\002\000\010\032\ufe9c" +
    "\166\u015f\252\u0160\001\002\000\004\032\u0162\001\002\000" +
    "\012\021\ufe8e\022\ufe8e\047\ufe8e\u010f\ufe8e\001\002\000\004" +
    "\032\u0172\001\002\000\006\011\050\031\051\001\002\000" +
    "\004\116\u0174\001\002\000\006\011\050\031\051\001\002" +
    "\000\020\021\ufe98\022\ufe98\032\u0176\047\ufe98\255\ufe98\u010f" +
    "\ufe98\u016b\ufe98\001\002\000\006\011\050\031\051\001\002" +
    "\000\016\021\ufe96\022\ufe96\047\ufe96\255\ufe96\u010f\ufe96\u016b" +
    "\u0178\001\002\000\006\276\u0185\310\u0186\001\002\000\014" +
    "\021\ufece\022\ufece\047\ufece\255\u017a\u010f\ufece\001\002\000" +
    "\006\110\u017c\260\u017e\001\002\000\012\021\ufe8c\022\ufe8c" +
    "\047\ufe8c\u010f\ufe8c\001\002\000\004\121\u017f\001\002\000" +
    "\032\021\ufecf\022\ufecf\032\ufecf\047\ufecf\113\ufecf\116\ufecf" +
    "\154\ufecf\155\ufecf\210\ufecf\302\ufecf\352\ufecf\u010f\ufecf\001" +
    "\002\000\032\021\ufecc\022\ufecc\032\ufecc\047\ufecc\113\ufecc" +
    "\116\ufecc\154\ufecc\155\ufecc\210\ufecc\302\ufecc\352\ufecc\u010f" +
    "\ufecc\001\002\000\034\021\ufeca\022\ufeca\032\ufeca\047\ufeca" +
    "\113\ufeca\116\ufeca\154\ufeca\155\ufeca\210\ufeca\255\u0180\302" +
    "\ufeca\352\ufeca\u010f\ufeca\001\002\000\034\021\ufea9\022\ufea9" +
    "\032\ufea9\047\ufea9\113\ufea9\116\ufea9\154\ufea9\155\ufea9\210" +
    "\ufea9\260\u0183\302\ufea9\352\ufea9\u010f\ufea9\001\002\000\032" +
    "\021\ufecd\022\ufecd\032\ufecd\047\ufecd\113\ufecd\116\ufecd\154" +
    "\ufecd\155\ufecd\210\ufecd\302\ufecd\352\ufecd\u010f\ufecd\001\002" +
    "\000\032\021\ufecb\022\ufecb\032\ufecb\047\ufecb\113\ufecb\116" +
    "\ufecb\154\ufecb\155\ufecb\210\ufecb\302\ufecb\352\ufecb\u010f\ufecb" +
    "\001\002\000\032\021\ufeaa\022\ufeaa\032\ufeaa\047\ufeaa\113" +
    "\ufeaa\116\ufeaa\154\ufeaa\155\ufeaa\210\ufeaa\302\ufeaa\352\ufeaa" +
    "\u010f\ufeaa\001\002\000\032\021\ufe96\022\ufe96\047\ufe96\113" +
    "\ufe96\116\ufe96\155\ufe96\210\ufe96\255\ufe96\302\ufe96\352\ufe96" +
    "\u010f\ufe96\u016b\u0178\001\002\000\006\147\u0189\212\u0188\001" +
    "\002\000\006\147\u0189\212\u0188\001\002\000\032\021\ufe94" +
    "\022\ufe94\047\ufe94\113\ufe94\116\ufe94\155\ufe94\210\ufe94\255" +
    "\ufe94\302\ufe94\352\ufe94\u010f\ufe94\u016b\ufe94\001\002\000\006" +
    "\260\u018c\273\u018a\001\002\000\032\021\ufe91\022\ufe91\047" +
    "\ufe91\113\ufe91\116\ufe91\155\ufe91\210\ufe91\255\ufe91\302\ufe91" +
    "\352\ufe91\u010f\ufe91\u016b\ufe91\001\002\000\032\021\ufe92\022" +
    "\ufe92\047\ufe92\113\ufe92\116\ufe92\155\ufe92\210\ufe92\255\ufe92" +
    "\302\ufe92\352\ufe92\u010f\ufe92\u016b\ufe92\001\002\000\032\021" +
    "\ufe90\022\ufe90\047\ufe90\113\ufe90\116\ufe90\155\ufe90\210\ufe90" +
    "\255\ufe90\302\ufe90\352\ufe90\u010f\ufe90\u016b\ufe90\001\002\000" +
    "\032\021\ufe93\022\ufe93\047\ufe93\113\ufe93\116\ufe93\155\ufe93" +
    "\210\ufe93\255\ufe93\302\ufe93\352\ufe93\u010f\ufe93\u016b\ufe93\001" +
    "\002\000\032\021\ufe95\022\ufe95\047\ufe95\113\ufe95\116\ufe95" +
    "\155\ufe95\210\ufe95\255\ufe95\302\ufe95\352\ufe95\u010f\ufe95\u016b" +
    "\ufe95\001\002\000\030\021\ufe97\022\ufe97\047\ufe97\113\ufe97" +
    "\116\ufe97\155\ufe97\210\ufe97\255\ufe97\302\ufe97\352\ufe97\u010f" +
    "\ufe97\001\002\000\004\047\u0190\001\002\000\032\021\ufe99" +
    "\022\ufe99\047\ufe99\113\ufe99\116\ufe99\155\ufe99\210\ufe99\255" +
    "\ufe99\302\ufe99\352\ufe99\u010f\ufe99\u016b\ufe99\001\002\000\006" +
    "\022\u0193\047\ufe85\001\002\000\004\047\u0196\001\002\000" +
    "\006\011\050\031\051\001\002\000\006\022\u0193\047\ufe85" +
    "\001\002\000\004\047\ufe86\001\002\000\004\116\ufe87\001" +
    "\002\000\004\032\u0198\001\002\000\036\011\uff70\012\uff70" +
    "\024\uff70\031\uff70\032\141\037\uff70\043\uff70\255\144\260" +
    "\uff70\u010b\uff70\u0138\uff70\u013d\uff70\u0148\uff70\u0149\uff70\001\002" +
    "\000\004\047\u019a\001\002\000\012\021\ufe8b\022\ufe8b\047" +
    "\ufe8b\u010f\ufe8b\001\002\000\066\004\uffce\021\uffce\022\uffce" +
    "\032\uffce\046\uffce\047\uffce\110\uffce\112\uffce\113\uffce\116" +
    "\uffce\125\uffce\153\uffce\154\uffce\155\uffce\174\uffce\210\uffce" +
    "\255\uffce\260\uffce\273\uffce\302\uffce\350\uffce\352\uffce\u010f" +
    "\uffce\u0172\uffce\u0175\uffce\u0176\uffce\001\002\000\106\050\u01af" +
    "\051\u01bb\052\u019d\053\u01bf\054\u01b3\055\u01a5\056\u01a1\057" +
    "\u01bc\060\u01b2\061\u01b1\062\u01c0\063\u01a9\064\u01ad\065\u01a7" +
    "\066\u01be\067\u01a4\070\u01aa\071\u01b9\072\u01bd\254\u01b6\317" +
    "\u019e\u0100\u01b8\u010a\u01b5\u0110\u01b4\u011d\u019b\u0126\u01ba\u0129\u01a2" +
    "\u012c\u019f\u013f\u01a0\u014b\u01a3\u0155\u01b0\u0158\u01b7\u0165\u01a6\u0166" +
    "\u01ae\001\002\000\066\004\uffc3\021\uffc3\022\uffc3\032\uffc3" +
    "\046\uffc3\047\uffc3\110\uffc3\112\uffc3\113\uffc3\116\uffc3\125" +
    "\uffc3\153\uffc3\154\uffc3\155\uffc3\174\uffc3\210\uffc3\255\uffc3" +
    "\260\uffc3\273\uffc3\302\uffc3\350\uffc3\352\uffc3\u010f\uffc3\u0172" +
    "\uffc3\u0175\uffc3\u0176\uffc3\001\002\000\066\004\uffcf\021\uffcf" +
    "\022\uffcf\032\uffcf\046\uffcf\047\uffcf\110\uffcf\112\uffcf\113" +
    "\uffcf\116\uffcf\125\uffcf\153\uffcf\154\uffcf\155\uffcf\174\uffcf" +
    "\210\uffcf\255\uffcf\260\uffcf\273\uffcf\302\uffcf\350\uffcf\352" +
    "\uffcf\u010f\uffcf\u0172\uffcf\u0175\uffcf\u0176\uffcf\001\002\000\066" +
    "\004\uffd3\021\uffd3\022\uffd3\032\uffd3\046\uffd3\047\uffd3\110" +
    "\uffd3\112\uffd3\113\uffd3\116\uffd3\125\uffd3\153\uffd3\154\uffd3" +
    "\155\uffd3\174\uffd3\210\uffd3\255\uffd3\260\uffd3\273\uffd3\302" +
    "\uffd3\350\uffd3\352\uffd3\u010f\uffd3\u0172\uffd3\u0175\uffd3\u0176\uffd3" +
    "\001\002\000\066\004\uffca\021\uffca\022\uffca\032\uffca\046" +
    "\uffca\047\uffca\110\uffca\112\uffca\113\uffca\116\uffca\125\uffca" +
    "\153\uffca\154\uffca\155\uffca\174\uffca\210\uffca\255\uffca\260" +
    "\uffca\273\uffca\302\uffca\350\uffca\352\uffca\u010f\uffca\u0172\uffca" +
    "\u0175\uffca\u0176\uffca\001\002\000\066\004\uffbf\021\uffbf\022" +
    "\uffbf\032\uffbf\046\uffbf\047\uffbf\110\uffbf\112\uffbf\113\uffbf" +
    "\116\uffbf\125\uffbf\153\uffbf\154\uffbf\155\uffbf\174\uffbf\210" +
    "\uffbf\255\uffbf\260\uffbf\273\uffbf\302\uffbf\350\uffbf\352\uffbf" +
    "\u010f\uffbf\u0172\uffbf\u0175\uffbf\u0176\uffbf\001\002\000\066\004" +
    "\uffc9\021\uffc9\022\uffc9\032\uffc9\046\uffc9\047\uffc9\110\uffc9" +
    "\112\uffc9\113\uffc9\116\uffc9\125\uffc9\153\uffc9\154\uffc9\155" +
    "\uffc9\174\uffc9\210\uffc9\255\uffc9\260\uffc9\273\uffc9\302\uffc9" +
    "\350\uffc9\352\uffc9\u010f\uffc9\u0172\uffc9\u0175\uffc9\u0176\uffc9\001" +
    "\002\000\066\004\uffd1\021\uffd1\022\uffd1\032\uffd1\046\uffd1" +
    "\047\uffd1\110\uffd1\112\uffd1\113\uffd1\116\uffd1\125\uffd1\153" +
    "\uffd1\154\uffd1\155\uffd1\174\uffd1\210\uffd1\255\uffd1\260\uffd1" +
    "\273\uffd1\302\uffd1\350\uffd1\352\uffd1\u010f\uffd1\u0172\uffd1\u0175" +
    "\uffd1\u0176\uffd1\001\002\000\066\004\uffb6\021\uffb6\022\uffb6" +
    "\032\uffb6\046\uffb6\047\uffb6\110\uffb6\112\uffb6\113\uffb6\116" +
    "\uffb6\125\uffb6\153\uffb6\154\uffb6\155\uffb6\174\uffb6\210\uffb6" +
    "\255\uffb6\260\uffb6\273\uffb6\302\uffb6\350\uffb6\352\uffb6\u010f" +
    "\uffb6\u0172\uffb6\u0175\uffb6\u0176\uffb6\001\002\000\066\004\uffc0" +
    "\021\uffc0\022\uffc0\032\uffc0\046\uffc0\047\uffc0\110\uffc0\112" +
    "\uffc0\113\uffc0\116\uffc0\125\uffc0\153\uffc0\154\uffc0\155\uffc0" +
    "\174\uffc0\210\uffc0\255\uffc0\260\uffc0\273\uffc0\302\uffc0\350" +
    "\uffc0\352\uffc0\u010f\uffc0\u0172\uffc0\u0175\uffc0\u0176\uffc0\001\002" +
    "\000\066\004\uffc6\021\uffc6\022\uffc6\032\uffc6\046\uffc6\047" +
    "\uffc6\110\uffc6\112\uffc6\113\uffc6\116\uffc6\125\uffc6\153\uffc6" +
    "\154\uffc6\155\uffc6\174\uffc6\210\uffc6\255\uffc6\260\uffc6\273" +
    "\uffc6\302\uffc6\350\uffc6\352\uffc6\u010f\uffc6\u0172\uffc6\u0175\uffc6" +
    "\u0176\uffc6\001\002\000\066\004\uffb8\021\uffb8\022\uffb8\032" +
    "\uffb8\046\uffb8\047\uffb8\110\uffb8\112\uffb8\113\uffb8\116\uffb8" +
    "\125\uffb8\153\uffb8\154\uffb8\155\uffb8\174\uffb8\210\uffb8\255" +
    "\uffb8\260\uffb8\273\uffb8\302\uffb8\350\uffb8\352\uffb8\u010f\uffb8" +
    "\u0172\uffb8\u0175\uffb8\u0176\uffb8\001\002\000\060\004\uffb1\021" +
    "\uffb1\022\uffb1\032\u0206\047\uffb1\110\uffb1\112\uffb1\113\uffb1" +
    "\116\uffb1\153\uffb1\154\uffb1\155\uffb1\174\uffb1\210\uffb1\255" +
    "\uffb1\260\uffb1\273\uffb1\302\uffb1\350\uffb1\352\uffb1\u010f\uffb1" +
    "\u0172\uffb1\u0175\uffb1\001\002\000\066\004\uffba\021\uffba\022" +
    "\uffba\032\uffba\046\uffba\047\uffba\110\uffba\112\uffba\113\uffba" +
    "\116\uffba\125\uffba\153\uffba\154\uffba\155\uffba\174\uffba\210" +
    "\uffba\255\uffba\260\uffba\273\uffba\302\uffba\350\uffba\352\uffba" +
    "\u010f\uffba\u0172\uffba\u0175\uffba\u0176\uffba\001\002\000\066\004" +
    "\uffb5\021\uffb5\022\uffb5\032\uffb5\046\uffb5\047\uffb5\110\uffb5" +
    "\112\uffb5\113\uffb5\116\uffb5\125\uffb5\153\uffb5\154\uffb5\155" +
    "\uffb5\174\uffb5\210\uffb5\255\uffb5\260\uffb5\273\uffb5\302\uffb5" +
    "\350\uffb5\352\uffb5\u010f\uffb5\u0172\uffb5\u0175\uffb5\u0176\uffb5\001" +
    "\002\000\060\004\uffd6\021\uffd6\022\uffd6\032\uffd6\047\uffd6" +
    "\110\uffd6\112\uffd6\113\uffd6\116\uffd6\153\uffd6\154\uffd6\155" +
    "\uffd6\174\uffd6\210\uffd6\255\uffd6\260\uffd6\273\uffd6\302\uffd6" +
    "\350\uffd6\352\uffd6\u010f\uffd6\u0172\uffd6\u0175\uffd6\001\002\000" +
    "\044\021\ufeb3\022\ufeb3\047\ufeb3\110\ufeb3\113\ufeb3\116\ufeb3" +
    "\153\ufeb3\154\ufeb3\155\ufeb3\174\u01c1\210\ufeb3\255\ufeb3\260" +
    "\ufeb3\273\ufeb3\302\ufeb3\352\ufeb3\u010f\ufeb3\001\002\000\066" +
    "\004\uffb9\021\uffb9\022\uffb9\032\uffb9\046\uffb9\047\uffb9\110" +
    "\uffb9\112\uffb9\113\uffb9\116\uffb9\125\uffb9\153\uffb9\154\uffb9" +
    "\155\uffb9\174\uffb9\210\uffb9\255\uffb9\260\uffb9\273\uffb9\302" +
    "\uffb9\350\uffb9\352\uffb9\u010f\uffb9\u0172\uffb9\u0175\uffb9\u0176\uffb9" +
    "\001\002\000\066\004\uffd4\021\uffd4\022\uffd4\032\uffd4\046" +
    "\uffd4\047\uffd4\110\uffd4\112\uffd4\113\uffd4\116\uffd4\125\uffd4" +
    "\153\uffd4\154\uffd4\155\uffd4\174\uffd4\210\uffd4\255\uffd4\260" +
    "\uffd4\273\uffd4\302\uffd4\350\uffd4\352\uffd4\u010f\uffd4\u0172\uffd4" +
    "\u0175\uffd4\u0176\uffd4\001\002\000\066\004\uffc5\021\uffc5\022" +
    "\uffc5\032\uffc5\046\uffc5\047\uffc5\110\uffc5\112\uffc5\113\uffc5" +
    "\116\uffc5\125\uffc5\153\uffc5\154\uffc5\155\uffc5\174\uffc5\210" +
    "\uffc5\255\uffc5\260\uffc5\273\uffc5\302\uffc5\350\uffc5\352\uffc5" +
    "\u010f\uffc5\u0172\uffc5\u0175\uffc5\u0176\uffc5\001\002\000\066\004" +
    "\uffc8\021\uffc8\022\uffc8\032\uffc8\046\uffc8\047\uffc8\110\uffc8" +
    "\112\uffc8\113\uffc8\116\uffc8\125\uffc8\153\uffc8\154\uffc8\155" +
    "\uffc8\174\uffc8\210\uffc8\255\uffc8\260\uffc8\273\uffc8\302\uffc8" +
    "\350\uffc8\352\uffc8\u010f\uffc8\u0172\uffc8\u0175\uffc8\u0176\uffc8\001" +
    "\002\000\066\004\uffbc\021\uffbc\022\uffbc\032\uffbc\046\uffbc" +
    "\047\uffbc\110\uffbc\112\uffbc\113\uffbc\116\uffbc\125\uffbc\153" +
    "\uffbc\154\uffbc\155\uffbc\174\uffbc\210\uffbc\255\uffbc\260\uffbc" +
    "\273\uffbc\302\uffbc\350\uffbc\352\uffbc\u010f\uffbc\u0172\uffbc\u0175" +
    "\uffbc\u0176\uffbc\001\002\000\066\004\uffbd\021\uffbd\022\uffbd" +
    "\032\uffbd\046\uffbd\047\uffbd\110\uffbd\112\uffbd\113\uffbd\116" +
    "\uffbd\125\uffbd\153\uffbd\154\uffbd\155\uffbd\174\uffbd\210\uffbd" +
    "\255\uffbd\260\uffbd\273\uffbd\302\uffbd\350\uffbd\352\uffbd\u010f" +
    "\uffbd\u0172\uffbd\u0175\uffbd\u0176\uffbd\001\002\000\066\004\uffc1" +
    "\021\uffc1\022\uffc1\032\uffc1\046\uffc1\047\uffc1\110\uffc1\112" +
    "\uffc1\113\uffc1\116\uffc1\125\uffc1\153\uffc1\154\uffc1\155\uffc1" +
    "\174\uffc1\210\uffc1\255\uffc1\260\uffc1\273\uffc1\302\uffc1\350" +
    "\uffc1\352\uffc1\u010f\uffc1\u0172\uffc1\u0175\uffc1\u0176\uffc1\001\002" +
    "\000\066\004\uffd0\021\uffd0\022\uffd0\032\uffd0\046\uffd0\047" +
    "\uffd0\110\uffd0\112\uffd0\113\uffd0\116\uffd0\125\uffd0\153\uffd0" +
    "\154\uffd0\155\uffd0\174\uffd0\210\uffd0\255\uffd0\260\uffd0\273" +
    "\uffd0\302\uffd0\350\uffd0\352\uffd0\u010f\uffd0\u0172\uffd0\u0175\uffd0" +
    "\u0176\uffd0\001\002\000\066\004\uffcb\021\uffcb\022\uffcb\032" +
    "\uffcb\046\uffcb\047\uffcb\110\uffcb\112\uffcb\113\uffcb\116\uffcb" +
    "\125\uffcb\153\uffcb\154\uffcb\155\uffcb\174\uffcb\210\uffcb\255" +
    "\uffcb\260\uffcb\273\uffcb\302\uffcb\350\uffcb\352\uffcb\u010f\uffcb" +
    "\u0172\uffcb\u0175\uffcb\u0176\uffcb\001\002\000\060\021\uffcd\022" +
    "\uffcd\032\uffcd\046\uffcd\047\uffcd\110\uffcd\112\uffcd\113\uffcd" +
    "\116\uffcd\125\uffcd\153\uffcd\154\uffcd\155\uffcd\174\uffcd\210" +
    "\uffcd\255\uffcd\260\uffcd\273\uffcd\302\uffcd\350\uffcd\352\uffcd" +
    "\u010f\uffcd\u0176\uffcd\001\002\000\066\004\uffcc\021\uffcc\022" +
    "\uffcc\032\uffcc\046\uffcc\047\uffcc\110\uffcc\112\uffcc\113\uffcc" +
    "\116\uffcc\125\uffcc\153\uffcc\154\uffcc\155\uffcc\174\uffcc\210" +
    "\uffcc\255\uffcc\260\uffcc\273\uffcc\302\uffcc\350\uffcc\352\uffcc" +
    "\u010f\uffcc\u0172\uffcc\u0175\uffcc\u0176\uffcc\001\002\000\066\004" +
    "\uffd2\021\uffd2\022\uffd2\032\uffd2\046\uffd2\047\uffd2\110\uffd2" +
    "\112\uffd2\113\uffd2\116\uffd2\125\uffd2\153\uffd2\154\uffd2\155" +
    "\uffd2\174\uffd2\210\uffd2\255\uffd2\260\uffd2\273\uffd2\302\uffd2" +
    "\350\uffd2\352\uffd2\u010f\uffd2\u0172\uffd2\u0175\uffd2\u0176\uffd2\001" +
    "\002\000\066\004\uffb4\021\uffb4\022\uffb4\032\uffb4\046\uffb4" +
    "\047\uffb4\110\uffb4\112\uffb4\113\uffb4\116\uffb4\125\uffb4\153" +
    "\uffb4\154\uffb4\155\uffb4\174\uffb4\210\uffb4\255\uffb4\260\uffb4" +
    "\273\uffb4\302\uffb4\350\uffb4\352\uffb4\u010f\uffb4\u0172\uffb4\u0175" +
    "\uffb4\u0176\uffb4\001\002\000\066\004\uffc7\021\uffc7\022\uffc7" +
    "\032\uffc7\046\uffc7\047\uffc7\110\uffc7\112\uffc7\113\uffc7\116" +
    "\uffc7\125\uffc7\153\uffc7\154\uffc7\155\uffc7\174\uffc7\210\uffc7" +
    "\255\uffc7\260\uffc7\273\uffc7\302\uffc7\350\uffc7\352\uffc7\u010f" +
    "\uffc7\u0172\uffc7\u0175\uffc7\u0176\uffc7\001\002\000\066\004\uffc4" +
    "\021\uffc4\022\uffc4\032\uffc4\046\uffc4\047\uffc4\110\uffc4\112" +
    "\uffc4\113\uffc4\116\uffc4\125\uffc4\153\uffc4\154\uffc4\155\uffc4" +
    "\174\uffc4\210\uffc4\255\uffc4\260\uffc4\273\uffc4\302\uffc4\350" +
    "\uffc4\352\uffc4\u010f\uffc4\u0172\uffc4\u0175\uffc4\u0176\uffc4\001\002" +
    "\000\066\004\uffbe\021\uffbe\022\uffbe\032\uffbe\046\uffbe\047" +
    "\uffbe\110\uffbe\112\uffbe\113\uffbe\116\uffbe\125\uffbe\153\uffbe" +
    "\154\uffbe\155\uffbe\174\uffbe\210\uffbe\255\uffbe\260\uffbe\273" +
    "\uffbe\302\uffbe\350\uffbe\352\uffbe\u010f\uffbe\u0172\uffbe\u0175\uffbe" +
    "\u0176\uffbe\001\002\000\066\004\uffb3\021\uffb3\022\uffb3\032" +
    "\uffb3\046\uffb3\047\uffb3\110\uffb3\112\uffb3\113\uffb3\116\uffb3" +
    "\125\uffb3\153\uffb3\154\uffb3\155\uffb3\174\uffb3\210\uffb3\255" +
    "\uffb3\260\uffb3\273\uffb3\302\uffb3\350\uffb3\352\uffb3\u010f\uffb3" +
    "\u0172\uffb3\u0175\uffb3\u0176\uffb3\001\002\000\066\004\uffb7\021" +
    "\uffb7\022\uffb7\032\uffb7\046\uffb7\047\uffb7\110\uffb7\112\uffb7" +
    "\113\uffb7\116\uffb7\125\uffb7\153\uffb7\154\uffb7\155\uffb7\174" +
    "\uffb7\210\uffb7\255\uffb7\260\uffb7\273\uffb7\302\uffb7\350\uffb7" +
    "\352\uffb7\u010f\uffb7\u0172\uffb7\u0175\uffb7\u0176\uffb7\001\002\000" +
    "\066\004\uffc2\021\uffc2\022\uffc2\032\uffc2\046\uffc2\047\uffc2" +
    "\110\uffc2\112\uffc2\113\uffc2\116\uffc2\125\uffc2\153\uffc2\154" +
    "\uffc2\155\uffc2\174\uffc2\210\uffc2\255\uffc2\260\uffc2\273\uffc2" +
    "\302\uffc2\350\uffc2\352\uffc2\u010f\uffc2\u0172\uffc2\u0175\uffc2\u0176" +
    "\uffc2\001\002\000\066\004\uffbb\021\uffbb\022\uffbb\032\uffbb" +
    "\046\uffbb\047\uffbb\110\uffbb\112\uffbb\113\uffbb\116\uffbb\125" +
    "\uffbb\153\uffbb\154\uffbb\155\uffbb\174\uffbb\210\uffbb\255\uffbb" +
    "\260\uffbb\273\uffbb\302\uffbb\350\uffbb\352\uffbb\u010f\uffbb\u0172" +
    "\uffbb\u0175\uffbb\u0176\uffbb\001\002\000\006\011\050\031\051" +
    "\001\002\000\042\021\ufec1\022\ufec1\047\ufec1\110\ufeba\113" +
    "\u01d0\116\ufe9a\153\u01c3\154\u01ca\155\u01cd\210\u01c9\255\u01ce" +
    "\260\ufeba\273\u01c8\302\u01c7\352\u01cf\u010f\ufec1\001\002\000" +
    "\034\021\ufeab\022\ufeab\032\u01ef\047\ufeab\113\ufeab\116\ufeab" +
    "\154\ufeab\155\ufeab\210\ufeab\255\ufeab\302\ufeab\352\ufeab\u010f" +
    "\ufeab\001\002\000\012\021\ufec4\022\ufec4\047\ufec4\u010f\ufec4" +
    "\001\002\000\012\021\ufec2\022\ufec2\047\ufec2\u010f\ufec2\001" +
    "\002\000\006\110\u01f6\260\u01f7\001\002\000\032\021\ufe9c" +
    "\022\ufe9c\047\ufe9c\113\ufe9c\116\ufe9c\155\ufe9c\166\u015f\210" +
    "\ufe9c\252\u0160\302\ufe9c\352\ufe9c\u010f\ufe9c\001\002\000\012" +
    "\012\u01e8\037\u01e4\043\u01e7\260\u01e6\001\002\000\006\011" +
    "\050\031\051\001\002\000\026\021\ufea5\022\ufea5\047\ufea5" +
    "\113\ufea3\116\ufea3\155\ufea3\210\u0156\302\ufea3\352\ufea3\u010f" +
    "\ufea5\001\002\000\004\116\u01dc\001\002\000\026\021\ufea5" +
    "\022\ufea5\047\ufea5\113\ufea3\116\ufea3\155\ufea3\210\u0156\302" +
    "\ufea3\352\ufea3\u010f\ufea5\001\002\000\006\032\ufece\255\u017a" +
    "\001\002\000\006\110\ufebb\260\ufebb\001\002\000\004\217" +
    "\u01d2\001\002\000\004\217\u01d1\001\002\000\004\116\ufe9b" +
    "\001\002\000\032\021\ufe9c\022\ufe9c\047\ufe9c\113\ufe9c\116" +
    "\ufe9c\155\ufe9c\166\u015f\210\ufe9c\252\u0160\302\ufe9c\352\ufe9c" +
    "\u010f\ufe9c\001\002\000\026\021\ufea2\022\ufea2\047\ufea2\113" +
    "\ufea2\116\ufea2\155\ufea2\210\ufea2\302\ufea2\352\ufea2\u010f\ufea2" +
    "\001\002\000\004\032\u01d5\001\002\000\036\011\uff70\012" +
    "\uff70\024\uff70\031\uff70\032\141\037\uff70\043\uff70\255\144" +
    "\260\uff70\u010b\uff70\u0138\uff70\u013d\uff70\u0148\uff70\u0149\uff70\001" +
    "\002\000\004\047\u01d7\001\002\000\026\021\ufe9f\022\ufe9f" +
    "\047\ufe9f\113\ufe9f\116\ufe9f\155\ufe9f\210\ufe9f\302\ufe9f\352" +
    "\ufe9f\u010f\ufe9f\001\002\000\012\021\ufebc\022\ufebc\047\ufebc" +
    "\u010f\ufebc\001\002\000\014\113\u01d0\116\ufe9a\155\u01cd\302" +
    "\u01c7\352\u01cf\001\002\000\026\021\ufea5\022\ufea5\047\ufea5" +
    "\113\ufea3\116\ufea3\155\ufea3\210\u0156\302\ufea3\352\ufea3\u010f" +
    "\ufea5\001\002\000\012\021\ufea6\022\ufea6\047\ufea6\u010f\ufea6" +
    "\001\002\000\006\011\050\031\051\001\002\000\034\021" +
    "\ufe98\022\ufe98\032\u0176\047\ufe98\113\ufe98\116\ufe98\155\ufe98" +
    "\210\ufe98\255\ufe98\302\ufe98\352\ufe98\u010f\ufe98\u016b\ufe98\001" +
    "\002\000\032\021\ufe96\022\ufe96\047\ufe96\113\ufe96\116\ufe96" +
    "\155\ufe96\210\ufe96\255\ufe96\302\ufe96\352\ufe96\u010f\ufe96\u016b" +
    "\u0178\001\002\000\030\021\ufece\022\ufece\047\ufece\113\ufece" +
    "\116\ufece\155\ufece\210\ufece\255\u017a\302\ufece\352\ufece\u010f" +
    "\ufece\001\002\000\026\021\ufea0\022\ufea0\047\ufea0\113\ufea0" +
    "\116\ufea0\155\ufea0\210\ufea0\302\ufea0\352\ufea0\u010f\ufea0\001" +
    "\002\000\012\021\ufebd\022\ufebd\047\ufebd\u010f\ufebd\001\002" +
    "\000\030\110\ufeba\113\u01d0\116\ufe9a\153\u01c3\154\u01ca\155" +
    "\u01cd\255\u01ce\260\ufeba\273\u01c8\302\u01c7\352\u01cf\001\002" +
    "\000\012\021\ufec3\022\ufec3\047\ufec3\u010f\ufec3\001\002\000" +
    "\034\021\ufeb1\022\ufeb1\047\ufeb1\113\ufeb1\116\ufeb1\153\ufeb1" +
    "\154\ufeb1\155\ufeb1\210\ufeb1\255\ufeb1\302\ufeb1\352\ufeb1\u010f" +
    "\ufeb1\001\002\000\034\021\ufead\022\ufead\047\ufead\113\ufead" +
    "\116\ufead\153\u01e9\154\ufead\155\ufead\210\ufead\255\ufead\302" +
    "\ufead\352\ufead\u010f\ufead\001\002\000\034\021\ufeaf\022\ufeaf" +
    "\047\ufeaf\113\ufeaf\116\ufeaf\153\ufeaf\154\ufeaf\155\ufeaf\210" +
    "\ufeaf\255\ufeaf\302\ufeaf\352\ufeaf\u010f\ufeaf\001\002\000\034" +
    "\021\ufeb0\022\ufeb0\047\ufeb0\113\ufeb0\116\ufeb0\153\ufeb0\154" +
    "\ufeb0\155\ufeb0\210\ufeb0\255\ufeb0\302\ufeb0\352\ufeb0\u010f\ufeb0" +
    "\001\002\000\034\021\ufeb2\022\ufeb2\047\ufeb2\113\ufeb2\116" +
    "\ufeb2\153\ufeb2\154\ufeb2\155\ufeb2\210\ufeb2\255\ufeb2\302\ufeb2" +
    "\352\ufeb2\u010f\ufeb2\001\002\000\034\021\ufeab\022\ufeab\032" +
    "\u01ef\047\ufeab\113\ufeab\116\ufeab\154\ufeab\155\ufeab\210\ufeab" +
    "\255\ufeab\302\ufeab\352\ufeab\u010f\ufeab\001\002\000\032\021" +
    "\ufece\022\ufece\047\ufece\113\ufece\116\ufece\154\ufece\155\ufece" +
    "\210\ufece\255\u017a\302\ufece\352\ufece\u010f\ufece\001\002\000" +
    "\030\021\ufea7\022\ufea7\047\ufea7\113\ufea7\116\ufea7\154\u01ec" +
    "\155\ufea7\210\ufea7\302\ufea7\352\ufea7\u010f\ufea7\001\002\000" +
    "\026\021\ufea8\022\ufea8\047\ufea8\113\ufea8\116\ufea8\155\ufea8" +
    "\210\ufea8\302\ufea8\352\ufea8\u010f\ufea8\001\002\000\026\021" +
    "\ufea5\022\ufea5\047\ufea5\113\ufea3\116\ufea3\155\ufea3\210\u0156" +
    "\302\ufea3\352\ufea3\u010f\ufea5\001\002\000\012\021\ufec0\022" +
    "\ufec0\047\ufec0\u010f\ufec0\001\002\000\004\012\u01f1\001\002" +
    "\000\032\021\ufeae\022\ufeae\047\ufeae\113\ufeae\116\ufeae\154" +
    "\ufeae\155\ufeae\210\ufeae\255\ufeae\302\ufeae\352\ufeae\u010f\ufeae" +
    "\001\002\000\004\022\u01f2\001\002\000\004\012\u01f3\001" +
    "\002\000\004\047\u01f4\001\002\000\032\021\ufeac\022\ufeac" +
    "\047\ufeac\113\ufeac\116\ufeac\154\ufeac\155\ufeac\210\ufeac\255" +
    "\ufeac\302\ufeac\352\ufeac\u010f\ufeac\001\002\000\026\021\ufea1" +
    "\022\ufea1\047\ufea1\113\ufea1\116\ufea1\155\ufea1\210\ufea1\302" +
    "\ufea1\352\ufea1\u010f\ufea1\001\002\000\004\121\u01fb\001\002" +
    "\000\030\021\ufeb9\022\ufeb9\047\ufeb9\113\ufeb9\116\ufeb9\154" +
    "\ufeb9\155\ufeb9\210\ufeb9\302\ufeb9\352\ufeb9\u010f\ufeb9\001\002" +
    "\000\030\021\ufea7\022\ufea7\047\ufea7\113\ufea7\116\ufea7\154" +
    "\u01ec\155\ufea7\210\ufea7\302\ufea7\352\ufea7\u010f\ufea7\001\002" +
    "\000\026\021\ufea5\022\ufea5\047\ufea5\113\ufea3\116\ufea3\155" +
    "\ufea3\210\u0156\302\ufea3\352\ufea3\u010f\ufea5\001\002\000\012" +
    "\021\ufebe\022\ufebe\047\ufebe\u010f\ufebe\001\002\000\034\021" +
    "\ufeb5\022\ufeb5\047\ufeb5\113\ufeb5\116\ufeb5\154\ufeb5\155\ufeb5" +
    "\210\ufeb5\255\u01fd\260\u01fe\302\ufeb5\352\ufeb5\u010f\ufeb5\001" +
    "\002\000\030\021\ufeb8\022\ufeb8\047\ufeb8\113\ufeb8\116\ufeb8" +
    "\154\ufeb8\155\ufeb8\210\ufeb8\302\ufeb8\352\ufeb8\u010f\ufeb8\001" +
    "\002\000\004\260\u01ff\001\002\000\030\021\ufeb6\022\ufeb6" +
    "\047\ufeb6\113\ufeb6\116\ufeb6\154\ufeb6\155\ufeb6\210\ufeb6\302" +
    "\ufeb6\352\ufeb6\u010f\ufeb6\001\002\000\030\021\ufeb7\022\ufeb7" +
    "\047\ufeb7\113\ufeb7\116\ufeb7\154\ufeb7\155\ufeb7\210\ufeb7\302" +
    "\ufeb7\352\ufeb7\u010f\ufeb7\001\002\000\032\021\ufece\022\ufece" +
    "\047\ufece\113\ufece\116\ufece\154\ufece\155\ufece\210\ufece\255" +
    "\u017a\302\ufece\352\ufece\u010f\ufece\001\002\000\030\021\ufea7" +
    "\022\ufea7\047\ufea7\113\ufea7\116\ufea7\154\u01ec\155\ufea7\210" +
    "\ufea7\302\ufea7\352\ufea7\u010f\ufea7\001\002\000\026\021\ufea5" +
    "\022\ufea5\047\ufea5\113\ufea3\116\ufea3\155\ufea3\210\u0156\302" +
    "\ufea3\352\ufea3\u010f\ufea5\001\002\000\012\021\ufebf\022\ufebf" +
    "\047\ufebf\u010f\ufebf\001\002\000\042\021\ufeb4\022\ufeb4\047" +
    "\ufeb4\110\ufeb4\113\ufeb4\116\ufeb4\153\ufeb4\154\ufeb4\155\ufeb4" +
    "\210\ufeb4\255\ufeb4\260\ufeb4\273\ufeb4\302\ufeb4\352\ufeb4\u010f" +
    "\ufeb4\001\002\000\056\004\uffd7\021\uffd7\022\uffd7\047\uffd7" +
    "\110\uffd7\112\uffd7\113\uffd7\116\uffd7\153\uffd7\154\uffd7\155" +
    "\uffd7\174\uffd7\210\uffd7\255\uffd7\260\uffd7\273\uffd7\302\uffd7" +
    "\350\uffd7\352\uffd7\u010f\uffd7\u0172\uffd7\u0175\uffd7\001\002\000" +
    "\004\012\u0207\001\002\000\006\022\u0208\047\uffaf\001\002" +
    "\000\004\012\u020b\001\002\000\004\047\u020a\001\002\000" +
    "\056\004\uffb2\021\uffb2\022\uffb2\047\uffb2\110\uffb2\112\uffb2" +
    "\113\uffb2\116\uffb2\153\uffb2\154\uffb2\155\uffb2\174\uffb2\210" +
    "\uffb2\255\uffb2\260\uffb2\273\uffb2\302\uffb2\350\uffb2\352\uffb2" +
    "\u010f\uffb2\u0172\uffb2\u0175\uffb2\001\002\000\004\047\uffb0\001" +
    "\002\000\004\046\u020d\001\002\000\060\004\uffd5\021\uffd5" +
    "\022\uffd5\032\uffd5\047\uffd5\110\uffd5\112\uffd5\113\uffd5\116" +
    "\uffd5\153\uffd5\154\uffd5\155\uffd5\174\uffd5\210\uffd5\255\uffd5" +
    "\260\uffd5\273\uffd5\302\uffd5\350\uffd5\352\uffd5\u010f\uffd5\u0172" +
    "\uffd5\u0175\uffd5\001\002\000\014\113\ufea4\116\ufea4\155\ufea4" +
    "\302\ufea4\352\ufea4\001\002\000\022\011\050\031\051\113" +
    "\ufea3\155\ufea3\172\u0152\210\u0156\302\ufea3\352\ufea3\001\002" +
    "\000\006\021\ufe71\u010f\ufe71\001\002\000\012\021\ufec5\022" +
    "\u020f\047\ufec5\u010f\ufec5\001\002\000\010\021\ufec6\047\ufec6" +
    "\u010f\ufec6\001\002\000\010\032\ufe9c\166\u015f\252\u0160\001" +
    "\002\000\004\032\u0162\001\002\000\012\021\ufe84\022\ufe84" +
    "\047\ufe84\u010f\ufe84\001\002\000\006\011\050\031\051\001" +
    "\002\000\114\031\u019c\050\u01af\051\u01bb\052\u019d\053\u01bf" +
    "\054\u01b3\055\u01a5\056\u01a1\057\u01bc\060\u01b2\061\u01b1\062" +
    "\u01c0\063\u01a9\064\u01ad\065\u01a7\066\u01be\067\u01a4\070\u01aa" +
    "\071\u01b9\072\u01bd\074\u0219\254\u01b6\317\u019e\322\u021a\u0100" +
    "\u01b8\u010a\u01b5\u0110\u01b4\u011d\u019b\u0126\u01ba\u0129\u01a2\u012c\u019f" +
    "\u013f\u01a0\u014b\u01a3\u0155\u01b0\u0158\u01b7\u0165\u01a6\u0166\u01ae\001" +
    "\002\000\012\021\ufeb3\174\u01c1\260\ufeb3\u010f\ufeb3\001\002" +
    "\000\006\154\ufe6b\255\ufe6b\001\002\000\006\154\ufe6a\255" +
    "\ufe6a\001\002\000\006\154\u021e\255\u021f\001\002\000\006" +
    "\021\ufe6f\u010f\ufe6f\001\002\000\006\021\ufe6e\u010f\ufe6e\001" +
    "\002\000\006\021\ufe69\u010f\ufe69\001\002\000\004\110\u0221" +
    "\001\002\000\006\021\ufe6d\u010f\ufe6d\001\002\000\004\121" +
    "\u0222\001\002\000\006\021\ufe68\u010f\ufe68\001\002\000\010" +
    "\021\ufea9\260\u0183\u010f\ufea9\001\002\000\006\021\ufe6c\u010f" +
    "\ufe6c\001\002\000\006\021\ufe77\u010f\ufe77\001\002\000\006" +
    "\174\ufe7b\212\ufe7b\001\002\000\006\174\ufe7a\212\ufe7a\001" +
    "\002\000\006\174\u0229\212\u022b\001\002\000\006\011\050" +
    "\031\051\001\002\000\006\021\ufe7c\u010f\ufe7c\001\002\000" +
    "\004\146\u022c\001\002\000\004\u0117\u022d\001\002\000\006" +
    "\021\ufe78\u010f\ufe78\001\002\000\006\021\ufe79\u010f\ufe79\001" +
    "\002\000\006\011\050\031\051\001\002\000\006\011\050" +
    "\031\051\001\002\000\004\032\u0232\001\002\000\006\024" +
    "\147\047\ufe04\001\002\000\004\047\ufe05\001\002\000\110" +
    "\050\ufdfc\051\ufdfc\052\ufdfc\053\ufdfc\054\ufdfc\055\ufdfc\056" +
    "\ufdfc\057\ufdfc\060\ufdfc\061\ufdfc\062\ufdfc\063\ufdfc\064\ufdfc" +
    "\065\ufdfc\066\ufdfc\067\ufdfc\070\ufdfc\071\ufdfc\072\ufdfc\112" +
    "\u0240\254\ufdfc\317\ufdfc\u0100\ufdfc\u010a\ufdfc\u0110\ufdfc\u011d\ufdfc" +
    "\u0126\ufdfc\u0129\ufdfc\u012c\ufdfc\u013f\ufdfc\u014b\ufdfc\u0155\ufdfc\u0158" +
    "\ufdfc\u0165\ufdfc\u0166\ufdfc\001\002\000\006\022\u0271\047\ufdfe" +
    "\001\002\000\004\047\u0237\001\002\000\004\u0178\u0238\001" +
    "\002\000\110\050\u01af\051\u01bb\052\u019d\053\u01bf\054\u01b3" +
    "\055\u01a5\056\u01a1\057\u01bc\060\u01b2\061\u01b1\062\u01c0\063" +
    "\u01a9\064\u01ad\065\u01a7\066\u01be\067\u01a4\070\u01aa\071\u01b9" +
    "\072\u01bd\234\u023c\254\u01b6\317\u019e\u0100\u01b8\u010a\u01b5\u0110" +
    "\u01b4\u011d\u019b\u0126\u01ba\u0129\u01a2\u012c\u019f\u013f\u01a0\u014b\u01a3" +
    "\u0155\u01b0\u0158\u01b7\u0165\u01a6\u0166\u01ae\001\002\000\006\021" +
    "\ufe06\u010f\ufe06\001\002\000\006\021\ufdf8\u010f\ufdf8\001\002" +
    "\000\010\112\ufdec\125\ufdec\350\u023e\001\002\000\010\112" +
    "\ufdec\132\ufdec\350\u023e\001\002\000\006\021\ufdf9\u010f\ufdf9" +
    "\001\002\000\020\346\004\351\041\u0177\u0250\u0178\u0248\u0179" +
    "\u024d\u017a\u024b\u017b\u024e\001\002\000\006\112\u0240\132\ufdfc" +
    "\001\002\000\112\050\ufdfd\051\ufdfd\052\ufdfd\053\ufdfd\054" +
    "\ufdfd\055\ufdfd\056\ufdfd\057\ufdfd\060\ufdfd\061\ufdfd\062\ufdfd" +
    "\063\ufdfd\064\ufdfd\065\ufdfd\066\ufdfd\067\ufdfd\070\ufdfd\071" +
    "\ufdfd\072\ufdfd\125\ufdfd\132\ufdfd\254\ufdfd\317\ufdfd\u0100\ufdfd" +
    "\u010a\ufdfd\u0110\ufdfd\u011d\ufdfd\u0126\ufdfd\u0129\ufdfd\u012c\ufdfd\u013f" +
    "\ufdfd\u014b\ufdfd\u0155\ufdfd\u0158\ufdfd\u0165\ufdfd\u0166\ufdfd\001\002" +
    "\000\004\132\u0242\001\002\000\006\032\u0243\173\010\001" +
    "\002\000\004\173\010\001\002\000\006\021\ufdf6\u010f\ufdf6" +
    "\001\002\000\006\021\ufdf4\u010f\ufdf4\001\002\000\004\047" +
    "\u0247\001\002\000\006\021\ufdf5\u010f\ufdf5\001\002\000\004" +
    "\260\u0261\001\002\000\010\112\ufded\125\ufded\132\ufded\001" +
    "\002\000\004\112\u025b\001\002\000\004\u016b\u0258\001\002" +
    "\000\012\022\u0255\112\ufde3\125\ufde3\132\ufde3\001\002\000" +
    "\012\022\ufde9\112\ufde9\125\ufde9\132\ufde9\001\002\000\004" +
    "\004\u0251\001\002\000\012\022\ufde6\112\ufde6\125\ufde6\132" +
    "\ufde6\001\002\000\012\022\ufdea\112\ufdea\125\ufdea\132\ufdea" +
    "\001\002\000\006\271\u0254\u016b\u0252\001\002\000\012\022" +
    "\ufde2\112\ufde2\125\ufde2\132\ufde2\001\002\000\012\022\ufde5" +
    "\112\ufde5\125\ufde5\132\ufde5\001\002\000\012\022\ufde1\112" +
    "\ufde1\125\ufde1\132\ufde1\001\002\000\020\346\004\351\041" +
    "\u0177\u0250\u0178\u0248\u0179\u024d\u017a\u024b\u017b\u024e\001\002\000" +
    "\010\112\ufdeb\125\ufdeb\132\ufdeb\001\002\000\010\112\ufde4" +
    "\125\ufde4\132\ufde4\001\002\000\004\260\u0259\001\002\000" +
    "\004\u0125\u025a\001\002\000\012\022\ufde7\112\ufde7\125\ufde7" +
    "\132\ufde7\001\002\000\014\011\050\031\051\u017c\u025c\u017d" +
    "\u0260\u017e\u025e\001\002\000\014\022\ufe28\110\ufe28\112\ufe28" +
    "\125\ufe28\132\ufe28\001\002\000\014\022\ufe25\110\ufe25\112" +
    "\ufe25\125\ufe25\132\ufe25\001\002\000\014\022\ufe26\110\ufe26" +
    "\112\ufe26\125\ufe26\132\ufe26\001\002\000\012\022\ufde0\112" +
    "\ufde0\125\ufde0\132\ufde0\001\002\000\014\022\ufe27\110\ufe27" +
    "\112\ufe27\125\ufe27\132\ufe27\001\002\000\004\u016b\u0262\001" +
    "\002\000\004\260\u0263\001\002\000\004\u0125\u0264\001\002" +
    "\000\012\022\ufde8\112\ufde8\125\ufde8\132\ufde8\001\002\000" +
    "\006\112\u0240\125\ufdfc\001\002\000\004\125\u0267\001\002" +
    "\000\014\003\033\173\010\200\026\276\035\310\036\001" +
    "\002\000\004\132\u0269\001\002\000\014\012\176\024\147" +
    "\032\u026a\037\172\043\175\001\002\000\012\012\176\024" +
    "\147\037\172\043\175\001\002\000\004\332\ufdf2\001\002" +
    "\000\004\332\u026d\001\002\000\006\021\ufdf7\u010f\ufdf7\001" +
    "\002\000\004\047\u026f\001\002\000\004\332\ufdf3\001\002" +
    "\000\004\047\ufe00\001\002\000\004\024\147\001\002\000" +
    "\004\047\ufdff\001\002\000\106\050\u01af\051\u01bb\052\u019d" +
    "\053\u01bf\054\u01b3\055\u01a5\056\u01a1\057\u01bc\060\u01b2\061" +
    "\u01b1\062\u01c0\063\u01a9\064\u01ad\065\u01a7\066\u01be\067\u01a4" +
    "\070\u01aa\071\u01b9\072\u01bd\254\u01b6\317\u019e\u0100\u01b8\u010a" +
    "\u01b5\u0110\u01b4\u011d\u019b\u0126\u01ba\u0129\u01a2\u012c\u019f\u013f\u01a0" +
    "\u014b\u01a3\u0155\u01b0\u0158\u01b7\u0165\u01a6\u0166\u01ae\001\002\000" +
    "\010\022\ufdfa\047\ufdfa\u0176\u0276\001\002\000\006\022\ufe01" +
    "\047\ufe01\001\002\000\006\022\ufdfb\047\ufdfb\001\002\000" +
    "\014\021\u0278\024\ufe41\110\ufe41\112\ufe41\350\ufe41\001\002" +
    "\000\004\012\u02a8\001\002\000\012\024\147\110\ufe3f\112" +
    "\ufe3f\350\ufe3f\001\002\000\010\110\ufe31\112\ufe31\350\u028f" +
    "\001\002\000\112\011\050\031\u027d\050\u01af\051\u01bb\052" +
    "\u019d\053\u01bf\054\u01b3\055\u01a5\056\u01a1\057\u01bc\060\u01b2" +
    "\061\u01b1\062\u01c0\063\u01a9\064\u01ad\065\u01a7\066\u01be\067" +
    "\u01a4\070\u01aa\071\u01b9\072\u01bd\254\u0281\317\u019e\u0100\u01b8" +
    "\u010a\u01b5\u0110\u01b4\u011d\u019b\u0126\u01ba\u0129\u01a2\u012c\u019f\u013f" +
    "\u01a0\u014b\u01a3\u0155\u01b0\u0158\u01b7\u0165\u01a6\u0166\u01ae\001\002" +
    "\000\010\110\ufe40\112\ufe40\350\ufe40\001\002\000\110\011" +
    "\052\050\u01af\051\u01bb\052\u019d\053\u01bf\054\u01b3\055\u01a5" +
    "\056\u01a1\057\u01bc\060\u01b2\061\u01b1\062\u01c0\063\u01a9\064" +
    "\u01ad\065\u01a7\066\u01be\067\u01a4\070\u01aa\071\u01b9\072\u01bd" +
    "\254\u01b6\317\u019e\u0100\u01b8\u010a\u01b5\u0110\u01b4\u011d\u019b\u0126" +
    "\u01ba\u0129\u01a2\u012c\u019f\u013f\u01a0\u014b\u01a3\u0155\u01b0\u0158\u01b7" +
    "\u0165\u01a6\u0166\u01ae\001\002\000\012\022\u028d\110\ufe3c\112" +
    "\ufe3c\350\ufe3c\001\002\000\020\004\u0288\022\ufe37\110\ufe37" +
    "\112\ufe37\350\ufe37\u0172\ufe37\u0175\ufe37\001\002\000\004\u0176" +
    "\u0286\001\002\000\024\004\uffcd\022\uffcd\032\uffcd\110\uffcd" +
    "\112\uffcd\350\uffcd\u0169\u0282\u0172\uffcd\u0175\uffcd\001\002\000" +
    "\006\u0172\u0284\u0175\u0283\001\002\000\012\022\ufe34\110\ufe34" +
    "\112\ufe34\350\ufe34\001\002\000\012\022\ufe33\110\ufe33\112" +
    "\ufe33\350\ufe33\001\002\000\012\022\ufe3a\110\ufe3a\112\ufe3a" +
    "\350\ufe3a\001\002\000\012\022\ufe39\110\ufe39\112\ufe39\350" +
    "\ufe39\001\002\000\016\022\ufe35\110\ufe35\112\ufe35\350\ufe35" +
    "\u0172\u0284\u0175\u0283\001\002\000\004\273\u0289\001\002\000" +
    "\016\022\ufe38\110\ufe38\112\ufe38\350\ufe38\u0172\ufe38\u0175\ufe38" +
    "\001\002\000\012\022\ufe3b\110\ufe3b\112\ufe3b\350\ufe3b\001" +
    "\002\000\012\022\ufe36\110\ufe36\112\ufe36\350\ufe36\001\002" +
    "\000\010\110\ufe3e\112\ufe3e\350\ufe3e\001\002\000\004\024" +
    "\147\001\002\000\010\110\ufe3d\112\ufe3d\350\ufe3d\001\002" +
    "\000\012\346\004\351\041\u0177\u02a0\u017f\u02a2\001\002\000" +
    "\006\110\u0292\112\ufe23\001\002\000\004\112\u0294\001\002" +
    "\000\004\121\u0293\001\002\000\004\112\ufe24\001\002\000" +
    "\004\125\u0296\001\002\000\006\021\ufe45\u010f\ufe45\001\002" +
    "\000\014\003\033\173\010\200\026\276\035\310\036\001" +
    "\002\000\016\003\033\173\010\200\026\276\035\310\036" +
    "\332\ufe1f\001\002\000\004\332\u0299\001\002\000\006\021" +
    "\ufe22\u010f\ufe22\001\002\000\016\003\033\173\010\200\026" +
    "\276\035\310\036\332\ufe1d\001\002\000\004\332\ufe21\001" +
    "\002\000\004\332\ufe1e\001\002\000\004\332\ufe20\001\002" +
    "\000\010\022\u02a6\110\ufe29\112\ufe29\001\002\000\006\110" +
    "\ufe32\112\ufe32\001\002\000\010\022\ufe2f\110\ufe2f\112\ufe2f" +
    "\001\002\000\004\112\u02a3\001\002\000\010\022\ufe2e\110" +
    "\ufe2e\112\ufe2e\001\002\000\014\011\050\031\051\u017c\u025c" +
    "\u017d\u0260\u017e\u025e\001\002\000\010\022\ufe2d\110\ufe2d\112" +
    "\ufe2d\001\002\000\006\110\ufe30\112\ufe30\001\002\000\012" +
    "\346\004\351\041\u0177\u02a0\u017f\u02a2\001\002\000\006\110" +
    "\ufe2a\112\ufe2a\001\002\000\012\024\ufe42\110\ufe42\112\ufe42" +
    "\350\ufe42\001\002\000\044\002\uffec\003\uffec\102\uffec\125" +
    "\uffec\146\uffec\173\uffec\200\uffec\202\uffec\227\uffec\267\uffec" +
    "\270\uffec\276\uffec\310\uffec\316\uffec\322\uffec\346\uffec\351" +
    "\uffec\001\002\000\010\011\uff38\031\uff38\206\u02ac\001\002" +
    "\000\006\011\050\031\051\001\002\000\006\011\uff39\031" +
    "\uff39\001\002\000\014\021\uff36\032\u0139\273\uff36\323\uff36" +
    "\u010f\uff36\001\002\000\012\021\uff37\273\uff37\323\uff37\u010f" +
    "\uff37\001\002\000\012\021\uff2c\273\u02b0\323\u02b1\u010f\uff2c" +
    "\001\002\000\004\323\u02c5\001\002\000\004\032\u02b3\001" +
    "\002\000\006\021\uff3a\u010f\uff3a\001\002\000\012\012\u02b9" +
    "\037\u02b4\043\u02b8\273\u02b5\001\002\000\006\022\uff32\047" +
    "\uff32\001\002\000\006\022\uff34\047\uff34\001\002\000\004" +
    "\047\u02be\001\002\000\006\022\u02ba\047\uff2f\001\002\000" +
    "\006\022\uff31\047\uff31\001\002\000\006\022\uff33\047\uff33" +
    "\001\002\000\012\012\u02b9\037\u02b4\043\u02b8\273\u02b5\001" +
    "\002\000\004\047\uff35\001\002\000\006\022\u02ba\047\uff2f" +
    "\001\002\000\004\047\uff30\001\002\000\010\021\uff2a\022" +
    "\u02c0\u010f\uff2a\001\002\000\006\021\uff2e\u010f\uff2e\001\002" +
    "\000\004\032\u02c1\001\002\000\012\012\u02b9\037\u02b4\043" +
    "\u02b8\273\u02b5\001\002\000\004\047\u02c3\001\002\000\010" +
    "\021\uff2a\022\u02c0\u010f\uff2a\001\002\000\006\021\uff2b\u010f" +
    "\uff2b\001\002\000\006\021\uff2d\u010f\uff2d\001\002\000\050" +
    "\002\ufff3\003\ufff3\102\ufff3\125\ufff3\132\ufff3\146\ufff3\173" +
    "\ufff3\200\ufff3\202\ufff3\227\ufff3\267\ufff3\270\ufff3\276\ufff3" +
    "\310\ufff3\316\ufff3\322\ufff3\332\ufff3\346\ufff3\351\ufff3\001" +
    "\002\000\040\003\033\102\030\125\022\162\u02c9\173\010" +
    "\200\026\227\023\267\013\270\040\276\035\310\036\316" +
    "\u02ce\322\032\346\004\351\041\001\002\000\006\021\046" +
    "\u010f\045\001\002\000\006\256\u02d8\261\u02d5\001\002\000" +
    "\042\003\033\102\030\125\022\146\uffff\173\010\200\026" +
    "\202\uffff\227\023\267\013\270\040\276\035\310\036\316" +
    "\034\322\032\346\004\351\041\001\002\000\042\003\033" +
    "\102\030\125\022\146\uffff\173\010\200\026\202\uffff\227" +
    "\023\267\013\270\040\276\035\310\036\316\034\322\032" +
    "\346\004\351\041\001\002\000\006\021\046\u010f\045\001" +
    "\002\000\042\003\033\102\030\125\022\146\uffff\173\010" +
    "\200\026\202\uffff\227\023\267\013\270\040\276\035\310" +
    "\036\316\034\322\032\346\004\351\041\001\002\000\006" +
    "\011\050\031\051\001\002\000\006\146\u02d3\202\u02d2\001" +
    "\002\000\006\021\046\u010f\045\001\002\000\006\021\046" +
    "\u010f\045\001\002\000\014\021\ufe4d\256\u02d8\261\u02d5\350" +
    "\ufe4d\u010f\ufe4d\001\002\000\012\021\ufe46\256\u02d8\261\u02d5" +
    "\u010f\ufe46\001\002\000\044\002\uffea\003\uffea\102\uffea\125" +
    "\uffea\146\uffea\173\uffea\200\uffea\202\uffea\227\uffea\267\uffea" +
    "\270\uffea\276\uffea\310\uffea\316\uffea\322\uffea\346\uffea\351" +
    "\uffea\001\002\000\016\011\ufe50\021\ufe50\024\ufe50\031\ufe50" +
    "\350\ufe50\u010f\ufe50\001\002\000\006\021\ufe48\u010f\ufe48\001" +
    "\002\000\014\011\050\021\ufe52\024\147\031\051\u010f\ufe52" +
    "\001\002\000\016\011\ufe51\021\ufe51\024\ufe51\031\ufe51\350" +
    "\ufe51\u010f\ufe51\001\002\000\010\021\ufe54\350\ufe54\u010f\ufe54" +
    "\001\002\000\010\021\ufe53\350\ufe53\u010f\ufe53\001\002\000" +
    "\006\021\ufe47\u010f\ufe47\001\002\000\010\021\ufe4b\350\u02df" +
    "\u010f\ufe4b\001\002\000\016\011\050\021\ufe52\024\147\031" +
    "\051\350\ufe52\u010f\ufe52\001\002\000\010\021\ufe4e\350\ufe4e" +
    "\u010f\ufe4e\001\002\000\004\032\u02e1\001\002\000\006\021" +
    "\ufe4f\u010f\ufe4f\001\002\000\004\u0194\u02e2\001\002\000\004" +
    "\004\u02e3\001\002\000\006\271\u02e5\u016b\u02e4\001\002\000" +
    "\004\047\ufe4a\001\002\000\004\047\ufe49\001\002\000\004" +
    "\047\u02e7\001\002\000\006\021\ufe4c\u010f\ufe4c\001\002\000" +
    "\044\002\ufe59\003\ufe59\102\ufe59\125\ufe59\146\ufe59\173\ufe59" +
    "\200\ufe59\202\ufe59\227\ufe59\267\ufe59\270\ufe59\276\ufe59\310" +
    "\ufe59\316\ufe59\322\ufe59\346\ufe59\351\ufe59\001\002\000\044" +
    "\002\ufe58\003\ufe58\102\ufe58\125\ufe58\146\ufe58\173\ufe58\200" +
    "\ufe58\202\ufe58\227\ufe58\267\ufe58\270\ufe58\276\ufe58\310\ufe58" +
    "\316\ufe58\322\ufe58\346\ufe58\351\ufe58\001\002\000\006\021" +
    "\046\u010f\045\001\002\000\042\003\033\102\030\125\022" +
    "\146\uffff\173\010\200\026\202\uffff\227\023\267\013\270" +
    "\040\276\035\310\036\316\034\322\032\346\004\351\041" +
    "\001\002\000\006\146\ufff5\202\ufff5\001\002\000\006\146" +
    "\ufff7\202\ufff7\001\002\000\042\003\033\102\030\125\022" +
    "\146\uffff\173\010\200\026\202\uffff\227\023\267\013\270" +
    "\040\276\035\310\036\316\034\322\032\346\004\351\041" +
    "\001\002\000\006\146\ufff6\202\ufff6\001\002\000\006\146" +
    "\ufff9\202\ufff9\001\002\000\006\146\ufff8\202\ufff8\001\002" +
    "\000\010\011\050\024\147\031\051\001\002\000\006\021" +
    "\ufe57\u010f\ufe57\001\002\000\010\021\ufe56\350\ufe56\u010f\ufe56" +
    "\001\002\000\010\021\ufe55\350\ufe55\u010f\ufe55\001\002\000" +
    "\006\146\ufff4\202\ufff4\001\002\000\006\021\uff03\u010f\uff03" +
    "\001\002\000\006\021\uff05\u010f\uff05\001\002\000\006\021" +
    "\uff09\u010f\uff09\001\002\000\006\011\050\031\051\001\002" +
    "\000\006\021\uff04\u010f\uff04\001\002\000\004\011\u032a\001" +
    "\002\000\010\166\ufedc\172\ufedc\252\ufedc\001\002\000\006" +
    "\021\uff08\u010f\uff08\001\002\000\006\021\uff0a\u010f\uff0a\001" +
    "\002\000\006\011\050\031\051\001\002\000\006\011\050" +
    "\031\051\001\002\000\006\021\uff07\u010f\uff07\001\002\000" +
    "\006\021\uff06\u010f\uff06\001\002\000\010\166\u015f\172\ufe9c" +
    "\252\u0160\001\002\000\004\172\u0306\001\002\000\006\011" +
    "\050\031\051\001\002\000\004\u016b\u0308\001\002\000\006" +
    "\011\050\031\051\001\002\000\004\032\u030a\001\002\000" +
    "\006\011\050\031\051\001\002\000\014\021\ufed5\342\ufed5" +
    "\u010f\ufed5\u011c\u030c\u016b\ufed5\001\002\000\004\032\u0139\001" +
    "\002\000\012\021\uff56\342\137\u010f\uff56\u016b\uff56\001\002" +
    "\000\010\021\ufed3\u010f\ufed3\u016b\u030f\001\002\000\006\011" +
    "\050\031\051\001\002\000\006\021\ufedd\u010f\ufedd\001\002" +
    "\000\004\032\u0312\001\002\000\006\011\050\031\051\001" +
    "\002\000\004\047\u0314\001\002\000\006\021\ufed4\u010f\ufed4" +
    "\001\002\000\012\021\ufed6\342\ufed6\u010f\ufed6\u016b\ufed6\001" +
    "\002\000\012\022\uff41\047\uff41\303\u0166\u0104\u0165\001\002" +
    "\000\004\047\u0318\001\002\000\014\021\ufeda\342\ufeda\u010f" +
    "\ufeda\u011c\ufeda\u016b\ufeda\001\002\000\006\022\u031b\047\ufed7" +
    "\001\002\000\004\047\ufed9\001\002\000\006\011\050\031" +
    "\051\001\002\000\012\022\uff41\047\uff41\303\u0166\u0104\u0165" +
    "\001\002\000\006\022\u031b\047\ufed7\001\002\000\004\047" +
    "\ufed8\001\002\000\004\032\u0320\001\002\000\022\011\050" +
    "\031\051\113\ufea3\155\ufea3\172\u0152\210\u0156\302\ufea3\352" +
    "\ufea3\001\002\000\006\022\u020f\047\ufec5\001\002\000\004" +
    "\047\u0323\001\002\000\010\021\ufed0\u010f\ufed0\u016b\u0325\001" +
    "\002\000\006\021\ufed2\u010f\ufed2\001\002\000\004\352\u0326" +
    "\001\002\000\006\021\ufed1\u010f\ufed1\001\002\000\004\112" +
    "\u0328\001\002\000\004\173\010\001\002\000\006\021\ufede" +
    "\u010f\ufede\001\002\000\006\021\uff02\u010f\uff02\001\002\000" +
    "\012\021\ufefe\174\ufefe\u010f\ufefe\u016b\u032d\001\002\000\010" +
    "\021\ufef3\174\u035f\u010f\ufef3\001\002\000\006\032\ufefc\352" +
    "\u032f\001\002\000\006\021\uff01\u010f\uff01\001\002\000\004" +
    "\032\ufefd\001\002\000\004\032\u0331\001\002\000\006\u0154" +
    "\u0337\u018a\u0336\001\002\000\010\021\ufeff\174\ufeff\u010f\ufeff" +
    "\001\002\000\012\021\ufefa\022\u0334\174\ufefa\u010f\ufefa\001" +
    "\002\000\004\032\u0331\001\002\000\010\021\ufefb\174\ufefb" +
    "\u010f\ufefb\001\002\000\004\004\ufef8\001\002\000\004\004" +
    "\ufef7\001\002\000\004\004\u0339\001\002\000\004\043\u033a" +
    "\001\002\000\004\022\u033b\001\002\000\006\103\u033e\u018b" +
    "\u033d\001\002\000\004\004\u033f\001\002\000\004\004\ufef5" +
    "\001\002\000\004\004\ufef6\001\002\000\004\043\u0340\001" +
    "\002\000\006\022\u0342\047\ufef1\001\002\000\004\047\u035e" +
    "\001\002\000\010\u0124\u034b\u0190\u034a\u0192\u0349\001\002\000" +
    "\006\022\ufeec\047\ufeec\001\002\000\006\022\ufeef\047\ufeef" +
    "\001\002\000\006\022\ufef0\047\ufef0\001\002\000\006\022" +
    "\u0342\047\ufef1\001\002\000\006\022\ufeee\047\ufeee\001\002" +
    "\000\006\022\ufeed\047\ufeed\001\002\000\004\004\u0358\001" +
    "\002\000\004\004\u0353\001\002\000\004\004\u034c\001\002" +
    "\000\004\012\u034d\001\002\000\016\022\ufeea\047\ufeea\u018c" +
    "\u0350\u018d\u0351\u018e\u034f\u018f\u0352\001\002\000\006\022\ufeeb" +
    "\047\ufeeb\001\002\000\006\022\ufee6\047\ufee6\001\002\000" +
    "\006\022\ufee9\047\ufee9\001\002\000\006\022\ufee7\047\ufee7" +
    "\001\002\000\006\022\ufee8\047\ufee8\001\002\000\006\012" +
    "\u0356\u0191\u0355\001\002\000\006\022\ufee5\047\ufee5\001\002" +
    "\000\006\022\ufee3\047\ufee3\001\002\000\012\u018c\u0350\u018d" +
    "\u0351\u018e\u034f\u018f\u0352\001\002\000\006\022\ufee4\047\ufee4" +
    "\001\002\000\004\012\u0359\001\002\000\020\022\ufedf\047" +
    "\ufedf\u018c\u0350\u018d\u0351\u018e\u034f\u018f\u0352\u0193\u035a\001\002" +
    "\000\006\022\ufee0\047\ufee0\001\002\000\006\022\ufee1\047" +
    "\ufee1\001\002\000\006\022\ufee2\047\ufee2\001\002\000\004" +
    "\047\ufef2\001\002\000\012\021\ufef9\022\ufef9\174\ufef9\u010f" +
    "\ufef9\001\002\000\006\011\050\031\051\001\002\000\006" +
    "\021\uff00\u010f\uff00\001\002\000\006\021\ufef4\u010f\ufef4\001" +
    "\002\000\014\011\050\021\ufe5e\024\147\031\051\u010f\ufe5e" +
    "\001\002\000\010\021\ufe5c\350\u0365\u010f\ufe5c\001\002\000" +
    "\006\021\ufe60\u010f\ufe60\001\002\000\004\u0180\u0367\001\002" +
    "\000\006\021\ufe5f\u010f\ufe5f\001\002\000\010\021\ufe5a\043" +
    "\u0369\u010f\ufe5a\001\002\000\006\021\ufe5d\u010f\ufe5d\001\002" +
    "\000\006\021\ufe5b\u010f\ufe5b\001\002\000\044\002\uffff\003" +
    "\033\102\030\125\022\146\uffff\173\010\200\026\202\uffff" +
    "\227\023\267\013\270\040\276\035\310\036\316\034\322" +
    "\032\346\004\351\041\001\002\000\010\002\ufffb\146\ufffb" +
    "\202\ufffb\001\002\000\044\002\uffed\003\uffed\102\uffed\125" +
    "\uffed\146\uffed\173\uffed\200\uffed\202\uffed\227\uffed\267\uffed" +
    "\270\uffed\276\uffed\310\uffed\316\uffed\322\uffed\346\uffed\351" +
    "\uffed\001\002\000\050\002\ufff1\003\ufff1\102\ufff1\125\ufff1" +
    "\132\ufff1\146\ufff1\173\ufff1\200\ufff1\202\ufff1\227\ufff1\267" +
    "\ufff1\270\ufff1\276\ufff1\310\ufff1\316\ufff1\322\ufff1\332\ufff1" +
    "\346\ufff1\351\ufff1\001\002\000\050\002\ufff0\003\ufff0\102" +
    "\ufff0\125\ufff0\132\ufff0\146\ufff0\173\ufff0\200\ufff0\202\ufff0" +
    "\227\ufff0\267\ufff0\270\ufff0\276\ufff0\310\ufff0\316\ufff0\322" +
    "\ufff0\332\ufff0\346\ufff0\351\ufff0\001\002\000\010\002\ufffe" +
    "\146\ufffe\202\ufffe\001\002\000\006\011\050\031\051\001" +
    "\002\000\006\021\uff94\u010f\uff94\001\002\000\010\002\ufffd" +
    "\146\ufffd\202\ufffd\001\002\000\020\012\u037a\021\ufddf\024" +
    "\147\032\u0374\037\u0375\043\u0379\u010f\ufddf\001\002\000\012" +
    "\012\u037a\024\147\037\u0375\043\u0379\001\002\000\012\021" +
    "\ufdd7\022\ufdd7\047\ufdd7\u010f\ufdd7\001\002\000\004\004\u037e" +
    "\001\002\000\012\021\ufdd9\022\u037b\047\ufdd9\u010f\ufdd9\001" +
    "\002\000\006\021\ufddd\u010f\ufddd\001\002\000\012\021\ufdd6" +
    "\022\ufdd6\047\ufdd6\u010f\ufdd6\001\002\000\012\021\ufdd8\022" +
    "\ufdd8\047\ufdd8\u010f\ufdd8\001\002\000\012\012\u037a\024\147" +
    "\037\u0375\043\u0379\001\002\000\010\021\ufddb\047\ufddb\u010f" +
    "\ufddb\001\002\000\010\021\ufdda\047\ufdda\u010f\ufdda\001\002" +
    "\000\010\012\u037a\037\u0375\043\u0379\001\002\000\012\021" +
    "\ufdd9\022\u037b\047\ufdd9\u010f\ufdd9\001\002\000\010\021\ufddc" +
    "\047\ufddc\u010f\ufddc\001\002\000\004\047\u0382\001\002\000" +
    "\006\021\ufdde\u010f\ufdde\001\002\000\040\007\uff4b\011\uff4b" +
    "\012\uff4b\024\uff4b\031\uff4b\032\uff4b\037\uff4b\043\uff4b\253" +
    "\uff4b\260\uff4b\u010b\uff4b\u0138\uff4b\u013d\uff4b\u0148\uff4b\u0149\uff4b" +
    "\001\002\000\040\007\uff4c\011\uff4c\012\uff4c\024\uff4c\031" +
    "\uff4c\032\uff4c\037\uff4c\043\uff4c\253\uff4c\260\uff4c\u010b\uff4c" +
    "\u0138\uff4c\u013d\uff4c\u0148\uff4c\u0149\uff4c\001\002\000\040\007" +
    "\uff6e\011\uff6e\012\uff6e\024\uff6e\031\uff6e\032\uff6e\037\uff6e" +
    "\043\uff6e\253\115\260\uff6e\u010b\uff6e\u0138\uff6e\u013d\uff6e\u0148" +
    "\uff6e\u0149\uff6e\001\002\000\036\007\u0389\011\050\012\146" +
    "\024\147\031\051\032\163\037\152\043\157\260\165\u010b" +
    "\160\u0138\145\u013d\166\u0148\164\u0149\162\001\002\000\036" +
    "\011\050\021\uff91\022\uff91\031\051\043\u0391\047\uff91\110" +
    "\uff91\112\u038f\123\uff91\142\uff91\145\uff91\325\uff91\342\uff91" +
    "\u010f\uff91\001\002\000\024\021\uff16\047\uff16\110\uff16\123" +
    "\u0395\142\uff16\145\uff16\325\uff16\342\uff16\u010f\uff16\001\002" +
    "\000\026\021\uff52\022\u038a\047\uff52\110\uff52\123\uff52\142" +
    "\uff52\145\uff52\325\uff52\342\uff52\u010f\uff52\001\002\000\034" +
    "\011\050\012\146\024\147\031\051\032\163\037\152\043" +
    "\157\260\165\u010b\160\u0138\145\u013d\166\u0148\164\u0149\162" +
    "\001\002\000\024\021\uff54\047\uff54\110\uff54\123\uff54\142" +
    "\uff54\145\uff54\325\uff54\342\uff54\u010f\uff54\001\002\000\036" +
    "\011\050\021\uff91\022\uff91\031\051\043\u0391\047\uff91\110" +
    "\uff91\112\u038f\123\uff91\142\uff91\145\uff91\325\uff91\342\uff91" +
    "\u010f\uff91\001\002\000\042\021\uff90\022\uff90\047\uff90\110" +
    "\uff90\123\uff90\126\uff90\142\uff90\143\uff90\145\uff90\175\uff90" +
    "\214\uff90\225\uff90\325\uff90\342\uff90\u010f\uff90\u016b\uff90\001" +
    "\002\000\042\021\uff92\022\uff92\047\uff92\110\uff92\123\uff92" +
    "\126\uff92\142\uff92\143\uff92\145\uff92\175\uff92\214\uff92\225" +
    "\uff92\325\uff92\342\uff92\u010f\uff92\u016b\uff92\001\002\000\010" +
    "\011\050\031\051\043\u0391\001\002\000\026\021\uff52\022" +
    "\u038a\047\uff52\110\uff52\123\uff52\142\uff52\145\uff52\325\uff52" +
    "\342\uff52\u010f\uff52\001\002\000\042\021\uff8f\022\uff8f\047" +
    "\uff8f\110\uff8f\123\uff8f\126\uff8f\142\uff8f\143\uff8f\145\uff8f" +
    "\175\uff8f\214\uff8f\225\uff8f\325\uff8f\342\uff8f\u010f\uff8f\u016b" +
    "\uff8f\001\002\000\024\021\uff53\047\uff53\110\uff53\123\uff53" +
    "\142\uff53\145\uff53\325\uff53\342\uff53\u010f\uff53\001\002\000" +
    "\042\021\uff93\022\uff93\047\uff93\110\uff93\123\uff93\126\uff93" +
    "\142\uff93\143\uff93\145\uff93\175\uff93\214\uff93\225\uff93\325" +
    "\uff93\342\uff93\u010f\uff93\u016b\uff93\001\002\000\022\021\uff56" +
    "\047\uff56\110\uff56\142\uff56\145\uff56\325\uff56\342\137\u010f" +
    "\uff56\001\002\000\006\011\050\031\051\001\002\000\046" +
    "\011\050\021\uff91\022\uff91\031\051\043\u0391\047\uff91\110" +
    "\uff91\112\u038f\126\uff91\142\uff91\143\uff91\145\uff91\175\uff91" +
    "\214\uff91\225\uff91\325\uff91\342\uff91\u010f\uff91\001\002\000" +
    "\036\021\uff12\022\uff12\047\uff12\110\uff12\126\u039d\142\uff12" +
    "\143\u039b\145\uff12\175\u0399\214\uff0d\225\u0398\325\uff12\342" +
    "\uff12\u010f\uff12\001\002\000\006\214\uff0b\330\u039e\001\002" +
    "\000\004\214\uff11\001\002\000\004\214\u03a6\001\002\000" +
    "\006\214\uff0b\330\u039e\001\002\000\024\021\uff14\022\u03a0" +
    "\047\uff14\110\uff14\142\uff14\145\uff14\325\uff14\342\uff14\u010f" +
    "\uff14\001\002\000\006\214\uff0b\330\u039e\001\002\000\004" +
    "\214\uff0c\001\002\000\004\214\uff0e\001\002\000\006\011" +
    "\050\031\051\001\002\000\022\021\uff17\047\uff17\110\uff17" +
    "\142\uff17\145\uff17\325\uff17\342\uff17\u010f\uff17\001\002\000" +
    "\044\011\050\021\uff91\031\051\043\u0391\047\uff91\110\uff91" +
    "\112\u038f\126\uff91\142\uff91\143\uff91\145\uff91\175\uff91\214" +
    "\uff91\225\uff91\325\uff91\342\uff91\u010f\uff91\001\002\000\034" +
    "\021\uff12\047\uff12\110\uff12\126\u039d\142\uff12\143\u039b\145" +
    "\uff12\175\u0399\214\uff0d\225\u0398\325\uff12\342\uff12\u010f\uff12" +
    "\001\002\000\022\021\uff15\047\uff15\110\uff15\142\uff15\145" +
    "\uff15\325\uff15\342\uff15\u010f\uff15\001\002\000\004\214\uff10" +
    "\001\002\000\006\011\050\031\051\001\002\000\014\011" +
    "\050\031\051\043\u0391\112\u038f\u016b\uff91\001\002\000\004" +
    "\u016b\u03a9\001\002\000\036\011\uff70\012\uff70\024\uff70\031" +
    "\uff70\032\141\037\uff70\043\uff70\255\144\260\uff70\u010b\uff70" +
    "\u0138\uff70\u013d\uff70\u0148\uff70\u0149\uff70\001\002\000\036\021" +
    "\uff12\022\uff12\047\uff12\110\uff12\126\u039d\142\uff12\143\u039b" +
    "\145\uff12\175\u0399\214\uff0d\225\u0398\325\uff12\342\uff12\u010f" +
    "\uff12\001\002\000\024\021\uff13\022\uff13\047\uff13\110\uff13" +
    "\142\uff13\145\uff13\325\uff13\342\uff13\u010f\uff13\001\002\000" +
    "\004\214\uff0f\001\002\000\020\021\uff3d\047\uff3d\110\uff3d" +
    "\142\u03af\145\uff3d\325\uff3d\u010f\uff3d\001\002\000\016\021" +
    "\uff48\047\uff48\110\uff48\145\u03b6\325\uff48\u010f\uff48\001\002" +
    "\000\004\144\u03b0\001\002\000\034\011\050\012\146\024" +
    "\147\031\051\032\163\037\152\043\157\260\165\u010b\160" +
    "\u0138\145\u013d\166\u0148\164\u0149\162\001\002\000\020\021" +
    "\uff3b\022\u03b3\047\uff3b\110\uff3b\145\uff3b\325\uff3b\u010f\uff3b" +
    "\001\002\000\016\021\uff3e\047\uff3e\110\uff3e\145\uff3e\325" +
    "\uff3e\u010f\uff3e\001\002\000\034\011\050\012\146\024\147" +
    "\031\051\032\163\037\152\043\157\260\165\u010b\160\u0138" +
    "\145\u013d\166\u0148\164\u0149\162\001\002\000\020\021\uff3b" +
    "\022\u03b3\047\uff3b\110\uff3b\145\uff3b\325\uff3b\u010f\uff3b\001" +
    "\002\000\016\021\uff3c\047\uff3c\110\uff3c\145\uff3c\325\uff3c" +
    "\u010f\uff3c\001\002\000\036\011\uff70\012\uff70\024\uff70\031" +
    "\uff70\032\141\037\uff70\043\uff70\255\144\260\uff70\u010b\uff70" +
    "\u0138\uff70\u013d\uff70\u0148\uff70\u0149\uff70\001\002\000\014\021" +
    "\uff46\047\uff46\110\uff46\325\u03b8\u010f\uff46\001\002\000\004" +
    "\144\u03ba\001\002\000\012\021\uff4d\047\uff4d\110\uff4d\u010f" +
    "\uff4d\001\002\000\034\011\050\012\146\024\147\031\051" +
    "\032\163\037\152\043\157\260\165\u010b\160\u0138\145\u013d" +
    "\166\u0148\164\u0149\162\001\002\000\022\021\uff44\022\uff44" +
    "\047\uff44\110\uff44\174\u03bc\303\uff44\u0104\uff44\u010f\uff44\001" +
    "\002\000\006\011\050\031\051\001\002\000\020\021\uff41" +
    "\022\uff41\047\uff41\110\uff41\303\u0166\u0104\u0165\u010f\uff41\001" +
    "\002\000\014\021\uff3f\022\u03bf\047\uff3f\110\uff3f\u010f\uff3f" +
    "\001\002\000\034\011\050\012\146\024\147\031\051\032" +
    "\163\037\152\043\157\260\165\u010b\160\u0138\145\u013d\166" +
    "\u0148\164\u0149\162\001\002\000\012\021\uff47\047\uff47\110" +
    "\uff47\u010f\uff47\001\002\000\020\021\uff44\047\uff44\110\uff44" +
    "\174\u03bc\303\uff44\u0104\uff44\u010f\uff44\001\002\000\016\021" +
    "\uff41\047\uff41\110\uff41\303\u0166\u0104\u0165\u010f\uff41\001\002" +
    "\000\012\021\uff40\047\uff40\110\uff40\u010f\uff40\001\002\000" +
    "\020\021\uff45\022\uff45\047\uff45\110\uff45\303\uff45\u0104\uff45" +
    "\u010f\uff45\001\002\000\014\021\uff49\047\uff49\110\uff49\325" +
    "\uff49\u010f\uff49\001\002\000\026\021\uff52\022\u038a\047\uff52" +
    "\110\uff52\123\uff52\142\uff52\145\uff52\325\uff52\342\uff52\u010f" +
    "\uff52\001\002\000\024\021\uff55\047\uff55\110\uff55\123\uff55" +
    "\142\uff55\145\uff55\325\uff55\342\uff55\u010f\uff55\001\002\000" +
    "\004\002\001\001\002\000\044\002\uffeb\003\uffeb\102\uffeb" +
    "\125\uffeb\146\uffeb\173\uffeb\200\uffeb\202\uffeb\227\uffeb\267" +
    "\uffeb\270\uffeb\276\uffeb\310\uffeb\316\uffeb\322\uffeb\346\uffeb" +
    "\351\uffeb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u03c7\000\046\003\006\004\041\005\014\006\011\007" +
    "\030\010\020\030\026\044\005\075\024\106\042\116\016" +
    "\124\015\136\036\227\017\253\023\304\010\340\004\362" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\u03c8\001\001\000\002\001\001\000\004\076\u0384\001" +
    "\001\000\006\012\324\013\u0372\001\001\000\046\003\u0371" +
    "\004\041\005\014\006\011\007\030\010\020\030\026\044" +
    "\005\075\024\106\042\116\016\124\015\136\036\227\017" +
    "\253\023\304\010\340\004\362\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\003\u036e\004\041\005\014" +
    "\006\011\007\030\010\020\030\026\044\005\075\024\106" +
    "\042\116\016\124\015\136\036\227\017\253\023\304\010" +
    "\340\004\362\013\001\001\000\004\011\u036d\001\001\000" +
    "\004\011\u036c\001\001\000\004\011\u036b\001\001\000\004" +
    "\011\u0369\001\001\000\004\262\u0361\001\001\000\026\137" +
    "\u02fe\140\u0302\141\u02fd\162\u02f7\163\u0301\164\u0303\172\u02f8" +
    "\267\u02fa\314\u02f6\316\u012a\001\001\000\004\011\u02c6\001" +
    "\001\000\004\011\u02c5\001\001\000\004\057\u02a9\001\001" +
    "\000\004\011\u02a8\001\001\000\022\230\u0130\231\u012f\234" +
    "\u012e\235\u0133\237\u0128\267\u012c\314\u0129\316\u012a\001\001" +
    "\000\046\003\u0127\004\041\005\014\006\011\007\030\010" +
    "\020\030\026\044\005\075\024\106\042\116\016\124\015" +
    "\136\036\227\017\253\023\304\010\340\004\362\013\001" +
    "\001\000\024\031\372\032\357\034\367\035\360\037\376" +
    "\041\375\270\373\u0100\356\u0102\365\001\001\000\004\011" +
    "\355\001\001\000\006\012\154\017\352\001\001\000\004" +
    "\057\331\001\001\000\004\057\113\001\001\000\004\011" +
    "\112\001\001\000\004\012\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\341\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\342\060\001\001\000\002\001" +
    "\001\000\004\343\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\344\067\001\001\000\004\345\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\075\076\001\001" +
    "\000\004\346\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\347\102\001\001\000\002\001\001\000\006" +
    "\012\104\073\105\001\001\000\004\074\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\110\001\001" +
    "\000\004\074\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\122\015\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\060\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\322" +
    "\001\001\000\002\001\001\000\006\012\125\125\126\001" +
    "\001\000\002\001\001\000\004\130\127\001\001\000\004" +
    "\067\137\001\001\000\006\012\122\015\131\001\001\000" +
    "\004\122\133\001\001\000\006\012\122\015\134\001\001" +
    "\000\002\001\001\000\004\122\135\001\001\000\002\001" +
    "\001\000\006\056\141\062\142\001\001\000\002\001\001" +
    "\000\006\056\141\062\310\001\001\000\022\012\154\017" +
    "\166\022\160\047\150\051\153\053\152\054\147\064\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\255\056\252\065\261\001\001\000\002\001" +
    "\001\000\004\052\243\001\001\000\004\050\235\001\001" +
    "\000\004\020\230\001\001\000\004\063\225\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\012\154\017\166\022\160\047\215\051" +
    "\153\053\152\054\147\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\367\170\001\001\000" +
    "\010\022\173\330\172\370\176\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\371\200\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\022\173\330" +
    "\172\370\202\001\001\000\002\001\001\000\010\012\154" +
    "\017\204\055\205\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\154\017" +
    "\204\055\214\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\154\017\204\055\220\001" +
    "\001\000\002\001\001\000\010\012\154\017\204\055\222" +
    "\001\001\000\002\001\001\000\006\056\141\062\227\001" +
    "\001\000\006\056\141\062\226\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\122\015\232\001\001\000\002\001\001\000\016" +
    "\012\154\017\166\022\160\051\240\053\152\054\147\001" +
    "\001\000\016\012\154\017\166\022\160\051\236\053\152" +
    "\054\147\001\001\000\002\001\001\000\004\050\237\001" +
    "\001\000\002\001\001\000\004\050\241\001\001\000\002" +
    "\001\001\000\014\012\154\017\166\022\160\053\247\054" +
    "\147\001\001\000\002\001\001\000\014\012\154\017\166" +
    "\022\160\053\245\054\147\001\001\000\004\052\246\001" +
    "\001\000\002\001\001\000\004\052\250\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\066\271\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\012\154\017\166" +
    "\022\160\047\265\051\153\053\152\054\147\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\056\263\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\012\154\017\166" +
    "\022\160\047\304\051\153\053\152\054\147\001\001\000" +
    "\002\001\001\000\020\012\154\017\166\022\160\047\272" +
    "\051\153\053\152\054\147\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\012\154\017\166\022\160\047\274" +
    "\051\153\053\152\054\147\001\001\000\002\001\001\000" +
    "\020\012\154\017\166\022\160\047\276\051\153\053\152" +
    "\054\147\001\001\000\004\061\300\001\001\000\020\012" +
    "\154\017\166\022\160\047\302\051\153\053\152\054\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\061" +
    "\303\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\154\017\204\055\307\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\063\312\001\001" +
    "\000\002\001\001\000\022\012\154\017\166\022\160\047" +
    "\315\051\153\053\152\054\147\126\314\001\001\000\004" +
    "\127\320\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\125\125\321\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\324\013\325\001" +
    "\001\000\004\014\326\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\330\001\001\000\002\001\001\000" +
    "\004\117\333\001\001\000\002\001\001\000\010\012\122" +
    "\015\335\120\334\001\001\000\002\001\001\000\004\121" +
    "\346\001\001\000\004\123\340\001\001\000\004\012\341" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\122" +
    "\015\350\001\001\000\004\067\347\001\001\000\002\001" +
    "\001\000\004\122\351\001\001\000\002\001\001\000\004" +
    "\011\353\001\001\000\046\003\354\004\041\005\014\006" +
    "\011\007\030\010\020\030\026\044\005\075\024\106\042" +
    "\116\016\124\015\136\036\227\017\253\023\304\010\340" +
    "\004\362\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\u0121\001\001\000\004\021\u0118\001\001\000\004" +
    "\021\u0116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\u0110\001\001" +
    "\000\004\021\u010a\001\001\000\002\001\001\000\004\021" +
    "\u0107\001\001\000\004\021\u0100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\324\013" +
    "\u0101\001\001\000\004\u0101\u0102\001\001\000\002\001\001" +
    "\000\006\012\324\013\u0104\001\001\000\004\u0101\u0105\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\324" +
    "\013\u0108\001\001\000\004\u0101\u0109\001\001\000\002\001" +
    "\001\000\006\012\122\015\u010b\001\001\000\004\033\u010d" +
    "\001\001\000\006\012\122\015\u010e\001\001\000\002\001" +
    "\001\000\004\033\u010f\001\001\000\002\001\001\000\006" +
    "\012\324\013\u0111\001\001\000\004\040\u0113\001\001\000" +
    "\006\012\324\013\u0114\001\001\000\002\001\001\000\004" +
    "\040\u0115\001\001\000\002\001\001\000\004\012\u0117\001" +
    "\001\000\002\001\001\000\006\012\u0119\042\u011a\001\001" +
    "\000\002\001\001\000\004\043\u011b\001\001\000\002\001" +
    "\001\000\006\012\u0119\042\u011d\001\001\000\004\043\u011e" +
    "\001\001\000\002\001\001\000\006\012\122\015\u0120\001" +
    "\001\000\002\001\001\000\004\012\u0122\001\001\000\004" +
    "\036\u0124\001\001\000\004\012\u0125\001\001\000\002\001" +
    "\001\000\004\036\u0126\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\270" +
    "\u022e\001\001\000\006\012\u0225\232\u0227\001\001\000\002" +
    "\001\001\000\004\012\u0224\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\122\015\u013e" +
    "\001\001\000\006\012\324\013\u0136\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\072\u0137" +
    "\236\u0139\001\001\000\002\001\001\000\006\012\104\073" +
    "\u013c\001\001\000\002\001\001\000\004\075\u013b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\240\u013f\241\u0142\246\u0144\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\012\u0156\175\u0154\177\u0153\207" +
    "\u0157\220\u0152\226\u0158\001\001\000\002\001\001\000\006" +
    "\247\u0145\250\u0148\001\001\000\002\001\001\000\004\251" +
    "\u014e\001\001\000\002\001\001\000\004\021\u014b\001\001" +
    "\000\004\021\u0149\001\001\000\004\012\u014a\001\001\000" +
    "\002\001\001\000\004\012\u014c\001\001\000\002\001\001" +
    "\000\006\247\u014f\250\u0148\001\001\000\002\001\001\000" +
    "\004\251\u0150\001\001\000\002\001\001\000\004\012\u0212" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\176" +
    "\u020f\001\001\000\004\012\u020d\001\001\000\010\023\u01ab" +
    "\024\u01a7\025\u01aa\001\001\000\004\221\u015c\001\001\000" +
    "\002\001\001\000\004\174\u0196\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\211\u0160\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\222\u0162" +
    "\001\001\000\004\012\u0163\001\001\000\002\001\001\000" +
    "\004\102\u0166\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\223\u0167\001\001\000\002\001\001\000\004\012" +
    "\u0169\001\001\000\004\102\u016a\001\001\000\004\223\u016b" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\211" +
    "\u016e\001\001\000\004\222\u016f\001\001\000\002\001\001" +
    "\000\004\224\u0172\001\001\000\004\012\u0190\001\001\000" +
    "\002\001\001\000\006\012\324\013\u0174\001\001\000\004" +
    "\213\u0176\001\001\000\004\012\u018e\001\001\000\004\214" +
    "\u0178\001\001\000\004\215\u0183\001\001\000\004\174\u017a" +
    "\001\001\000\004\351\u017c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\352\u0180\001\001\000\004\204\u0181\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\214\u018d" +
    "\001\001\000\004\217\u018c\001\001\000\004\217\u0186\001" +
    "\001\000\002\001\001\000\004\216\u018a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\225\u0191\001\001\000\002\001" +
    "\001\000\004\012\u0193\001\001\000\004\225\u0194\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\056\141\062\u0198\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\u020b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\u0204\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\200\u01c1" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\u0203\001\001\000\014\210" +
    "\u01cb\212\u01ca\354\u01c5\356\u01c3\357\u01c4\001\001\000\004" +
    "\203\u01ff\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\355\u01f7\001\001\000\004\211\u01f4\001\001\000\004" +
    "\201\u01e4\001\001\000\004\012\u01e1\001\001\000\006\206" +
    "\u01e0\207\u01d8\001\001\000\002\001\001\000\006\206\u01d7" +
    "\207\u01d8\001\001\000\004\174\u01d3\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\211\u01d2\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\056\141\062\u01d5\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\210\u01d9\212" +
    "\u01ca\001\001\000\006\206\u01da\207\u01d8\001\001\000\002" +
    "\001\001\000\006\012\324\013\u01dc\001\001\000\004\213" +
    "\u01dd\001\001\000\004\214\u01de\001\001\000\004\174\u01df" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\210" +
    "\u01cb\212\u01ca\354\u01c5\357\u01e2\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\202\u01e9\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\203\u01ef" +
    "\001\001\000\004\174\u01ea\001\001\000\004\205\u01ec\001" +
    "\001\000\002\001\001\000\006\206\u01ed\207\u01d8\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\205\u01f8\001\001\000\006\206\u01f9\207\u01d8" +
    "\001\001\000\002\001\001\000\004\353\u01fb\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\174\u0200\001\001\000\004\205\u0201\001" +
    "\001\000\006\206\u0202\207\u01d8\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\u0208\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\012\u0156\175\u0210" +
    "\177\u0153\207\u0157\220\u0152\226\u0158\001\001\000\002\001" +
    "\001\000\004\176\u0211\001\001\000\002\001\001\000\004" +
    "\211\u0213\001\001\000\004\222\u0214\001\001\000\002\001" +
    "\001\000\004\012\u0216\001\001\000\016\023\u0217\024\u01a7" +
    "\025\u01aa\242\u021b\243\u021c\244\u021a\001\001\000\004\200" +
    "\u0222\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\245\u021f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\204\u0223\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\233\u0229\001\001\000\004\012\u022d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\324\013" +
    "\u0276\001\001\000\006\012\324\013\u0230\001\001\000\002" +
    "\001\001\000\012\022\u0233\315\u0235\317\u0234\320\u0232\001" +
    "\001\000\002\001\001\000\004\322\u0272\001\001\000\004" +
    "\321\u026f\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\025\u023a\324\u0238\325\u023c\326\u0239\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\331\u0264\001\001\000" +
    "\004\331\u023e\001\001\000\002\001\001\000\012\304\u0249" +
    "\332\u0248\333\u024b\366\u024e\001\001\000\004\322\u0240\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\075\u0244" +
    "\327\u0243\001\001\000\004\075\u0245\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\334\u0255\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\335\u0252\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\304\u0249\332\u0256\333\u024b\366" +
    "\u024e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\u025c\306\u025e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\322\u0265\001\001\000\002\001\001\000" +
    "\014\005\u0267\075\024\106\042\116\016\124\015\001\001" +
    "\000\002\001\001\000\010\022\173\330\u026a\372\u026b\001" +
    "\001\000\006\022\173\330\u026d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\022\u0233\317\u0234" +
    "\320\u0271\001\001\000\002\001\001\000\004\025\u0273\001" +
    "\001\000\004\323\u0274\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\271\u0278\001\001\000\002\001\001\000" +
    "\010\022\u027a\272\u0279\273\u027b\001\001\000\004\301\u028f" +
    "\001\001\000\014\012\u027f\023\u027e\024\u01a7\025\u01aa\275" +
    "\u027d\001\001\000\002\001\001\000\004\025\u020b\001\001" +
    "\000\004\274\u028b\001\001\000\004\276\u0286\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\300\u0284\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\277\u0289\300\u028a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\022\u027a\273\u028d\001\001" +
    "\000\002\001\001\000\010\302\u029e\303\u029d\304\u02a0\001" +
    "\001\000\004\307\u0290\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\310\u0294\001\001\000" +
    "\002\001\001\000\016\005\u0296\075\024\106\042\116\016" +
    "\124\015\311\u0297\001\001\000\016\005\u0299\075\024\106" +
    "\042\116\016\124\015\312\u029a\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\005\u029b\075\024\106\042\116" +
    "\016\124\015\313\u029c\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\305\u02a4\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\u025c\306\u02a3\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\302\u02a6\303\u029d\304\u02a0" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\107\u02aa\001\001\000\006\012\122\015\u02ac" +
    "\001\001\000\002\001\001\000\006\072\u02ad\110\u02ae\001" +
    "\001\000\002\001\001\000\004\114\u02b1\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\111" +
    "\u02b5\112\u02b6\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\113\u02ba\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\112\u02bb\001\001\000\002" +
    "\001\001\000\004\113\u02bc\001\001\000\002\001\001\000" +
    "\004\115\u02be\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\111\u02c1\112\u02b6\001\001\000\002\001\001\000" +
    "\004\115\u02c3\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\005\u02ca\006\u02c9\007\u02cc\010" +
    "\u02cb\030\026\044\005\075\024\106\042\116\016\124\015" +
    "\136\036\227\017\253\023\257\u02c7\304\010\340\004\350" +
    "\u02ce\362\013\001\001\000\004\011\u02f5\001\001\000\004" +
    "\262\u02f1\001\001\000\046\003\u02f0\004\041\005\014\006" +
    "\011\007\030\010\020\030\026\044\005\075\024\106\042" +
    "\116\016\124\015\136\036\227\017\253\023\304\010\340" +
    "\004\362\013\001\001\000\046\003\u02ef\004\041\005\014" +
    "\006\011\007\030\010\020\030\026\044\005\075\024\106" +
    "\042\116\016\124\015\136\036\227\017\253\023\304\010" +
    "\340\004\362\013\001\001\000\004\011\u02ed\001\001\000" +
    "\046\003\u02ec\004\041\005\014\006\011\007\030\010\020" +
    "\030\026\044\005\075\024\106\042\116\016\124\015\136" +
    "\036\227\017\253\023\304\010\340\004\362\013\001\001" +
    "\000\006\012\154\017\u02e9\001\001\000\010\263\u02d0\265" +
    "\u02cf\375\u02d3\001\001\000\004\011\u02e8\001\001\000\004" +
    "\011\u02e7\001\001\000\006\262\u02dc\264\u02db\001\001\000" +
    "\006\262\u02d6\266\u02d5\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\012\u02d8\022\u02d9\261" +
    "\u02da\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\376\u02df\001\001\000" +
    "\010\012\u02d8\022\u02d9\261\u02dd\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\377\u02e5\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\u02ea\001\001" +
    "\000\046\003\u02eb\004\041\005\014\006\011\007\030\010" +
    "\020\030\026\044\005\075\024\106\042\116\016\124\015" +
    "\136\036\227\017\253\023\304\010\340\004\362\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\003\u02ee" +
    "\004\041\005\014\006\011\007\030\010\020\030\026\044" +
    "\005\075\024\106\042\116\016\124\015\136\036\227\017" +
    "\253\023\304\010\340\004\362\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\u02f3" +
    "\022\u02f4\260\u02f2\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\u032a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\324\013" +
    "\u0326\001\001\000\006\012\122\015\u031e\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\211\u0304\001\001\000" +
    "\002\001\001\000\004\012\u0306\001\001\000\002\001\001" +
    "\000\006\012\122\015\u0308\001\001\000\004\165\u030a\001" +
    "\001\000\006\012\u0315\166\u0316\001\001\000\004\170\u030c" +
    "\001\001\000\004\072\u0314\001\001\000\004\067\u030d\001" +
    "\001\000\004\171\u030f\001\001\000\004\012\u0310\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\u0312\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\102\u0318\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\167\u0319\001\001\000\002\001\001\000\004" +
    "\012\u031b\001\001\000\004\102\u031c\001\001\000\004\167" +
    "\u031d\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\012\u0156\175\u0320\177\u0153\207\u0157\220\u0152\226\u0158\001" +
    "\001\000\004\176\u0321\001\001\000\002\001\001\000\004" +
    "\173\u0323\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\075\u0328\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\142\u032d\143" +
    "\u032b\001\001\000\004\147\u035f\001\001\000\004\144\u032f" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\145" +
    "\u0331\146\u0332\001\001\000\004\373\u0337\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\145\u0334\146\u0332\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\374\u033b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\151\u0340\001" +
    "\001\000\002\001\001\000\016\153\u0345\154\u0344\156\u0343" +
    "\160\u0346\360\u0347\361\u0342\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\151\u035c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\155\u034d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\157\u0353\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\155\u0356\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\155\u035a\161\u035b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\u0360\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\012\u02f3\022\u02f4\254\u0363\260\u0362" +
    "\001\001\000\004\255\u0365\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\256\u0367\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\003\u036a\004" +
    "\041\005\014\006\011\007\030\010\020\030\026\044\005" +
    "\075\024\106\042\116\016\124\015\136\036\227\017\253" +
    "\023\304\010\340\004\362\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\122\015\u0370\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\022\u0375\363\u0377\365" +
    "\u0376\001\001\000\010\022\u0375\363\u0380\365\u0376\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\364\u037b\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\022\u0375\363\u037c\365\u0376\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\365\u037e\001\001\000\004" +
    "\364\u037f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\057\u0385\001\001\000\022\012\154\017\166\022\160\047" +
    "\u0386\051\153\053\152\054\147\070\u0387\001\001\000\010" +
    "\012\u038c\045\u03c5\046\u038d\001\001\000\004\131\u0393\001" +
    "\001\000\004\071\u038a\001\001\000\020\012\154\017\166" +
    "\022\160\047\u038b\051\153\053\152\054\147\001\001\000" +
    "\002\001\001\000\010\012\u038c\045\u038f\046\u038d\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\u038c\046" +
    "\u0392\001\001\000\004\071\u0391\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\067\u03ac\001" +
    "\001\000\006\012\122\015\u0395\001\001\000\010\012\u038c" +
    "\045\u0396\046\u038d\001\001\000\006\133\u039b\134\u0399\001" +
    "\001\000\004\135\u03ab\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\135\u03a4\001\001\000\004\132\u03a0\001" +
    "\001\000\004\135\u039e\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\122\015\u03a1\001\001\000\002\001" +
    "\001\000\010\012\u038c\045\u03a2\046\u038d\001\001\000\006" +
    "\133\u03a3\134\u0399\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\122\015\u03a6\001\001\000\010\012\u038c" +
    "\045\u03a7\046\u038d\001\001\000\002\001\001\000\006\056" +
    "\141\062\u03a9\001\001\000\006\133\u03aa\134\u0399\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\104\u03ad\001" +
    "\001\000\004\077\u03b6\001\001\000\002\001\001\000\020" +
    "\012\154\017\166\022\160\047\u03b0\051\153\053\152\054" +
    "\147\001\001\000\004\105\u03b1\001\001\000\002\001\001" +
    "\000\020\012\154\017\166\022\160\047\u03b3\051\153\053" +
    "\152\054\147\001\001\000\004\105\u03b4\001\001\000\002" +
    "\001\001\000\006\056\141\062\u03c4\001\001\000\004\100" +
    "\u03b8\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\012\154\017\166\022\160\047\u03ba\051\153\053\152\054" +
    "\147\001\001\000\004\101\u03bc\001\001\000\004\012\u03c3" +
    "\001\001\000\004\102\u03bd\001\001\000\004\103\u03bf\001" +
    "\001\000\020\012\154\017\166\022\160\047\u03c0\051\153" +
    "\053\152\054\147\001\001\000\002\001\001\000\004\101" +
    "\u03c1\001\001\000\004\102\u03c2\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\071\u03c6\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
    public List<String> SynErr = new ArrayList();
    public List<CupError> Errs = new ArrayList();
    private Symbol s;

    public final Class getSymbolContainer() {
        return sym.class;
    }

    public void syntax_error(Symbol cur_token){
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) cur_token);
        List<Integer> ids = expected_token_ids();
        CupError cupError = new CupError(s.right + 1, s.left + 1, s.value);
        for (Integer expected : ids) {
                String aux = symbl_name_from_id(expected);
                cupError.addExpected(aux);
        }
        Errs.add(cupError);
    }

    public void unrecovered_syntax_error(Symbol cur_token){
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) cur_token);
        List<Integer> ids = expected_token_ids();
        CupError cupError = new CupError(s.right + 1, s.left + 1, s.value);
        for (Integer expected : ids) {
                String aux = symbl_name_from_id(expected);
                cupError.addExpected(aux);
        }
        Errs.add(cupError);
    }

    public String symbl_name_from_id(int id) {
        Field[] fields = getSymbolContainer().getFields();
        for(Field f : fields){
            try {
                  if (f.getInt(null)==id) return f.getName();
            } catch (IllegalArgumentException e) {
            } catch (IllegalAccessException e) {
            }
        }
        return "Simbolo Invalido id";
    }

    public List<Integer> expected_token_ids() {
        List<Integer> ret = new ArrayList();
        int parse_state = ((Symbol)stack.peek()).parse_state ;
        short[] row = action_tab[parse_state];
        for (int i = 0; i<row.length; i+=2){
                if (row[i]==-1) continue;
                if (!validate_expected_symbol(row[i])) continue;
                ret.add(new Integer(row[i]));
        }
        return ret;
    }

    protected static final int _error_sync_size(){
        return 1;
    }

    private boolean validate_expected_symbol(int id){
        short lhs,rhs_size;
        int act;
        try {
            virtual_parse_stack vstack = new virtual_parse_stack(stack);
            for (;;)
            {
                act = get_action(vstack.top(), id);
                if (act == 0) return false;
                if (act > 0)
                {
                        vstack.push(act-1);
                        if (!advance_lookahead()) return true;
                }
                else
                {
                        if ((-act)-1 == start_production())  return true;
                        lhs = production_tab[(-act)-1][0];
                        rhs_size = production_tab[(-act)-1][1];
                        for (int i = 0; i < rhs_size; i++) vstack.pop();
                        vstack.push(get_reduce(vstack.top(), lhs));
                }
            }
        } catch (Exception e) {
                e.printStackTrace();
        }
        return true;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 555: // Data_Type ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Data_Type",243, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 554: // Data_Type ::= Flotante 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Data_Type",243, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 553: // Data_Type ::= Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Data_Type",243, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 552: // RepeatProcedureA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RepeatProcedureA",242, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 551: // RepeatProcedureA ::= Coma RepeatProcedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RepeatProcedureA",242, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 550: // RepeatProcedure ::= Data_Type RepeatProcedureA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RepeatProcedure",241, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 549: // RepeatProcedure ::= Variable Igual Data_Type RepeatProcedureA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RepeatProcedure",241, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 548: // ExecProcedure ::= ClauseExec Object2 RepeatProcedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExecProcedure",240, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 547: // ExecProcedure ::= ClauseExec Object2 AbreParentesis RepeatProcedure CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExecProcedure",240, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 546: // ExecProcedure ::= ClauseExec Object2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExecProcedure",240, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 545: // EXECUTE_AS_CLAUSE ::= ClauseExec AS Clause 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXECUTE_AS_CLAUSE",244, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 544: // FuncOpcC ::= OFF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcC",219, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 543: // FuncOpcC ::= ON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcC",219, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 542: // FuncOpcB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcB",218, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 541: // FuncOpcB ::= Coma FuncOpc 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcB",218, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 540: // FuncOpcA ::= INLINE Igual FuncOpcC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 539: // FuncOpcA ::= EXECUTE_AS_CLAUSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 538: // FuncOpcA ::= CALLED ON NULL INPUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 537: // FuncOpcA ::= RETURNS NULL ON NULL INPUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 536: // FuncOpcA ::= SCHEMABINDING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 535: // FuncOpcA ::= ENCRYPTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 534: // FuncOpc ::= FuncOpcA FuncOpcB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpc",216, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 533: // With ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("With",215, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 532: // With ::= WITH FuncOpc 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("With",215, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 531: // DType ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DType",214, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 530: // DType ::= Flotante 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DType",214, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 529: // DType ::= Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DType",214, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 528: // DType ::= Variable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DType",214, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 527: // DTypes ::= DType 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DTypes",248, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 526: // DTypes ::= AbreParentesis DType CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DTypes",248, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 525: // SCT ::= Select 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SCT",213, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 524: // SCT ::= AbreParentesis Select CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SCT",213, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 523: // Table ::= TABLE With As RETURN SCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Table",212, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 522: // Data ::= Tipo_datoA With As BEGIN DML RETURN DTypes END 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Data",211, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 521: // Type_Return ::= Table 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type_Return",210, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 520: // Type_Return ::= Data 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type_Return",210, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 519: // ReadOnly ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReadOnly",209, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 518: // ReadOnly ::= READONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReadOnly",209, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 517: // As ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("As",208, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 516: // As ::= AS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("As",208, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 515: // Param_B ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Param_B",207, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 514: // Param_B ::= Coma Param_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Param_B",207, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 513: // Param_A ::= Param Param_B 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Param_A",206, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 512: // Param ::= Variable As Tipo_datoA ReadOnly 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Param",205, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 511: // OrAlter ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrAlter",204, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 510: // OrAlter ::= OR ALTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrAlter",204, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 509: // Params ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Params",203, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 508: // Params ::= Param_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Params",203, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 507: // Function ::= OrAlter FUNCTION Object2 AbreParentesis Params CierraParentesis RETURNS Type_Return 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Function",202, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 506: // CursorDeclareg ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareg",229, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 505: // CursorDeclareg ::= OF ColumnListA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareg",229, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 504: // CursorDeclaref ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaref",228, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 503: // CursorDeclaref ::= FOR UPDATE CursorDeclareg 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaref",228, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 502: // CursorDeclaree ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaree",227, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 501: // CursorDeclaree ::= TYPE_WARNING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaree",227, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 500: // CursorDeclared ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",226, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 499: // CursorDeclared ::= OPTIMISTIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",226, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 498: // CursorDeclared ::= SCROLL_LOCKS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",226, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 497: // CursorDeclared ::= READ_ONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",226, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 496: // CursorDeclarec ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 495: // CursorDeclarec ::= FAST_FORWARD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 494: // CursorDeclarec ::= DYNAMIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 493: // CursorDeclarec ::= KEYSET 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 492: // CursorDeclarec ::= STATIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 491: // CursorDeclareb ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareb",224, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 490: // CursorDeclareb ::= FORWARD_ONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareb",224, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 489: // CursorDeclareb ::= SCROLL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareb",224, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 488: // CursorDeclarea ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarea",223, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 487: // CursorDeclarea ::= GLOBAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarea",223, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 486: // CursorDeclarea ::= LOCAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarea",223, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 485: // CursorDeclare ::= DECLARE ID CURSOR CursorDeclarea CursorDeclareb CursorDeclarec CursorDeclared CursorDeclaree FOR Select CursorDeclaref 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclare",222, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 484: // StmtSP2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP2",201, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 483: // StmtSP2 ::= DML 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP2",201, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 482: // StmtSP1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP1",200, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 481: // StmtSP1 ::= DML StmtSP2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP1",200, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 480: // StmtSP ::= DML StmtSP1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP",199, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 479: // StartSP ::= BEGIN StmtSP END 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StartSP",198, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 478: // ReplicationSP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReplicationSP",197, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 477: // ReplicationSP ::= FOR REPLICATION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReplicationSP",197, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 476: // Clause ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clause",196, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 475: // Clause ::= OWNER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clause",196, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 474: // Clause ::= SELF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clause",196, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 473: // Clause ::= CALLER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clause",196, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 472: // ProcOptionRec ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOptionRec",195, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 471: // ProcOptionRec ::= Coma ProcOption1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOptionRec",195, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 470: // ClauseExec ::= EXEC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ClauseExec",194, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 469: // ClauseExec ::= EXECUTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ClauseExec",194, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 468: // ProcOption2 ::= ClauseExec AS Clause 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption2",193, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 467: // ProcOption2 ::= RECOMPILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption2",193, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 466: // ProcOption2 ::= ENCRYPTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption2",193, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 465: // ProcOption1 ::= ProcOption2 ProcOptionRec 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption1",192, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 464: // ProcOption ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption",191, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 463: // ProcOption ::= WITH ProcOption1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption",191, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 462: // TipoD_SP3 ::= OUTPUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP3",190, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 461: // TipoD_SP3 ::= OUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP3",190, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 460: // TipoD_SP2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP2",189, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 459: // TipoD_SP2 ::= TipoD_SP3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP2",189, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // TipoD_SP1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP1",188, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // TipoD_SP1 ::= Igual DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP1",188, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // TipoD_SP ::= ID READONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP",187, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // TipoD_SP ::= CURSOR VARYING TipoD_SP3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP",187, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // TipoD_SP ::= Tipo_dato TipoD_SP1 TipoD_SP2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP",187, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // ParamsB_SP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsB_SP",186, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // ParamsB_SP ::= Coma ParamsA_SP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsB_SP",186, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // ParamsA_SP ::= Variable TipoD_SP ParamsB_SP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsA_SP",185, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // ParamsSP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsSP",184, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // ParamsSP ::= ParamsA_SP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsSP",184, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // NumSP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NumSP",183, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // NumSP ::= PyC Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NumSP",183, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // SP_Reservada ::= PROCEDURE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SP_Reservada",182, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // SP_Reservada ::= PROC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SP_Reservada",182, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // Procedure ::= OrAlter SP_Reservada Object2 NumSP ParamsSP ProcOption ReplicationSP AS StartSP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Procedure",181, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // RollbackA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RollbackA",180, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // RollbackA ::= TranName NameA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RollbackA",180, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // Rollback ::= ROLLBACK RollbackA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Rollback",179, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // OnOff ::= OFF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OnOff",253, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // OnOff ::= ON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OnOff",253, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // CommitB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CommitB",252, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // CommitB ::= WITH AbreParentesis DELAYED_DURABILITY Igual OnOff CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CommitB",252, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // CommitA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CommitA",178, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // CommitA ::= TranName NameA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CommitA",178, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // Commit ::= COMMIT CommitA CommitB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Commit",177, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // TranName ::= TRANSACTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TranName",176, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // TranName ::= TRAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TranName",176, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // NameA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NameA",175, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // NameA ::= Variable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NameA",175, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // NameA ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NameA",175, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // Name ::= Variable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Name",174, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // Name ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Name",174, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // SavePoint ::= SAVE TranName Name 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SavePoint",173, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // FinalTran ::= Rollback Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FinalTran",251, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // FinalTran ::= Commit Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FinalTran",251, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // BeginTranC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranC",172, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // BeginTranC ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranC",172, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // BeginTranB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranB",171, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // BeginTranB ::= WITH MARK BeginTranC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranB",171, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // BeginTranA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranA",170, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // BeginTranA ::= Name BeginTranB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranA",170, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // BeginTran ::= BEGIN TranName BeginTranA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTran",169, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // AlterTableDropC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropC",167, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // AlterTableDropC ::= Coma AlterTableDropA AlterTableDropC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropC",167, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // AlterTableDropB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropB",166, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // AlterTableDropB ::= CONSTRAINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropB",166, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // AlterTableDropA ::= COLUMN IFE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropA",165, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // AlterTableDropA ::= AlterTableDropB IFE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropA",165, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // AlterTableDrop ::= DROP AlterTableDropA AlterTableDropC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDrop",164, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // AlterColumnE ::= NOT FOR REPLICATION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnE",163, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // AlterColumnE ::= ROWGUIDCOL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnE",163, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // AlterColumnD ::= DROP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnD",162, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // AlterColumnD ::= ADD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnD",162, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // AlterColumnA ::= Tipo_dato ColumnDefA ColumnDefG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnA",161, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // AlterColumnC ::= AlterColumnD AlterColumnE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnC",160, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // AlterColumnC ::= AlterColumnA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnC",160, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // AlterColumn ::= ALTER COLUMN ID AlterColumnC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumn",159, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // AlterTableA ::= AlterTableDrop 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableA",158, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // AlterTableA ::= ADD CNC CNCA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableA",158, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // AlterTableA ::= AlterColumn 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableA",158, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // AlterTable ::= TABLE Object3 AlterTableA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTable",157, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // AlterViewA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterViewA",156, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // AlterViewA ::= ColumnList 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterViewA",156, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // AlterView ::= VIEW Object2 AlterViewA AS Select 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterView",155, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // AlterUser ::= USER ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterUser",154, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // AlterDBB ::= SET ROLLBACK IMMEDIATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDBB",153, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // AlterDBB ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDBB",153, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // AlterDBA ::= CURRENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDBA",152, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // AlterDBA ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDBA",152, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // AlterDatabase ::= DATABASE AlterDBA AlterDBB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDatabase",151, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // AlterA ::= Function 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // AlterA ::= Procedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // AlterA ::= AlterView 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // AlterA ::= AlterDatabase 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // AlterA ::= AlterUser 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // AlterA ::= AlterTable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // Alter ::= ALTER AlterA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alter",149, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // TableIndex ::= INDEX ID ColumnConstrC TableConstrB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableIndex",148, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // TableConstrE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrE",147, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // TableConstrE ::= Coma ID TableConstrE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrE",147, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // TableConstrD ::= AbreParentesis ID TableConstrE CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrD",146, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // TableConstrC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrC",145, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // TableConstrC ::= Coma ID OrderB TableConstrC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrC",145, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // TableConstrB ::= AbreParentesis ID OrderB TableConstrC CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrB",144, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // TableConstrA ::= CHECK NFR AbreParentesis SearchCondition CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // TableConstrA ::= FOREIGN KEY TableConstrD REFERENCES Object2 ColumnConstrE ColumnConstrF NFR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // TableConstrA ::= UNIQUE ColumnConstrC TableConstrB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // TableConstrA ::= PRIMARY KEY ColumnConstrC TableConstrB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // TableConstr ::= ColumnConstrA TableConstrA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstr",142, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // ColumnConstrI ::= SET ColumnConstrH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrI",141, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // ColumnConstrI ::= CASCADE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrI",141, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // ColumnConstrH ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrH",140, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // ColumnConstrH ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrH",140, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // ColumnConstrG ::= UPDATE ColumnConstrI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrG",139, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // ColumnConstrG ::= DELETE ColumnConstrI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrG",139, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // ColumnConstrF ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrF",138, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // ColumnConstrF ::= ON ColumnConstrG ColumnConstrF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrF",138, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // ColumnConstrE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrE",137, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // ColumnConstrE ::= AbreParentesis ID CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrE",137, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // ColumnConstrD ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrD",136, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // ColumnConstrD ::= FOREIGN KEY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrD",136, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // ColumnConstrC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrC",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // ColumnConstrC ::= NONCLUSTERED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrC",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // ColumnConstrC ::= CLUSTERED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrC",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // ColumnConstrB ::= CHECK NFR AbreParentesis SearchCondition CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // ColumnConstrB ::= ColumnConstrD REFERENCES Object2 ColumnConstrE ColumnConstrF NFR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // ColumnConstrB ::= UNIQUE ColumnConstrC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // ColumnConstrB ::= PRIMARY KEY ColumnConstrC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // ColumnConstrA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrA",133, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // ColumnConstrA ::= CONSTRAINT ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrA",133, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // ColumnConstr ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstr",132, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // ColumnConstr ::= ColumnConstrA ColumnConstrB ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstr",132, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // ColumnDefH ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefH",131, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // ColumnDefH ::= ROWGUIDCOL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefH",131, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // ColumnDefG ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefG",130, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // ColumnDefG ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefG",130, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // ColumnDefF ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefF",129, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // ColumnDefF ::= AbreParentesis Entero Coma Entero CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefF",129, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // ColumnDefE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefE",128, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // ColumnDefE ::= IDENTITY ColumnDefF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefE",128, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // ColumnDefD ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // ColumnDefD ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // ColumnDefD ::= Flotante 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // ColumnDefD ::= Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // ColumnDefA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefA",126, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // ColumnDefA ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefA",126, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // ColumnDefV ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefV",233, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // ColumnDefV ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefV",233, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // ColumnDefV ::= NOT NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefV",233, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // ColumnDefW ::= FOR REPLICATION ColumnDefV 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefW",235, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // ColumnDefW ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefW",235, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // ColumnDefX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefX",234, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // ColumnDefX ::= NOT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefX",234, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // ColumnDefY ::= ColumnConstrB ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // ColumnDefY ::= ROWGUIDCOL ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // ColumnDefY ::= ColumnDefX ColumnDefW ColumnDefH ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // ColumnDefY ::= IDENTITY ColumnDefF NFR ColumnDefH ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // ColumnDefY ::= DEFAULT ColumnDefD ColumnDefE NFR ColumnDefH ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // ColumnDefZ ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefZ",236, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // ColumnDefZ ::= ColumnDefY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefZ",236, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // ColumnDefZ ::= CONSTRAINT ID ColumnDefY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefZ",236, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // ColumnDef ::= ID Tipo_dato ColumnDefA ColumnDefZ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDef",125, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // CNCA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNCA",124, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // CNCA ::= Coma CNC CNCA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNCA",124, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // CNC ::= TableIndex 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNC",123, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // CNC ::= TableConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNC",123, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // CNC ::= ColumnDef 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNC",123, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // NFR2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR2",232, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // NFR2 ::= NOT ColumnDefG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR2",232, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // NFR1 ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR1",231, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // NFR1 ::= FOR REPLICATION NFR2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR1",231, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // NFR ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR",122, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // NFR ::= NOT NFR1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR",122, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // FileGroup ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileGroup",121, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // FileGroup ::= ON PRIMARY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileGroup",121, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // CreateTable ::= TABLE Object3 AbreParentesis CNC CNCA CierraParentesis FileGroup 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateTable",120, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // OptionalOn ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OptionalOn",119, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // OptionalOn ::= ON ID AbreParentesis ID CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OptionalOn",119, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // IncludeIndex ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IncludeIndex",118, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // IncludeIndex ::= INCLUDE ColumnList 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IncludeIndex",118, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // ColumnIndexB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndexB",117, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // ColumnIndexB ::= Coma ID OrderB ColumnIndexB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndexB",117, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // ColumnIndexA ::= ID OrderB ColumnIndexB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndexA",116, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // ColumnIndex ::= AbreParentesis ColumnIndexA CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndex",115, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // CreateIndexA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateIndexA",114, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // CreateIndexA ::= UNIQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateIndexA",114, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // CreateIndex ::= CreateIndexA ColumnConstrC INDEX ID ON Object3 ColumnIndex IncludeIndex Where OptionalOn 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateIndex",113, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // CreateView ::= VIEW Object2 AS Select 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateView",112, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // Filegrowth_A ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth_A",111, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // Filegrowth_A ::= MODULAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth_A",111, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // Filegrowth_A ::= Size_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth_A",111, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // Filegrowth ::= FILEGROWTH Igual Entero Filegrowth_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth",110, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // Maxsize_A ::= UNLIMITED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Maxsize_A",109, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // Maxsize_A ::= Entero Size_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Maxsize_A",109, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // Maxsize ::= MAXSIZE Igual Maxsize_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Maxsize",108, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // Size_A ::= TB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size_A",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // Size_A ::= GB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size_A",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // Size_A ::= MB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size_A",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // Size_A ::= KB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size_A",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // Sizenw ::= SIZE Igual Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sizenw",239, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // Sizew ::= SIZE Igual Entero Size_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sizew",238, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // Size ::= Sizenw 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size",106, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // Size ::= Sizew 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size",106, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // Optional ::= Filegrowth 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optional",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // Optional ::= Maxsize 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optional",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // Optional ::= Size 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optional",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // Optionals ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optionals",103, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // Optionals ::= Coma Optional Optionals 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optionals",103, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // COLLATEDB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLLATEDB",101, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // COLLATEDB ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLLATEDB",101, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // FileDB ::= FILENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileDB",250, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // FileDB ::= FILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileDB",250, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // NameDB ::= NAMES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NameDB",249, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // NameDB ::= NAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NameDB",249, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // FileSpec ::= AbreParentesis NameDB Igual Cadena Coma FileDB Igual Cadena Optionals CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileSpec",100, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // FileSpecs ::= FileSpec 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileSpecs",99, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // FileSpecs ::= FileSpec Coma FileSpecs 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileSpecs",99, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // Primary ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Primary",98, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // Primary ::= PRIMARY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Primary",98, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // CreateDBB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDBB",97, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // CreateDBB ::= ON Primary FileSpecs 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDBB",97, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // CreateDBA ::= CreateDBB COLLATEDB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDBA",96, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // CreateDB ::= DATABASE ID CreateDBA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDB",95, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // CreateUser ::= USER Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateUser",94, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // CreateA ::= Function 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // CreateA ::= Procedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // CreateA ::= CreateView 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // CreateA ::= CreateUser 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // CreateA ::= CreateIndex 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // CreateA ::= CreateDB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // CreateA ::= CreateTable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // Create ::= CREATE CreateA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Create",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // Outer ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Outer",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // Outer ::= OUTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Outer",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // Type ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // Type ::= FULL Outer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // Type ::= LEFT Outer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // Type ::= RIGHT Outer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // Type ::= INNER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // Join ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Join",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // Join ::= Type JOIN Object3 Alias ON SearchCondition Join 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Join",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // FromSelectA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromSelectA",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // FromSelectA ::= Coma Object3 Alias Join 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromSelectA",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // FromSelect ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromSelect",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // FromSelect ::= FROM Object3 Alias Join FromSelectA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromSelect",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // FromUpdate ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromUpdate",86, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // FromUpdate ::= FROM Object3 DeleteC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromUpdate",86, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // UpdateC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateC",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // UpdateC ::= Coma UpdateA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateC",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // UpdateB ::= Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateB",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // UpdateB ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateB",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // UpdateA ::= ID Igual UpdateB UpdateC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateA",83, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // Update ::= UPDATE Top Object3 SET UpdateA FromUpdate Where 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Update",82, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // Server ::= AbreParentesis ID Coma Entero CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Server",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // DeleteC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteC",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // DeleteC ::= Coma Object3 DeleteC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteC",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // DeleteB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteB",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // DeleteB ::= FROM Object3 DeleteC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteB",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // DeleteA ::= Object3 DeleteB Where 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteA",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // DeleteA ::= OPENQUERY Server 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteA",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // FromDelete ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromDelete",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // FromDelete ::= FROM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromDelete",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // Delete ::= DELETE Top FromDelete DeleteA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Delete",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // InsertValoresA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValoresA",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // InsertValoresA ::= Coma AbreParentesis InsertExpresion CierraParentesis InsertValoresA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValoresA",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // InsertValores ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValores",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // InsertValores ::= DEFAULT VALUES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValores",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // InsertValores ::= VALUES AbreParentesis InsertExpresion CierraParentesis InsertValoresA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValores",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // InsertExpresionB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionB",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // InsertExpresionB ::= Coma InsertExpresionA InsertExpresionB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionB",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // InsertExpresionA ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // InsertExpresionA ::= Flotante 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // InsertExpresionA ::= Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // InsertExpresionA ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // InsertExpresion ::= InsertExpresionA InsertExpresionB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresion",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // InsertColumnList ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertColumnList",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // InsertColumnList ::= ColumnList 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertColumnList",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // InsertInto ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertInto",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // InsertInto ::= INTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertInto",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // Insert ::= INSERT Top InsertInto Object3 InsertColumnList InsertValores 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Insert",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // GroupA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GroupA",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // GroupA ::= Coma Expresion GroupA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GroupA",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // Group ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Group",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // Group ::= GROUP BY Expresion GroupA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Group",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // OrderC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderC",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // OrderC ::= Coma Expresion OrderA OrderB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderC",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // OrderB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderB",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // OrderB ::= DESC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderB",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // OrderB ::= ASC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderB",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // OrderA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderA",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // OrderA ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderA",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // Order ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Order",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // Order ::= ORDER BY Expresion OrderA OrderB OrderC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Order",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // Having ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Having",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // Having ::= HAVING SearchCondition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Having",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // SelectA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectA",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // SelectA ::= DISTINCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectA",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // SelectA ::= ALL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectA",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // Select ::= SELECT SelectA Top SelectColumns FromSelect Where Group Having Order 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Select",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // ColumnListB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnListB",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // ColumnListB ::= Coma ID ColumnListB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnListB",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // ColumnListA ::= ID ColumnListB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnListA",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // ColumnList ::= AbreParentesis ColumnListA CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnList",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // SelectColumnsA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectColumnsA",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // SelectColumnsA ::= Coma Expresion Alias SelectColumnsA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectColumnsA",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // SelectColumns ::= Multiplicacion SelectColumnsA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectColumns",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // SelectColumns ::= Expresion Alias SelectColumnsA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectColumns",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // Where ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Where",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // Where ::= WHERE SearchCondition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Where",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // PredicadoC ::= LIKE Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoC",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // PredicadoC ::= BETWEEN Expresion AND Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoC",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // PredicadoC ::= IN AbreParentesis Expresion Expresiones CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoC",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // PredicadoA ::= Not PredicadoC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoA",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // PredicadoA ::= IS Not NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoA",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // PredicadoA ::= OperadoresBooleanos Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoA",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // OperadoresBooleanos ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // OperadoresBooleanos ::= Menor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // OperadoresBooleanos ::= MayorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // OperadoresBooleanos ::= Mayor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // OperadoresBooleanos ::= NoIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // OperadoresBooleanos ::= Igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // Predicado ::= Expresion PredicadoA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Predicado",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // SearchConditionA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchConditionA",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // SearchConditionA ::= OR SearchCondition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchConditionA",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // SearchConditionA ::= AND SearchCondition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchConditionA",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // SearchCondition ::= AbreParentesis SearchCondition CierraParentesis SearchConditionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchCondition",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // SearchCondition ::= Not Predicado SearchConditionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchCondition",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Expresiones ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Expresiones",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Expresiones ::= Coma Expresion Expresiones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Expresiones",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // TopA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TopA",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // TopA ::= PERCENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TopA",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Top ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Top",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Top ::= TOP AbreParentesis Entero CierraParentesis TopA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Top",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Not ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Not",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Not ::= NOT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Not",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ExpresionF ::= Multiplicacion CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionF",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ExpresionF ::= Entero CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionF",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ExpresionF ::= Object4 CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionF",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // FunctionContentA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FunctionContentA",247, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // FunctionContentA ::= Coma FunctionContent 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FunctionContentA",247, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // FunctionContent ::= DType FunctionContentA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FunctionContent",246, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // CallFunction ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CallFunction",245, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // CallFunction ::= AbreParentesis FunctionContent CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CallFunction",245, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ExpresionE ::= COUNT AbreParentesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ExpresionE ::= MAX AbreParentesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ExpresionE ::= MIN AbreParentesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ExpresionE ::= AVG AbreParentesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ExpresionE ::= SUM AbreParentesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ExpresionE ::= Variable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ExpresionE ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ExpresionE ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ExpresionE ::= Flotante 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ExpresionE ::= Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ExpresionE ::= Object4 CallFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ExpresionD ::= ExpresionE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionD",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ExpresionD ::= AbreParentesis Expresion CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionD",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ExpresionC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionC",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ExpresionC ::= Division ExpresionD ExpresionC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionC",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ExpresionC ::= Multiplicacion ExpresionD ExpresionC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionC",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ExpresionB ::= ExpresionD ExpresionC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionB",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ExpresionA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ExpresionA ::= Resta ExpresionB ExpresionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ExpresionA ::= Suma ExpresionB ExpresionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Expresion ::= ExpresionB ExpresionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Expresion",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // AliasA ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AliasA",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // AliasA ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AliasA",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Alias ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alias",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Alias ::= AliasA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alias",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Alias ::= AS AliasA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alias",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Truncate ::= TRUNCATE TABLE Object3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Truncate",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // DropFunction ::= FUNCTION IFE Object2 DropProcedureA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropFunction",256, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // DropProcedureA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropProcedureA",255, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DropProcedureA ::= Coma Object2 DropProcedureA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropProcedureA",255, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DropProcedure ::= SP_Reservada IFE Object2 DropProcedureA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropProcedure",254, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // DropIndexB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndexB",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // DropIndexB ::= Coma DropIndexA DropIndexB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndexB",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // DropIndexA ::= ID ON Object3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndexA",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // DropIndex ::= INDEX IFE DropIndexA DropIndexB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndex",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DropViewA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropViewA",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DropViewA ::= Coma Object2 DropViewA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropViewA",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DropView ::= VIEW IFE Object2 DropViewA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropView",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DropDatabaseA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropDatabaseA",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DropDatabaseA ::= Coma ID DropDatabaseA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropDatabaseA",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DropDatabase ::= DATABASE IFE ID DropDatabaseA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropDatabase",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DropUser ::= USER IFE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropUser",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DropTableA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropTableA",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DropTableA ::= Coma Object3 DropTableA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropTableA",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DropTable ::= TABLE IFE Object3 DropTableA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropTable",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DropA ::= DropFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DropA ::= DropProcedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DropA ::= DropIndex 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DropA ::= DropView 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DropA ::= DropDatabase 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DropA ::= DropUser 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DropA ::= DropTable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Drop ::= DROP DropA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Drop",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Tipo_datoC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoC",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Tipo_datoC ::= Coma Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoC",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Tipo_datoB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoB",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Tipo_datoB ::= AbreParentesis Entero Tipo_datoC CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoB",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Tipo_datoA ::= XML 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Tipo_datoA ::= VARBINARY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Tipo_datoA ::= UNIQUEIDENTIFIER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Tipo_datoA ::= TINYINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Tipo_datoA ::= TEXT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Tipo_datoA ::= SQL_VARIANT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Tipo_datoA ::= SMALLMONEY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Tipo_datoA ::= SMALLDATETIME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Tipo_datoA ::= ROWVERSION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Tipo_datoA ::= NVARCHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Tipo_datoA ::= NTEXT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Tipo_datoA ::= MONEY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Tipo_datoA ::= IMAGE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Tipo_datoA ::= HIERARCHYID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Tipo_datoA ::= DATETIMEOFFSET 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Tipo_datoA ::= DATETIME2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Tipo_datoA ::= DATETIME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Tipo_datoA ::= BINARY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Tipo_datoA ::= BIGINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Tipo_datoA ::= NUMERIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Tipo_datoA ::= SMALLINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Tipo_datoA ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Tipo_datoA ::= INT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Tipo_datoA ::= TIME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Tipo_datoA ::= REAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Tipo_datoA ::= NCHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Tipo_datoA ::= CURSOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Tipo_datoA ::= CHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Tipo_datoA ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Tipo_datoA ::= BIT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Tipo_datoA ::= DATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Tipo_datoA ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Tipo_datoA ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Tipo_datoA ::= VARCHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Tipo_datoD ::= AbreCorchetes Tipo_datoA CierraCorchetes 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoD",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Tipo_datoD ::= Tipo_datoA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoD",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Tipo_dato ::= Tipo_datoD Tipo_datoB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_dato",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Variable ::= Arroba Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variable",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IFE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // IFE ::= IF EXISTS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Object4A ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object4A",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Object4A ::= Punto Object3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object4A",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Object4 ::= ID Object4A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object4",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Object3A ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object3A",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Object3A ::= Punto Object2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object3A",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Object3 ::= ID Object3A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object3",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Object2A ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object2A",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Object2A ::= Punto ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object2A",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Object2 ::= ID Object2A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object2",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ID ::= AbreCorchetes Identificador CierraCorchetes 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ID",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ID ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ID",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Final ::= GO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Final",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Final ::= PyC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Final",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TSQL ::= ExecProcedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TSQL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TSQL ::= CursorDeclare 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TSQL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TCL ::= BeginTran Final InicialB FinalTran 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DDL ::= Truncate Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DDL ::= Drop Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DDL ::= Alter Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DDL ::= Create Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DML ::= error Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DML ::= Update Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DML ::= Delete Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DML ::= Insert Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DML ::= Select Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // InicialB ::= SavePoint Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialB",230, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // InicialB ::= USE Object4 Final Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialB",230, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // InicialB ::= TSQL Final Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialB",230, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // InicialB ::= TCL Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialB",230, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // InicialB ::= DDL Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialB",230, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // InicialB ::= DML Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialB",230, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // InicialA ::= USE Object4 Final Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // InicialA ::= TSQL Final Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // InicialA ::= TCL Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // InicialA ::= DDL Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // InicialA ::= DML Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Inicial ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicial",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicial ::= InicialA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicial",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

