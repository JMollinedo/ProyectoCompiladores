
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Oct 29 15:06:50 CST 2019
//----------------------------------------------------

package userinterface;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import java.util.LinkedList;
import java_cup.runtime.virtual_parse_stack;
import java.lang.reflect.Field;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Oct 29 15:06:50 CST 2019
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u020f\000\002\002\004\000\002\003\005\000\002\003" +
    "\005\000\002\003\002\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\010\003\000\002\010\003\000" +
    "\002\011\003\000\002\011\003\000\002\012\003\000\002" +
    "\012\005\000\002\013\004\000\002\014\004\000\002\014" +
    "\002\000\002\015\004\000\002\016\004\000\002\016\002" +
    "\000\002\017\004\000\002\020\004\000\002\020\002\000" +
    "\002\021\004\000\002\021\002\000\002\022\004\000\002" +
    "\023\004\000\002\024\003\000\002\024\005\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\026\006\000\002\026\002\000\002" +
    "\027\004\000\002\027\002\000\002\030\004\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\032\006\000\002\033\005\000" +
    "\002\033\002\000\002\034\005\000\002\035\006\000\002" +
    "\036\005\000\002\036\002\000\002\037\006\000\002\040" +
    "\005\000\002\040\002\000\002\041\006\000\002\042\005" +
    "\000\002\043\005\000\002\043\002\000\002\044\005\000" +
    "\002\045\004\000\002\045\003\000\002\045\002\000\002" +
    "\046\003\000\002\046\003\000\002\047\004\000\002\050" +
    "\005\000\002\050\005\000\002\050\002\000\002\051\004" +
    "\000\002\052\005\000\002\052\005\000\002\052\002\000" +
    "\002\053\006\000\002\053\003\000\002\054\003\000\002" +
    "\054\003\000\002\054\003\000\002\054\003\000\002\054" +
    "\003\000\002\054\003\000\002\054\005\000\002\054\005" +
    "\000\002\054\005\000\002\054\005\000\002\054\005\000" +
    "\002\055\004\000\002\055\004\000\002\055\004\000\002" +
    "\056\003\000\002\056\002\000\002\057\007\000\002\057" +
    "\002\000\002\060\003\000\002\060\002\000\002\061\005" +
    "\000\002\061\002\000\002\062\005\000\002\062\006\000" +
    "\002\063\004\000\002\063\004\000\002\063\002\000\002" +
    "\064\004\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\065\004\000\002\065\005\000\002\065\004\000" +
    "\002\066\007\000\002\066\006\000\002\066\004\000\002" +
    "\067\004\000\002\067\002\000\002\070\005\000\002\070" +
    "\004\000\002\071\006\000\002\071\002\000\002\072\005" +
    "\000\002\073\004\000\002\074\005\000\002\074\002\000" +
    "\002\075\013\000\002\076\003\000\002\076\003\000\002" +
    "\076\002\000\002\077\004\000\002\077\002\000\002\100" +
    "\010\000\002\100\002\000\002\101\004\000\002\101\002" +
    "\000\002\102\003\000\002\102\003\000\002\102\002\000" +
    "\002\103\005\000\002\103\002\000\002\104\006\000\002" +
    "\104\002\000\002\105\005\000\002\105\002\000\002\106" +
    "\010\000\002\107\003\000\002\107\002\000\002\110\003" +
    "\000\002\110\002\000\002\111\004\000\002\112\003\000" +
    "\002\112\003\000\002\112\003\000\002\112\003\000\002" +
    "\113\005\000\002\113\002\000\002\114\007\000\002\114" +
    "\004\000\002\114\002\000\002\115\007\000\002\115\002" +
    "\000\002\116\006\000\002\117\003\000\002\117\002\000" +
    "\002\120\004\000\002\120\005\000\002\121\005\000\002" +
    "\122\005\000\002\122\002\000\002\123\007\000\002\124" +
    "\011\000\002\125\006\000\002\126\003\000\002\126\003" +
    "\000\002\127\004\000\002\127\002\000\002\130\005\000" +
    "\002\130\002\000\002\131\007\000\002\131\002\000\002" +
    "\132\006\000\002\132\002\000\002\133\011\000\002\133" +
    "\002\000\002\134\003\000\002\134\004\000\002\134\004" +
    "\000\002\134\004\000\002\134\002\000\002\135\003\000" +
    "\002\135\002\000\002\136\004\000\002\137\003\000\002" +
    "\137\003\000\002\137\003\000\002\137\003\000\002\137" +
    "\003\000\002\137\003\000\002\137\003\000\002\140\004" +
    "\000\002\141\005\000\002\142\004\000\002\143\005\000" +
    "\002\143\002\000\002\144\003\000\002\144\002\000\002" +
    "\145\005\000\002\145\003\000\002\146\014\000\002\147" +
    "\004\000\002\147\002\000\002\151\005\000\002\151\002" +
    "\000\002\153\003\000\002\153\003\000\002\153\003\000" +
    "\002\154\003\000\002\154\003\000\002\360\006\000\002" +
    "\361\005\000\002\155\003\000\002\155\003\000\002\155" +
    "\003\000\002\155\003\000\002\156\005\000\002\157\004" +
    "\000\002\157\003\000\002\160\006\000\002\161\003\000" +
    "\002\161\003\000\002\161\002\000\002\162\006\000\002" +
    "\163\014\000\002\164\003\000\002\164\002\000\002\165" +
    "\005\000\002\166\005\000\002\167\006\000\002\167\002" +
    "\000\002\170\004\000\002\170\002\000\002\171\007\000" +
    "\002\171\002\000\002\172\011\000\002\173\004\000\002" +
    "\173\002\000\002\174\004\000\002\174\002\000\002\351" +
    "\005\000\002\351\003\000\002\352\004\000\002\352\002" +
    "\000\002\175\003\000\002\175\003\000\002\175\003\000" +
    "\002\176\005\000\002\176\002\000\002\177\006\000\002" +
    "\356\005\000\002\356\003\000\002\356\002\000\002\357" +
    "\010\000\002\357\007\000\002\357\006\000\002\357\004" +
    "\000\002\357\004\000\002\354\003\000\002\354\002\000" +
    "\002\355\003\000\002\355\005\000\002\353\004\000\002" +
    "\353\003\000\002\353\002\000\002\200\004\000\002\200" +
    "\002\000\002\201\003\000\002\201\003\000\002\201\003" +
    "\000\002\201\003\000\002\202\004\000\002\202\002\000" +
    "\002\203\007\000\002\203\002\000\002\204\003\000\002" +
    "\204\002\000\002\205\003\000\002\205\002\000\002\206" +
    "\005\000\002\206\002\000\002\207\004\000\002\207\002" +
    "\000\002\210\005\000\002\210\004\000\002\210\010\000" +
    "\002\210\007\000\002\211\003\000\002\211\003\000\002" +
    "\211\002\000\002\212\004\000\002\212\002\000\002\213" +
    "\005\000\002\213\002\000\002\214\005\000\002\214\002" +
    "\000\002\215\004\000\002\215\004\000\002\216\003\000" +
    "\002\216\003\000\002\217\003\000\002\217\004\000\002" +
    "\220\004\000\002\221\006\000\002\221\005\000\002\221" +
    "\012\000\002\221\007\000\002\222\007\000\002\223\006" +
    "\000\002\223\002\000\002\224\006\000\002\225\005\000" +
    "\002\225\002\000\002\226\006\000\002\227\004\000\002" +
    "\230\003\000\002\230\003\000\002\230\003\000\002\230" +
    "\003\000\002\230\003\000\002\230\003\000\002\231\005" +
    "\000\002\232\003\000\002\232\003\000\002\233\004\000" +
    "\002\233\005\000\002\234\004\000\002\235\007\000\002" +
    "\236\003\000\002\236\002\000\002\237\005\000\002\240" +
    "\003\000\002\240\005\000\002\240\003\000\002\241\006" +
    "\000\002\242\003\000\002\242\004\000\002\243\005\000" +
    "\002\244\003\000\002\244\003\000\002\245\003\000\002" +
    "\245\005\000\002\246\005\000\002\247\005\000\002\247" +
    "\005\000\002\250\003\000\002\250\002\000\002\251\005" +
    "\000\002\251\002\000\002\253\005\000\002\254\004\000" +
    "\002\254\002\000\002\255\005\000\002\255\002\000\002" +
    "\256\003\000\002\256\002\000\002\257\005\000\002\260" +
    "\003\000\002\260\003\000\002\261\003\000\002\261\003" +
    "\000\002\261\002\000\002\262\003\000\002\262\003\000" +
    "\002\263\004\000\002\264\004\000\002\264\002\000\002" +
    "\265\004\000\002\266\004\000\002\266\002\000\002\267" +
    "\013\000\002\270\003\000\002\270\003\000\002\271\004" +
    "\000\002\271\002\000\002\272\003\000\002\272\002\000" +
    "\002\273\005\000\002\274\004\000\002\274\002\000\002" +
    "\275\005\000\002\275\005\000\002\275\004\000\002\276" +
    "\004\000\002\276\002\000\002\277\003\000\002\277\002" +
    "\000\002\300\003\000\002\300\003\000\002\301\004\000" +
    "\002\301\002\000\002\302\004\000\002\303\003\000\002" +
    "\303\003\000\002\303\005\000\002\304\003\000\002\304" +
    "\003\000\002\305\004\000\002\305\002\000\002\306\003" +
    "\000\002\306\003\000\002\306\003\000\002\306\003\000" +
    "\002\307\004\000\002\307\002\000\002\310\005\000\002" +
    "\311\005\000\002\312\005\000\002\312\002\000\002\313" +
    "\004\000\002\313\002\000\002\340\015\000\002\341\003" +
    "\000\002\341\003\000\002\341\002\000\002\342\003\000" +
    "\002\342\003\000\002\342\002\000\002\343\003\000\002" +
    "\343\003\000\002\343\003\000\002\343\003\000\002\343" +
    "\002\000\002\344\003\000\002\344\003\000\002\344\003" +
    "\000\002\344\002\000\002\345\003\000\002\345\002\000" +
    "\002\346\005\000\002\346\002\000\002\347\004\000\002" +
    "\347\002\000\002\314\012\000\002\315\003\000\002\315" +
    "\002\000\002\316\004\000\002\316\002\000\002\317\006" +
    "\000\002\320\004\000\002\321\004\000\002\321\002\000" +
    "\002\322\003\000\002\322\002\000\002\323\003\000\002" +
    "\323\002\000\002\324\003\000\002\324\003\000\002\325" +
    "\012\000\002\326\007\000\002\327\005\000\002\327\003" +
    "\000\002\330\003\000\002\330\003\000\002\330\003\000" +
    "\002\330\003\000\002\331\004\000\002\332\004\000\002" +
    "\333\003\000\002\333\003\000\002\333\007\000\002\333" +
    "\006\000\002\333\003\000\002\333\005\000\002\334\004" +
    "\000\002\334\002\000\002\335\003\000\002\335\003\000" +
    "\002\366\005\000\002\362\004\000\002\362\007\000\002" +
    "\362\005\000\002\363\006\000\002\363\004\000\002\364" +
    "\004\000\002\364\002\000\002\365\003\000\002\365\003" +
    "\000\002\365\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0383\000\044\002\ufffe\003\023\103\015\126\020\147" +
    "\047\163\033\174\021\201\034\203\045\230\035\270\007" +
    "\271\026\277\014\311\013\323\037\347\044\352\012\001" +
    "\002\000\006\022\u027e\u0110\u027d\001\002\000\010\022\ufff6" +
    "\133\ufff6\u0110\ufff6\001\002\000\006\022\ufffc\u0110\ufffc\001" +
    "\002\000\004\235\u0382\001\002\000\010\022\ufff7\133\ufff7" +
    "\u0110\ufff7\001\002\000\006\022\ufffd\u0110\ufffd\001\002\000" +
    "\010\011\ufe46\032\ufe46\113\ufe46\001\002\000\010\011\uff7d" +
    "\032\uff7d\254\u0291\001\002\000\014\011\uff7d\032\uff7d\124" +
    "\uff7d\254\u0291\310\uff7d\001\002\000\022\077\213\132\ufe1c" +
    "\235\u0327\260\u0322\322\u0323\332\u0328\361\ufe1c\u0107\ufe1c\001" +
    "\002\000\006\022\ufff3\u0110\ufff3\001\002\000\010\022\ufff9" +
    "\133\ufff9\u0110\ufff9\001\002\000\006\257\054\262\051\001" +
    "\002\000\044\007\uff59\011\uff59\012\uff59\013\uff59\025\uff59" +
    "\032\uff59\033\uff59\044\uff59\254\uff59\261\uff59\312\u02d3\371" +
    "\u02d4\u010c\uff59\u0139\uff59\u013e\uff59\u0149\uff59\u014a\uff59\001\002" +
    "\000\006\022\ufff0\u0110\ufff0\001\002\000\006\022\u027e\u0110" +
    "\u027d\001\002\000\006\022\ufffb\u0110\ufffb\001\002\000\006" +
    "\022\ufff2\u0110\ufff2\001\002\000\006\011\061\032\057\001" +
    "\002\000\006\022\ufffa\u0110\ufffa\001\002\000\006\022\uffec" +
    "\u0110\uffec\001\002\000\010\022\ufff8\133\ufff8\u0110\ufff8\001" +
    "\002\000\006\022\ufff5\u0110\ufff5\001\002\000\006\257\054" +
    "\262\051\001\002\000\012\011\uff7d\032\uff7d\207\uff7d\254" +
    "\u0291\001\002\000\032\077\213\132\ufe1c\167\ufeef\173\ufeef" +
    "\235\207\253\ufeef\260\201\303\203\322\202\332\206\361" +
    "\ufe1c\u0107\ufe1c\001\002\000\006\022\uffee\u0110\uffee\001\002" +
    "\000\014\173\120\235\125\260\121\322\122\332\124\001" +
    "\002\000\006\022\uffef\u0110\uffef\001\002\000\006\022\ufff1" +
    "\u0110\ufff1\001\002\000\004\002\115\001\002\000\006\022" +
    "\uffed\u0110\uffed\001\002\000\010\011\ufe45\032\ufe45\113\ufe45" +
    "\001\002\000\012\022\ufe63\257\054\262\051\u0110\ufe63\001" +
    "\002\000\006\011\061\032\057\001\002\000\012\022\ufe60" +
    "\257\054\262\051\u0110\ufe60\001\002\000\006\022\ufff4\u0110" +
    "\ufff4\001\002\000\014\011\ufe66\022\ufe66\025\ufe66\032\ufe66" +
    "\u0110\ufe66\001\002\000\006\022\ufe62\u0110\ufe62\001\002\000" +
    "\014\011\061\022\ufe68\025\060\032\057\u0110\ufe68\001\002" +
    "\000\014\011\ufe67\022\ufe67\025\ufe67\032\ufe67\u0110\ufe67\001" +
    "\002\000\006\022\ufe6a\u0110\ufe6a\001\002\000\006\022\ufe69" +
    "\u0110\ufe69\001\002\000\004\011\064\001\002\000\004\011" +
    "\063\001\002\000\326\004\uffe9\005\uffe9\006\uffe9\007\uffe9" +
    "\010\uffe9\011\uffe9\012\uffe9\013\uffe9\015\uffe9\016\uffe9\017" +
    "\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9" +
    "\032\uffe9\033\uffe9\040\uffe9\044\uffe9\050\uffe9\051\uffe9\052" +
    "\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9\060\uffe9" +
    "\061\uffe9\062\uffe9\063\uffe9\064\uffe9\065\uffe9\066\uffe9\067" +
    "\uffe9\070\uffe9\071\uffe9\072\uffe9\073\uffe9\075\uffe9\076\uffe9" +
    "\077\uffe9\103\uffe9\111\uffe9\113\uffe9\114\uffe9\117\uffe9\124" +
    "\uffe9\126\uffe9\127\uffe9\131\uffe9\133\uffe9\143\uffe9\144\uffe9" +
    "\146\uffe9\154\uffe9\155\uffe9\156\uffe9\167\uffe9\170\uffe9\175" +
    "\uffe9\176\uffe9\211\uffe9\212\uffe9\213\uffe9\215\uffe9\226\uffe9" +
    "\231\uffe9\253\uffe9\255\uffe9\256\uffe9\261\uffe9\274\uffe9\303" +
    "\uffe9\304\uffe9\320\uffe9\323\uffe9\324\uffe9\326\uffe9\343\uffe9" +
    "\351\uffe9\353\uffe9\u0101\uffe9\u0105\uffe9\u010b\uffe9\u010c\uffe9\u0110" +
    "\uffe9\u0111\uffe9\u011e\uffe9\u0127\uffe9\u012a\uffe9\u012d\uffe9\u0139\uffe9" +
    "\u013e\uffe9\u0140\uffe9\u0149\uffe9\u014a\uffe9\u014c\uffe9\u0156\uffe9\u0159" +
    "\uffe9\u0166\uffe9\u0167\uffe9\u016c\uffe9\u0177\uffe9\001\002\000\006" +
    "\022\ufe61\u0110\ufe61\001\002\000\260\004\uffdc\005\uffdc\006" +
    "\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\015\uffdc" +
    "\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\025" +
    "\uffdc\032\uffdc\033\uffdc\044\uffdc\050\uffdc\051\uffdc\052\uffdc" +
    "\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\061" +
    "\uffdc\062\uffdc\063\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc" +
    "\070\uffdc\071\uffdc\072\uffdc\073\uffdc\076\uffdc\077\uffdc\111" +
    "\uffdc\113\uffdc\124\uffdc\127\uffdc\131\uffdc\133\uffdc\143\uffdc" +
    "\144\uffdc\146\uffdc\170\uffdc\175\uffdc\176\uffdc\212\uffdc\215" +
    "\uffdc\226\uffdc\231\uffdc\255\uffdc\256\uffdc\261\uffdc\304\uffdc" +
    "\320\uffdc\326\uffdc\333\uffdc\343\uffdc\351\uffdc\u0101\uffdc\u0105" +
    "\uffdc\u010b\uffdc\u010c\uffdc\u0110\uffdc\u0111\uffdc\u011e\uffdc\u0127\uffdc" +
    "\u012a\uffdc\u012d\uffdc\u0139\uffdc\u013e\uffdc\u0140\uffdc\u0149\uffdc\u014a" +
    "\uffdc\u014c\uffdc\u0156\uffdc\u0159\uffdc\u0166\uffdc\u0167\uffdc\u016c\uffdc" +
    "\001\002\000\004\047\065\001\002\000\326\004\uffe8\005" +
    "\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8" +
    "\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023" +
    "\uffe8\024\uffe8\025\uffe8\032\uffe8\033\uffe8\040\uffe8\044\uffe8" +
    "\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8\056" +
    "\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8\064\uffe8" +
    "\065\uffe8\066\uffe8\067\uffe8\070\uffe8\071\uffe8\072\uffe8\073" +
    "\uffe8\075\uffe8\076\uffe8\077\uffe8\103\uffe8\111\uffe8\113\uffe8" +
    "\114\uffe8\117\uffe8\124\uffe8\126\uffe8\127\uffe8\131\uffe8\133" +
    "\uffe8\143\uffe8\144\uffe8\146\uffe8\154\uffe8\155\uffe8\156\uffe8" +
    "\167\uffe8\170\uffe8\175\uffe8\176\uffe8\211\uffe8\212\uffe8\213" +
    "\uffe8\215\uffe8\226\uffe8\231\uffe8\253\uffe8\255\uffe8\256\uffe8" +
    "\261\uffe8\274\uffe8\303\uffe8\304\uffe8\320\uffe8\323\uffe8\324" +
    "\uffe8\326\uffe8\343\uffe8\351\uffe8\353\uffe8\u0101\uffe8\u0105\uffe8" +
    "\u010b\uffe8\u010c\uffe8\u0110\uffe8\u0111\uffe8\u011e\uffe8\u0127\uffe8\u012a" +
    "\uffe8\u012d\uffe8\u0139\uffe8\u013e\uffe8\u0140\uffe8\u0149\uffe8\u014a\uffe8" +
    "\u014c\uffe8\u0156\uffe8\u0159\uffe8\u0166\uffe8\u0167\uffe8\u016c\uffe8\u0177" +
    "\uffe8\001\002\000\206\004\uffe5\005\uffe5\006\uffe5\007\uffe5" +
    "\010\uffe5\011\uffe5\012\uffe5\013\uffe5\015\uffe5\016\uffe5\017" +
    "\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\110\025\uffe5" +
    "\032\uffe5\033\uffe5\040\uffe5\044\uffe5\050\uffe5\075\uffe5\076" +
    "\uffe5\077\uffe5\103\uffe5\111\uffe5\113\uffe5\114\uffe5\117\uffe5" +
    "\124\uffe5\127\uffe5\131\uffe5\133\uffe5\143\uffe5\144\uffe5\146" +
    "\uffe5\156\uffe5\170\uffe5\175\uffe5\176\uffe5\211\uffe5\212\uffe5" +
    "\213\uffe5\215\uffe5\226\uffe5\231\uffe5\256\uffe5\261\uffe5\274" +
    "\uffe5\303\uffe5\304\uffe5\323\uffe5\324\uffe5\326\uffe5\343\uffe5" +
    "\351\uffe5\353\uffe5\u0105\uffe5\u010c\uffe5\u0110\uffe5\u0139\uffe5\u013e" +
    "\uffe5\u0149\uffe5\u014a\uffe5\u016c\uffe5\001\002\000\020\012\075" +
    "\022\ufdfc\025\060\033\070\040\071\044\076\u0110\ufdfc\001" +
    "\002\000\012\012\075\025\060\040\071\044\076\001\002" +
    "\000\012\022\ufdf4\023\ufdf4\050\ufdf4\u0110\ufdf4\001\002\000" +
    "\004\004\102\001\002\000\012\022\ufdf6\023\077\050\ufdf6" +
    "\u0110\ufdf6\001\002\000\006\022\ufdfa\u0110\ufdfa\001\002\000" +
    "\012\022\ufdf5\023\ufdf5\050\ufdf5\u0110\ufdf5\001\002\000\012" +
    "\022\ufdf3\023\ufdf3\050\ufdf3\u0110\ufdf3\001\002\000\012\012" +
    "\075\025\060\040\071\044\076\001\002\000\010\022\ufdf8" +
    "\050\ufdf8\u0110\ufdf8\001\002\000\010\022\ufdf7\050\ufdf7\u0110" +
    "\ufdf7\001\002\000\010\012\075\040\071\044\076\001\002" +
    "\000\012\022\ufdf6\023\077\050\ufdf6\u0110\ufdf6\001\002\000" +
    "\010\022\ufdf9\050\ufdf9\u0110\ufdf9\001\002\000\004\050\106" +
    "\001\002\000\006\022\ufdfb\u0110\ufdfb\001\002\000\204\004" +
    "\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7" +
    "\013\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022" +
    "\uffe7\023\uffe7\025\uffe7\032\uffe7\033\uffe7\040\uffe7\044\uffe7" +
    "\050\uffe7\075\uffe7\076\uffe7\077\uffe7\103\uffe7\111\uffe7\113" +
    "\uffe7\114\uffe7\117\uffe7\124\uffe7\127\uffe7\131\uffe7\133\uffe7" +
    "\143\uffe7\144\uffe7\146\uffe7\156\uffe7\170\uffe7\175\uffe7\176" +
    "\uffe7\211\uffe7\212\uffe7\213\uffe7\215\uffe7\226\uffe7\231\uffe7" +
    "\256\uffe7\261\uffe7\274\uffe7\303\uffe7\304\uffe7\323\uffe7\324" +
    "\uffe7\326\uffe7\343\uffe7\351\uffe7\353\uffe7\u0105\uffe7\u010c\uffe7" +
    "\u0110\uffe7\u0139\uffe7\u013e\uffe7\u0149\uffe7\u014a\uffe7\u016c\uffe7\001" +
    "\002\000\006\011\061\032\057\001\002\000\204\004\uffe6" +
    "\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013" +
    "\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6" +
    "\023\uffe6\025\uffe6\032\uffe6\033\uffe6\040\uffe6\044\uffe6\050" +
    "\uffe6\075\uffe6\076\uffe6\077\uffe6\103\uffe6\111\uffe6\113\uffe6" +
    "\114\uffe6\117\uffe6\124\uffe6\127\uffe6\131\uffe6\133\uffe6\143" +
    "\uffe6\144\uffe6\146\uffe6\156\uffe6\170\uffe6\175\uffe6\176\uffe6" +
    "\211\uffe6\212\uffe6\213\uffe6\215\uffe6\226\uffe6\231\uffe6\256" +
    "\uffe6\261\uffe6\274\uffe6\303\uffe6\304\uffe6\323\uffe6\324\uffe6" +
    "\326\uffe6\343\uffe6\351\uffe6\353\uffe6\u0105\uffe6\u010c\uffe6\u0110" +
    "\uffe6\u0139\uffe6\u013e\uffe6\u0149\uffe6\u014a\uffe6\u016c\uffe6\001\002" +
    "\000\006\022\ufe65\u0110\ufe65\001\002\000\014\011\061\022" +
    "\ufe68\025\060\032\057\u0110\ufe68\001\002\000\006\022\ufe64" +
    "\u0110\ufe64\001\002\000\004\002\001\001\002\000\006\022" +
    "\uffb1\u0110\uffb1\001\002\000\006\022\uffaf\u0110\uffaf\001\002" +
    "\000\010\011\uffdd\032\uffdd\165\132\001\002\000\010\011" +
    "\uffdd\032\uffdd\165\132\001\002\000\010\011\uffdd\032\uffdd" +
    "\165\132\001\002\000\006\022\uffb0\u0110\uffb0\001\002\000" +
    "\010\011\uffdd\032\uffdd\165\132\001\002\000\010\011\uffdd" +
    "\032\uffdd\165\132\001\002\000\006\022\uffb2\u0110\uffb2\001" +
    "\002\000\006\022\uffad\u0110\uffad\001\002\000\006\022\uffae" +
    "\u0110\uffae\001\002\000\006\011\061\032\057\001\002\000" +
    "\004\355\133\001\002\000\006\011\uffde\032\uffde\001\002" +
    "\000\166\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011" +
    "\uffe2\012\uffe2\013\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2" +
    "\021\uffe2\022\uffe2\023\uffe2\024\143\025\uffe2\032\uffe2\033" +
    "\uffe2\044\uffe2\050\uffe2\075\uffe2\076\uffe2\077\uffe2\103\uffe2" +
    "\111\uffe2\113\uffe2\124\uffe2\127\uffe2\131\uffe2\133\uffe2\143" +
    "\uffe2\144\uffe2\146\uffe2\170\uffe2\175\uffe2\176\uffe2\212\uffe2" +
    "\213\uffe2\215\uffe2\226\uffe2\231\uffe2\256\uffe2\261\uffe2\274" +
    "\uffe2\304\uffe2\323\uffe2\324\uffe2\326\uffe2\343\uffe2\u0105\uffe2" +
    "\u010c\uffe2\u0110\uffe2\u0139\uffe2\u013e\uffe2\u0149\uffe2\u014a\uffe2\u016c" +
    "\uffe2\001\002\000\010\022\uffaa\023\136\u0110\uffaa\001\002" +
    "\000\006\011\061\032\057\001\002\000\006\022\uffac\u0110" +
    "\uffac\001\002\000\010\022\uffaa\023\136\u0110\uffaa\001\002" +
    "\000\006\022\uffab\u0110\uffab\001\002\000\164\004\uffe4\005" +
    "\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4" +
    "\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023" +
    "\uffe4\025\uffe4\032\uffe4\033\uffe4\044\uffe4\050\uffe4\075\uffe4" +
    "\076\uffe4\077\uffe4\103\uffe4\111\uffe4\113\uffe4\124\uffe4\127" +
    "\uffe4\131\uffe4\133\uffe4\143\uffe4\144\uffe4\146\uffe4\170\uffe4" +
    "\175\uffe4\176\uffe4\212\uffe4\213\uffe4\215\uffe4\226\uffe4\231" +
    "\uffe4\256\uffe4\261\uffe4\274\uffe4\304\uffe4\323\uffe4\324\uffe4" +
    "\326\uffe4\343\uffe4\u0105\uffe4\u010c\uffe4\u0110\uffe4\u0139\uffe4\u013e" +
    "\uffe4\u0149\uffe4\u014a\uffe4\u016c\uffe4\001\002\000\006\011\061" +
    "\032\057\001\002\000\164\004\uffe3\005\uffe3\006\uffe3\007" +
    "\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\015\uffe3\016\uffe3" +
    "\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\025\uffe3\032" +
    "\uffe3\033\uffe3\044\uffe3\050\uffe3\075\uffe3\076\uffe3\077\uffe3" +
    "\103\uffe3\111\uffe3\113\uffe3\124\uffe3\127\uffe3\131\uffe3\133" +
    "\uffe3\143\uffe3\144\uffe3\146\uffe3\170\uffe3\175\uffe3\176\uffe3" +
    "\212\uffe3\213\uffe3\215\uffe3\226\uffe3\231\uffe3\256\uffe3\261" +
    "\uffe3\274\uffe3\304\uffe3\323\uffe3\324\uffe3\326\uffe3\343\uffe3" +
    "\u0105\uffe3\u010c\uffe3\u0110\uffe3\u0139\uffe3\u013e\uffe3\u0149\uffe3\u014a" +
    "\uffe3\u016c\uffe3\001\002\000\006\011\061\032\057\001\002" +
    "\000\010\022\uffa3\023\147\u0110\uffa3\001\002\000\006\011" +
    "\061\032\057\001\002\000\006\022\uffa5\u0110\uffa5\001\002" +
    "\000\010\022\uffa3\023\147\u0110\uffa3\001\002\000\006\022" +
    "\uffa4\u0110\uffa4\001\002\000\006\011\061\032\057\001\002" +
    "\000\006\022\uffa9\u0110\uffa9\001\002\000\006\011\061\032" +
    "\057\001\002\000\010\022\uffa6\023\157\u0110\uffa6\001\002" +
    "\000\006\011\061\032\057\001\002\000\006\022\uffa8\u0110" +
    "\uffa8\001\002\000\010\022\uffa6\023\157\u0110\uffa6\001\002" +
    "\000\006\022\uffa7\u0110\uffa7\001\002\000\006\011\061\032" +
    "\057\001\002\000\004\u016c\172\001\002\000\010\022\uff9f" +
    "\023\167\u0110\uff9f\001\002\000\006\022\uffa2\u0110\uffa2\001" +
    "\002\000\006\011\061\032\057\001\002\000\010\022\uff9f" +
    "\023\167\u0110\uff9f\001\002\000\006\022\uffa0\u0110\uffa0\001" +
    "\002\000\006\011\061\032\057\001\002\000\010\022\uffa1" +
    "\023\uffa1\u0110\uffa1\001\002\000\006\022\uff13\u0110\uff13\001" +
    "\002\000\006\022\uff19\u0110\uff19\001\002\000\006\022\uff15" +
    "\u0110\uff15\001\002\000\010\132\u0212\361\u0211\u0107\u020f\001" +
    "\002\000\006\022\uff14\u0110\uff14\001\002\000\006\011\061" +
    "\032\057\001\002\000\004\011\u01db\001\002\000\010\167" +
    "\ufef0\173\ufef0\253\ufef0\001\002\000\006\022\uff18\u0110\uff18" +
    "\001\002\000\006\022\uff1a\u0110\uff1a\001\002\000\006\011" +
    "\061\032\057\001\002\000\006\011\061\032\057\001\002" +
    "\000\006\022\uff17\u0110\uff17\001\002\000\006\022\uff16\u0110" +
    "\uff16\001\002\000\010\167\216\173\ufeb0\253\215\001\002" +
    "\000\004\103\214\001\002\000\010\132\ufe1d\361\ufe1d\u0107" +
    "\ufe1d\001\002\000\032\022\ufeb1\023\ufeb1\033\ufeb1\050\ufeb1" +
    "\114\ufeb1\117\ufeb1\156\ufeb1\173\ufeb1\211\ufeb1\303\ufeb1\353" +
    "\ufeb1\u0110\ufeb1\001\002\000\032\022\ufeb2\023\ufeb2\033\ufeb2" +
    "\050\ufeb2\114\ufeb2\117\ufeb2\156\ufeb2\173\ufeb2\211\ufeb2\303" +
    "\ufeb2\353\ufeb2\u0110\ufeb2\001\002\000\004\173\220\001\002" +
    "\000\006\011\061\032\057\001\002\000\004\u016c\222\001" +
    "\002\000\006\011\061\032\057\001\002\000\004\033\224" +
    "\001\002\000\006\011\061\032\057\001\002\000\014\022" +
    "\ufee9\343\ufee9\u0110\ufee9\u011d\226\u016c\ufee9\001\002\000\004" +
    "\033\377\001\002\000\012\022\uff65\343\230\u0110\uff65\u016c" +
    "\uff65\001\002\000\036\011\uff7f\012\uff7f\013\uff7f\025\uff7f" +
    "\032\uff7f\033\240\044\uff7f\256\243\261\uff7f\u010c\uff7f\u0139" +
    "\uff7f\u013e\uff7f\u0149\uff7f\u014a\uff7f\001\002\000\010\022\ufee7" +
    "\u0110\ufee7\u016c\232\001\002\000\006\011\061\032\057\001" +
    "\002\000\006\022\ufef1\u0110\ufef1\001\002\000\004\033\235" +
    "\001\002\000\006\011\061\032\057\001\002\000\004\050" +
    "\237\001\002\000\006\022\ufee8\u0110\ufee8\001\002\000\036" +
    "\011\uff7f\012\uff7f\013\uff7f\025\uff7f\032\uff7f\033\240\044" +
    "\uff7f\256\243\261\uff7f\u010c\uff7f\u0139\uff7f\u013e\uff7f\u0149\uff7f" +
    "\u014a\uff7f\001\002\000\024\022\uff66\050\uff66\111\uff66\133" +
    "\uff66\143\uff66\146\uff66\326\uff66\u0110\uff66\u016c\uff66\001\002" +
    "\000\034\011\061\012\245\013\265\025\060\032\057\033" +
    "\260\044\254\261\262\u010c\255\u0139\244\u013e\263\u0149\261" +
    "\u014a\257\001\002\000\042\011\uff80\012\uff80\013\uff80\025" +
    "\uff80\032\uff80\033\uff80\044\uff80\131\uff80\170\uff80\231\uff80" +
    "\261\uff80\u010c\uff80\u0139\uff80\u013e\uff80\u0149\uff80\u014a\uff80\001" +
    "\002\000\004\033\371\001\002\000\150\004\uff8d\005\uff8d" +
    "\006\uff8d\007\uff8d\010\uff8d\011\uff8d\012\uff8d\013\uff8d\015" +
    "\uff8d\016\uff8d\017\uff8d\020\uff8d\021\uff8d\022\uff8d\023\uff8d" +
    "\025\uff8d\032\uff8d\033\uff8d\044\uff8d\050\uff8d\076\uff8d\077" +
    "\uff8d\111\uff8d\113\uff8d\124\uff8d\127\uff8d\131\uff8d\133\uff8d" +
    "\143\uff8d\144\uff8d\146\uff8d\170\uff8d\175\uff8d\176\uff8d\212" +
    "\uff8d\215\uff8d\226\uff8d\231\uff8d\256\uff8d\261\uff8d\304\uff8d" +
    "\326\uff8d\343\uff8d\u0105\uff8d\u010c\uff8d\u0110\uff8d\u0139\uff8d\u013e" +
    "\uff8d\u0149\uff8d\u014a\uff8d\u016c\uff8d\001\002\000\150\004\uff8f" +
    "\005\uff8f\006\uff8f\007\uff8f\010\uff8f\011\uff8f\012\uff8f\013" +
    "\uff8f\015\uff8f\016\uff8f\017\uff8f\020\uff8f\021\uff8f\022\uff8f" +
    "\023\uff8f\025\uff8f\032\uff8f\033\uff8f\044\uff8f\050\uff8f\076" +
    "\uff8f\077\uff8f\111\uff8f\113\uff8f\124\uff8f\127\uff8f\131\uff8f" +
    "\133\uff8f\143\uff8f\144\uff8f\146\uff8f\170\uff8f\175\uff8f\176" +
    "\uff8f\212\uff8f\215\uff8f\226\uff8f\231\uff8f\256\uff8f\261\uff8f" +
    "\304\uff8f\326\uff8f\343\uff8f\u0105\uff8f\u010c\uff8f\u0110\uff8f\u0139" +
    "\uff8f\u013e\uff8f\u0149\uff8f\u014a\uff8f\u016c\uff8f\001\002\000\030" +
    "\004\362\015\354\016\356\017\361\020\360\021\353\131" +
    "\uff7f\170\uff7f\212\364\231\uff7f\256\243\001\002\000\150" +
    "\004\uff91\005\uff91\006\uff91\007\346\010\344\011\uff91\012" +
    "\uff91\013\uff91\015\uff91\016\uff91\017\uff91\020\uff91\021\uff91" +
    "\022\uff91\023\uff91\025\uff91\032\uff91\033\uff91\044\uff91\050" +
    "\uff91\076\uff91\077\uff91\111\uff91\113\uff91\124\uff91\127\uff91" +
    "\131\uff91\133\uff91\143\uff91\144\uff91\146\uff91\170\uff91\175" +
    "\uff91\176\uff91\212\uff91\215\uff91\226\uff91\231\uff91\256\uff91" +
    "\261\uff91\304\uff91\326\uff91\343\uff91\u0105\uff91\u010c\uff91\u0110" +
    "\uff91\u0139\uff91\u013e\uff91\u0149\uff91\u014a\uff91\u016c\uff91\001\002" +
    "\000\144\004\uff95\005\336\006\335\011\uff95\012\uff95\013" +
    "\uff95\015\uff95\016\uff95\017\uff95\020\uff95\021\uff95\022\uff95" +
    "\023\uff95\025\uff95\032\uff95\033\uff95\044\uff95\050\uff95\076" +
    "\uff95\077\uff95\111\uff95\113\uff95\124\uff95\127\uff95\131\uff95" +
    "\133\uff95\143\uff95\144\uff95\146\uff95\170\uff95\175\uff95\176" +
    "\uff95\212\uff95\215\uff95\226\uff95\231\uff95\256\uff95\261\uff95" +
    "\304\uff95\326\uff95\343\uff95\u0105\uff95\u010c\uff95\u0110\uff95\u0139" +
    "\uff95\u013e\uff95\u0149\uff95\u014a\uff95\u016c\uff95\001\002\000\152" +
    "\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012" +
    "\uffdf\013\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf" +
    "\022\uffdf\023\uffdf\024\333\025\uffdf\032\uffdf\033\uffdf\044" +
    "\uffdf\050\uffdf\076\uffdf\077\uffdf\111\uffdf\113\uffdf\124\uffdf" +
    "\127\uffdf\131\uffdf\133\uffdf\143\uffdf\144\uffdf\146\uffdf\170" +
    "\uffdf\175\uffdf\176\uffdf\212\uffdf\215\uffdf\226\uffdf\231\uffdf" +
    "\256\uffdf\261\uffdf\304\uffdf\326\uffdf\343\uffdf\u0105\uffdf\u010c" +
    "\uffdf\u0110\uffdf\u0139\uffdf\u013e\uffdf\u0149\uffdf\u014a\uffdf\u016c\uffdf" +
    "\001\002\000\046\022\uff74\023\uff74\050\uff74\076\325\077" +
    "\326\111\uff74\127\uff74\133\uff74\143\uff74\144\uff74\146\uff74" +
    "\176\uff74\215\uff74\226\uff74\326\uff74\343\uff74\u0110\uff74\u016c" +
    "\uff74\001\002\000\150\004\uff8b\005\uff8b\006\uff8b\007\uff8b" +
    "\010\uff8b\011\uff8b\012\uff8b\013\uff8b\015\uff8b\016\uff8b\017" +
    "\uff8b\020\uff8b\021\uff8b\022\uff8b\023\uff8b\025\uff8b\032\uff8b" +
    "\033\uff8b\044\uff8b\050\uff8b\076\uff8b\077\uff8b\111\uff8b\113" +
    "\uff8b\124\uff8b\127\uff8b\131\uff8b\133\uff8b\143\uff8b\144\uff8b" +
    "\146\uff8b\170\uff8b\175\uff8b\176\uff8b\212\uff8b\215\uff8b\226" +
    "\uff8b\231\uff8b\256\uff8b\261\uff8b\304\uff8b\326\uff8b\343\uff8b" +
    "\u0105\uff8b\u010c\uff8b\u0110\uff8b\u0139\uff8b\u013e\uff8b\u0149\uff8b\u014a" +
    "\uff8b\u016c\uff8b\001\002\000\004\033\323\001\002\000\150" +
    "\004\uff89\005\uff89\006\uff89\007\uff89\010\uff89\011\uff89\012" +
    "\uff89\013\uff89\015\uff89\016\uff89\017\uff89\020\uff89\021\uff89" +
    "\022\uff89\023\uff89\025\uff89\032\uff89\033\uff89\044\uff89\050" +
    "\uff89\076\uff89\077\uff89\111\uff89\113\uff89\124\uff89\127\uff89" +
    "\131\uff89\133\uff89\143\uff89\144\uff89\146\uff89\170\uff89\175" +
    "\uff89\176\uff89\212\uff89\215\uff89\226\uff89\231\uff89\256\uff89" +
    "\261\uff89\304\uff89\326\uff89\343\uff89\u0105\uff89\u010c\uff89\u0110" +
    "\uff89\u0139\uff89\u013e\uff89\u0149\uff89\u014a\uff89\u016c\uff89\001\002" +
    "\000\004\033\321\001\002\000\034\011\061\012\245\013" +
    "\265\025\060\032\057\033\260\044\254\261\262\u010c\255" +
    "\u0139\244\u013e\263\u0149\261\u014a\257\001\002\000\004\033" +
    "\276\001\002\000\150\004\uff8a\005\uff8a\006\uff8a\007\uff8a" +
    "\010\uff8a\011\uff8a\012\uff8a\013\uff8a\015\uff8a\016\uff8a\017" +
    "\uff8a\020\uff8a\021\uff8a\022\uff8a\023\uff8a\025\uff8a\032\uff8a" +
    "\033\uff8a\044\uff8a\050\uff8a\076\uff8a\077\uff8a\111\uff8a\113" +
    "\uff8a\124\uff8a\127\uff8a\131\uff8a\133\uff8a\143\uff8a\144\uff8a" +
    "\146\uff8a\170\uff8a\175\uff8a\176\uff8a\212\uff8a\215\uff8a\226" +
    "\uff8a\231\uff8a\256\uff8a\261\uff8a\304\uff8a\326\uff8a\343\uff8a" +
    "\u0105\uff8a\u010c\uff8a\u0110\uff8a\u0139\uff8a\u013e\uff8a\u0149\uff8a\u014a" +
    "\uff8a\u016c\uff8a\001\002\000\004\033\266\001\002\000\150" +
    "\004\uff8e\005\uff8e\006\uff8e\007\uff8e\010\uff8e\011\uff8e\012" +
    "\uff8e\013\uff8e\015\uff8e\016\uff8e\017\uff8e\020\uff8e\021\uff8e" +
    "\022\uff8e\023\uff8e\025\uff8e\032\uff8e\033\uff8e\044\uff8e\050" +
    "\uff8e\076\uff8e\077\uff8e\111\uff8e\113\uff8e\124\uff8e\127\uff8e" +
    "\131\uff8e\133\uff8e\143\uff8e\144\uff8e\146\uff8e\170\uff8e\175" +
    "\uff8e\176\uff8e\212\uff8e\215\uff8e\226\uff8e\231\uff8e\256\uff8e" +
    "\261\uff8e\304\uff8e\326\uff8e\343\uff8e\u0105\uff8e\u010c\uff8e\u0110" +
    "\uff8e\u0139\uff8e\u013e\uff8e\u0149\uff8e\u014a\uff8e\u016c\uff8e\001\002" +
    "\000\150\004\uff8c\005\uff8c\006\uff8c\007\uff8c\010\uff8c\011" +
    "\uff8c\012\uff8c\013\uff8c\015\uff8c\016\uff8c\017\uff8c\020\uff8c" +
    "\021\uff8c\022\uff8c\023\uff8c\025\uff8c\032\uff8c\033\uff8c\044" +
    "\uff8c\050\uff8c\076\uff8c\077\uff8c\111\uff8c\113\uff8c\124\uff8c" +
    "\127\uff8c\131\uff8c\133\uff8c\143\uff8c\144\uff8c\146\uff8c\170" +
    "\uff8c\175\uff8c\176\uff8c\212\uff8c\215\uff8c\226\uff8c\231\uff8c" +
    "\256\uff8c\261\uff8c\304\uff8c\326\uff8c\343\uff8c\u0105\uff8c\u010c" +
    "\uff8c\u0110\uff8c\u0139\uff8c\u013e\uff8c\u0149\uff8c\u014a\uff8c\u016c\uff8c" +
    "\001\002\000\012\007\271\011\061\012\272\032\057\001" +
    "\002\000\004\050\275\001\002\000\150\004\uff84\005\uff84" +
    "\006\uff84\007\uff84\010\uff84\011\uff84\012\uff84\013\uff84\015" +
    "\uff84\016\uff84\017\uff84\020\uff84\021\uff84\022\uff84\023\uff84" +
    "\025\uff84\032\uff84\033\uff84\044\uff84\050\uff84\076\uff84\077" +
    "\uff84\111\uff84\113\uff84\124\uff84\127\uff84\131\uff84\133\uff84" +
    "\143\uff84\144\uff84\146\uff84\170\uff84\175\uff84\176\uff84\212" +
    "\uff84\215\uff84\226\uff84\231\uff84\256\uff84\261\uff84\304\uff84" +
    "\326\uff84\343\uff84\u0105\uff84\u010c\uff84\u0110\uff84\u0139\uff84\u013e" +
    "\uff84\u0149\uff84\u014a\uff84\u016c\uff84\001\002\000\004\050\274" +
    "\001\002\000\004\050\273\001\002\000\150\004\uff82\005" +
    "\uff82\006\uff82\007\uff82\010\uff82\011\uff82\012\uff82\013\uff82" +
    "\015\uff82\016\uff82\017\uff82\020\uff82\021\uff82\022\uff82\023" +
    "\uff82\025\uff82\032\uff82\033\uff82\044\uff82\050\uff82\076\uff82" +
    "\077\uff82\111\uff82\113\uff82\124\uff82\127\uff82\131\uff82\133" +
    "\uff82\143\uff82\144\uff82\146\uff82\170\uff82\175\uff82\176\uff82" +
    "\212\uff82\215\uff82\226\uff82\231\uff82\256\uff82\261\uff82\304" +
    "\uff82\326\uff82\343\uff82\u0105\uff82\u010c\uff82\u0110\uff82\u0139\uff82" +
    "\u013e\uff82\u0149\uff82\u014a\uff82\u016c\uff82\001\002\000\150\004" +
    "\uff81\005\uff81\006\uff81\007\uff81\010\uff81\011\uff81\012\uff81" +
    "\013\uff81\015\uff81\016\uff81\017\uff81\020\uff81\021\uff81\022" +
    "\uff81\023\uff81\025\uff81\032\uff81\033\uff81\044\uff81\050\uff81" +
    "\076\uff81\077\uff81\111\uff81\113\uff81\124\uff81\127\uff81\131" +
    "\uff81\133\uff81\143\uff81\144\uff81\146\uff81\170\uff81\175\uff81" +
    "\176\uff81\212\uff81\215\uff81\226\uff81\231\uff81\256\uff81\261" +
    "\uff81\304\uff81\326\uff81\343\uff81\u0105\uff81\u010c\uff81\u0110\uff81" +
    "\u0139\uff81\u013e\uff81\u0149\uff81\u014a\uff81\u016c\uff81\001\002\000" +
    "\150\004\uff83\005\uff83\006\uff83\007\uff83\010\uff83\011\uff83" +
    "\012\uff83\013\uff83\015\uff83\016\uff83\017\uff83\020\uff83\021" +
    "\uff83\022\uff83\023\uff83\025\uff83\032\uff83\033\uff83\044\uff83" +
    "\050\uff83\076\uff83\077\uff83\111\uff83\113\uff83\124\uff83\127" +
    "\uff83\131\uff83\133\uff83\143\uff83\144\uff83\146\uff83\170\uff83" +
    "\175\uff83\176\uff83\212\uff83\215\uff83\226\uff83\231\uff83\256" +
    "\uff83\261\uff83\304\uff83\326\uff83\343\uff83\u0105\uff83\u010c\uff83" +
    "\u0110\uff83\u0139\uff83\u013e\uff83\u0149\uff83\u014a\uff83\u016c\uff83\001" +
    "\002\000\012\007\271\011\061\012\272\032\057\001\002" +
    "\000\150\004\uff85\005\uff85\006\uff85\007\uff85\010\uff85\011" +
    "\uff85\012\uff85\013\uff85\015\uff85\016\uff85\017\uff85\020\uff85" +
    "\021\uff85\022\uff85\023\uff85\025\uff85\032\uff85\033\uff85\044" +
    "\uff85\050\uff85\076\uff85\077\uff85\111\uff85\113\uff85\124\uff85" +
    "\127\uff85\131\uff85\133\uff85\143\uff85\144\uff85\146\uff85\170" +
    "\uff85\175\uff85\176\uff85\212\uff85\215\uff85\226\uff85\231\uff85" +
    "\256\uff85\261\uff85\304\uff85\326\uff85\343\uff85\u0105\uff85\u010c" +
    "\uff85\u0110\uff85\u0139\uff85\u013e\uff85\u0149\uff85\u014a\uff85\u016c\uff85" +
    "\001\002\000\010\131\303\170\302\231\301\001\002\000" +
    "\034\011\061\012\245\013\265\025\060\032\057\033\260" +
    "\044\254\261\262\u010c\255\u0139\244\u013e\263\u0149\261\u014a" +
    "\257\001\002\000\004\033\311\001\002\000\034\011\061" +
    "\012\245\013\265\025\060\032\057\033\260\044\254\261" +
    "\262\u010c\255\u0139\244\u013e\263\u0149\261\u014a\257\001\002" +
    "\000\004\050\305\001\002\000\150\004\uff90\005\uff90\006" +
    "\uff90\007\uff90\010\uff90\011\uff90\012\uff90\013\uff90\015\uff90" +
    "\016\uff90\017\uff90\020\uff90\021\uff90\022\uff90\023\uff90\025" +
    "\uff90\032\uff90\033\uff90\044\uff90\050\uff90\076\uff90\077\uff90" +
    "\111\uff90\113\uff90\124\uff90\127\uff90\131\uff90\133\uff90\143" +
    "\uff90\144\uff90\146\uff90\170\uff90\175\uff90\176\uff90\212\uff90" +
    "\215\uff90\226\uff90\231\uff90\256\uff90\261\uff90\304\uff90\326" +
    "\uff90\343\uff90\u0105\uff90\u010c\uff90\u0110\uff90\u0139\uff90\u013e\uff90" +
    "\u0149\uff90\u014a\uff90\u016c\uff90\001\002\000\004\076\307\001" +
    "\002\000\034\011\061\012\245\013\265\025\060\032\057" +
    "\033\260\044\254\261\262\u010c\255\u0139\244\u013e\263\u0149" +
    "\261\u014a\257\001\002\000\046\022\uff68\023\uff68\050\uff68" +
    "\076\uff68\077\uff68\111\uff68\127\uff68\133\uff68\143\uff68\144" +
    "\uff68\146\uff68\176\uff68\215\uff68\226\uff68\326\uff68\343\uff68" +
    "\u0110\uff68\u016c\uff68\001\002\000\034\011\061\012\245\013" +
    "\265\025\060\032\057\033\260\044\254\261\262\u010c\255" +
    "\u0139\244\u013e\263\u0149\261\u014a\257\001\002\000\006\023" +
    "\313\050\uff79\001\002\000\034\011\061\012\245\013\265" +
    "\025\060\032\057\033\260\044\254\261\262\u010c\255\u0139" +
    "\244\u013e\263\u0149\261\u014a\257\001\002\000\004\050\315" +
    "\001\002\000\046\022\uff69\023\uff69\050\uff69\076\uff69\077" +
    "\uff69\111\uff69\127\uff69\133\uff69\143\uff69\144\uff69\146\uff69" +
    "\176\uff69\215\uff69\226\uff69\326\uff69\343\uff69\u0110\uff69\u016c" +
    "\uff69\001\002\000\006\023\313\050\uff79\001\002\000\004" +
    "\050\uff7a\001\002\000\046\022\uff67\023\uff67\050\uff67\076" +
    "\uff67\077\uff67\111\uff67\127\uff67\133\uff67\143\uff67\144\uff67" +
    "\146\uff67\176\uff67\215\uff67\226\uff67\326\uff67\343\uff67\u0110" +
    "\uff67\u016c\uff67\001\002\000\012\007\271\011\061\012\272" +
    "\032\057\001\002\000\150\004\uff86\005\uff86\006\uff86\007" +
    "\uff86\010\uff86\011\uff86\012\uff86\013\uff86\015\uff86\016\uff86" +
    "\017\uff86\020\uff86\021\uff86\022\uff86\023\uff86\025\uff86\032" +
    "\uff86\033\uff86\044\uff86\050\uff86\076\uff86\077\uff86\111\uff86" +
    "\113\uff86\124\uff86\127\uff86\131\uff86\133\uff86\143\uff86\144" +
    "\uff86\146\uff86\170\uff86\175\uff86\176\uff86\212\uff86\215\uff86" +
    "\226\uff86\231\uff86\256\uff86\261\uff86\304\uff86\326\uff86\343" +
    "\uff86\u0105\uff86\u010c\uff86\u0110\uff86\u0139\uff86\u013e\uff86\u0149\uff86" +
    "\u014a\uff86\u016c\uff86\001\002\000\012\007\271\011\061\012" +
    "\272\032\057\001\002\000\150\004\uff87\005\uff87\006\uff87" +
    "\007\uff87\010\uff87\011\uff87\012\uff87\013\uff87\015\uff87\016" +
    "\uff87\017\uff87\020\uff87\021\uff87\022\uff87\023\uff87\025\uff87" +
    "\032\uff87\033\uff87\044\uff87\050\uff87\076\uff87\077\uff87\111" +
    "\uff87\113\uff87\124\uff87\127\uff87\131\uff87\133\uff87\143\uff87" +
    "\144\uff87\146\uff87\170\uff87\175\uff87\176\uff87\212\uff87\215" +
    "\uff87\226\uff87\231\uff87\256\uff87\261\uff87\304\uff87\326\uff87" +
    "\343\uff87\u0105\uff87\u010c\uff87\u0110\uff87\u0139\uff87\u013e\uff87\u0149" +
    "\uff87\u014a\uff87\u016c\uff87\001\002\000\036\011\uff7f\012\uff7f" +
    "\013\uff7f\025\uff7f\032\uff7f\033\240\044\uff7f\256\243\261" +
    "\uff7f\u010c\uff7f\u0139\uff7f\u013e\uff7f\u0149\uff7f\u014a\uff7f\001\002" +
    "\000\036\011\uff7f\012\uff7f\013\uff7f\025\uff7f\032\uff7f\033" +
    "\240\044\uff7f\256\243\261\uff7f\u010c\uff7f\u0139\uff7f\u013e\uff7f" +
    "\u0149\uff7f\u014a\uff7f\001\002\000\042\022\uff78\023\uff78\050" +
    "\uff78\111\uff78\127\uff78\133\uff78\143\uff78\144\uff78\146\uff78" +
    "\176\uff78\215\uff78\226\uff78\326\uff78\343\uff78\u0110\uff78\u016c" +
    "\uff78\001\002\000\042\022\uff75\023\uff75\050\uff75\111\uff75" +
    "\127\uff75\133\uff75\143\uff75\144\uff75\146\uff75\176\uff75\215" +
    "\uff75\226\uff75\326\uff75\343\uff75\u0110\uff75\u016c\uff75\001\002" +
    "\000\042\022\uff76\023\uff76\050\uff76\111\uff76\127\uff76\133" +
    "\uff76\143\uff76\144\uff76\146\uff76\176\uff76\215\uff76\226\uff76" +
    "\326\uff76\343\uff76\u0110\uff76\u016c\uff76\001\002\000\150\004" +
    "\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1" +
    "\013\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022" +
    "\uffe1\023\uffe1\025\uffe1\032\uffe1\033\uffe1\044\uffe1\050\uffe1" +
    "\076\uffe1\077\uffe1\111\uffe1\113\uffe1\124\uffe1\127\uffe1\131" +
    "\uffe1\133\uffe1\143\uffe1\144\uffe1\146\uffe1\170\uffe1\175\uffe1" +
    "\176\uffe1\212\uffe1\215\uffe1\226\uffe1\231\uffe1\256\uffe1\261" +
    "\uffe1\304\uffe1\326\uffe1\343\uffe1\u0105\uffe1\u010c\uffe1\u0110\uffe1" +
    "\u0139\uffe1\u013e\uffe1\u0149\uffe1\u014a\uffe1\u016c\uffe1\001\002\000" +
    "\006\011\061\032\057\001\002\000\150\004\uffe0\005\uffe0" +
    "\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\015" +
    "\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0" +
    "\025\uffe0\032\uffe0\033\uffe0\044\uffe0\050\uffe0\076\uffe0\077" +
    "\uffe0\111\uffe0\113\uffe0\124\uffe0\127\uffe0\131\uffe0\133\uffe0" +
    "\143\uffe0\144\uffe0\146\uffe0\170\uffe0\175\uffe0\176\uffe0\212" +
    "\uffe0\215\uffe0\226\uffe0\231\uffe0\256\uffe0\261\uffe0\304\uffe0" +
    "\326\uffe0\343\uffe0\u0105\uffe0\u010c\uffe0\u0110\uffe0\u0139\uffe0\u013e" +
    "\uffe0\u0149\uffe0\u014a\uffe0\u016c\uffe0\001\002\000\034\011\061" +
    "\012\245\013\265\025\060\032\057\033\260\044\254\261" +
    "\262\u010c\255\u0139\244\u013e\263\u0149\261\u014a\257\001\002" +
    "\000\034\011\061\012\245\013\265\025\060\032\057\033" +
    "\260\044\254\261\262\u010c\255\u0139\244\u013e\263\u0149\261" +
    "\u014a\257\001\002\000\140\004\uff98\011\uff98\012\uff98\013" +
    "\uff98\015\uff98\016\uff98\017\uff98\020\uff98\021\uff98\022\uff98" +
    "\023\uff98\025\uff98\032\uff98\033\uff98\044\uff98\050\uff98\076" +
    "\uff98\077\uff98\111\uff98\113\uff98\124\uff98\127\uff98\131\uff98" +
    "\133\uff98\143\uff98\144\uff98\146\uff98\170\uff98\175\uff98\176" +
    "\uff98\212\uff98\215\uff98\226\uff98\231\uff98\256\uff98\261\uff98" +
    "\304\uff98\326\uff98\343\uff98\u0105\uff98\u010c\uff98\u0110\uff98\u0139" +
    "\uff98\u013e\uff98\u0149\uff98\u014a\uff98\u016c\uff98\001\002\000\144" +
    "\004\uff95\005\336\006\335\011\uff95\012\uff95\013\uff95\015" +
    "\uff95\016\uff95\017\uff95\020\uff95\021\uff95\022\uff95\023\uff95" +
    "\025\uff95\032\uff95\033\uff95\044\uff95\050\uff95\076\uff95\077" +
    "\uff95\111\uff95\113\uff95\124\uff95\127\uff95\131\uff95\133\uff95" +
    "\143\uff95\144\uff95\146\uff95\170\uff95\175\uff95\176\uff95\212" +
    "\uff95\215\uff95\226\uff95\231\uff95\256\uff95\261\uff95\304\uff95" +
    "\326\uff95\343\uff95\u0105\uff95\u010c\uff95\u0110\uff95\u0139\uff95\u013e" +
    "\uff95\u0149\uff95\u014a\uff95\u016c\uff95\001\002\000\140\004\uff97" +
    "\011\uff97\012\uff97\013\uff97\015\uff97\016\uff97\017\uff97\020" +
    "\uff97\021\uff97\022\uff97\023\uff97\025\uff97\032\uff97\033\uff97" +
    "\044\uff97\050\uff97\076\uff97\077\uff97\111\uff97\113\uff97\124" +
    "\uff97\127\uff97\131\uff97\133\uff97\143\uff97\144\uff97\146\uff97" +
    "\170\uff97\175\uff97\176\uff97\212\uff97\215\uff97\226\uff97\231" +
    "\uff97\256\uff97\261\uff97\304\uff97\326\uff97\343\uff97\u0105\uff97" +
    "\u010c\uff97\u0110\uff97\u0139\uff97\u013e\uff97\u0149\uff97\u014a\uff97\u016c" +
    "\uff97\001\002\000\144\004\uff95\005\336\006\335\011\uff95" +
    "\012\uff95\013\uff95\015\uff95\016\uff95\017\uff95\020\uff95\021" +
    "\uff95\022\uff95\023\uff95\025\uff95\032\uff95\033\uff95\044\uff95" +
    "\050\uff95\076\uff95\077\uff95\111\uff95\113\uff95\124\uff95\127" +
    "\uff95\131\uff95\133\uff95\143\uff95\144\uff95\146\uff95\170\uff95" +
    "\175\uff95\176\uff95\212\uff95\215\uff95\226\uff95\231\uff95\256" +
    "\uff95\261\uff95\304\uff95\326\uff95\343\uff95\u0105\uff95\u010c\uff95" +
    "\u0110\uff95\u0139\uff95\u013e\uff95\u0149\uff95\u014a\uff95\u016c\uff95\001" +
    "\002\000\140\004\uff96\011\uff96\012\uff96\013\uff96\015\uff96" +
    "\016\uff96\017\uff96\020\uff96\021\uff96\022\uff96\023\uff96\025" +
    "\uff96\032\uff96\033\uff96\044\uff96\050\uff96\076\uff96\077\uff96" +
    "\111\uff96\113\uff96\124\uff96\127\uff96\131\uff96\133\uff96\143" +
    "\uff96\144\uff96\146\uff96\170\uff96\175\uff96\176\uff96\212\uff96" +
    "\215\uff96\226\uff96\231\uff96\256\uff96\261\uff96\304\uff96\326" +
    "\uff96\343\uff96\u0105\uff96\u010c\uff96\u0110\uff96\u0139\uff96\u013e\uff96" +
    "\u0149\uff96\u014a\uff96\u016c\uff96\001\002\000\034\011\061\012" +
    "\245\013\265\025\060\032\057\033\260\044\254\261\262" +
    "\u010c\255\u0139\244\u013e\263\u0149\261\u014a\257\001\002\000" +
    "\144\004\uff94\005\uff94\006\uff94\011\uff94\012\uff94\013\uff94" +
    "\015\uff94\016\uff94\017\uff94\020\uff94\021\uff94\022\uff94\023" +
    "\uff94\025\uff94\032\uff94\033\uff94\044\uff94\050\uff94\076\uff94" +
    "\077\uff94\111\uff94\113\uff94\124\uff94\127\uff94\131\uff94\133" +
    "\uff94\143\uff94\144\uff94\146\uff94\170\uff94\175\uff94\176\uff94" +
    "\212\uff94\215\uff94\226\uff94\231\uff94\256\uff94\261\uff94\304" +
    "\uff94\326\uff94\343\uff94\u0105\uff94\u010c\uff94\u0110\uff94\u0139\uff94" +
    "\u013e\uff94\u0149\uff94\u014a\uff94\u016c\uff94\001\002\000\034\011" +
    "\061\012\245\013\265\025\060\032\057\033\260\044\254" +
    "\261\262\u010c\255\u0139\244\u013e\263\u0149\261\u014a\257\001" +
    "\002\000\150\004\uff91\005\uff91\006\uff91\007\346\010\344" +
    "\011\uff91\012\uff91\013\uff91\015\uff91\016\uff91\017\uff91\020" +
    "\uff91\021\uff91\022\uff91\023\uff91\025\uff91\032\uff91\033\uff91" +
    "\044\uff91\050\uff91\076\uff91\077\uff91\111\uff91\113\uff91\124" +
    "\uff91\127\uff91\131\uff91\133\uff91\143\uff91\144\uff91\146\uff91" +
    "\170\uff91\175\uff91\176\uff91\212\uff91\215\uff91\226\uff91\231" +
    "\uff91\256\uff91\261\uff91\304\uff91\326\uff91\343\uff91\u0105\uff91" +
    "\u010c\uff91\u0110\uff91\u0139\uff91\u013e\uff91\u0149\uff91\u014a\uff91\u016c" +
    "\uff91\001\002\000\144\004\uff93\005\uff93\006\uff93\011\uff93" +
    "\012\uff93\013\uff93\015\uff93\016\uff93\017\uff93\020\uff93\021" +
    "\uff93\022\uff93\023\uff93\025\uff93\032\uff93\033\uff93\044\uff93" +
    "\050\uff93\076\uff93\077\uff93\111\uff93\113\uff93\124\uff93\127" +
    "\uff93\131\uff93\133\uff93\143\uff93\144\uff93\146\uff93\170\uff93" +
    "\175\uff93\176\uff93\212\uff93\215\uff93\226\uff93\231\uff93\256" +
    "\uff93\261\uff93\304\uff93\326\uff93\343\uff93\u0105\uff93\u010c\uff93" +
    "\u0110\uff93\u0139\uff93\u013e\uff93\u0149\uff93\u014a\uff93\u016c\uff93\001" +
    "\002\000\150\004\uff91\005\uff91\006\uff91\007\346\010\344" +
    "\011\uff91\012\uff91\013\uff91\015\uff91\016\uff91\017\uff91\020" +
    "\uff91\021\uff91\022\uff91\023\uff91\025\uff91\032\uff91\033\uff91" +
    "\044\uff91\050\uff91\076\uff91\077\uff91\111\uff91\113\uff91\124" +
    "\uff91\127\uff91\131\uff91\133\uff91\143\uff91\144\uff91\146\uff91" +
    "\170\uff91\175\uff91\176\uff91\212\uff91\215\uff91\226\uff91\231" +
    "\uff91\256\uff91\261\uff91\304\uff91\326\uff91\343\uff91\u0105\uff91" +
    "\u010c\uff91\u0110\uff91\u0139\uff91\u013e\uff91\u0149\uff91\u014a\uff91\u016c" +
    "\uff91\001\002\000\144\004\uff92\005\uff92\006\uff92\011\uff92" +
    "\012\uff92\013\uff92\015\uff92\016\uff92\017\uff92\020\uff92\021" +
    "\uff92\022\uff92\023\uff92\025\uff92\032\uff92\033\uff92\044\uff92" +
    "\050\uff92\076\uff92\077\uff92\111\uff92\113\uff92\124\uff92\127" +
    "\uff92\131\uff92\133\uff92\143\uff92\144\uff92\146\uff92\170\uff92" +
    "\175\uff92\176\uff92\212\uff92\215\uff92\226\uff92\231\uff92\256" +
    "\uff92\261\uff92\304\uff92\326\uff92\343\uff92\u0105\uff92\u010c\uff92" +
    "\u0110\uff92\u0139\uff92\u013e\uff92\u0149\uff92\u014a\uff92\u016c\uff92\001" +
    "\002\000\034\011\uff71\012\uff71\013\uff71\025\uff71\032\uff71" +
    "\033\uff71\044\uff71\261\uff71\u010c\uff71\u0139\uff71\u013e\uff71\u0149" +
    "\uff71\u014a\uff71\001\002\000\034\011\uff6e\012\uff6e\013\uff6e" +
    "\025\uff6e\032\uff6e\033\uff6e\044\uff6e\261\uff6e\u010c\uff6e\u0139" +
    "\uff6e\u013e\uff6e\u0149\uff6e\u014a\uff6e\001\002\000\010\131\303" +
    "\170\302\231\301\001\002\000\034\011\uff6d\012\uff6d\013" +
    "\uff6d\025\uff6d\032\uff6d\033\uff6d\044\uff6d\261\uff6d\u010c\uff6d" +
    "\u0139\uff6d\u013e\uff6d\u0149\uff6d\u014a\uff6d\001\002\000\034\011" +
    "\061\012\245\013\265\025\060\032\057\033\260\044\254" +
    "\261\262\u010c\255\u0139\244\u013e\263\u0149\261\u014a\257\001" +
    "\002\000\034\011\uff6f\012\uff6f\013\uff6f\025\uff6f\032\uff6f" +
    "\033\uff6f\044\uff6f\261\uff6f\u010c\uff6f\u0139\uff6f\u013e\uff6f\u0149" +
    "\uff6f\u014a\uff6f\001\002\000\034\011\uff70\012\uff70\013\uff70" +
    "\025\uff70\032\uff70\033\uff70\044\uff70\261\uff70\u010c\uff70\u0139" +
    "\uff70\u013e\uff70\u0149\uff70\u014a\uff70\001\002\000\034\011\uff72" +
    "\012\uff72\013\uff72\025\uff72\032\uff72\033\uff72\044\uff72\261" +
    "\uff72\u010c\uff72\u0139\uff72\u013e\uff72\u0149\uff72\u014a\uff72\001\002" +
    "\000\046\022\uff73\023\uff73\050\uff73\076\uff73\077\uff73\111" +
    "\uff73\127\uff73\133\uff73\143\uff73\144\uff73\146\uff73\176\uff73" +
    "\215\uff73\226\uff73\326\uff73\343\uff73\u0110\uff73\u016c\uff73\001" +
    "\002\000\006\256\243\261\uff7f\001\002\000\004\261\366" +
    "\001\002\000\046\022\uff6b\023\uff6b\050\uff6b\076\uff6b\077" +
    "\uff6b\111\uff6b\127\uff6b\133\uff6b\143\uff6b\144\uff6b\146\uff6b" +
    "\176\uff6b\215\uff6b\226\uff6b\326\uff6b\343\uff6b\u0110\uff6b\u016c" +
    "\uff6b\001\002\000\046\022\uff6c\023\uff6c\050\uff6c\076\uff6c" +
    "\077\uff6c\111\uff6c\127\uff6c\133\uff6c\143\uff6c\144\uff6c\146" +
    "\uff6c\176\uff6c\215\uff6c\226\uff6c\326\uff6c\343\uff6c\u0110\uff6c" +
    "\u016c\uff6c\001\002\000\046\022\uff6a\023\uff6a\050\uff6a\076" +
    "\uff6a\077\uff6a\111\uff6a\127\uff6a\133\uff6a\143\uff6a\144\uff6a" +
    "\146\uff6a\176\uff6a\215\uff6a\226\uff6a\326\uff6a\343\uff6a\u0110" +
    "\uff6a\u016c\uff6a\001\002\000\012\007\271\011\061\012\272" +
    "\032\057\001\002\000\150\004\uff88\005\uff88\006\uff88\007" +
    "\uff88\010\uff88\011\uff88\012\uff88\013\uff88\015\uff88\016\uff88" +
    "\017\uff88\020\uff88\021\uff88\022\uff88\023\uff88\025\uff88\032" +
    "\uff88\033\uff88\044\uff88\050\uff88\076\uff88\077\uff88\111\uff88" +
    "\113\uff88\124\uff88\127\uff88\131\uff88\133\uff88\143\uff88\144" +
    "\uff88\146\uff88\170\uff88\175\uff88\176\uff88\212\uff88\215\uff88" +
    "\226\uff88\231\uff88\256\uff88\261\uff88\304\uff88\326\uff88\343" +
    "\uff88\u0105\uff88\u010c\uff88\u0110\uff88\u0139\uff88\u013e\uff88\u0149\uff88" +
    "\u014a\uff88\u016c\uff88\001\002\000\004\050\374\001\002\000" +
    "\046\022\uff74\023\uff74\050\uff74\076\325\077\326\111\uff74" +
    "\127\uff74\133\uff74\143\uff74\144\uff74\146\uff74\176\uff74\215" +
    "\uff74\226\uff74\326\uff74\343\uff74\u0110\uff74\u016c\uff74\001\002" +
    "\000\042\022\uff77\023\uff77\050\uff77\111\uff77\127\uff77\133" +
    "\uff77\143\uff77\144\uff77\146\uff77\176\uff77\215\uff77\226\uff77" +
    "\326\uff77\343\uff77\u0110\uff77\u016c\uff77\001\002\000\012\022" +
    "\ufeea\343\ufeea\u0110\ufeea\u016c\ufeea\001\002\000\006\011\061" +
    "\032\057\001\002\000\012\022\uff5d\023\u0104\050\uff5d\u0110" +
    "\uff5d\001\002\000\004\050\u0102\001\002\000\022\022\uff60" +
    "\113\uff60\133\uff60\274\uff60\324\uff60\343\uff60\u0110\uff60\u016c" +
    "\uff60\001\002\000\010\022\uff5f\050\uff5f\u0110\uff5f\001\002" +
    "\000\006\011\061\032\057\001\002\000\012\022\uff5d\023" +
    "\u0104\050\uff5d\u0110\uff5d\001\002\000\010\022\uff5e\050\uff5e" +
    "\u0110\uff5e\001\002\000\012\023\uff50\050\uff50\304\u010a\u0105" +
    "\u010b\001\002\000\004\050\u0109\001\002\000\014\022\ufeee" +
    "\343\ufeee\u0110\ufeee\u011d\ufeee\u016c\ufeee\001\002\000\050\011" +
    "\uff51\012\uff51\013\uff51\022\uff51\023\uff51\025\uff51\032\uff51" +
    "\033\uff51\044\uff51\050\uff51\111\uff51\133\uff51\261\uff51\u010c" +
    "\uff51\u0110\uff51\u0139\uff51\u013e\uff51\u0149\uff51\u014a\uff51\001\002" +
    "\000\050\011\uff52\012\uff52\013\uff52\022\uff52\023\uff52\025" +
    "\uff52\032\uff52\033\uff52\044\uff52\050\uff52\111\uff52\133\uff52" +
    "\261\uff52\u010c\uff52\u0110\uff52\u0139\uff52\u013e\uff52\u0149\uff52\u014a" +
    "\uff52\001\002\000\006\023\u010e\050\ufeeb\001\002\000\004" +
    "\050\ufeed\001\002\000\006\011\061\032\057\001\002\000" +
    "\012\023\uff50\050\uff50\304\u010a\u0105\u010b\001\002\000\006" +
    "\023\u010e\050\ufeeb\001\002\000\004\050\ufeec\001\002\000" +
    "\004\033\u0113\001\002\000\022\011\061\032\057\114\ufeb7" +
    "\156\ufeb7\173\u0114\211\u0118\303\ufeb7\353\ufeb7\001\002\000" +
    "\006\011\061\032\057\001\002\000\012\022\ufedc\023\ufedc" +
    "\050\ufedc\u0110\ufedc\001\002\000\012\022\ufedd\023\ufedd\050" +
    "\ufedd\u0110\ufedd\001\002\000\006\023\u01cd\050\ufed9\001\002" +
    "\000\006\011\061\032\057\001\002\000\110\032\u015a\051" +
    "\u016d\052\u0179\053\u015b\054\u017e\055\u0171\056\u0163\057\u015f" +
    "\060\u017a\061\u0170\062\u016f\063\u017d\064\u0167\065\u016b\066" +
    "\u0165\067\u017c\070\u0162\071\u0168\072\u0177\073\u017b\255\u0174" +
    "\320\u015c\u0101\u0176\u010b\u0173\u0111\u0172\u011e\u0159\u0127\u0178\u012a" +
    "\u0160\u012d\u015d\u0140\u015e\u014c\u0161\u0156\u016e\u0159\u0175\u0166\u0164" +
    "\u0167\u016c\001\002\000\012\114\u011c\156\u011d\303\u0120\353" +
    "\u011e\001\002\000\012\022\ufedb\023\ufedb\050\ufedb\u0110\ufedb" +
    "\001\002\000\004\220\u013c\001\002\000\006\033\ufee2\256" +
    "\u012f\001\002\000\004\220\u012c\001\002\000\012\022\ufea3" +
    "\023\ufea3\050\ufea3\u0110\ufea3\001\002\000\010\033\ufeb0\167" +
    "\216\253\215\001\002\000\004\033\u0122\001\002\000\006" +
    "\011\061\032\057\001\002\000\012\022\ufea1\023\ufea1\050" +
    "\ufea1\u0110\ufea1\001\002\000\012\023\uff50\050\uff50\304\u010a" +
    "\u0105\u010b\001\002\000\006\023\u0127\050\ufe9c\001\002\000" +
    "\004\050\u012b\001\002\000\006\011\061\032\057\001\002" +
    "\000\012\023\uff50\050\uff50\304\u010a\u0105\u010b\001\002\000" +
    "\006\023\u0127\050\ufe9c\001\002\000\004\050\ufe9d\001\002" +
    "\000\012\022\ufe9e\023\ufe9e\050\ufe9e\u0110\ufe9e\001\002\000" +
    "\010\033\ufeb0\167\216\253\215\001\002\000\004\033\u0122" +
    "\001\002\000\012\022\ufea2\023\ufea2\050\ufea2\u0110\ufea2\001" +
    "\002\000\006\111\u0134\261\u0136\001\002\000\004\033\u0131" +
    "\001\002\000\036\011\uff7f\012\uff7f\013\uff7f\025\uff7f\032" +
    "\uff7f\033\240\044\uff7f\256\243\261\uff7f\u010c\uff7f\u0139\uff7f" +
    "\u013e\uff7f\u0149\uff7f\u014a\uff7f\001\002\000\004\050\u0133\001" +
    "\002\000\012\022\ufe9f\023\ufe9f\050\ufe9f\u0110\ufe9f\001\002" +
    "\000\004\122\u0137\001\002\000\032\022\ufee3\023\ufee3\033" +
    "\ufee3\050\ufee3\114\ufee3\117\ufee3\155\ufee3\156\ufee3\211\ufee3" +
    "\303\ufee3\353\ufee3\u0110\ufee3\001\002\000\032\022\ufee0\023" +
    "\ufee0\033\ufee0\050\ufee0\114\ufee0\117\ufee0\155\ufee0\156\ufee0" +
    "\211\ufee0\303\ufee0\353\ufee0\u0110\ufee0\001\002\000\034\022" +
    "\ufede\023\ufede\033\ufede\050\ufede\114\ufede\117\ufede\155\ufede" +
    "\156\ufede\211\ufede\256\u0138\303\ufede\353\ufede\u0110\ufede\001" +
    "\002\000\034\022\ufebd\023\ufebd\033\ufebd\050\ufebd\114\ufebd" +
    "\117\ufebd\155\ufebd\156\ufebd\211\ufebd\261\u013b\303\ufebd\353" +
    "\ufebd\u0110\ufebd\001\002\000\032\022\ufee1\023\ufee1\033\ufee1" +
    "\050\ufee1\114\ufee1\117\ufee1\155\ufee1\156\ufee1\211\ufee1\303" +
    "\ufee1\353\ufee1\u0110\ufee1\001\002\000\032\022\ufedf\023\ufedf" +
    "\033\ufedf\050\ufedf\114\ufedf\117\ufedf\155\ufedf\156\ufedf\211" +
    "\ufedf\303\ufedf\353\ufedf\u0110\ufedf\001\002\000\032\022\ufebe" +
    "\023\ufebe\033\ufebe\050\ufebe\114\ufebe\117\ufebe\155\ufebe\156" +
    "\ufebe\211\ufebe\303\ufebe\353\ufebe\u0110\ufebe\001\002\000\004" +
    "\033\u013d\001\002\000\006\011\061\032\057\001\002\000" +
    "\004\117\u013f\001\002\000\006\011\061\032\057\001\002" +
    "\000\020\022\ufeac\023\ufeac\033\u0141\050\ufeac\256\ufeac\u0110" +
    "\ufeac\u016c\ufeac\001\002\000\006\011\061\032\057\001\002" +
    "\000\016\022\ufeaa\023\ufeaa\050\ufeaa\256\ufeaa\u0110\ufeaa\u016c" +
    "\u0143\001\002\000\006\277\u0147\311\u0148\001\002\000\014" +
    "\022\ufee2\023\ufee2\050\ufee2\256\u012f\u0110\ufee2\001\002\000" +
    "\012\022\ufea0\023\ufea0\050\ufea0\u0110\ufea0\001\002\000\032" +
    "\022\ufeaa\023\ufeaa\050\ufeaa\114\ufeaa\117\ufeaa\156\ufeaa\211" +
    "\ufeaa\256\ufeaa\303\ufeaa\353\ufeaa\u0110\ufeaa\u016c\u0143\001\002" +
    "\000\006\150\u014b\213\u014a\001\002\000\006\150\u014b\213" +
    "\u014a\001\002\000\032\022\ufea8\023\ufea8\050\ufea8\114\ufea8" +
    "\117\ufea8\156\ufea8\211\ufea8\256\ufea8\303\ufea8\353\ufea8\u0110" +
    "\ufea8\u016c\ufea8\001\002\000\006\261\u014e\274\u014c\001\002" +
    "\000\032\022\ufea5\023\ufea5\050\ufea5\114\ufea5\117\ufea5\156" +
    "\ufea5\211\ufea5\256\ufea5\303\ufea5\353\ufea5\u0110\ufea5\u016c\ufea5" +
    "\001\002\000\032\022\ufea6\023\ufea6\050\ufea6\114\ufea6\117" +
    "\ufea6\156\ufea6\211\ufea6\256\ufea6\303\ufea6\353\ufea6\u0110\ufea6" +
    "\u016c\ufea6\001\002\000\032\022\ufea4\023\ufea4\050\ufea4\114" +
    "\ufea4\117\ufea4\156\ufea4\211\ufea4\256\ufea4\303\ufea4\353\ufea4" +
    "\u0110\ufea4\u016c\ufea4\001\002\000\032\022\ufea7\023\ufea7\050" +
    "\ufea7\114\ufea7\117\ufea7\156\ufea7\211\ufea7\256\ufea7\303\ufea7" +
    "\353\ufea7\u0110\ufea7\u016c\ufea7\001\002\000\032\022\ufea9\023" +
    "\ufea9\050\ufea9\114\ufea9\117\ufea9\156\ufea9\211\ufea9\256\ufea9" +
    "\303\ufea9\353\ufea9\u0110\ufea9\u016c\ufea9\001\002\000\030\022" +
    "\ufeab\023\ufeab\050\ufeab\114\ufeab\117\ufeab\156\ufeab\211\ufeab" +
    "\256\ufeab\303\ufeab\353\ufeab\u0110\ufeab\001\002\000\004\050" +
    "\u0152\001\002\000\032\022\ufead\023\ufead\050\ufead\114\ufead" +
    "\117\ufead\156\ufead\211\ufead\256\ufead\303\ufead\353\ufead\u0110" +
    "\ufead\u016c\ufead\001\002\000\006\023\u0155\050\ufe99\001\002" +
    "\000\004\050\u0158\001\002\000\006\011\061\032\057\001" +
    "\002\000\006\023\u0155\050\ufe99\001\002\000\004\050\ufe9a" +
    "\001\002\000\004\117\ufe9b\001\002\000\064\004\uffd2\022" +
    "\uffd2\023\uffd2\033\uffd2\047\uffd2\050\uffd2\111\uffd2\113\uffd2" +
    "\114\uffd2\117\uffd2\154\uffd2\155\uffd2\156\uffd2\175\uffd2\211" +
    "\uffd2\256\uffd2\261\uffd2\274\uffd2\303\uffd2\351\uffd2\353\uffd2" +
    "\u0110\uffd2\u0173\uffd2\u0176\uffd2\u0177\uffd2\001\002\000\106\051" +
    "\u016d\052\u0179\053\u015b\054\u017e\055\u0171\056\u0163\057\u015f" +
    "\060\u017a\061\u0170\062\u016f\063\u017d\064\u0167\065\u016b\066" +
    "\u0165\067\u017c\070\u0162\071\u0168\072\u0177\073\u017b\255\u0174" +
    "\320\u015c\u0101\u0176\u010b\u0173\u0111\u0172\u011e\u0159\u0127\u0178\u012a" +
    "\u0160\u012d\u015d\u0140\u015e\u014c\u0161\u0156\u016e\u0159\u0175\u0166\u0164" +
    "\u0167\u016c\001\002\000\064\004\uffc7\022\uffc7\023\uffc7\033" +
    "\uffc7\047\uffc7\050\uffc7\111\uffc7\113\uffc7\114\uffc7\117\uffc7" +
    "\154\uffc7\155\uffc7\156\uffc7\175\uffc7\211\uffc7\256\uffc7\261" +
    "\uffc7\274\uffc7\303\uffc7\351\uffc7\353\uffc7\u0110\uffc7\u0173\uffc7" +
    "\u0176\uffc7\u0177\uffc7\001\002\000\064\004\uffd3\022\uffd3\023" +
    "\uffd3\033\uffd3\047\uffd3\050\uffd3\111\uffd3\113\uffd3\114\uffd3" +
    "\117\uffd3\154\uffd3\155\uffd3\156\uffd3\175\uffd3\211\uffd3\256" +
    "\uffd3\261\uffd3\274\uffd3\303\uffd3\351\uffd3\353\uffd3\u0110\uffd3" +
    "\u0173\uffd3\u0176\uffd3\u0177\uffd3\001\002\000\064\004\uffd7\022" +
    "\uffd7\023\uffd7\033\uffd7\047\uffd7\050\uffd7\111\uffd7\113\uffd7" +
    "\114\uffd7\117\uffd7\154\uffd7\155\uffd7\156\uffd7\175\uffd7\211" +
    "\uffd7\256\uffd7\261\uffd7\274\uffd7\303\uffd7\351\uffd7\353\uffd7" +
    "\u0110\uffd7\u0173\uffd7\u0176\uffd7\u0177\uffd7\001\002\000\064\004" +
    "\uffce\022\uffce\023\uffce\033\uffce\047\uffce\050\uffce\111\uffce" +
    "\113\uffce\114\uffce\117\uffce\154\uffce\155\uffce\156\uffce\175" +
    "\uffce\211\uffce\256\uffce\261\uffce\274\uffce\303\uffce\351\uffce" +
    "\353\uffce\u0110\uffce\u0173\uffce\u0176\uffce\u0177\uffce\001\002\000" +
    "\064\004\uffc3\022\uffc3\023\uffc3\033\uffc3\047\uffc3\050\uffc3" +
    "\111\uffc3\113\uffc3\114\uffc3\117\uffc3\154\uffc3\155\uffc3\156" +
    "\uffc3\175\uffc3\211\uffc3\256\uffc3\261\uffc3\274\uffc3\303\uffc3" +
    "\351\uffc3\353\uffc3\u0110\uffc3\u0173\uffc3\u0176\uffc3\u0177\uffc3\001" +
    "\002\000\064\004\uffcd\022\uffcd\023\uffcd\033\uffcd\047\uffcd" +
    "\050\uffcd\111\uffcd\113\uffcd\114\uffcd\117\uffcd\154\uffcd\155" +
    "\uffcd\156\uffcd\175\uffcd\211\uffcd\256\uffcd\261\uffcd\274\uffcd" +
    "\303\uffcd\351\uffcd\353\uffcd\u0110\uffcd\u0173\uffcd\u0176\uffcd\u0177" +
    "\uffcd\001\002\000\064\004\uffd5\022\uffd5\023\uffd5\033\uffd5" +
    "\047\uffd5\050\uffd5\111\uffd5\113\uffd5\114\uffd5\117\uffd5\154" +
    "\uffd5\155\uffd5\156\uffd5\175\uffd5\211\uffd5\256\uffd5\261\uffd5" +
    "\274\uffd5\303\uffd5\351\uffd5\353\uffd5\u0110\uffd5\u0173\uffd5\u0176" +
    "\uffd5\u0177\uffd5\001\002\000\064\004\uffba\022\uffba\023\uffba" +
    "\033\uffba\047\uffba\050\uffba\111\uffba\113\uffba\114\uffba\117" +
    "\uffba\154\uffba\155\uffba\156\uffba\175\uffba\211\uffba\256\uffba" +
    "\261\uffba\274\uffba\303\uffba\351\uffba\353\uffba\u0110\uffba\u0173" +
    "\uffba\u0176\uffba\u0177\uffba\001\002\000\064\004\uffc4\022\uffc4" +
    "\023\uffc4\033\uffc4\047\uffc4\050\uffc4\111\uffc4\113\uffc4\114" +
    "\uffc4\117\uffc4\154\uffc4\155\uffc4\156\uffc4\175\uffc4\211\uffc4" +
    "\256\uffc4\261\uffc4\274\uffc4\303\uffc4\351\uffc4\353\uffc4\u0110" +
    "\uffc4\u0173\uffc4\u0176\uffc4\u0177\uffc4\001\002\000\064\004\uffca" +
    "\022\uffca\023\uffca\033\uffca\047\uffca\050\uffca\111\uffca\113" +
    "\uffca\114\uffca\117\uffca\154\uffca\155\uffca\156\uffca\175\uffca" +
    "\211\uffca\256\uffca\261\uffca\274\uffca\303\uffca\351\uffca\353" +
    "\uffca\u0110\uffca\u0173\uffca\u0176\uffca\u0177\uffca\001\002\000\064" +
    "\004\uffbc\022\uffbc\023\uffbc\033\uffbc\047\uffbc\050\uffbc\111" +
    "\uffbc\113\uffbc\114\uffbc\117\uffbc\154\uffbc\155\uffbc\156\uffbc" +
    "\175\uffbc\211\uffbc\256\uffbc\261\uffbc\274\uffbc\303\uffbc\351" +
    "\uffbc\353\uffbc\u0110\uffbc\u0173\uffbc\u0176\uffbc\u0177\uffbc\001\002" +
    "\000\060\004\uffb5\022\uffb5\023\uffb5\033\u01c3\050\uffb5\111" +
    "\uffb5\113\uffb5\114\uffb5\117\uffb5\154\uffb5\155\uffb5\156\uffb5" +
    "\175\uffb5\211\uffb5\256\uffb5\261\uffb5\274\uffb5\303\uffb5\351" +
    "\uffb5\353\uffb5\u0110\uffb5\u0173\uffb5\u0176\uffb5\001\002\000\064" +
    "\004\uffbe\022\uffbe\023\uffbe\033\uffbe\047\uffbe\050\uffbe\111" +
    "\uffbe\113\uffbe\114\uffbe\117\uffbe\154\uffbe\155\uffbe\156\uffbe" +
    "\175\uffbe\211\uffbe\256\uffbe\261\uffbe\274\uffbe\303\uffbe\351" +
    "\uffbe\353\uffbe\u0110\uffbe\u0173\uffbe\u0176\uffbe\u0177\uffbe\001\002" +
    "\000\064\004\uffb9\022\uffb9\023\uffb9\033\uffb9\047\uffb9\050" +
    "\uffb9\111\uffb9\113\uffb9\114\uffb9\117\uffb9\154\uffb9\155\uffb9" +
    "\156\uffb9\175\uffb9\211\uffb9\256\uffb9\261\uffb9\274\uffb9\303" +
    "\uffb9\351\uffb9\353\uffb9\u0110\uffb9\u0173\uffb9\u0176\uffb9\u0177\uffb9" +
    "\001\002\000\060\004\uffda\022\uffda\023\uffda\033\uffda\050" +
    "\uffda\111\uffda\113\uffda\114\uffda\117\uffda\154\uffda\155\uffda" +
    "\156\uffda\175\uffda\211\uffda\256\uffda\261\uffda\274\uffda\303" +
    "\uffda\351\uffda\353\uffda\u0110\uffda\u0173\uffda\u0176\uffda\001\002" +
    "\000\044\022\ufec7\023\ufec7\050\ufec7\111\ufec7\114\ufec7\117" +
    "\ufec7\154\ufec7\155\ufec7\156\ufec7\175\u017f\211\ufec7\256\ufec7" +
    "\261\ufec7\274\ufec7\303\ufec7\353\ufec7\u0110\ufec7\001\002\000" +
    "\064\004\uffbd\022\uffbd\023\uffbd\033\uffbd\047\uffbd\050\uffbd" +
    "\111\uffbd\113\uffbd\114\uffbd\117\uffbd\154\uffbd\155\uffbd\156" +
    "\uffbd\175\uffbd\211\uffbd\256\uffbd\261\uffbd\274\uffbd\303\uffbd" +
    "\351\uffbd\353\uffbd\u0110\uffbd\u0173\uffbd\u0176\uffbd\u0177\uffbd\001" +
    "\002\000\064\004\uffd8\022\uffd8\023\uffd8\033\uffd8\047\uffd8" +
    "\050\uffd8\111\uffd8\113\uffd8\114\uffd8\117\uffd8\154\uffd8\155" +
    "\uffd8\156\uffd8\175\uffd8\211\uffd8\256\uffd8\261\uffd8\274\uffd8" +
    "\303\uffd8\351\uffd8\353\uffd8\u0110\uffd8\u0173\uffd8\u0176\uffd8\u0177" +
    "\uffd8\001\002\000\064\004\uffc9\022\uffc9\023\uffc9\033\uffc9" +
    "\047\uffc9\050\uffc9\111\uffc9\113\uffc9\114\uffc9\117\uffc9\154" +
    "\uffc9\155\uffc9\156\uffc9\175\uffc9\211\uffc9\256\uffc9\261\uffc9" +
    "\274\uffc9\303\uffc9\351\uffc9\353\uffc9\u0110\uffc9\u0173\uffc9\u0176" +
    "\uffc9\u0177\uffc9\001\002\000\064\004\uffcc\022\uffcc\023\uffcc" +
    "\033\uffcc\047\uffcc\050\uffcc\111\uffcc\113\uffcc\114\uffcc\117" +
    "\uffcc\154\uffcc\155\uffcc\156\uffcc\175\uffcc\211\uffcc\256\uffcc" +
    "\261\uffcc\274\uffcc\303\uffcc\351\uffcc\353\uffcc\u0110\uffcc\u0173" +
    "\uffcc\u0176\uffcc\u0177\uffcc\001\002\000\064\004\uffc0\022\uffc0" +
    "\023\uffc0\033\uffc0\047\uffc0\050\uffc0\111\uffc0\113\uffc0\114" +
    "\uffc0\117\uffc0\154\uffc0\155\uffc0\156\uffc0\175\uffc0\211\uffc0" +
    "\256\uffc0\261\uffc0\274\uffc0\303\uffc0\351\uffc0\353\uffc0\u0110" +
    "\uffc0\u0173\uffc0\u0176\uffc0\u0177\uffc0\001\002\000\064\004\uffc1" +
    "\022\uffc1\023\uffc1\033\uffc1\047\uffc1\050\uffc1\111\uffc1\113" +
    "\uffc1\114\uffc1\117\uffc1\154\uffc1\155\uffc1\156\uffc1\175\uffc1" +
    "\211\uffc1\256\uffc1\261\uffc1\274\uffc1\303\uffc1\351\uffc1\353" +
    "\uffc1\u0110\uffc1\u0173\uffc1\u0176\uffc1\u0177\uffc1\001\002\000\064" +
    "\004\uffc5\022\uffc5\023\uffc5\033\uffc5\047\uffc5\050\uffc5\111" +
    "\uffc5\113\uffc5\114\uffc5\117\uffc5\154\uffc5\155\uffc5\156\uffc5" +
    "\175\uffc5\211\uffc5\256\uffc5\261\uffc5\274\uffc5\303\uffc5\351" +
    "\uffc5\353\uffc5\u0110\uffc5\u0173\uffc5\u0176\uffc5\u0177\uffc5\001\002" +
    "\000\064\004\uffd4\022\uffd4\023\uffd4\033\uffd4\047\uffd4\050" +
    "\uffd4\111\uffd4\113\uffd4\114\uffd4\117\uffd4\154\uffd4\155\uffd4" +
    "\156\uffd4\175\uffd4\211\uffd4\256\uffd4\261\uffd4\274\uffd4\303" +
    "\uffd4\351\uffd4\353\uffd4\u0110\uffd4\u0173\uffd4\u0176\uffd4\u0177\uffd4" +
    "\001\002\000\064\004\uffcf\022\uffcf\023\uffcf\033\uffcf\047" +
    "\uffcf\050\uffcf\111\uffcf\113\uffcf\114\uffcf\117\uffcf\154\uffcf" +
    "\155\uffcf\156\uffcf\175\uffcf\211\uffcf\256\uffcf\261\uffcf\274" +
    "\uffcf\303\uffcf\351\uffcf\353\uffcf\u0110\uffcf\u0173\uffcf\u0176\uffcf" +
    "\u0177\uffcf\001\002\000\054\022\uffd1\023\uffd1\033\uffd1\047" +
    "\uffd1\050\uffd1\111\uffd1\114\uffd1\117\uffd1\154\uffd1\155\uffd1" +
    "\156\uffd1\175\uffd1\211\uffd1\256\uffd1\261\uffd1\274\uffd1\303" +
    "\uffd1\351\uffd1\353\uffd1\u0110\uffd1\u0177\uffd1\001\002\000\064" +
    "\004\uffd0\022\uffd0\023\uffd0\033\uffd0\047\uffd0\050\uffd0\111" +
    "\uffd0\113\uffd0\114\uffd0\117\uffd0\154\uffd0\155\uffd0\156\uffd0" +
    "\175\uffd0\211\uffd0\256\uffd0\261\uffd0\274\uffd0\303\uffd0\351" +
    "\uffd0\353\uffd0\u0110\uffd0\u0173\uffd0\u0176\uffd0\u0177\uffd0\001\002" +
    "\000\064\004\uffd6\022\uffd6\023\uffd6\033\uffd6\047\uffd6\050" +
    "\uffd6\111\uffd6\113\uffd6\114\uffd6\117\uffd6\154\uffd6\155\uffd6" +
    "\156\uffd6\175\uffd6\211\uffd6\256\uffd6\261\uffd6\274\uffd6\303" +
    "\uffd6\351\uffd6\353\uffd6\u0110\uffd6\u0173\uffd6\u0176\uffd6\u0177\uffd6" +
    "\001\002\000\064\004\uffb8\022\uffb8\023\uffb8\033\uffb8\047" +
    "\uffb8\050\uffb8\111\uffb8\113\uffb8\114\uffb8\117\uffb8\154\uffb8" +
    "\155\uffb8\156\uffb8\175\uffb8\211\uffb8\256\uffb8\261\uffb8\274" +
    "\uffb8\303\uffb8\351\uffb8\353\uffb8\u0110\uffb8\u0173\uffb8\u0176\uffb8" +
    "\u0177\uffb8\001\002\000\064\004\uffcb\022\uffcb\023\uffcb\033" +
    "\uffcb\047\uffcb\050\uffcb\111\uffcb\113\uffcb\114\uffcb\117\uffcb" +
    "\154\uffcb\155\uffcb\156\uffcb\175\uffcb\211\uffcb\256\uffcb\261" +
    "\uffcb\274\uffcb\303\uffcb\351\uffcb\353\uffcb\u0110\uffcb\u0173\uffcb" +
    "\u0176\uffcb\u0177\uffcb\001\002\000\064\004\uffc8\022\uffc8\023" +
    "\uffc8\033\uffc8\047\uffc8\050\uffc8\111\uffc8\113\uffc8\114\uffc8" +
    "\117\uffc8\154\uffc8\155\uffc8\156\uffc8\175\uffc8\211\uffc8\256" +
    "\uffc8\261\uffc8\274\uffc8\303\uffc8\351\uffc8\353\uffc8\u0110\uffc8" +
    "\u0173\uffc8\u0176\uffc8\u0177\uffc8\001\002\000\064\004\uffc2\022" +
    "\uffc2\023\uffc2\033\uffc2\047\uffc2\050\uffc2\111\uffc2\113\uffc2" +
    "\114\uffc2\117\uffc2\154\uffc2\155\uffc2\156\uffc2\175\uffc2\211" +
    "\uffc2\256\uffc2\261\uffc2\274\uffc2\303\uffc2\351\uffc2\353\uffc2" +
    "\u0110\uffc2\u0173\uffc2\u0176\uffc2\u0177\uffc2\001\002\000\064\004" +
    "\uffb7\022\uffb7\023\uffb7\033\uffb7\047\uffb7\050\uffb7\111\uffb7" +
    "\113\uffb7\114\uffb7\117\uffb7\154\uffb7\155\uffb7\156\uffb7\175" +
    "\uffb7\211\uffb7\256\uffb7\261\uffb7\274\uffb7\303\uffb7\351\uffb7" +
    "\353\uffb7\u0110\uffb7\u0173\uffb7\u0176\uffb7\u0177\uffb7\001\002\000" +
    "\064\004\uffbb\022\uffbb\023\uffbb\033\uffbb\047\uffbb\050\uffbb" +
    "\111\uffbb\113\uffbb\114\uffbb\117\uffbb\154\uffbb\155\uffbb\156" +
    "\uffbb\175\uffbb\211\uffbb\256\uffbb\261\uffbb\274\uffbb\303\uffbb" +
    "\351\uffbb\353\uffbb\u0110\uffbb\u0173\uffbb\u0176\uffbb\u0177\uffbb\001" +
    "\002\000\064\004\uffbf\022\uffbf\023\uffbf\033\uffbf\047\uffbf" +
    "\050\uffbf\111\uffbf\113\uffbf\114\uffbf\117\uffbf\154\uffbf\155" +
    "\uffbf\156\uffbf\175\uffbf\211\uffbf\256\uffbf\261\uffbf\274\uffbf" +
    "\303\uffbf\351\uffbf\353\uffbf\u0110\uffbf\u0173\uffbf\u0176\uffbf\u0177" +
    "\uffbf\001\002\000\064\004\uffc6\022\uffc6\023\uffc6\033\uffc6" +
    "\047\uffc6\050\uffc6\111\uffc6\113\uffc6\114\uffc6\117\uffc6\154" +
    "\uffc6\155\uffc6\156\uffc6\175\uffc6\211\uffc6\256\uffc6\261\uffc6" +
    "\274\uffc6\303\uffc6\351\uffc6\353\uffc6\u0110\uffc6\u0173\uffc6\u0176" +
    "\uffc6\u0177\uffc6\001\002\000\006\011\061\032\057\001\002" +
    "\000\042\022\ufed5\023\ufed5\050\ufed5\111\ufece\114\u018e\117" +
    "\ufeae\154\u0181\155\u0188\156\u018b\211\u0187\256\u018c\261\ufece" +
    "\274\u0186\303\u0185\353\u018d\u0110\ufed5\001\002\000\034\022" +
    "\ufebf\023\ufebf\033\u01ad\050\ufebf\114\ufebf\117\ufebf\155\ufebf" +
    "\156\ufebf\211\ufebf\256\ufebf\303\ufebf\353\ufebf\u0110\ufebf\001" +
    "\002\000\012\022\ufed8\023\ufed8\050\ufed8\u0110\ufed8\001\002" +
    "\000\012\022\ufed6\023\ufed6\050\ufed6\u0110\ufed6\001\002\000" +
    "\006\111\u01b4\261\u01b5\001\002\000\032\022\ufeb0\023\ufeb0" +
    "\050\ufeb0\114\ufeb0\117\ufeb0\156\ufeb0\167\216\211\ufeb0\253" +
    "\215\303\ufeb0\353\ufeb0\u0110\ufeb0\001\002\000\012\012\u01a6" +
    "\013\u01a4\044\u01a5\261\u01a3\001\002\000\006\011\061\032" +
    "\057\001\002\000\026\022\ufeb9\023\ufeb9\050\ufeb9\114\ufeb7" +
    "\117\ufeb7\156\ufeb7\211\u0118\303\ufeb7\353\ufeb7\u0110\ufeb9\001" +
    "\002\000\004\117\u019a\001\002\000\026\022\ufeb9\023\ufeb9" +
    "\050\ufeb9\114\ufeb7\117\ufeb7\156\ufeb7\211\u0118\303\ufeb7\353" +
    "\ufeb7\u0110\ufeb9\001\002\000\006\033\ufee2\256\u012f\001\002" +
    "\000\006\111\ufecf\261\ufecf\001\002\000\004\220\u0190\001" +
    "\002\000\004\220\u018f\001\002\000\004\117\ufeaf\001\002" +
    "\000\032\022\ufeb0\023\ufeb0\050\ufeb0\114\ufeb0\117\ufeb0\156" +
    "\ufeb0\167\216\211\ufeb0\253\215\303\ufeb0\353\ufeb0\u0110\ufeb0" +
    "\001\002\000\026\022\ufeb6\023\ufeb6\050\ufeb6\114\ufeb6\117" +
    "\ufeb6\156\ufeb6\211\ufeb6\303\ufeb6\353\ufeb6\u0110\ufeb6\001\002" +
    "\000\004\033\u0193\001\002\000\036\011\uff7f\012\uff7f\013" +
    "\uff7f\025\uff7f\032\uff7f\033\240\044\uff7f\256\243\261\uff7f" +
    "\u010c\uff7f\u0139\uff7f\u013e\uff7f\u0149\uff7f\u014a\uff7f\001\002\000" +
    "\004\050\u0195\001\002\000\026\022\ufeb3\023\ufeb3\050\ufeb3" +
    "\114\ufeb3\117\ufeb3\156\ufeb3\211\ufeb3\303\ufeb3\353\ufeb3\u0110" +
    "\ufeb3\001\002\000\012\022\ufed0\023\ufed0\050\ufed0\u0110\ufed0" +
    "\001\002\000\014\114\u018e\117\ufeae\156\u018b\303\u0185\353" +
    "\u018d\001\002\000\026\022\ufeb9\023\ufeb9\050\ufeb9\114\ufeb7" +
    "\117\ufeb7\156\ufeb7\211\u0118\303\ufeb7\353\ufeb7\u0110\ufeb9\001" +
    "\002\000\012\022\ufeba\023\ufeba\050\ufeba\u0110\ufeba\001\002" +
    "\000\006\011\061\032\057\001\002\000\034\022\ufeac\023" +
    "\ufeac\033\u0141\050\ufeac\114\ufeac\117\ufeac\156\ufeac\211\ufeac" +
    "\256\ufeac\303\ufeac\353\ufeac\u0110\ufeac\u016c\ufeac\001\002\000" +
    "\032\022\ufeaa\023\ufeaa\050\ufeaa\114\ufeaa\117\ufeaa\156\ufeaa" +
    "\211\ufeaa\256\ufeaa\303\ufeaa\353\ufeaa\u0110\ufeaa\u016c\u0143\001" +
    "\002\000\030\022\ufee2\023\ufee2\050\ufee2\114\ufee2\117\ufee2" +
    "\156\ufee2\211\ufee2\256\u012f\303\ufee2\353\ufee2\u0110\ufee2\001" +
    "\002\000\026\022\ufeb4\023\ufeb4\050\ufeb4\114\ufeb4\117\ufeb4" +
    "\156\ufeb4\211\ufeb4\303\ufeb4\353\ufeb4\u0110\ufeb4\001\002\000" +
    "\012\022\ufed1\023\ufed1\050\ufed1\u0110\ufed1\001\002\000\030" +
    "\111\ufece\114\u018e\117\ufeae\154\u0181\155\u0188\156\u018b\256" +
    "\u018c\261\ufece\274\u0186\303\u0185\353\u018d\001\002\000\012" +
    "\022\ufed7\023\ufed7\050\ufed7\u0110\ufed7\001\002\000\034\022" +
    "\ufec1\023\ufec1\050\ufec1\114\ufec1\117\ufec1\154\u01a7\155\ufec1" +
    "\156\ufec1\211\ufec1\256\ufec1\303\ufec1\353\ufec1\u0110\ufec1\001" +
    "\002\000\034\022\ufec3\023\ufec3\050\ufec3\114\ufec3\117\ufec3" +
    "\154\ufec3\155\ufec3\156\ufec3\211\ufec3\256\ufec3\303\ufec3\353" +
    "\ufec3\u0110\ufec3\001\002\000\034\022\ufec5\023\ufec5\050\ufec5" +
    "\114\ufec5\117\ufec5\154\ufec5\155\ufec5\156\ufec5\211\ufec5\256" +
    "\ufec5\303\ufec5\353\ufec5\u0110\ufec5\001\002\000\034\022\ufec4" +
    "\023\ufec4\050\ufec4\114\ufec4\117\ufec4\154\ufec4\155\ufec4\156" +
    "\ufec4\211\ufec4\256\ufec4\303\ufec4\353\ufec4\u0110\ufec4\001\002" +
    "\000\034\022\ufec6\023\ufec6\050\ufec6\114\ufec6\117\ufec6\154" +
    "\ufec6\155\ufec6\156\ufec6\211\ufec6\256\ufec6\303\ufec6\353\ufec6" +
    "\u0110\ufec6\001\002\000\034\022\ufebf\023\ufebf\033\u01ad\050" +
    "\ufebf\114\ufebf\117\ufebf\155\ufebf\156\ufebf\211\ufebf\256\ufebf" +
    "\303\ufebf\353\ufebf\u0110\ufebf\001\002\000\032\022\ufee2\023" +
    "\ufee2\050\ufee2\114\ufee2\117\ufee2\155\ufee2\156\ufee2\211\ufee2" +
    "\256\u012f\303\ufee2\353\ufee2\u0110\ufee2\001\002\000\030\022" +
    "\ufebb\023\ufebb\050\ufebb\114\ufebb\117\ufebb\155\u01aa\156\ufebb" +
    "\211\ufebb\303\ufebb\353\ufebb\u0110\ufebb\001\002\000\026\022" +
    "\ufebc\023\ufebc\050\ufebc\114\ufebc\117\ufebc\156\ufebc\211\ufebc" +
    "\303\ufebc\353\ufebc\u0110\ufebc\001\002\000\026\022\ufeb9\023" +
    "\ufeb9\050\ufeb9\114\ufeb7\117\ufeb7\156\ufeb7\211\u0118\303\ufeb7" +
    "\353\ufeb7\u0110\ufeb9\001\002\000\012\022\ufed4\023\ufed4\050" +
    "\ufed4\u0110\ufed4\001\002\000\004\012\u01af\001\002\000\032" +
    "\022\ufec2\023\ufec2\050\ufec2\114\ufec2\117\ufec2\155\ufec2\156" +
    "\ufec2\211\ufec2\256\ufec2\303\ufec2\353\ufec2\u0110\ufec2\001\002" +
    "\000\004\023\u01b0\001\002\000\004\012\u01b1\001\002\000" +
    "\004\050\u01b2\001\002\000\032\022\ufec0\023\ufec0\050\ufec0" +
    "\114\ufec0\117\ufec0\155\ufec0\156\ufec0\211\ufec0\256\ufec0\303" +
    "\ufec0\353\ufec0\u0110\ufec0\001\002\000\026\022\ufeb5\023\ufeb5" +
    "\050\ufeb5\114\ufeb5\117\ufeb5\156\ufeb5\211\ufeb5\303\ufeb5\353" +
    "\ufeb5\u0110\ufeb5\001\002\000\004\122\u01b9\001\002\000\030" +
    "\022\ufecd\023\ufecd\050\ufecd\114\ufecd\117\ufecd\155\ufecd\156" +
    "\ufecd\211\ufecd\303\ufecd\353\ufecd\u0110\ufecd\001\002\000\030" +
    "\022\ufebb\023\ufebb\050\ufebb\114\ufebb\117\ufebb\155\u01aa\156" +
    "\ufebb\211\ufebb\303\ufebb\353\ufebb\u0110\ufebb\001\002\000\026" +
    "\022\ufeb9\023\ufeb9\050\ufeb9\114\ufeb7\117\ufeb7\156\ufeb7\211" +
    "\u0118\303\ufeb7\353\ufeb7\u0110\ufeb9\001\002\000\012\022\ufed2" +
    "\023\ufed2\050\ufed2\u0110\ufed2\001\002\000\034\022\ufec9\023" +
    "\ufec9\050\ufec9\114\ufec9\117\ufec9\155\ufec9\156\ufec9\211\ufec9" +
    "\256\u01bb\261\u01bc\303\ufec9\353\ufec9\u0110\ufec9\001\002\000" +
    "\030\022\ufecc\023\ufecc\050\ufecc\114\ufecc\117\ufecc\155\ufecc" +
    "\156\ufecc\211\ufecc\303\ufecc\353\ufecc\u0110\ufecc\001\002\000" +
    "\004\261\u01bd\001\002\000\030\022\ufeca\023\ufeca\050\ufeca" +
    "\114\ufeca\117\ufeca\155\ufeca\156\ufeca\211\ufeca\303\ufeca\353" +
    "\ufeca\u0110\ufeca\001\002\000\030\022\ufecb\023\ufecb\050\ufecb" +
    "\114\ufecb\117\ufecb\155\ufecb\156\ufecb\211\ufecb\303\ufecb\353" +
    "\ufecb\u0110\ufecb\001\002\000\032\022\ufee2\023\ufee2\050\ufee2" +
    "\114\ufee2\117\ufee2\155\ufee2\156\ufee2\211\ufee2\256\u012f\303" +
    "\ufee2\353\ufee2\u0110\ufee2\001\002\000\030\022\ufebb\023\ufebb" +
    "\050\ufebb\114\ufebb\117\ufebb\155\u01aa\156\ufebb\211\ufebb\303" +
    "\ufebb\353\ufebb\u0110\ufebb\001\002\000\026\022\ufeb9\023\ufeb9" +
    "\050\ufeb9\114\ufeb7\117\ufeb7\156\ufeb7\211\u0118\303\ufeb7\353" +
    "\ufeb7\u0110\ufeb9\001\002\000\012\022\ufed3\023\ufed3\050\ufed3" +
    "\u0110\ufed3\001\002\000\042\022\ufec8\023\ufec8\050\ufec8\111" +
    "\ufec8\114\ufec8\117\ufec8\154\ufec8\155\ufec8\156\ufec8\211\ufec8" +
    "\256\ufec8\261\ufec8\274\ufec8\303\ufec8\353\ufec8\u0110\ufec8\001" +
    "\002\000\004\012\u01c5\001\002\000\056\004\uffdb\022\uffdb" +
    "\023\uffdb\050\uffdb\111\uffdb\113\uffdb\114\uffdb\117\uffdb\154" +
    "\uffdb\155\uffdb\156\uffdb\175\uffdb\211\uffdb\256\uffdb\261\uffdb" +
    "\274\uffdb\303\uffdb\351\uffdb\353\uffdb\u0110\uffdb\u0173\uffdb\u0176" +
    "\uffdb\001\002\000\006\023\u01c6\050\uffb3\001\002\000\004" +
    "\012\u01c9\001\002\000\004\050\u01c8\001\002\000\056\004" +
    "\uffb6\022\uffb6\023\uffb6\050\uffb6\111\uffb6\113\uffb6\114\uffb6" +
    "\117\uffb6\154\uffb6\155\uffb6\156\uffb6\175\uffb6\211\uffb6\256" +
    "\uffb6\261\uffb6\274\uffb6\303\uffb6\351\uffb6\353\uffb6\u0110\uffb6" +
    "\u0173\uffb6\u0176\uffb6\001\002\000\004\050\uffb4\001\002\000" +
    "\004\047\u01cb\001\002\000\060\004\uffd9\022\uffd9\023\uffd9" +
    "\033\uffd9\050\uffd9\111\uffd9\113\uffd9\114\uffd9\117\uffd9\154" +
    "\uffd9\155\uffd9\156\uffd9\175\uffd9\211\uffd9\256\uffd9\261\uffd9" +
    "\274\uffd9\303\uffd9\351\uffd9\353\uffd9\u0110\uffd9\u0173\uffd9\u0176" +
    "\uffd9\001\002\000\014\114\ufeb8\117\ufeb8\156\ufeb8\303\ufeb8" +
    "\353\ufeb8\001\002\000\022\011\061\032\057\114\ufeb7\156" +
    "\ufeb7\173\u0114\211\u0118\303\ufeb7\353\ufeb7\001\002\000\004" +
    "\050\u01cf\001\002\000\010\022\ufee4\u0110\ufee4\u016c\u01d1\001" +
    "\002\000\006\022\ufee6\u0110\ufee6\001\002\000\004\353\u01d2" +
    "\001\002\000\006\022\ufee5\u0110\ufee5\001\002\000\012\022" +
    "\ufed9\023\u01cd\050\ufed9\u0110\ufed9\001\002\000\010\022\ufeda" +
    "\050\ufeda\u0110\ufeda\001\002\000\010\033\ufeb0\167\216\253" +
    "\215\001\002\000\004\033\u0122\001\002\000\012\022\ufe98" +
    "\023\ufe98\050\ufe98\u0110\ufe98\001\002\000\004\113\u01d9\001" +
    "\002\000\004\174\021\001\002\000\006\022\ufef2\u0110\ufef2" +
    "\001\002\000\006\022\uff12\u0110\uff12\001\002\000\012\022" +
    "\uff0e\175\uff0e\u0110\uff0e\u016c\u01dd\001\002\000\006\033\uff0c" +
    "\353\u01e3\001\002\000\010\022\uff07\175\u01e0\u0110\uff07\001" +
    "\002\000\006\022\uff11\u0110\uff11\001\002\000\006\011\061" +
    "\032\057\001\002\000\006\022\uff10\u0110\uff10\001\002\000" +
    "\006\022\uff08\u0110\uff08\001\002\000\004\033\uff0d\001\002" +
    "\000\004\033\u01e5\001\002\000\004\u018b\u01ea\001\002\000" +
    "\010\022\uff0f\175\uff0f\u0110\uff0f\001\002\000\012\022\uff0a" +
    "\023\u01e8\175\uff0a\u0110\uff0a\001\002\000\004\033\u01e5\001" +
    "\002\000\010\022\uff0b\175\uff0b\u0110\uff0b\001\002\000\004" +
    "\004\u01eb\001\002\000\004\044\u01ec\001\002\000\004\023" +
    "\u01ed\001\002\000\004\u018c\u01ee\001\002\000\004\004\u01ef" +
    "\001\002\000\004\044\u01f0\001\002\000\006\023\u01f2\050" +
    "\uff05\001\002\000\004\050\u020e\001\002\000\010\u0125\u01fb" +
    "\u0191\u01fa\u0193\u01f9\001\002\000\006\023\uff00\050\uff00\001" +
    "\002\000\006\023\uff03\050\uff03\001\002\000\006\023\uff04" +
    "\050\uff04\001\002\000\006\023\u01f2\050\uff05\001\002\000" +
    "\006\023\uff02\050\uff02\001\002\000\006\023\uff01\050\uff01" +
    "\001\002\000\004\004\u0208\001\002\000\004\004\u0203\001" +
    "\002\000\004\004\u01fc\001\002\000\004\012\u01fd\001\002" +
    "\000\016\023\ufefe\050\ufefe\u018d\u0200\u018e\u0201\u018f\u01ff\u0190" +
    "\u0202\001\002\000\006\023\ufeff\050\ufeff\001\002\000\006" +
    "\023\ufefa\050\ufefa\001\002\000\006\023\ufefd\050\ufefd\001" +
    "\002\000\006\023\ufefb\050\ufefb\001\002\000\006\023\ufefc" +
    "\050\ufefc\001\002\000\006\012\u0205\u0192\u0206\001\002\000" +
    "\006\023\ufef9\050\ufef9\001\002\000\012\u018d\u0200\u018e\u0201" +
    "\u018f\u01ff\u0190\u0202\001\002\000\006\023\ufef7\050\ufef7\001" +
    "\002\000\006\023\ufef8\050\ufef8\001\002\000\004\012\u0209" +
    "\001\002\000\020\023\ufef3\050\ufef3\u018d\u0200\u018e\u0201\u018f" +
    "\u01ff\u0190\u0202\u0194\u020b\001\002\000\006\023\ufef5\050\ufef5" +
    "\001\002\000\006\023\ufef4\050\ufef4\001\002\000\006\023" +
    "\ufef6\050\ufef6\001\002\000\004\050\uff06\001\002\000\012" +
    "\022\uff09\023\uff09\175\uff09\u0110\uff09\001\002\000\006\011" +
    "\ufe5d\032\ufe5d\001\002\000\006\011\061\032\057\001\002" +
    "\000\006\011\ufe5e\032\ufe5e\001\002\000\006\011\061\032" +
    "\057\001\002\000\004\033\u0214\001\002\000\006\025\060" +
    "\050\ufe1e\001\002\000\004\050\ufe1f\001\002\000\006\023" +
    "\u0257\050\ufe18\001\002\000\110\051\ufe16\052\ufe16\053\ufe16" +
    "\054\ufe16\055\ufe16\056\ufe16\057\ufe16\060\ufe16\061\ufe16\062" +
    "\ufe16\063\ufe16\064\ufe16\065\ufe16\066\ufe16\067\ufe16\070\ufe16" +
    "\071\ufe16\072\ufe16\073\ufe16\113\u0222\255\ufe16\320\ufe16\u0101" +
    "\ufe16\u010b\ufe16\u0111\ufe16\u011e\ufe16\u0127\ufe16\u012a\ufe16\u012d\ufe16" +
    "\u0140\ufe16\u014c\ufe16\u0156\ufe16\u0159\ufe16\u0166\ufe16\u0167\ufe16\001" +
    "\002\000\004\050\u0219\001\002\000\004\u0179\u021a\001\002" +
    "\000\110\051\u016d\052\u0179\053\u015b\054\u017e\055\u0171\056" +
    "\u0163\057\u015f\060\u017a\061\u0170\062\u016f\063\u017d\064\u0167" +
    "\065\u016b\066\u0165\067\u017c\070\u0162\071\u0168\072\u0177\073" +
    "\u017b\235\u021e\255\u0174\320\u015c\u0101\u0176\u010b\u0173\u0111\u0172" +
    "\u011e\u0159\u0127\u0178\u012a\u0160\u012d\u015d\u0140\u015e\u014c\u0161\u0156" +
    "\u016e\u0159\u0175\u0166\u0164\u0167\u016c\001\002\000\006\022\ufe20" +
    "\u0110\ufe20\001\002\000\006\022\ufe12\u0110\ufe12\001\002\000" +
    "\004\351\u0220\001\002\000\004\351\u0220\001\002\000\006" +
    "\022\ufe13\u0110\ufe13\001\002\000\020\347\044\352\012\u0178" +
    "\u0232\u0179\u022a\u017a\u022f\u017b\u022d\u017c\u0230\001\002\000\006" +
    "\113\u0222\133\ufe16\001\002\000\112\051\ufe17\052\ufe17\053" +
    "\ufe17\054\ufe17\055\ufe17\056\ufe17\057\ufe17\060\ufe17\061\ufe17" +
    "\062\ufe17\063\ufe17\064\ufe17\065\ufe17\066\ufe17\067\ufe17\070" +
    "\ufe17\071\ufe17\072\ufe17\073\ufe17\126\ufe17\133\ufe17\255\ufe17" +
    "\320\ufe17\u0101\ufe17\u010b\ufe17\u0111\ufe17\u011e\ufe17\u0127\ufe17\u012a" +
    "\ufe17\u012d\ufe17\u0140\ufe17\u014c\ufe17\u0156\ufe17\u0159\ufe17\u0166\ufe17" +
    "\u0167\ufe17\001\002\000\004\133\u0224\001\002\000\006\033" +
    "\u0225\174\021\001\002\000\004\174\021\001\002\000\006" +
    "\022\ufe10\u0110\ufe10\001\002\000\006\022\ufe0e\u0110\ufe0e\001" +
    "\002\000\004\050\u0229\001\002\000\006\022\ufe0f\u0110\ufe0f" +
    "\001\002\000\004\261\u0243\001\002\000\010\113\ufe09\126" +
    "\ufe09\133\ufe09\001\002\000\004\113\u023d\001\002\000\004" +
    "\u016c\u023a\001\002\000\012\023\u0237\113\ufe00\126\ufe00\133" +
    "\ufe00\001\002\000\012\023\ufe06\113\ufe06\126\ufe06\133\ufe06" +
    "\001\002\000\004\004\u0233\001\002\000\012\023\ufe03\113" +
    "\ufe03\126\ufe03\133\ufe03\001\002\000\012\023\ufe07\113\ufe07" +
    "\126\ufe07\133\ufe07\001\002\000\006\272\u0236\u016c\u0234\001" +
    "\002\000\012\023\ufdff\113\ufdff\126\ufdff\133\ufdff\001\002" +
    "\000\012\023\ufe02\113\ufe02\126\ufe02\133\ufe02\001\002\000" +
    "\012\023\ufdfe\113\ufdfe\126\ufdfe\133\ufdfe\001\002\000\020" +
    "\347\044\352\012\u0178\u0232\u0179\u022a\u017a\u022f\u017b\u022d\u017c" +
    "\u0230\001\002\000\010\113\ufe08\126\ufe08\133\ufe08\001\002" +
    "\000\010\113\ufe01\126\ufe01\133\ufe01\001\002\000\004\261" +
    "\u023b\001\002\000\004\u0126\u023c\001\002\000\012\023\ufe04" +
    "\113\ufe04\126\ufe04\133\ufe04\001\002\000\014\011\061\032" +
    "\057\u017d\u023f\u017e\u0242\u017f\u023e\001\002\000\014\023\ufe40" +
    "\111\ufe40\113\ufe40\126\ufe40\133\ufe40\001\002\000\014\023" +
    "\ufe42\111\ufe42\113\ufe42\126\ufe42\133\ufe42\001\002\000\014" +
    "\023\ufe3f\111\ufe3f\113\ufe3f\126\ufe3f\133\ufe3f\001\002\000" +
    "\012\023\ufdfd\113\ufdfd\126\ufdfd\133\ufdfd\001\002\000\014" +
    "\023\ufe41\111\ufe41\113\ufe41\126\ufe41\133\ufe41\001\002\000" +
    "\004\u016c\u0244\001\002\000\004\261\u0245\001\002\000\004" +
    "\u0126\u0246\001\002\000\012\023\ufe05\113\ufe05\126\ufe05\133" +
    "\ufe05\001\002\000\006\113\u0222\126\ufe16\001\002\000\004" +
    "\126\u0249\001\002\000\012\174\021\201\034\277\014\311" +
    "\013\001\002\000\004\133\u024b\001\002\000\012\012\u024f" +
    "\025\060\040\u024c\044\u0250\001\002\000\004\333\ufe0b\001" +
    "\002\000\004\333\u0251\001\002\000\004\333\ufe0d\001\002" +
    "\000\004\333\ufe0c\001\002\000\004\333\ufe0a\001\002\000" +
    "\006\022\ufe11\u0110\ufe11\001\002\000\106\051\u016d\052\u0179" +
    "\053\u015b\054\u017e\055\u0171\056\u0163\057\u015f\060\u017a\061" +
    "\u0170\062\u016f\063\u017d\064\u0167\065\u016b\066\u0165\067\u017c" +
    "\070\u0162\071\u0168\072\u0177\073\u017b\255\u0174\320\u015c\u0101" +
    "\u0176\u010b\u0173\u0111\u0172\u011e\u0159\u0127\u0178\u012a\u0160\u012d\u015d" +
    "\u0140\u015e\u014c\u0161\u0156\u016e\u0159\u0175\u0166\u0164\u0167\u016c\001" +
    "\002\000\010\023\ufe14\050\ufe14\u0177\u0255\001\002\000\006" +
    "\023\ufe1b\050\ufe1b\001\002\000\006\023\ufe15\050\ufe15\001" +
    "\002\000\004\050\ufe1a\001\002\000\004\025\060\001\002" +
    "\000\004\050\ufe19\001\002\000\014\022\u025a\025\ufe5b\111" +
    "\ufe5b\113\ufe5b\351\ufe5b\001\002\000\004\012\u028f\001\002" +
    "\000\012\025\060\111\ufe59\113\ufe59\351\ufe59\001\002\000" +
    "\010\111\ufe4b\113\ufe4b\351\u0271\001\002\000\112\011\061" +
    "\032\u025f\051\u016d\052\u0179\053\u015b\054\u017e\055\u0171\056" +
    "\u0163\057\u015f\060\u017a\061\u0170\062\u016f\063\u017d\064\u0167" +
    "\065\u016b\066\u0165\067\u017c\070\u0162\071\u0168\072\u0177\073" +
    "\u017b\255\u0263\320\u015c\u0101\u0176\u010b\u0173\u0111\u0172\u011e\u0159" +
    "\u0127\u0178\u012a\u0160\u012d\u015d\u0140\u015e\u014c\u0161\u0156\u016e\u0159" +
    "\u0175\u0166\u0164\u0167\u016c\001\002\000\010\111\ufe5a\113\ufe5a" +
    "\351\ufe5a\001\002\000\110\011\064\051\u016d\052\u0179\053" +
    "\u015b\054\u017e\055\u0171\056\u0163\057\u015f\060\u017a\061\u0170" +
    "\062\u016f\063\u017d\064\u0167\065\u016b\066\u0165\067\u017c\070" +
    "\u0162\071\u0168\072\u0177\073\u017b\255\u0174\320\u015c\u0101\u0176" +
    "\u010b\u0173\u0111\u0172\u011e\u0159\u0127\u0178\u012a\u0160\u012d\u015d\u0140" +
    "\u015e\u014c\u0161\u0156\u016e\u0159\u0175\u0166\u0164\u0167\u016c\001\002" +
    "\000\012\023\u026f\111\ufe56\113\ufe56\351\ufe56\001\002\000" +
    "\020\004\u026a\023\ufe51\111\ufe51\113\ufe51\351\ufe51\u0173\ufe51" +
    "\u0176\ufe51\001\002\000\004\u0177\u0268\001\002\000\024\004" +
    "\uffd1\023\uffd1\033\uffd1\111\uffd1\113\uffd1\351\uffd1\u016a\u0264" +
    "\u0173\uffd1\u0176\uffd1\001\002\000\006\u0173\u0266\u0176\u0265\001" +
    "\002\000\012\023\ufe4e\111\ufe4e\113\ufe4e\351\ufe4e\001\002" +
    "\000\012\023\ufe4d\111\ufe4d\113\ufe4d\351\ufe4d\001\002\000" +
    "\012\023\ufe54\111\ufe54\113\ufe54\351\ufe54\001\002\000\012" +
    "\023\ufe53\111\ufe53\113\ufe53\351\ufe53\001\002\000\016\023" +
    "\ufe4f\111\ufe4f\113\ufe4f\351\ufe4f\u0173\u0266\u0176\u0265\001\002" +
    "\000\004\274\u026b\001\002\000\016\023\ufe52\111\ufe52\113" +
    "\ufe52\351\ufe52\u0173\ufe52\u0176\ufe52\001\002\000\012\023\ufe55" +
    "\111\ufe55\113\ufe55\351\ufe55\001\002\000\012\023\ufe50\111" +
    "\ufe50\113\ufe50\351\ufe50\001\002\000\010\111\ufe58\113\ufe58" +
    "\351\ufe58\001\002\000\004\025\060\001\002\000\010\111" +
    "\ufe57\113\ufe57\351\ufe57\001\002\000\012\347\044\352\012" +
    "\u0178\u0287\u0180\u0289\001\002\000\006\111\u0274\113\ufe3d\001" +
    "\002\000\004\113\u0276\001\002\000\004\122\u0275\001\002" +
    "\000\004\113\ufe3e\001\002\000\004\126\u0278\001\002\000" +
    "\006\022\ufe5f\u0110\ufe5f\001\002\000\012\174\021\201\034" +
    "\277\014\311\013\001\002\000\006\022\u027e\u0110\u027d\001" +
    "\002\000\004\333\u027b\001\002\000\006\022\ufe3c\u0110\ufe3c" +
    "\001\002\000\014\174\021\201\034\277\014\311\013\333" +
    "\ufe39\001\002\000\046\002\uffea\003\uffea\103\uffea\126\uffea" +
    "\147\uffea\163\uffea\174\uffea\201\uffea\203\uffea\230\uffea\270" +
    "\uffea\271\uffea\277\uffea\311\uffea\323\uffea\333\uffea\347\uffea" +
    "\352\uffea\001\002\000\046\002\uffeb\003\uffeb\103\uffeb\126" +
    "\uffeb\147\uffeb\163\uffeb\174\uffeb\201\uffeb\203\uffeb\230\uffeb" +
    "\270\uffeb\271\uffeb\277\uffeb\311\uffeb\323\uffeb\333\uffeb\347" +
    "\uffeb\352\uffeb\001\002\000\006\022\u027e\u0110\u027d\001\002" +
    "\000\004\333\ufe3b\001\002\000\014\174\021\201\034\277" +
    "\014\311\013\333\ufe37\001\002\000\006\022\u027e\u0110\u027d" +
    "\001\002\000\004\333\ufe3a\001\002\000\004\333\ufe38\001" +
    "\002\000\010\023\u028d\111\ufe43\113\ufe43\001\002\000\006" +
    "\111\ufe4c\113\ufe4c\001\002\000\010\023\ufe49\111\ufe49\113" +
    "\ufe49\001\002\000\004\113\u028a\001\002\000\010\023\ufe48" +
    "\111\ufe48\113\ufe48\001\002\000\014\011\061\032\057\u017d" +
    "\u023f\u017e\u0242\u017f\u023e\001\002\000\010\023\ufe47\111\ufe47" +
    "\113\ufe47\001\002\000\006\111\ufe4a\113\ufe4a\001\002\000" +
    "\012\347\044\352\012\u0178\u0287\u0180\u0289\001\002\000\006" +
    "\111\ufe44\113\ufe44\001\002\000\012\025\ufe5c\111\ufe5c\113" +
    "\ufe5c\351\ufe5c\001\002\000\010\011\uff47\032\uff47\207\u0298" +
    "\001\002\000\004\033\u0292\001\002\000\004\012\u0293\001" +
    "\002\000\004\050\u0294\001\002\000\046\007\uff7b\011\uff7b" +
    "\012\uff7b\013\uff7b\025\uff7b\032\uff7b\033\uff7b\044\uff7b\124" +
    "\uff7b\207\uff7b\261\uff7b\310\uff7b\337\u0296\u010c\uff7b\u0139\uff7b" +
    "\u013e\uff7b\u0149\uff7b\u014a\uff7b\001\002\000\044\007\uff7e\011" +
    "\uff7e\012\uff7e\013\uff7e\025\uff7e\032\uff7e\033\uff7e\044\uff7e" +
    "\124\uff7e\207\uff7e\261\uff7e\310\uff7e\u010c\uff7e\u0139\uff7e\u013e" +
    "\uff7e\u0149\uff7e\u014a\uff7e\001\002\000\044\007\uff7c\011\uff7c" +
    "\012\uff7c\013\uff7c\025\uff7c\032\uff7c\033\uff7c\044\uff7c\124" +
    "\uff7c\207\uff7c\261\uff7c\310\uff7c\u010c\uff7c\u0139\uff7c\u013e\uff7c" +
    "\u0149\uff7c\u014a\uff7c\001\002\000\006\011\061\032\057\001" +
    "\002\000\006\011\uff48\032\uff48\001\002\000\016\022\uff45" +
    "\033\377\133\uff45\274\uff45\324\uff45\u0110\uff45\001\002\000" +
    "\014\022\uff46\133\uff46\274\uff46\324\uff46\u0110\uff46\001\002" +
    "\000\014\022\uff3b\133\uff3b\274\u029c\324\u029d\u0110\uff3b\001" +
    "\002\000\004\324\u02b1\001\002\000\004\033\u029f\001\002" +
    "\000\010\022\uff49\133\uff49\u0110\uff49\001\002\000\012\012" +
    "\u02a5\013\u02a3\044\u02a4\274\u02a0\001\002\000\006\023\uff43" +
    "\050\uff43\001\002\000\004\050\u02aa\001\002\000\006\023" +
    "\u02a6\050\uff3e\001\002\000\006\023\uff41\050\uff41\001\002" +
    "\000\006\023\uff40\050\uff40\001\002\000\006\023\uff42\050" +
    "\uff42\001\002\000\012\012\u02a5\013\u02a3\044\u02a4\274\u02a0" +
    "\001\002\000\004\050\uff44\001\002\000\006\023\u02a6\050" +
    "\uff3e\001\002\000\004\050\uff3f\001\002\000\012\022\uff39" +
    "\023\u02ac\133\uff39\u0110\uff39\001\002\000\010\022\uff3d\133" +
    "\uff3d\u0110\uff3d\001\002\000\004\033\u02ad\001\002\000\012" +
    "\012\u02a5\013\u02a3\044\u02a4\274\u02a0\001\002\000\004\050" +
    "\u02af\001\002\000\012\022\uff39\023\u02ac\133\uff39\u0110\uff39" +
    "\001\002\000\010\022\uff3a\133\uff3a\u0110\uff3a\001\002\000" +
    "\010\022\uff3c\133\uff3c\u0110\uff3c\001\002\000\010\011\061" +
    "\025\060\032\057\001\002\000\006\022\ufe6d\u0110\ufe6d\001" +
    "\002\000\010\022\ufe6c\351\ufe6c\u0110\ufe6c\001\002\000\010" +
    "\022\ufe6b\351\ufe6b\u0110\ufe6b\001\002\000\004\255\u02b7\001" +
    "\002\000\034\111\ufe33\u010e\u02b8\u0117\ufe33\u0144\u02b9\u0182\ufe33" +
    "\u0183\ufe33\u0184\ufe33\u0185\ufe33\u0186\ufe33\u0187\ufe33\u0188\ufe33\u0189" +
    "\ufe33\u018a\ufe33\001\002\000\030\111\ufe34\u0117\ufe34\u0182\ufe34" +
    "\u0183\ufe34\u0184\ufe34\u0185\ufe34\u0186\ufe34\u0187\ufe34\u0188\ufe34\u0189" +
    "\ufe34\u018a\ufe34\001\002\000\030\111\ufe35\u0117\ufe35\u0182\ufe35" +
    "\u0183\ufe35\u0184\ufe35\u0185\ufe35\u0186\ufe35\u0187\ufe35\u0188\ufe35\u0189" +
    "\ufe35\u018a\ufe35\001\002\000\030\111\ufe30\u0117\u02bd\u0182\u02bb" +
    "\u0183\ufe30\u0184\ufe30\u0185\ufe30\u0186\ufe30\u0187\ufe30\u0188\ufe30\u0189" +
    "\ufe30\u018a\ufe30\001\002\000\024\111\ufe31\u0183\ufe31\u0184\ufe31" +
    "\u0185\ufe31\u0186\ufe31\u0187\ufe31\u0188\ufe31\u0189\ufe31\u018a\ufe31\001" +
    "\002\000\024\111\ufe2b\u0183\u02be\u0184\u02bf\u0185\u02c0\u0186\u02c2" +
    "\u0187\ufe2b\u0188\ufe2b\u0189\ufe2b\u018a\ufe2b\001\002\000\024\111" +
    "\ufe32\u0183\ufe32\u0184\ufe32\u0185\ufe32\u0186\ufe32\u0187\ufe32\u0188\ufe32" +
    "\u0189\ufe32\u018a\ufe32\001\002\000\014\111\ufe2f\u0187\ufe2f\u0188" +
    "\ufe2f\u0189\ufe2f\u018a\ufe2f\001\002\000\014\111\ufe2e\u0187\ufe2e" +
    "\u0188\ufe2e\u0189\ufe2e\u018a\ufe2e\001\002\000\014\111\ufe2d\u0187" +
    "\ufe2d\u0188\ufe2d\u0189\ufe2d\u018a\ufe2d\001\002\000\014\111\ufe27" +
    "\u0187\u02c6\u0188\u02c5\u0189\u02c4\u018a\ufe27\001\002\000\014\111" +
    "\ufe2c\u0187\ufe2c\u0188\ufe2c\u0189\ufe2c\u018a\ufe2c\001\002\000\006" +
    "\111\ufe25\u018a\u02c8\001\002\000\006\111\ufe28\u018a\ufe28\001" +
    "\002\000\006\111\ufe29\u018a\ufe29\001\002\000\006\111\ufe2a" +
    "\u018a\ufe2a\001\002\000\004\111\u02c9\001\002\000\004\111" +
    "\ufe26\001\002\000\004\174\021\001\002\000\010\022\ufe23" +
    "\111\u02cc\u0110\ufe23\001\002\000\006\022\ufe36\u0110\ufe36\001" +
    "\002\000\004\311\u02cd\001\002\000\010\022\ufe21\267\u02cf" +
    "\u0110\ufe21\001\002\000\006\022\ufe24\u0110\ufe24\001\002\000" +
    "\006\011\061\032\057\001\002\000\006\022\ufe22\u0110\ufe22" +
    "\001\002\000\044\002\ufffe\003\023\103\015\126\020\147" +
    "\047\163\033\174\021\201\034\203\045\230\035\270\007" +
    "\271\026\277\014\311\013\323\037\347\044\352\012\001" +
    "\002\000\004\002\uffff\001\002\000\040\007\uff5a\011\uff5a" +
    "\012\uff5a\013\uff5a\025\uff5a\032\uff5a\033\uff5a\044\uff5a\254" +
    "\uff5a\261\uff5a\u010c\uff5a\u0139\uff5a\u013e\uff5a\u0149\uff5a\u014a\uff5a" +
    "\001\002\000\040\007\uff5b\011\uff5b\012\uff5b\013\uff5b\025" +
    "\uff5b\032\uff5b\033\uff5b\044\uff5b\254\uff5b\261\uff5b\u010c\uff5b" +
    "\u0139\uff5b\u013e\uff5b\u0149\uff5b\u014a\uff5b\001\002\000\040\007" +
    "\uff7d\011\uff7d\012\uff7d\013\uff7d\025\uff7d\032\uff7d\033\uff7d" +
    "\044\uff7d\254\u0291\261\uff7d\u010c\uff7d\u0139\uff7d\u013e\uff7d\u0149" +
    "\uff7d\u014a\uff7d\001\002\000\036\007\u02d9\011\061\012\245" +
    "\013\265\025\060\032\057\033\260\044\254\261\262\u010c" +
    "\255\u0139\244\u013e\263\u0149\261\u014a\257\001\002\000\040" +
    "\011\061\022\uff9b\023\uff9b\032\057\044\u02e1\050\uff9b\111" +
    "\uff9b\113\u02df\124\uff9b\133\uff9b\143\uff9b\146\uff9b\326\uff9b" +
    "\343\uff9b\u0110\uff9b\001\002\000\026\022\uff26\050\uff26\111" +
    "\uff26\124\u02e5\133\uff26\143\uff26\146\uff26\326\uff26\343\uff26" +
    "\u0110\uff26\001\002\000\030\022\uff61\023\u02da\050\uff61\111" +
    "\uff61\124\uff61\133\uff61\143\uff61\146\uff61\326\uff61\343\uff61" +
    "\u0110\uff61\001\002\000\034\011\061\012\245\013\265\025" +
    "\060\032\057\033\260\044\254\261\262\u010c\255\u0139\244" +
    "\u013e\263\u0149\261\u014a\257\001\002\000\026\022\uff63\050" +
    "\uff63\111\uff63\124\uff63\133\uff63\143\uff63\146\uff63\326\uff63" +
    "\343\uff63\u0110\uff63\001\002\000\040\011\061\022\uff9b\023" +
    "\uff9b\032\057\044\u02e1\050\uff9b\111\uff9b\113\u02df\124\uff9b" +
    "\133\uff9b\143\uff9b\146\uff9b\326\uff9b\343\uff9b\u0110\uff9b\001" +
    "\002\000\044\022\uff9a\023\uff9a\050\uff9a\111\uff9a\124\uff9a" +
    "\127\uff9a\133\uff9a\143\uff9a\144\uff9a\146\uff9a\176\uff9a\215" +
    "\uff9a\226\uff9a\326\uff9a\343\uff9a\u0110\uff9a\u016c\uff9a\001\002" +
    "\000\044\022\uff9c\023\uff9c\050\uff9c\111\uff9c\124\uff9c\127" +
    "\uff9c\133\uff9c\143\uff9c\144\uff9c\146\uff9c\176\uff9c\215\uff9c" +
    "\226\uff9c\326\uff9c\343\uff9c\u0110\uff9c\u016c\uff9c\001\002\000" +
    "\010\011\061\032\057\044\u02e1\001\002\000\030\022\uff61" +
    "\023\u02da\050\uff61\111\uff61\124\uff61\133\uff61\143\uff61\146" +
    "\uff61\326\uff61\343\uff61\u0110\uff61\001\002\000\044\022\uff99" +
    "\023\uff99\050\uff99\111\uff99\124\uff99\127\uff99\133\uff99\143" +
    "\uff99\144\uff99\146\uff99\176\uff99\215\uff99\226\uff99\326\uff99" +
    "\343\uff99\u0110\uff99\u016c\uff99\001\002\000\026\022\uff62\050" +
    "\uff62\111\uff62\124\uff62\133\uff62\143\uff62\146\uff62\326\uff62" +
    "\343\uff62\u0110\uff62\001\002\000\044\022\uff9d\023\uff9d\050" +
    "\uff9d\111\uff9d\124\uff9d\127\uff9d\133\uff9d\143\uff9d\144\uff9d" +
    "\146\uff9d\176\uff9d\215\uff9d\226\uff9d\326\uff9d\343\uff9d\u0110" +
    "\uff9d\u016c\uff9d\001\002\000\024\022\uff65\050\uff65\111\uff65" +
    "\133\uff65\143\uff65\146\uff65\326\uff65\343\230\u0110\uff65\001" +
    "\002\000\006\011\061\032\057\001\002\000\050\011\061" +
    "\022\uff9b\023\uff9b\032\057\044\u02e1\050\uff9b\111\uff9b\113" +
    "\u02df\127\uff9b\133\uff9b\143\uff9b\144\uff9b\146\uff9b\176\uff9b" +
    "\215\uff9b\226\uff9b\326\uff9b\343\uff9b\u0110\uff9b\001\002\000" +
    "\040\022\uff22\023\uff22\050\uff22\111\uff22\127\u02ed\133\uff22" +
    "\143\uff22\144\u02eb\146\uff22\176\u02e9\215\uff1d\226\u02e8\326" +
    "\uff22\343\uff22\u0110\uff22\001\002\000\006\215\uff1b\331\u02ee" +
    "\001\002\000\004\215\uff21\001\002\000\004\215\u02f6\001" +
    "\002\000\006\215\uff1b\331\u02ee\001\002\000\026\022\uff24" +
    "\023\u02f0\050\uff24\111\uff24\133\uff24\143\uff24\146\uff24\326" +
    "\uff24\343\uff24\u0110\uff24\001\002\000\006\215\uff1b\331\u02ee" +
    "\001\002\000\004\215\uff1c\001\002\000\004\215\uff1e\001" +
    "\002\000\006\011\061\032\057\001\002\000\024\022\uff27" +
    "\050\uff27\111\uff27\133\uff27\143\uff27\146\uff27\326\uff27\343" +
    "\uff27\u0110\uff27\001\002\000\046\011\061\022\uff9b\032\057" +
    "\044\u02e1\050\uff9b\111\uff9b\113\u02df\127\uff9b\133\uff9b\143" +
    "\uff9b\144\uff9b\146\uff9b\176\uff9b\215\uff9b\226\uff9b\326\uff9b" +
    "\343\uff9b\u0110\uff9b\001\002\000\036\022\uff22\050\uff22\111" +
    "\uff22\127\u02ed\133\uff22\143\uff22\144\u02eb\146\uff22\176\u02e9" +
    "\215\uff1d\226\u02e8\326\uff22\343\uff22\u0110\uff22\001\002\000" +
    "\024\022\uff25\050\uff25\111\uff25\133\uff25\143\uff25\146\uff25" +
    "\326\uff25\343\uff25\u0110\uff25\001\002\000\004\215\uff20\001" +
    "\002\000\006\011\061\032\057\001\002\000\014\011\061" +
    "\032\057\044\u02e1\113\u02df\u016c\uff9b\001\002\000\004\u016c" +
    "\u02f9\001\002\000\036\011\uff7f\012\uff7f\013\uff7f\025\uff7f" +
    "\032\uff7f\033\240\044\uff7f\256\243\261\uff7f\u010c\uff7f\u0139" +
    "\uff7f\u013e\uff7f\u0149\uff7f\u014a\uff7f\001\002\000\040\022\uff22" +
    "\023\uff22\050\uff22\111\uff22\127\u02ed\133\uff22\143\uff22\144" +
    "\u02eb\146\uff22\176\u02e9\215\uff1d\226\u02e8\326\uff22\343\uff22" +
    "\u0110\uff22\001\002\000\026\022\uff23\023\uff23\050\uff23\111" +
    "\uff23\133\uff23\143\uff23\146\uff23\326\uff23\343\uff23\u0110\uff23" +
    "\001\002\000\004\215\uff1f\001\002\000\022\022\uff4c\050" +
    "\uff4c\111\uff4c\133\uff4c\143\u02ff\146\uff4c\326\uff4c\u0110\uff4c" +
    "\001\002\000\020\022\uff57\050\uff57\111\uff57\133\uff57\146" +
    "\u0306\326\uff57\u0110\uff57\001\002\000\004\145\u0300\001\002" +
    "\000\034\011\061\012\245\013\265\025\060\032\057\033" +
    "\260\044\254\261\262\u010c\255\u0139\244\u013e\263\u0149\261" +
    "\u014a\257\001\002\000\022\022\uff4a\023\u0302\050\uff4a\111" +
    "\uff4a\133\uff4a\146\uff4a\326\uff4a\u0110\uff4a\001\002\000\034" +
    "\011\061\012\245\013\265\025\060\032\057\033\260\044" +
    "\254\261\262\u010c\255\u0139\244\u013e\263\u0149\261\u014a\257" +
    "\001\002\000\020\022\uff4d\050\uff4d\111\uff4d\133\uff4d\146" +
    "\uff4d\326\uff4d\u0110\uff4d\001\002\000\022\022\uff4a\023\u0302" +
    "\050\uff4a\111\uff4a\133\uff4a\146\uff4a\326\uff4a\u0110\uff4a\001" +
    "\002\000\020\022\uff4b\050\uff4b\111\uff4b\133\uff4b\146\uff4b" +
    "\326\uff4b\u0110\uff4b\001\002\000\036\011\uff7f\012\uff7f\013" +
    "\uff7f\025\uff7f\032\uff7f\033\240\044\uff7f\256\243\261\uff7f" +
    "\u010c\uff7f\u0139\uff7f\u013e\uff7f\u0149\uff7f\u014a\uff7f\001\002\000" +
    "\016\022\uff55\050\uff55\111\uff55\133\uff55\326\u0308\u0110\uff55" +
    "\001\002\000\004\145\u030a\001\002\000\014\022\uff5c\050" +
    "\uff5c\111\uff5c\133\uff5c\u0110\uff5c\001\002\000\034\011\061" +
    "\012\245\013\265\025\060\032\057\033\260\044\254\261" +
    "\262\u010c\255\u0139\244\u013e\263\u0149\261\u014a\257\001\002" +
    "\000\054\011\uff53\012\uff53\013\uff53\022\uff53\025\uff53\032" +
    "\uff53\033\uff53\044\uff53\050\uff53\111\uff53\133\uff53\175\u030c" +
    "\261\uff53\304\uff53\u0105\uff53\u010c\uff53\u0110\uff53\u0139\uff53\u013e" +
    "\uff53\u0149\uff53\u014a\uff53\001\002\000\006\011\061\032\057" +
    "\001\002\000\052\011\uff50\012\uff50\013\uff50\022\uff50\025" +
    "\uff50\032\uff50\033\uff50\044\uff50\050\uff50\111\uff50\133\uff50" +
    "\261\uff50\304\u010a\u0105\u010b\u010c\uff50\u0110\uff50\u0139\uff50\u013e" +
    "\uff50\u0149\uff50\u014a\uff50\001\002\000\046\011\061\012\245" +
    "\013\265\022\uff4e\025\060\032\057\033\260\044\254\050" +
    "\uff4e\111\uff4e\133\uff4e\261\262\u010c\255\u0110\uff4e\u0139\244" +
    "\u013e\263\u0149\261\u014a\257\001\002\000\014\022\uff56\050" +
    "\uff56\111\uff56\133\uff56\u0110\uff56\001\002\000\022\022\uff53" +
    "\050\uff53\111\uff53\133\uff53\175\u030c\304\uff53\u0105\uff53\u0110" +
    "\uff53\001\002\000\020\022\uff50\050\uff50\111\uff50\133\uff50" +
    "\304\u010a\u0105\u010b\u0110\uff50\001\002\000\014\022\uff4f\050" +
    "\uff4f\111\uff4f\133\uff4f\u0110\uff4f\001\002\000\052\011\uff54" +
    "\012\uff54\013\uff54\022\uff54\025\uff54\032\uff54\033\uff54\044" +
    "\uff54\050\uff54\111\uff54\133\uff54\261\uff54\304\uff54\u0105\uff54" +
    "\u010c\uff54\u0110\uff54\u0139\uff54\u013e\uff54\u0149\uff54\u014a\uff54\001" +
    "\002\000\016\022\uff58\050\uff58\111\uff58\133\uff58\326\uff58" +
    "\u0110\uff58\001\002\000\030\022\uff61\023\u02da\050\uff61\111" +
    "\uff61\124\uff61\133\uff61\143\uff61\146\uff61\326\uff61\343\uff61" +
    "\u0110\uff61\001\002\000\026\022\uff64\050\uff64\111\uff64\124" +
    "\uff64\133\uff64\143\uff64\146\uff64\326\uff64\343\uff64\u0110\uff64" +
    "\001\002\000\014\011\061\022\ufe72\025\060\032\057\u0110" +
    "\ufe72\001\002\000\010\022\ufe70\351\u031a\u0110\ufe70\001\002" +
    "\000\006\022\ufe74\u0110\ufe74\001\002\000\004\u0181\u031c\001" +
    "\002\000\006\022\ufe73\u0110\ufe73\001\002\000\010\022\ufe6e" +
    "\044\u031e\u0110\ufe6e\001\002\000\006\022\ufe71\u0110\ufe71\001" +
    "\002\000\006\022\ufe6f\u0110\ufe6f\001\002\000\006\022\ufe96" +
    "\u0110\ufe96\001\002\000\006\022\ufe91\u0110\ufe91\001\002\000" +
    "\006\022\ufe92\u0110\ufe92\001\002\000\010\011\061\032\057" +
    "\236\u0355\001\002\000\006\011\061\032\057\001\002\000" +
    "\006\022\ufe95\u0110\ufe95\001\002\000\006\022\ufe94\u0110\ufe94" +
    "\001\002\000\006\022\ufe97\u0110\ufe97\001\002\000\006\011" +
    "\061\032\057\001\002\000\006\011\061\032\057\001\002" +
    "\000\006\022\ufe93\u0110\ufe93\001\002\000\006\033\377\113" +
    "\ufe88\001\002\000\004\113\ufe89\001\002\000\004\113\u032d" +
    "\001\002\000\004\174\021\001\002\000\006\022\ufe8a\u0110" +
    "\ufe8a\001\002\000\010\075\u0332\103\u0331\323\u0335\001\002" +
    "\000\006\022\ufe87\u0110\ufe87\001\002\000\004\200\u0344\001" +
    "\002\000\022\011\061\032\057\114\ufeb7\156\ufeb7\173\u0114" +
    "\211\u0118\303\ufeb7\353\ufeb7\001\002\000\006\022\ufe84\u0110" +
    "\ufe84\001\002\000\006\022\ufe86\u0110\ufe86\001\002\000\014" +
    "\011\ufe77\032\ufe77\165\ufe77\200\u0337\211\u0338\001\002\000" +
    "\010\022\ufe75\023\u033e\u0110\ufe75\001\002\000\010\011\uffdd" +
    "\032\uffdd\165\132\001\002\000\010\011\ufe78\032\ufe78\165" +
    "\ufe78\001\002\000\010\011\uffdd\032\uffdd\165\132\001\002" +
    "\000\006\011\061\032\057\001\002\000\010\022\ufe7a\023" +
    "\ufe7a\u0110\ufe7a\001\002\000\006\011\061\032\057\001\002" +
    "\000\010\022\ufe79\023\ufe79\u0110\ufe79\001\002\000\014\011" +
    "\ufe77\032\ufe77\165\ufe77\200\u0337\211\u0338\001\002\000\006" +
    "\022\ufe7b\u0110\ufe7b\001\002\000\010\022\ufe75\023\u033e\u0110" +
    "\ufe75\001\002\000\006\022\ufe76\u0110\ufe76\001\002\000\010" +
    "\022\ufed9\023\u01cd\u0110\ufed9\001\002\000\006\022\ufe85\u0110" +
    "\ufe85\001\002\000\006\011\061\032\057\001\002\000\114" +
    "\032\u015a\051\u016d\052\u0179\053\u015b\054\u017e\055\u0171\056" +
    "\u0163\057\u015f\060\u017a\061\u0170\062\u016f\063\u017d\064\u0167" +
    "\065\u016b\066\u0165\067\u017c\070\u0162\071\u0168\072\u0177\073" +
    "\u017b\075\u0347\255\u0174\320\u015c\323\u0348\u0101\u0176\u010b\u0173" +
    "\u0111\u0172\u011e\u0159\u0127\u0178\u012a\u0160\u012d\u015d\u0140\u015e\u014c" +
    "\u0161\u0156\u016e\u0159\u0175\u0166\u0164\u0167\u016c\001\002\000\012" +
    "\022\ufec7\175\u017f\261\ufec7\u0110\ufec7\001\002\000\006\155" +
    "\ufe7f\256\ufe7f\001\002\000\006\155\ufe7e\256\ufe7e\001\002" +
    "\000\006\155\u034c\256\u034d\001\002\000\006\022\ufe83\u0110" +
    "\ufe83\001\002\000\006\022\ufe82\u0110\ufe82\001\002\000\006" +
    "\022\ufe7d\u0110\ufe7d\001\002\000\004\111\u034f\001\002\000" +
    "\006\022\ufe81\u0110\ufe81\001\002\000\004\122\u0350\001\002" +
    "\000\006\022\ufe7c\u0110\ufe7c\001\002\000\010\022\ufebd\261" +
    "\u013b\u0110\ufebd\001\002\000\006\022\ufe80\u0110\ufe80\001\002" +
    "\000\006\022\ufe8b\u0110\ufe8b\001\002\000\006\175\ufe8f\213" +
    "\ufe8f\001\002\000\006\175\ufe8e\213\ufe8e\001\002\000\006" +
    "\175\u0357\213\u0359\001\002\000\006\011\061\032\057\001" +
    "\002\000\006\022\ufe90\u0110\ufe90\001\002\000\004\147\u035a" +
    "\001\002\000\004\u0118\u035b\001\002\000\006\022\ufe8c\u0110" +
    "\ufe8c\001\002\000\006\022\ufe8d\u0110\ufe8d\001\002\000\012" +
    "\011\uff36\032\uff36\124\u035e\310\uff36\001\002\000\010\011" +
    "\uff37\032\uff37\310\uff37\001\002\000\010\011\061\032\057" +
    "\310\u0362\001\002\000\010\022\uff38\133\uff38\u0110\uff38\001" +
    "\002\000\004\124\u0369\001\002\000\004\033\u0363\001\002" +
    "\000\006\011\061\032\057\001\002\000\010\022\uff35\133" +
    "\uff35\u0110\uff35\001\002\000\004\023\u0366\001\002\000\004" +
    "\012\u0367\001\002\000\004\050\u0368\001\002\000\010\022" +
    "\uff30\133\uff30\u0110\uff30\001\002\000\006\011\061\032\057" +
    "\001\002\000\012\022\uff65\133\uff65\343\230\u0110\uff65\001" +
    "\002\000\010\022\uff34\133\uff34\u0110\uff34\001\002\000\014" +
    "\022\uff31\023\u036d\133\uff31\343\uff31\u0110\uff31\001\002\000" +
    "\006\011\061\032\057\001\002\000\012\022\uff33\133\uff33" +
    "\343\uff33\u0110\uff33\001\002\000\014\022\uff31\023\u036d\133" +
    "\uff31\343\uff31\u0110\uff31\001\002\000\012\022\uff32\133\uff32" +
    "\343\uff32\u0110\uff32\001\002\000\006\011\061\032\057\001" +
    "\002\000\004\213\u0373\001\002\000\006\011\061\032\057" +
    "\001\002\000\004\004\u037b\001\002\000\014\022\uff28\124" +
    "\u0377\133\uff28\343\uff28\u0110\uff28\001\002\000\012\022\uff65" +
    "\133\uff65\343\230\u0110\uff65\001\002\000\006\011\061\032" +
    "\057\001\002\000\014\022\uff31\023\u036d\133\uff31\343\uff31" +
    "\u0110\uff31\001\002\000\012\022\uff29\133\uff29\343\uff29\u0110" +
    "\uff29\001\002\000\010\022\uff2f\133\uff2f\u0110\uff2f\001\002" +
    "\000\036\011\061\012\245\013\265\025\060\032\057\033" +
    "\260\044\254\261\262\274\u037e\u010c\255\u0139\244\u013e\263" +
    "\u0149\261\u014a\257\001\002\000\016\022\uff2a\023\u037f\124" +
    "\uff2a\133\uff2a\343\uff2a\u0110\uff2a\001\002\000\016\022\uff2c" +
    "\023\uff2c\124\uff2c\133\uff2c\343\uff2c\u0110\uff2c\001\002\000" +
    "\016\022\uff2d\023\uff2d\124\uff2d\133\uff2d\343\uff2d\u0110\uff2d" +
    "\001\002\000\006\011\061\032\057\001\002\000\014\022" +
    "\uff2e\124\uff2e\133\uff2e\343\uff2e\u0110\uff2e\001\002\000\014" +
    "\022\uff2b\124\uff2b\133\uff2b\343\uff2b\u0110\uff2b\001\002\000" +
    "\006\011\061\032\057\001\002\000\006\022\uff9e\u0110\uff9e" +
    "\001\002\000\044\002\ufffe\003\023\103\015\126\020\147" +
    "\047\163\033\174\021\201\034\203\045\230\035\270\007" +
    "\271\026\277\014\311\013\323\037\347\044\352\012\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0383\000\054\003\041\004\003\005\010\006\005\007" +
    "\023\010\026\030\015\044\024\075\016\106\030\116\007" +
    "\124\004\136\031\227\047\253\040\257\035\263\037\265" +
    "\021\304\045\340\042\362\027\001\001\000\004\011\u0383" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\057\u0370\001\001\000\004\057\u035c\001\001\000" +
    "\022\230\u0325\231\u0324\234\u0323\235\u0328\237\u031e\267\u0320" +
    "\314\u031f\316\176\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\262\u0316\001\001\000\004\076\u02d4\001\001" +
    "\000\002\001\001\000\004\011\u02d0\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\u02b5\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\262\u02b1\001\001\000\004\057\u028f\001\001" +
    "\000\026\137\204\140\210\141\203\162\175\163\207\164" +
    "\211\172\174\267\177\314\173\316\176\001\001\000\002" +
    "\001\001\000\016\031\125\032\115\034\122\035\116\037" +
    "\127\041\126\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\262\112\264\111\001\001\000\006\012\065\013\066" +
    "\001\001\000\006\262\052\266\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\054" +
    "\022\055\261\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\106\001\001" +
    "\000\010\022\071\363\073\365\072\001\001\000\010\022" +
    "\071\363\104\365\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\364\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\022\071\363\100" +
    "\365\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\365\102\001\001\000\004\364\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\054\022\055\261\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\162\001\001\000\004\021\154\001" +
    "\001\000\004\021\152\001\001\000\002\001\001\000\004" +
    "\021\144\001\001\000\004\021\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\133" +
    "\015\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\141\001\001\000\004\033\136\001\001\000\006" +
    "\012\133\015\137\001\001\000\002\001\001\000\004\033" +
    "\140\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\065\013\143\001\001\000\002\001\001\000\006\012" +
    "\065\013\145\001\001\000\004\040\147\001\001\000\006" +
    "\012\065\013\150\001\001\000\002\001\001\000\004\040" +
    "\151\001\001\000\002\001\001\000\004\012\153\001\001" +
    "\000\002\001\001\000\004\012\155\001\001\000\004\036" +
    "\157\001\001\000\004\012\160\001\001\000\002\001\001" +
    "\000\004\036\161\001\001\000\002\001\001\000\006\012" +
    "\163\042\164\001\001\000\002\001\001\000\004\043\165" +
    "\001\001\000\002\001\001\000\006\012\163\042\167\001" +
    "\001\000\004\043\170\001\001\000\002\001\001\000\006" +
    "\012\133\015\172\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\270\u020f" +
    "\001\001\000\002\001\001\000\004\012\u01db\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\065\013\u01d7\001\001\000\006\012" +
    "\133\015\u0111\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\211\216\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\220\001\001\000\002\001\001\000\006\012" +
    "\133\015\222\001\001\000\004\165\224\001\001\000\006" +
    "\012\u0106\166\u0107\001\001\000\004\170\226\001\001\000" +
    "\004\072\375\001\001\000\004\067\230\001\001\000\006" +
    "\056\241\062\240\001\001\000\004\171\232\001\001\000" +
    "\004\012\233\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\235\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\056\241\062\372\001\001\000\002\001\001" +
    "\000\022\012\251\017\263\022\255\047\246\051\250\053" +
    "\247\054\245\064\252\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\002" +
    "\356\056\354\065\362\001\001\000\004\052\344\001\001" +
    "\000\004\050\336\001\001\000\004\020\331\001\001\000" +
    "\004\063\326\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\012\251\017" +
    "\263\022\255\047\277\051\250\053\247\054\245\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\251\017\266" +
    "\055\267\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\012\251\017\266\055" +
    "\276\001\001\000\002\001\001\000\004\066\303\001\001" +
    "\000\020\012\251\017\263\022\255\047\317\051\250\053" +
    "\247\054\245\001\001\000\002\001\001\000\020\012\251" +
    "\017\263\022\255\047\305\051\250\053\247\054\245\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\012\251\017\263\022\255\047\307\051\250\053" +
    "\247\054\245\001\001\000\002\001\001\000\020\012\251" +
    "\017\263\022\255\047\311\051\250\053\247\054\245\001" +
    "\001\000\004\061\313\001\001\000\020\012\251\017\263" +
    "\022\255\047\315\051\250\053\247\054\245\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\061\316\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\251\017" +
    "\266\055\321\001\001\000\002\001\001\000\010\012\251" +
    "\017\266\055\323\001\001\000\002\001\001\000\006\056" +
    "\241\062\330\001\001\000\006\056\241\062\327\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\133\015\333\001\001\000\002" +
    "\001\001\000\016\012\251\017\263\022\255\051\341\053" +
    "\247\054\245\001\001\000\016\012\251\017\263\022\255" +
    "\051\337\053\247\054\245\001\001\000\002\001\001\000" +
    "\004\050\340\001\001\000\002\001\001\000\004\050\342" +
    "\001\001\000\002\001\001\000\014\012\251\017\263\022" +
    "\255\053\350\054\245\001\001\000\002\001\001\000\014" +
    "\012\251\017\263\022\255\053\346\054\245\001\001\000" +
    "\004\052\347\001\001\000\002\001\001\000\004\052\351" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\066\367\001\001\000\002\001\001\000\020" +
    "\012\251\017\263\022\255\047\366\051\250\053\247\054" +
    "\245\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\056\364\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\251\017\266\055\371\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\063\374\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\377\073" +
    "\u0100\001\001\000\004\074\u0102\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\u0104\001" +
    "\001\000\004\074\u0105\001\001\000\002\001\001\000\004" +
    "\102\u010b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\167\u010c\001\001" +
    "\000\002\001\001\000\004\012\u010e\001\001\000\004\102" +
    "\u010f\001\001\000\004\167\u0110\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\012\u0118\175\u0116\177\u0115\207" +
    "\u0119\220\u0114\226\u011a\001\001\000\004\012\u01d4\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\176\u01cd\001" +
    "\001\000\004\012\u01cb\001\001\000\010\023\u0169\024\u0165" +
    "\025\u0168\001\001\000\004\221\u011e\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\174\u012f\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\211\u0120\001\001\000" +
    "\004\222\u0122\001\001\000\004\012\u0123\001\001\000\002" +
    "\001\001\000\004\102\u0124\001\001\000\004\223\u0125\001" +
    "\001\000\002\001\001\000\004\012\u0127\001\001\000\004" +
    "\102\u0128\001\001\000\004\223\u0129\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\211\u012c\001\001\000\004" +
    "\222\u012d\001\001\000\002\001\001\000\004\351\u0134\001" +
    "\001\000\002\001\001\000\006\056\241\062\u0131\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\352\u0138\001\001" +
    "\000\004\204\u0139\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\224\u013d\001\001\000\004" +
    "\012\u0152\001\001\000\002\001\001\000\006\012\065\013" +
    "\u013f\001\001\000\004\213\u0141\001\001\000\004\012\u0150" +
    "\001\001\000\004\214\u0143\001\001\000\004\215\u0145\001" +
    "\001\000\004\174\u0144\001\001\000\002\001\001\000\004" +
    "\214\u014f\001\001\000\004\217\u014e\001\001\000\004\217" +
    "\u0148\001\001\000\002\001\001\000\004\216\u014c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\225\u0153\001\001\000" +
    "\002\001\001\000\004\012\u0155\001\001\000\004\225\u0156" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\u01c9\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\u01c3\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\200\u017f\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\u01c1\001\001\000\014\210\u0189\212\u0188\354\u0183" +
    "\356\u0181\357\u0182\001\001\000\004\203\u01bd\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\355\u01b5\001\001" +
    "\000\004\211\u01b2\001\001\000\004\201\u01a1\001\001\000" +
    "\004\012\u019f\001\001\000\006\206\u019e\207\u0196\001\001" +
    "\000\002\001\001\000\006\206\u0195\207\u0196\001\001\000" +
    "\004\174\u0191\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\211\u0190\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\056\241" +
    "\062\u0193\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\210\u0197\212\u0188\001\001\000\006" +
    "\206\u0198\207\u0196\001\001\000\002\001\001\000\006\012" +
    "\065\013\u019a\001\001\000\004\213\u019b\001\001\000\004" +
    "\214\u019c\001\001\000\004\174\u019d\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\210\u0189\212\u0188\354\u0183" +
    "\357\u01a0\001\001\000\002\001\001\000\004\202\u01a7\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\203\u01ad\001\001\000\004\174" +
    "\u01a8\001\001\000\004\205\u01aa\001\001\000\002\001\001" +
    "\000\006\206\u01ab\207\u0196\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\205\u01b6" +
    "\001\001\000\006\206\u01b7\207\u0196\001\001\000\002\001" +
    "\001\000\004\353\u01b9\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\174" +
    "\u01be\001\001\000\004\205\u01bf\001\001\000\006\206\u01c0" +
    "\207\u0196\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\u01c6\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\012\u0118\175\u01d2\177\u0115\207\u0119\220" +
    "\u0114\226\u011a\001\001\000\002\001\001\000\004\173\u01cf" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\176\u01d3\001\001\000\002\001\001\000\004" +
    "\211\u01d5\001\001\000\004\222\u01d6\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\075\u01d9\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\142\u01de\143\u01dd\001" +
    "\001\000\004\144\u01e3\001\001\000\004\147\u01e0\001\001" +
    "\000\002\001\001\000\004\012\u01e1\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\145\u01e5" +
    "\146\u01e6\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\145\u01e8\146\u01e6\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\151\u01f0\001\001\000\002\001\001\000\016\153" +
    "\u01f5\154\u01f4\156\u01f3\160\u01f6\360\u01f7\361\u01f2\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\151\u020c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\155\u01fd\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\157\u0203\001\001\000\002\001\001" +
    "\000\004\155\u0206\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\155\u0209\161\u020b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\065\013\u0258\001\001\000\002\001\001\000\006\012" +
    "\065\013\u0212\001\001\000\002\001\001\000\012\022\u0216" +
    "\315\u0217\317\u0215\320\u0214\001\001\000\002\001\001\000" +
    "\004\321\u0255\001\001\000\004\322\u0251\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\025\u021c\324\u021a\325" +
    "\u021e\326\u021b\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\331\u0246\001\001\000\004\331\u0220\001\001\000" +
    "\002\001\001\000\012\304\u022b\332\u022a\333\u022d\366\u0230" +
    "\001\001\000\004\322\u0222\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\075\u0226\327\u0225\001\001\000\004" +
    "\075\u0227\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\334" +
    "\u0237\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\335\u0234\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\304\u022b\332\u0238\333\u022d\366\u0230\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\u023f\306\u0240\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\322\u0247" +
    "\001\001\000\002\001\001\000\014\005\u0249\075\016\106" +
    "\030\116\007\124\004\001\001\000\002\001\001\000\006" +
    "\022\u024d\330\u024c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\u0252\001\001\000\004\323" +
    "\u0253\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\022\u0216\317\u0215\320\u0257\001\001\000" +
    "\002\001\001\000\004\271\u025a\001\001\000\002\001\001" +
    "\000\010\022\u025c\272\u025b\273\u025d\001\001\000\004\301" +
    "\u0271\001\001\000\014\012\u0261\023\u0260\024\u0165\025\u0168" +
    "\275\u025f\001\001\000\002\001\001\000\004\025\u01c9\001" +
    "\001\000\004\274\u026d\001\001\000\004\276\u0268\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\300\u0266\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\277\u026b\300\u026c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\022\u025c\273\u026f\001" +
    "\001\000\002\001\001\000\010\302\u0285\303\u0284\304\u0287" +
    "\001\001\000\004\307\u0272\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\310\u0276\001\001" +
    "\000\002\001\001\000\016\005\u0278\075\016\106\030\116" +
    "\007\124\004\311\u0279\001\001\000\004\011\u027b\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\005\u027e\075" +
    "\016\106\030\116\007\124\004\312\u027f\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\u0280\001\001\000" +
    "\002\001\001\000\016\005\u0281\075\016\106\030\116\007" +
    "\124\004\313\u0282\001\001\000\004\011\u0283\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\305\u028b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\u023f\306\u028a\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\302\u028d\303\u0284\304" +
    "\u0287\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\107\u0296\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\060\u0294\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\133\015\u0298\001\001\000" +
    "\002\001\001\000\006\072\u0299\110\u029a\001\001\000\002" +
    "\001\001\000\004\114\u029d\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\111\u02a0\112\u02a1" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\113" +
    "\u02a6\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\112\u02a7\001\001\000\002\001\001\000" +
    "\004\113\u02a8\001\001\000\002\001\001\000\004\115\u02aa" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\111" +
    "\u02ad\112\u02a1\001\001\000\002\001\001\000\004\115\u02af" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\012" +
    "\u02b3\022\u02b4\260\u02b2\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\341" +
    "\u02b9\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\342\u02bb\001\001\000\002\001\001\000\004\343\u02c0\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\344\u02c2\001\001\000\002\001" +
    "\001\000\004\345\u02c6\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\075\u02c9\001\001\000\004\346\u02ca\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\347\u02cd\001" +
    "\001\000\002\001\001\000\006\012\377\073\u02cf\001\001" +
    "\000\002\001\001\000\054\003\u02d1\004\003\005\010\006" +
    "\005\007\023\010\026\030\015\044\024\075\016\106\030" +
    "\116\007\124\004\136\031\227\047\253\040\257\035\263" +
    "\037\265\021\304\045\340\042\362\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\057" +
    "\u02d5\001\001\000\022\012\251\017\263\022\255\047\u02d6" +
    "\051\250\053\247\054\245\070\u02d7\001\001\000\010\012" +
    "\u02dc\045\u0314\046\u02dd\001\001\000\004\131\u02e3\001\001" +
    "\000\004\071\u02da\001\001\000\020\012\251\017\263\022" +
    "\255\047\u02db\051\250\053\247\054\245\001\001\000\002" +
    "\001\001\000\010\012\u02dc\045\u02df\046\u02dd\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\u02dc\046\u02e2" +
    "\001\001\000\004\071\u02e1\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\067\u02fc\001\001" +
    "\000\006\012\133\015\u02e5\001\001\000\010\012\u02dc\045" +
    "\u02e6\046\u02dd\001\001\000\006\133\u02eb\134\u02e9\001\001" +
    "\000\004\135\u02fb\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\135\u02f4\001\001\000\004\132\u02f0\001\001" +
    "\000\004\135\u02ee\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\133\015\u02f1\001\001\000\002\001\001" +
    "\000\010\012\u02dc\045\u02f2\046\u02dd\001\001\000\006\133" +
    "\u02f3\134\u02e9\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\133\015\u02f6\001\001\000\010\012\u02dc\045" +
    "\u02f7\046\u02dd\001\001\000\002\001\001\000\006\056\241" +
    "\062\u02f9\001\001\000\006\133\u02fa\134\u02e9\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\104\u02fd\001\001" +
    "\000\004\077\u0306\001\001\000\002\001\001\000\020\012" +
    "\251\017\263\022\255\047\u0300\051\250\053\247\054\245" +
    "\001\001\000\004\105\u0302\001\001\000\020\012\251\017" +
    "\263\022\255\047\u0303\051\250\053\247\054\245\001\001" +
    "\000\002\001\001\000\004\105\u0304\001\001\000\002\001" +
    "\001\000\006\056\241\062\u0313\001\001\000\004\100\u0308" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\012" +
    "\251\017\263\022\255\047\u030a\051\250\053\247\054\245" +
    "\001\001\000\004\101\u030c\001\001\000\004\012\u0312\001" +
    "\001\000\004\102\u030d\001\001\000\022\012\251\017\263" +
    "\022\255\047\u030f\051\250\053\247\054\245\103\u030e\001" +
    "\001\000\002\001\001\000\004\101\u0310\001\001\000\004" +
    "\102\u0311\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\071\u0315\001\001\000\002\001\001" +
    "\000\012\012\u02b3\022\u02b4\254\u0318\260\u0317\001\001\000" +
    "\004\255\u031a\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\256\u031c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\u0353\232\u0355\001\001\000" +
    "\004\012\u0352\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\133\015\u032e\001\001\000" +
    "\006\012\065\013\u0329\001\001\000\002\001\001\000\006" +
    "\072\u032a\236\u032b\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\075\u032d\001\001\000\002\001\001\000\010" +
    "\240\u032f\241\u0333\246\u0332\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\012\u0118\175\u0341\177\u0115\207\u0119" +
    "\220\u0114\226\u011a\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\247\u0335\250\u0338\001\001\000\004\251\u033e" +
    "\001\001\000\004\021\u033b\001\001\000\002\001\001\000" +
    "\004\021\u0339\001\001\000\004\012\u033a\001\001\000\002" +
    "\001\001\000\004\012\u033c\001\001\000\002\001\001\000" +
    "\006\247\u033f\250\u0338\001\001\000\002\001\001\000\004" +
    "\251\u0340\001\001\000\002\001\001\000\004\176\u0342\001" +
    "\001\000\002\001\001\000\004\012\u0344\001\001\000\016" +
    "\023\u0345\024\u0165\025\u0168\242\u0349\243\u034a\244\u0348\001" +
    "\001\000\004\200\u0350\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\245\u034d\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\204" +
    "\u0351\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\233\u0357\001\001\000" +
    "\004\012\u035b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\117\u035e\001\001\000\002\001\001\000\010\012\133" +
    "\015\u0360\120\u035f\001\001\000\002\001\001\000\004\121" +
    "\u0369\001\001\000\004\123\u0363\001\001\000\004\012\u0364" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\133" +
    "\015\u036b\001\001\000\004\067\u036a\001\001\000\002\001" +
    "\001\000\004\122\u036d\001\001\000\006\012\133\015\u036e" +
    "\001\001\000\002\001\001\000\004\122\u036f\001\001\000" +
    "\002\001\001\000\006\012\133\015\u0371\001\001\000\002" +
    "\001\001\000\006\012\u0373\125\u0374\001\001\000\002\001" +
    "\001\000\004\130\u0375\001\001\000\004\067\u0379\001\001" +
    "\000\006\012\133\015\u0377\001\001\000\004\122\u0378\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\012\251" +
    "\017\263\022\255\047\u037c\051\250\053\247\054\245\126" +
    "\u037b\001\001\000\004\127\u037f\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\u0373\125\u0380\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\133\015\u0382" +
    "\001\001\000\002\001\001\000\054\003\u0384\004\003\005" +
    "\010\006\005\007\023\010\026\030\015\044\024\075\016" +
    "\106\030\116\007\124\004\136\031\227\047\253\040\257" +
    "\035\263\037\265\021\304\045\340\042\362\027\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
    public LinkedList<String> SyntacticErrors = new LinkedList<String>();
    private Symbol s;

    public final Class getSymbolContainer() {
        return sym.class;
    }


    public void syntax_error(Symbol cur_token){
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) cur_token);
        String Auxiliar = "";
        List<Integer> ids = expected_token_ids();
        LinkedList<String> list = new LinkedList<String>(); 
        for (Integer expected : ids) {
                  Auxiliar = symbl_name_from_id(expected);
                  Auxiliar = " " + Auxiliar + " ";
                  list.add(Auxiliar);
        }
        SyntacticErrors.add("* Error Sintactico. Columna: " + (s.left+1) + " Linea: " + (s.right+1) + ". Simbolo:  \'" + s.value + "\'  * Se esperaba: " + list);
    }

    public void unrecovered_syntax_error(Symbol cur_token){
      java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) cur_token);
        String Auxiliar = "";
        List<Integer> ids = expected_token_ids();
        LinkedList<String> list = new LinkedList<String>(); 
        for (Integer expected : ids) {
                  Auxiliar = symbl_name_from_id(expected);
                  Auxiliar = " " + Auxiliar + " ";
                  list.add(Auxiliar);
        }
        SyntacticErrors.add("* Error Sintactico. Columna: " + (s.left+1) + " Linea: " + (s.right+1) + ". Simbolo:  \'" + s.value + "\'  * Se esperaba: " + list);
    }


    public String symbl_name_from_id(int id) {
	  Field[] fields = getSymbolContainer().getFields();
	  for(Field f : fields){
		  try {
			if (f.getInt(null)==id)
			  return f.getName();
		} catch (IllegalArgumentException e) {
			//e.printStackTrace();
		} catch (IllegalAccessException e) {
			//e.printStackTrace();
		}
	  }
	  return "Simbolo Invalido id";
    }
   

     public List<Integer> expected_token_ids() {
        List<Integer> ret = new LinkedList<Integer>();
	  int parse_state = ((Symbol)stack.peek()).parse_state ;
	  short[] row = action_tab[parse_state];
	  for (int i = 0; i<row.length; i+=2){
		  if (row[i]==-1) continue;
		  if (!validate_expected_symbol(row[i])) continue;
		  ret.add(new Integer(row[i]));
	  }
	  return ret;

    }

    protected static final int _error_sync_size(){
    return 1;
    }

    private boolean validate_expected_symbol(int id){
	  short lhs,rhs_size;
	  int act;
	  try {
		  virtual_parse_stack vstack = new virtual_parse_stack(stack);
		  for (;;)
		  {
			  act = get_action(vstack.top(), id);

			  if (act == 0) return false;

			  if (act > 0)
			  {
				  vstack.push(act-1);

				  if (!advance_lookahead()) return true;
			  }
			  else
			  {
				  if ((-act)-1 == start_production())  return true;

				  lhs = production_tab[(-act)-1][0];
				  rhs_size = production_tab[(-act)-1][1];
				  for (int i = 0; i < rhs_size; i++) vstack.pop();

				  vstack.push(get_reduce(vstack.top(), lhs));
			  }
		  }

	  } catch (Exception e) {
		  e.printStackTrace();
	  }
	  return true;
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 526: // Data_Type ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Data_Type",243, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 525: // Data_Type ::= Flotante 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Data_Type",243, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 524: // Data_Type ::= Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Data_Type",243, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 523: // RepeatProcedureA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RepeatProcedureA",242, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 522: // RepeatProcedureA ::= Coma RepeatProcedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RepeatProcedureA",242, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 521: // RepeatProcedure ::= Data_Type RepeatProcedureA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RepeatProcedure",241, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 520: // RepeatProcedure ::= Variable Igual Data_Type RepeatProcedureA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RepeatProcedure",241, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 519: // ExecProcedure ::= ClauseExec Object2 RepeatProcedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExecProcedure",240, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 518: // ExecProcedure ::= ClauseExec Object2 AbreParentesis RepeatProcedure CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExecProcedure",240, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 517: // ExecProcedure ::= ClauseExec Object2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExecProcedure",240, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 516: // EXECUTE_AS_CLAUSE ::= ClauseExec AS Clause 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXECUTE_AS_CLAUSE",244, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 515: // FuncOpcC ::= OFF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcC",219, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 514: // FuncOpcC ::= ON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcC",219, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 513: // FuncOpcB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcB",218, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 512: // FuncOpcB ::= Coma FuncOpc 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcB",218, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 511: // FuncOpcA ::= INLINE Igual FuncOpcC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 510: // FuncOpcA ::= EXECUTE_AS_CLAUSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 509: // FuncOpcA ::= CALLED ON NULL INPUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 508: // FuncOpcA ::= RETURNS NULL ON NULL INPUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 507: // FuncOpcA ::= SCHEMABINDING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 506: // FuncOpcA ::= ENCRYPTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 505: // FuncOpc ::= FuncOpcA FuncOpcB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpc",216, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 504: // With ::= WITH FuncOpc 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("With",215, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 503: // DType ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DType",214, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 502: // DType ::= Flotante 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DType",214, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 501: // DType ::= Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DType",214, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 500: // DType ::= Variable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DType",214, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 499: // SCT ::= Select 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SCT",213, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 498: // SCT ::= AbreParentesis Select CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SCT",213, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 497: // Table ::= TABLE With As RETURN SCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Table",212, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 496: // Data ::= Tipo_datoA With As BEGIN DML RETURN DType END 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Data",211, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 495: // Type_Return ::= Table 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type_Return",210, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 494: // Type_Return ::= Data 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type_Return",210, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 493: // ReadOnly ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReadOnly",209, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 492: // ReadOnly ::= READONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReadOnly",209, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 491: // As ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("As",208, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 490: // As ::= AS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("As",208, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 489: // Param_B ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Param_B",207, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 488: // Param_B ::= Coma Param_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Param_B",207, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 487: // Param_A ::= Param Param_B 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Param_A",206, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 486: // Param ::= Variable As Tipo_datoA ReadOnly 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Param",205, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 485: // OrAlter ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrAlter",204, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 484: // OrAlter ::= OR ALTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrAlter",204, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 483: // Params ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Params",203, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 482: // Params ::= Param_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Params",203, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 481: // Function ::= OrAlter FUNCTION Object2 AbreParentesis Params CierraParentesis RETURNS Type_Return 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Function",202, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 480: // CursorDeclareg ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareg",229, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 479: // CursorDeclareg ::= OF ColumnListA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareg",229, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 478: // CursorDeclaref ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaref",228, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 477: // CursorDeclaref ::= FOR UPDATE CursorDeclareg 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaref",228, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 476: // CursorDeclaree ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaree",227, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 475: // CursorDeclaree ::= TYPE_WARNING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaree",227, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 474: // CursorDeclared ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",226, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 473: // CursorDeclared ::= OPTIMISTIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",226, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 472: // CursorDeclared ::= SCROLL_LOCKS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",226, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 471: // CursorDeclared ::= READ_ONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",226, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 470: // CursorDeclarec ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 469: // CursorDeclarec ::= FAST_FORWARD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 468: // CursorDeclarec ::= DYNAMIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 467: // CursorDeclarec ::= KEYSET 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 466: // CursorDeclarec ::= STATIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 465: // CursorDeclareb ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareb",224, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 464: // CursorDeclareb ::= FORWARD_ONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareb",224, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 463: // CursorDeclareb ::= SCROLL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareb",224, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 462: // CursorDeclarea ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarea",223, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 461: // CursorDeclarea ::= GLOBAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarea",223, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 460: // CursorDeclarea ::= LOCAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarea",223, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 459: // CursorDeclare ::= DECLARE ID CURSOR CursorDeclarea CursorDeclareb CursorDeclarec CursorDeclared CursorDeclaree FOR Select CursorDeclaref 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclare",222, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // StmtSP2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP2",201, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // StmtSP2 ::= DML Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP2",201, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // StmtSP1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP1",200, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // StmtSP1 ::= DML Final StmtSP2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP1",200, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // StmtSP ::= DML Final StmtSP1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP",199, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // StartSP ::= BEGIN StmtSP END 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StartSP",198, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // ReplicationSP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReplicationSP",197, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // ReplicationSP ::= FOR REPLICATION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReplicationSP",197, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // Clause ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clause",196, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // Clause ::= OWNER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clause",196, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // Clause ::= SELF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clause",196, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // Clause ::= CALLER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clause",196, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // ProcOptionRec ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOptionRec",195, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // ProcOptionRec ::= Coma ProcOption1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOptionRec",195, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // ClauseExec ::= EXEC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ClauseExec",194, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // ClauseExec ::= EXECUTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ClauseExec",194, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // ProcOption2 ::= ClauseExec AS Clause 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption2",193, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // ProcOption2 ::= RECOMPILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption2",193, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // ProcOption2 ::= ENCRYPTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption2",193, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // ProcOption1 ::= ProcOption2 ProcOptionRec 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption1",192, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // ProcOption ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption",191, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // ProcOption ::= WITH ProcOption1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption",191, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // TipoD_SP3 ::= OUTPUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP3",190, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // TipoD_SP3 ::= OUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP3",190, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // TipoD_SP2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP2",189, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // TipoD_SP2 ::= TipoD_SP3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP2",189, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // TipoD_SP1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP1",188, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // TipoD_SP1 ::= Igual DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP1",188, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // TipoD_SP ::= ID READONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP",187, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // TipoD_SP ::= CURSOR VARYING TipoD_SP3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP",187, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // TipoD_SP ::= Tipo_dato TipoD_SP1 TipoD_SP2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP",187, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // ParamsB_SP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsB_SP",186, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // ParamsB_SP ::= Coma ParamsA_SP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsB_SP",186, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // ParamsA_SP ::= Variable TipoD_SP ParamsB_SP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsA_SP",185, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // ParamsSP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsSP",184, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // ParamsSP ::= ParamsA_SP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsSP",184, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // NumSP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NumSP",183, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // NumSP ::= PyC Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NumSP",183, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // SP_Reservada ::= PROCEDURE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SP_Reservada",182, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // SP_Reservada ::= PROC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SP_Reservada",182, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // Procedure ::= OrAlter SP_Reservada Object2 NumSP ParamsSP ProcOption ReplicationSP AS StartSP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Procedure",181, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // RollbackA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RollbackA",180, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // RollbackA ::= TranName NameA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RollbackA",180, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // Rollback ::= ROLLBACK RollbackA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Rollback",179, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // CommitA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CommitA",178, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // CommitA ::= TranName NameA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CommitA",178, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // Commit ::= COMMIT CommitA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Commit",177, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // TranName ::= TRANSACTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TranName",176, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // TranName ::= TRAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TranName",176, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // NameA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NameA",175, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // NameA ::= Variable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NameA",175, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // NameA ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NameA",175, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // Name ::= Variable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Name",174, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // Name ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Name",174, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // SavePoint ::= SAVE TranName Name 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SavePoint",173, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // BeginTranC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranC",172, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // BeginTranC ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranC",172, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // BeginTranB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranB",171, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // BeginTranB ::= WITH MARK BeginTranC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranB",171, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // BeginTranA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranA",170, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // BeginTranA ::= Name BeginTranB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranA",170, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // BeginTran ::= BEGIN TranName BeginTranA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTran",169, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // AlterTableDropC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropC",167, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // AlterTableDropC ::= Coma AlterTableDropA AlterTableDropC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropC",167, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // AlterTableDropB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropB",166, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // AlterTableDropB ::= CONSTRAINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropB",166, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // AlterTableDropA ::= COLUMN IFE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropA",165, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // AlterTableDropA ::= AlterTableDropB IFE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropA",165, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // AlterTableDrop ::= DROP AlterTableDropA AlterTableDropC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDrop",164, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // AlterColumnE ::= NOT FOR REPLICATION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnE",163, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // AlterColumnE ::= ROWGUIDCOL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnE",163, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // AlterColumnD ::= DROP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnD",162, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // AlterColumnD ::= ADD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnD",162, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // AlterColumnA ::= Tipo_dato ColumnDefA ColumnDefG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnA",161, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // AlterColumnC ::= AlterColumnD AlterColumnE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnC",160, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // AlterColumnC ::= AlterColumnA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnC",160, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // AlterColumn ::= ALTER COLUMN ID AlterColumnC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumn",159, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // AlterTableA ::= AlterTableDrop 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableA",158, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // AlterTableA ::= ADD CNC CNCA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableA",158, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // AlterTableA ::= AlterColumn 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableA",158, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // AlterTable ::= TABLE Object3 AlterTableA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTable",157, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // AlterViewA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterViewA",156, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // AlterViewA ::= ColumnList 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterViewA",156, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // AlterView ::= VIEW Object2 AlterViewA AS Select 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterView",155, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // AlterUser ::= USER ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterUser",154, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // AlterDBB ::= SET ROLLBACK IMMEDIATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDBB",153, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // AlterDBB ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDBB",153, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // AlterDBA ::= CURRENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDBA",152, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // AlterDBA ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDBA",152, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // AlterDatabase ::= DATABASE AlterDBA AlterDBB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDatabase",151, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // AlterA ::= Function 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // AlterA ::= Procedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // AlterA ::= AlterView 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // AlterA ::= AlterDatabase 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // AlterA ::= AlterUser 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // AlterA ::= AlterTable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // Alter ::= ALTER AlterA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alter",149, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // TableIndex ::= INDEX ID ColumnConstrC TableConstrB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableIndex",148, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // TableConstrE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrE",147, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // TableConstrE ::= Coma ID TableConstrE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrE",147, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // TableConstrD ::= AbreParentesis ID TableConstrE CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrD",146, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // TableConstrC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrC",145, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // TableConstrC ::= Coma ID OrderB TableConstrC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrC",145, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // TableConstrB ::= AbreParentesis ID OrderB TableConstrC CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrB",144, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // TableConstrA ::= CHECK NFR AbreParentesis SearchCondition CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // TableConstrA ::= FOREIGN KEY TableConstrD REFERENCES Object2 ColumnConstrE ColumnConstrF NFR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // TableConstrA ::= UNIQUE ColumnConstrC TableConstrB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // TableConstrA ::= PRIMARY KEY ColumnConstrC TableConstrB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // TableConstr ::= ColumnConstrA TableConstrA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstr",142, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // ColumnConstrI ::= SET ColumnConstrH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrI",141, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // ColumnConstrI ::= CASCADE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrI",141, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // ColumnConstrH ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrH",140, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // ColumnConstrH ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrH",140, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // ColumnConstrG ::= UPDATE ColumnConstrI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrG",139, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // ColumnConstrG ::= DELETE ColumnConstrI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrG",139, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // ColumnConstrF ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrF",138, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // ColumnConstrF ::= ON ColumnConstrG ColumnConstrF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrF",138, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // ColumnConstrE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrE",137, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // ColumnConstrE ::= AbreParentesis ID CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrE",137, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // ColumnConstrD ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrD",136, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // ColumnConstrD ::= FOREIGN KEY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrD",136, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // ColumnConstrC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrC",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // ColumnConstrC ::= NONCLUSTERED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrC",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // ColumnConstrC ::= CLUSTERED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrC",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // ColumnConstrB ::= CHECK NFR AbreParentesis SearchCondition CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // ColumnConstrB ::= ColumnConstrD REFERENCES Object2 ColumnConstrE ColumnConstrF NFR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // ColumnConstrB ::= UNIQUE ColumnConstrC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // ColumnConstrB ::= PRIMARY KEY ColumnConstrC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // ColumnConstrA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrA",133, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // ColumnConstrA ::= CONSTRAINT ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrA",133, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // ColumnConstr ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstr",132, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // ColumnConstr ::= ColumnConstrA ColumnConstrB ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstr",132, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // ColumnDefH ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefH",131, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // ColumnDefH ::= ROWGUIDCOL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefH",131, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // ColumnDefG ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefG",130, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // ColumnDefG ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefG",130, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // ColumnDefF ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefF",129, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // ColumnDefF ::= AbreParentesis Entero Coma Entero CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefF",129, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // ColumnDefE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefE",128, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // ColumnDefE ::= IDENTITY ColumnDefF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefE",128, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // ColumnDefD ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // ColumnDefD ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // ColumnDefD ::= Flotan 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // ColumnDefD ::= Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // ColumnDefA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefA",126, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // ColumnDefA ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefA",126, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // ColumnDefV ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefV",233, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // ColumnDefV ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefV",233, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // ColumnDefV ::= NOT NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefV",233, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // ColumnDefW ::= FOR REPLICATION ColumnDefV 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefW",235, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // ColumnDefW ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefW",235, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // ColumnDefX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefX",234, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // ColumnDefX ::= NOT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefX",234, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // ColumnDefY ::= ColumnConstrB ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // ColumnDefY ::= ROWGUIDCOL ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // ColumnDefY ::= ColumnDefX ColumnDefW ColumnDefH ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // ColumnDefY ::= IDENTITY ColumnDefF NFR ColumnDefH ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // ColumnDefY ::= DEFAULT ColumnDefD ColumnDefE NFR ColumnDefH ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // ColumnDefZ ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefZ",236, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // ColumnDefZ ::= ColumnDefY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefZ",236, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // ColumnDefZ ::= CONSTRAINT ID ColumnDefY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefZ",236, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // ColumnDef ::= ID Tipo_dato ColumnDefA ColumnDefZ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDef",125, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // CNCA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNCA",124, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // CNCA ::= Coma CNC CNCA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNCA",124, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // CNC ::= TableIndex 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNC",123, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // CNC ::= TableConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNC",123, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // CNC ::= ColumnDef 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNC",123, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // NFR2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR2",232, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // NFR2 ::= NOT ColumnDefG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR2",232, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // NFR1 ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR1",231, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // NFR1 ::= FOR REPLICATION NFR2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR1",231, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // NFR ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR",122, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // NFR ::= NOT NFR1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR",122, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // FileGroup ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileGroup",121, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // FileGroup ::= ON PRIMARY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileGroup",121, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // CreateTable ::= TABLE Object3 AbreParentesis CNC CNCA CierraParentesis FileGroup 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateTable",120, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // OptionalOn ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OptionalOn",119, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // OptionalOn ::= ON ID AbreParentesis ID CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OptionalOn",119, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // IncludeIndex ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IncludeIndex",118, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // IncludeIndex ::= INCLUDE ColumnList 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IncludeIndex",118, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // ColumnIndexB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndexB",117, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // ColumnIndexB ::= Coma ID OrderB ColumnIndexB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndexB",117, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // ColumnIndexA ::= ID OrderB ColumnIndexB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndexA",116, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // ColumnIndex ::= AbreParentesis ColumnIndexA CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndex",115, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // CreateIndexA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateIndexA",114, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // CreateIndexA ::= UNIQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateIndexA",114, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // CreateIndex ::= CreateIndexA ColumnConstrC INDEX ID ON Object3 ColumnIndex IncludeIndex Where OptionalOn 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateIndex",113, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // CreateView ::= VIEW Object2 AS Select 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateView",112, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // Filegrowth_A ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth_A",111, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // Filegrowth_A ::= MODULAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth_A",111, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // Filegrowth_A ::= Size_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth_A",111, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // Filegrowth ::= FILEGROWTH Igual Entero Filegrowth_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth",110, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // Maxsize_A ::= UNLIMITED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Maxsize_A",109, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // Maxsize_A ::= Entero Size_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Maxsize_A",109, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // Maxsize ::= MAXSIZE Igual Maxsize_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Maxsize",108, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // Size_A ::= TB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size_A",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // Size_A ::= GB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size_A",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // Size_A ::= MB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size_A",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // Size_A ::= KB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size_A",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // Sizenw ::= SIZE Igual Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sizenw",239, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // Sizew ::= SIZE Igual Entero Size_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sizew",238, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // Size ::= Sizenw 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size",106, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // Size ::= Sizew 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size",106, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // Optional ::= Filegrowth 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optional",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // Optional ::= Maxsize 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optional",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // Optional ::= Size 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optional",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // Optionals ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optionals",103, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // Optionals ::= Coma Optional Optionals 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optionals",103, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // COLLATEDB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLLATEDB",101, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // COLLATEDB ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLLATEDB",101, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // FileSpec ::= AbreParentesis NAME Igual Cadena Coma FILENAME Igual Cadena Optionals CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileSpec",100, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // FileSpecs ::= FileSpec 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileSpecs",99, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // FileSpecs ::= FileSpec Coma FileSpecs 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileSpecs",99, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // Primary ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Primary",98, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // Primary ::= PRIMARY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Primary",98, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // CreateDBB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDBB",97, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // CreateDBB ::= ON Primary FileSpecs 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDBB",97, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // CreateDBA ::= CreateDBB COLLATEDB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDBA",96, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // CreateDB ::= DATABASE ID CreateDBA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDB",95, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // CreateUser ::= USER Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateUser",94, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // CreateA ::= Function 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // CreateA ::= Procedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // CreateA ::= CreateView 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // CreateA ::= CreateUser 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // CreateA ::= CreateIndex 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // CreateA ::= CreateDB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // CreateA ::= CreateTable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // Create ::= CREATE CreateA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Create",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // Outer ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Outer",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // Outer ::= OUTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Outer",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // Type ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // Type ::= FULL Outer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // Type ::= LEFT Outer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // Type ::= RIGHT Outer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // Type ::= INNER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // Join ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Join",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // Join ::= Type JOIN Object3 Alias ON SearchCondition Join 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Join",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // FromSelectA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromSelectA",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // FromSelectA ::= Coma Object3 Alias Join 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromSelectA",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // FromSelect ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromSelect",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // FromSelect ::= FROM Object3 Alias Join FromSelectA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromSelect",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // FromUpdate ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromUpdate",86, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // FromUpdate ::= FROM Object3 DeleteC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromUpdate",86, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // UpdateC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateC",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // UpdateC ::= Coma UpdateA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateC",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // UpdateB ::= Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateB",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // UpdateB ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateB",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // UpdateA ::= ID Igual UpdateB UpdateC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateA",83, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // Update ::= UPDATE Top Object3 SET UpdateA FromUpdate Where 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Update",82, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // Server ::= AbreParentesis ID Coma Entero CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Server",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // DeleteC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteC",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // DeleteC ::= Coma Object3 DeleteC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteC",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // DeleteB ::= FROM Object3 DeleteC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteB",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // DeleteA ::= Object3 DeleteB Where 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteA",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // DeleteA ::= OPENQUERY Server 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteA",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // FromDelete ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromDelete",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // FromDelete ::= FROM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromDelete",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // Delete ::= DELETE Top FromDelete DeleteA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Delete",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // InsertValoresA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValoresA",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // InsertValoresA ::= Coma AbreParentesis InsertExpresion CierraParentesis InsertValoresA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValoresA",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // InsertValores ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValores",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // InsertValores ::= DEFAULT VALUES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValores",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // InsertValores ::= VALUES AbreParentesis InsertExpresion CierraParentesis InsertValoresA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValores",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // InsertExpresionB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionB",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // InsertExpresionB ::= Coma InsertExpresionA InsertExpresionB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionB",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // InsertExpresionA ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // InsertExpresionA ::= Flotan 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // InsertExpresionA ::= Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // InsertExpresionA ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // InsertExpresion ::= InsertExpresionA InsertExpresionB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresion",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // InsertColumnList ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertColumnList",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // InsertColumnList ::= ColumnList 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertColumnList",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // InsertInto ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertInto",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // InsertInto ::= INTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertInto",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // Insert ::= INSERT Top InsertInto Object3 InsertColumnList InsertValores 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Insert",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // GroupA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GroupA",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // GroupA ::= Coma Expresion GroupA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GroupA",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // Group ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Group",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // Group ::= GROUP BY Expresion GroupA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Group",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // OrderC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderC",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // OrderC ::= Expresion OrderA OrderB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderC",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // OrderB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderB",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // OrderB ::= DESC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderB",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // OrderB ::= ASC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderB",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // OrderA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderA",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // OrderA ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderA",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // Order ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Order",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // Order ::= ORDER BY Expresion OrderA OrderB OrderC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Order",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // Having ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Having",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // Having ::= HAVING SearchCondition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Having",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // SelectA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectA",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // SelectA ::= DISTINCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectA",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // SelectA ::= ALL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectA",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // Select ::= SELECT SelectA Top SelectColumns FromSelect Where Group Having Order 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Select",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // ColumnListB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnListB",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // ColumnListB ::= Coma ID ColumnListB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnListB",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // ColumnListA ::= ID ColumnListB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnListA",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // ColumnList ::= AbreParentesis ColumnListA CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnList",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // SelectColumnsA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectColumnsA",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // SelectColumnsA ::= Coma Expresion Alias SelectColumnsA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectColumnsA",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // SelectColumns ::= Multiplicacion SelectColumnsA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectColumns",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // SelectColumns ::= Expresion Alias SelectColumnsA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectColumns",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Where ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Where",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Where ::= WHERE SearchCondition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Where",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // PredicadoC ::= LIKE Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoC",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // PredicadoC ::= BETWEEN Expresion AND Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoC",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // PredicadoC ::= IN AbreParentesis Expresion Expresiones CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoC",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // PredicadoA ::= Not PredicadoC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoA",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // PredicadoA ::= IS Not NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoA",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // PredicadoA ::= OperadoresBooleanos Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoA",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // OperadoresBooleanos ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // OperadoresBooleanos ::= Menor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // OperadoresBooleanos ::= MayorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // OperadoresBooleanos ::= Mayor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // OperadoresBooleanos ::= NoIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // OperadoresBooleanos ::= Igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Predicado ::= Expresion PredicadoA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Predicado",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // SearchConditionA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchConditionA",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // SearchConditionA ::= OR SearchCondition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchConditionA",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // SearchConditionA ::= AND SearchCondition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchConditionA",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // SearchCondition ::= AbreParentesis SearchCondition CierraParentesis SearchConditionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchCondition",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // SearchCondition ::= Not Predicado SearchConditionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchCondition",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Expresiones ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Expresiones",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Expresiones ::= Coma Expresion Expresiones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Expresiones",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // TopA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TopA",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // TopA ::= PERCENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TopA",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Top ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Top",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Top ::= TOP AbreParentesis Entero CierraParentesis TopA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Top",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Not ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Not",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Not ::= NOT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Not",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ExpresionF ::= Multiplicacion CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionF",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ExpresionF ::= Entero CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionF",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ExpresionF ::= Object4 CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionF",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ExpresionE ::= COUNT AbreParentesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ExpresionE ::= MAX AbreParentesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ExpresionE ::= MIN AbreParentesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ExpresionE ::= AVG AbreParentesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ExpresionE ::= SUM AbreParentesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ExpresionE ::= Variable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ExpresionE ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ExpresionE ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ExpresionE ::= Flotan 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ExpresionE ::= Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ExpresionE ::= Object4 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ExpresionD ::= ExpresionE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionD",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ExpresionD ::= AbreParentesis Expresion PredicadoC CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionD",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ExpresionC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionC",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ExpresionC ::= Division ExpresionD ExpresionC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionC",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ExpresionC ::= Multiplicacion ExpresionD ExpresionC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionC",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ExpresionB ::= ExpresionD ExpresionC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionB",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ExpresionA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ExpresionA ::= Resta ExpresionB ExpresionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ExpresionA ::= Suma ExpresionB ExpresionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Expresion ::= ExpresionB ExpresionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Expresion",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // AliasA ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AliasA",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // AliasA ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AliasA",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Alias ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alias",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Alias ::= AliasA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alias",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Alias ::= AS AliasA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alias",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Truncate ::= TRUNCATE TABLE Object3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Truncate",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DropIndexB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndexB",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DropIndexB ::= Coma DropIndexA DropIndexB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndexB",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DropIndexA ::= ID ON Object3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndexA",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DropIndex ::= INDEX IFE DropIndexA DropIndexB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndex",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DropViewA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropViewA",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DropViewA ::= Coma Object2 DropViewA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropViewA",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DropView ::= VIEW IFE Object2 DropViewA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropView",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DropDatabaseA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropDatabaseA",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DropDatabaseA ::= Coma ID DropDatabaseA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropDatabaseA",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DropDatabase ::= DATABASE IFE ID DropDatabaseA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropDatabase",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DropUser ::= USER IFE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropUser",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DropTableA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropTableA",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DropTableA ::= Coma Object3 DropTableA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropTableA",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DropTable ::= TABLE IFE Object3 DropTableA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropTable",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DropA ::= DropIndex 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DropA ::= DropView 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DropA ::= DropDatabase 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DropA ::= DropUser 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DropA ::= DropTable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Drop ::= DROP DropA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Drop",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Tipo_datoC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoC",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Tipo_datoC ::= Coma Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoC",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Tipo_datoB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoB",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Tipo_datoB ::= AbreParentesis Entero Tipo_datoC CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoB",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Tipo_datoA ::= XML 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Tipo_datoA ::= VARBINARY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Tipo_datoA ::= UNIQUEIDENTIFIER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Tipo_datoA ::= TINYINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Tipo_datoA ::= TEXT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Tipo_datoA ::= SQL_VARIANT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Tipo_datoA ::= SMALLMONEY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Tipo_datoA ::= SMALLDATETIME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Tipo_datoA ::= ROWVERSION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Tipo_datoA ::= NVARCHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Tipo_datoA ::= NTEXT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Tipo_datoA ::= MONEY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Tipo_datoA ::= IMAGE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Tipo_datoA ::= HIERARCHYID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Tipo_datoA ::= DATETIMEOFFSET 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Tipo_datoA ::= DATETIME2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Tipo_datoA ::= DATETIME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Tipo_datoA ::= BINARY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Tipo_datoA ::= BIGINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Tipo_datoA ::= NUMERIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Tipo_datoA ::= SMALLINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Tipo_datoA ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Tipo_datoA ::= INT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Tipo_datoA ::= TIME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Tipo_datoA ::= REAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Tipo_datoA ::= NCHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Tipo_datoA ::= CURSOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Tipo_datoA ::= CHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Tipo_datoA ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Tipo_datoA ::= BIT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Tipo_datoA ::= DATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Tipo_datoA ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Tipo_datoA ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Tipo_datoA ::= VARCHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Tipo_datoD ::= AbreCorchetes Tipo_datoA CierraCorchetes 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoD",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Tipo_datoD ::= Tipo_datoA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoD",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Tipo_dato ::= Tipo_datoD Tipo_datoB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_dato",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Variable ::= Arroba Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variable",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IFE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IFE ::= IF EXISTS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Object4A ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object4A",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Object4A ::= Punto Object3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object4A",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Object4 ::= ID Object4A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object4",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Object3A ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object3A",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Object3A ::= Punto Object2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object3A",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Object3 ::= ID Object3A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object3",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Object2A ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object2A",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Object2A ::= Punto ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object2A",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Object2 ::= ID Object2A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object2",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ID ::= AbreCorchetes Identificador CierraCorchetes 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ID",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ID ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ID",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Final ::= GO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Final",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Final ::= PyC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Final",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TSQL ::= ExecProcedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TSQL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TSQL ::= CursorDeclare 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TSQL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TCL ::= SavePoint 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TCL ::= Commit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TCL ::= Rollback 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TCL ::= BeginTran 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DDL ::= Truncate 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DDL ::= Drop 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DDL ::= Alter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DDL ::= Create 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DML ::= Update 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DML ::= Delete 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DML ::= Insert 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DML ::= Select 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // InicialA ::= TSQL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // InicialA ::= TCL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // InicialA ::= DDL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // InicialA ::= DML 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Inicial ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicial",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Inicial ::= error Final Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicial",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicial ::= InicialA Final Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicial",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

