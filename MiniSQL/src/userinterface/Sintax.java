
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Nov 10 23:01:08 CST 2019
//----------------------------------------------------

package userinterface;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.virtual_parse_stack;
import java.lang.reflect.Field;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Nov 10 23:01:08 CST 2019
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0244\000\002\002\004\000\002\003\003\000\002\003" +
    "\002\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\005\000\002\004\006\000\002\360\004\000" +
    "\002\360\004\000\002\360\004\000\002\360\005\000\002" +
    "\360\006\000\002\360\005\000\002\005\004\000\002\005" +
    "\004\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\004\000" +
    "\002\006\004\000\002\006\003\000\002\007\006\000\002" +
    "\010\003\000\002\010\003\000\002\011\003\000\002\011" +
    "\003\000\002\012\003\000\002\012\005\000\002\013\004" +
    "\000\002\014\004\000\002\014\002\000\002\015\004\000" +
    "\002\016\004\000\002\016\002\000\002\017\004\000\002" +
    "\020\004\000\002\020\002\000\002\021\004\000\002\021" +
    "\002\000\002\022\004\000\002\023\004\000\002\024\003" +
    "\000\002\024\005\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\026" +
    "\006\000\002\026\002\000\002\027\004\000\002\027\002" +
    "\000\002\030\004\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\032\006\000\002\033" +
    "\005\000\002\033\002\000\002\034\005\000\002\035\006" +
    "\000\002\036\005\000\002\036\002\000\002\037\006\000" +
    "\002\040\005\000\002\040\002\000\002\041\006\000\002" +
    "\042\005\000\002\043\005\000\002\043\002\000\002\u0108" +
    "\006\000\002\u0109\005\000\002\u0109\002\000\002\u010a\006" +
    "\000\002\044\005\000\002\045\004\000\002\045\003\000" +
    "\002\045\002\000\002\046\003\000\002\046\003\000\002" +
    "\047\004\000\002\050\005\000\002\050\005\000\002\050" +
    "\002\000\002\051\004\000\002\052\005\000\002\052\005" +
    "\000\002\052\002\000\002\053\005\000\002\053\003\000" +
    "\002\054\004\000\002\054\003\000\002\054\003\000\002" +
    "\054\003\000\002\054\003\000\002\054\003\000\002\054" +
    "\005\000\002\054\005\000\002\054\005\000\002\054\005" +
    "\000\002\054\005\000\002\377\005\000\002\377\002\000" +
    "\002\u0100\004\000\002\u0101\004\000\002\u0101\002\000\002" +
    "\055\004\000\002\055\004\000\002\055\004\000\002\056" +
    "\003\000\002\056\002\000\002\057\007\000\002\057\002" +
    "\000\002\060\003\000\002\060\002\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\062\005\000\002\063" +
    "\004\000\002\063\004\000\002\063\002\000\002\064\004" +
    "\000\002\065\004\000\002\065\005\000\002\065\004\000" +
    "\002\065\002\000\002\066\007\000\002\066\006\000\002" +
    "\066\004\000\002\102\005\000\002\102\002\000\002\073" +
    "\004\000\002\074\005\000\002\074\005\000\002\074\002" +
    "\000\002\075\004\000\002\076\005\000\002\076\005\000" +
    "\002\076\002\000\002\077\005\000\002\077\003\000\002" +
    "\100\004\000\002\100\003\000\002\100\003\000\002\100" +
    "\003\000\002\100\003\000\002\100\005\000\002\100\005" +
    "\000\002\100\005\000\002\100\005\000\002\100\005\000" +
    "\002\101\004\000\002\101\004\000\002\101\004\000\002" +
    "\067\004\000\002\067\002\000\002\070\005\000\002\070" +
    "\004\000\002\071\006\000\002\071\002\000\002\072\005" +
    "\000\002\103\004\000\002\104\005\000\002\104\002\000" +
    "\002\105\013\000\002\106\003\000\002\106\003\000\002" +
    "\106\002\000\002\107\004\000\002\107\002\000\002\110" +
    "\010\000\002\110\002\000\002\111\004\000\002\111\002" +
    "\000\002\112\003\000\002\112\003\000\002\112\002\000" +
    "\002\113\006\000\002\113\002\000\002\114\006\000\002" +
    "\114\002\000\002\115\005\000\002\115\002\000\002\116" +
    "\010\000\002\117\003\000\002\117\002\000\002\120\003" +
    "\000\002\120\002\000\002\121\004\000\002\122\003\000" +
    "\002\122\003\000\002\122\003\000\002\122\003\000\002" +
    "\123\005\000\002\123\002\000\002\124\007\000\002\124" +
    "\004\000\002\124\002\000\002\125\007\000\002\125\002" +
    "\000\002\126\006\000\002\127\003\000\002\127\002\000" +
    "\002\130\004\000\002\130\005\000\002\131\005\000\002" +
    "\131\002\000\002\132\005\000\002\132\002\000\002\133" +
    "\007\000\002\134\011\000\002\135\006\000\002\136\003" +
    "\000\002\136\003\000\002\137\004\000\002\137\002\000" +
    "\002\140\005\000\002\140\002\000\002\141\007\000\002" +
    "\141\002\000\002\142\006\000\002\142\002\000\002\143" +
    "\011\000\002\143\002\000\002\144\003\000\002\144\004" +
    "\000\002\144\004\000\002\144\004\000\002\144\002\000" +
    "\002\145\003\000\002\145\002\000\002\146\004\000\002" +
    "\147\003\000\002\147\003\000\002\147\003\000\002\147" +
    "\003\000\002\147\003\000\002\147\003\000\002\147\003" +
    "\000\002\150\004\000\002\151\005\000\002\152\004\000" +
    "\002\153\005\000\002\153\002\000\002\154\003\000\002" +
    "\154\002\000\002\155\005\000\002\155\003\000\002\156" +
    "\014\000\002\u0103\003\000\002\u0103\003\000\002\u0104\003" +
    "\000\002\u0104\003\000\002\157\004\000\002\157\002\000" +
    "\002\161\005\000\002\161\002\000\002\163\003\000\002" +
    "\163\003\000\002\163\003\000\002\164\003\000\002\164" +
    "\003\000\002\370\006\000\002\371\005\000\002\165\003" +
    "\000\002\165\003\000\002\165\003\000\002\165\003\000" +
    "\002\166\005\000\002\167\004\000\002\167\003\000\002" +
    "\170\006\000\002\171\003\000\002\171\003\000\002\171" +
    "\002\000\002\172\006\000\002\173\014\000\002\174\003" +
    "\000\002\174\002\000\002\175\005\000\002\176\005\000" +
    "\002\177\006\000\002\177\002\000\002\200\004\000\002" +
    "\200\002\000\002\201\007\000\002\201\002\000\002\202" +
    "\011\000\002\203\004\000\002\203\002\000\002\204\004" +
    "\000\002\204\002\000\002\361\005\000\002\361\003\000" +
    "\002\362\004\000\002\362\002\000\002\205\003\000\002" +
    "\205\003\000\002\205\003\000\002\206\005\000\002\206" +
    "\002\000\002\207\006\000\002\366\005\000\002\366\003" +
    "\000\002\366\002\000\002\367\010\000\002\367\007\000" +
    "\002\367\006\000\002\367\004\000\002\367\004\000\002" +
    "\364\003\000\002\364\002\000\002\365\003\000\002\365" +
    "\005\000\002\363\004\000\002\363\003\000\002\363\002" +
    "\000\002\210\004\000\002\210\002\000\002\211\003\000" +
    "\002\211\003\000\002\211\003\000\002\211\003\000\002" +
    "\212\004\000\002\212\002\000\002\213\007\000\002\213" +
    "\002\000\002\214\003\000\002\214\002\000\002\215\003" +
    "\000\002\215\002\000\002\216\005\000\002\216\002\000" +
    "\002\217\004\000\002\217\002\000\002\220\005\000\002" +
    "\220\004\000\002\220\010\000\002\220\007\000\002\221" +
    "\003\000\002\221\003\000\002\221\002\000\002\222\004" +
    "\000\002\222\002\000\002\223\005\000\002\223\002\000" +
    "\002\224\005\000\002\224\002\000\002\225\004\000\002" +
    "\225\004\000\002\226\003\000\002\226\003\000\002\227" +
    "\003\000\002\227\004\000\002\230\004\000\002\231\006" +
    "\000\002\231\005\000\002\231\012\000\002\231\007\000" +
    "\002\232\007\000\002\233\006\000\002\233\002\000\002" +
    "\234\006\000\002\235\005\000\002\235\002\000\002\236" +
    "\006\000\002\237\004\000\002\240\003\000\002\240\003" +
    "\000\002\240\003\000\002\240\003\000\002\240\003\000" +
    "\002\240\003\000\002\241\005\000\002\242\003\000\002" +
    "\242\003\000\002\243\004\000\002\243\005\000\002\244" +
    "\004\000\002\245\007\000\002\246\003\000\002\246\002" +
    "\000\002\247\005\000\002\250\003\000\002\250\005\000" +
    "\002\250\003\000\002\251\006\000\002\252\003\000\002" +
    "\252\004\000\002\253\005\000\002\254\003\000\002\254" +
    "\003\000\002\255\003\000\002\255\005\000\002\256\005" +
    "\000\002\257\005\000\002\257\005\000\002\260\003\000" +
    "\002\260\002\000\002\261\005\000\002\261\002\000\002" +
    "\263\005\000\002\264\004\000\002\264\002\000\002\265" +
    "\005\000\002\265\002\000\002\266\003\000\002\266\002" +
    "\000\002\u0105\004\000\002\u0105\004\000\002\267\005\000" +
    "\002\270\003\000\002\270\003\000\002\271\003\000\002" +
    "\271\003\000\002\271\002\000\002\272\003\000\002\272" +
    "\003\000\002\273\005\000\002\274\004\000\002\274\002" +
    "\000\002\u0106\010\000\002\u0106\002\000\002\u0107\003\000" +
    "\002\u0107\003\000\002\275\004\000\002\276\004\000\002" +
    "\276\002\000\002\277\013\000\002\300\003\000\002\300" +
    "\003\000\002\301\004\000\002\301\002\000\002\302\003" +
    "\000\002\302\002\000\002\303\005\000\002\304\004\000" +
    "\002\304\002\000\002\305\005\000\002\305\005\000\002" +
    "\305\004\000\002\306\004\000\002\306\002\000\002\307" +
    "\003\000\002\307\002\000\002\310\003\000\002\310\003" +
    "\000\002\311\004\000\002\311\002\000\002\312\004\000" +
    "\002\313\003\000\002\313\003\000\002\313\005\000\002" +
    "\314\003\000\002\314\003\000\002\315\004\000\002\315" +
    "\002\000\002\316\003\000\002\316\003\000\002\316\003" +
    "\000\002\316\003\000\002\317\004\000\002\317\002\000" +
    "\002\320\005\000\002\321\004\000\002\322\004\000\002" +
    "\322\002\000\002\323\003\000\002\323\002\000\002\350" +
    "\015\000\002\351\003\000\002\351\003\000\002\351\002" +
    "\000\002\352\003\000\002\352\003\000\002\352\002\000" +
    "\002\353\003\000\002\353\003\000\002\353\003\000\002" +
    "\353\003\000\002\353\002\000\002\354\003\000\002\354" +
    "\003\000\002\354\003\000\002\354\002\000\002\355\003" +
    "\000\002\355\002\000\002\356\005\000\002\356\002\000" +
    "\002\357\004\000\002\357\002\000\002\324\012\000\002" +
    "\325\003\000\002\325\002\000\002\326\004\000\002\326" +
    "\002\000\002\327\006\000\002\330\004\000\002\331\004" +
    "\000\002\331\002\000\002\332\003\000\002\332\002\000" +
    "\002\333\003\000\002\333\002\000\002\334\003\000\002" +
    "\334\003\000\002\335\012\000\002\336\007\000\002\337" +
    "\005\000\002\337\003\000\002\u0102\005\000\002\u0102\003" +
    "\000\002\340\003\000\002\340\003\000\002\340\003\000" +
    "\002\340\003\000\002\341\004\000\002\341\002\000\002" +
    "\342\004\000\002\343\003\000\002\343\003\000\002\343" +
    "\007\000\002\343\006\000\002\343\003\000\002\343\005" +
    "\000\002\344\004\000\002\344\002\000\002\345\003\000" +
    "\002\345\003\000\002\376\005\000\002\372\004\000\002" +
    "\372\007\000\002\372\005\000\002\373\006\000\002\373" +
    "\004\000\002\374\004\000\002\374\002\000\002\375\003" +
    "\000\002\375\003\000\002\375\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u03f0\000\040\002\uffff\003\033\102\030\125\022\173" +
    "\010\200\025\227\023\267\013\270\037\276\035\310\036" +
    "\316\034\322\032\346\004\351\041\001\002\000\010\011" +
    "\ufe13\031\ufe13\112\ufe13\001\002\000\006\021\uffe8\u010f\uffe8" +
    "\001\002\000\006\021\046\u010f\045\001\002\000\004\002" +
    "\u03f1\001\002\000\044\007\uff32\011\uff32\012\uff32\024\uff32" +
    "\031\uff32\032\uff32\037\uff32\043\uff32\253\uff32\260\uff32\311" +
    "\u03ac\370\u03ad\u010b\uff32\u0138\uff32\u013d\uff32\u0148\uff32\u0149\uff32" +
    "\001\002\000\006\011\051\031\052\001\002\000\044\002" +
    "\uffff\003\033\102\030\125\022\146\uffff\173\010\200\025" +
    "\202\uffff\227\023\267\013\270\037\276\035\310\036\316" +
    "\034\322\032\346\004\351\041\001\002\000\004\234\u0399" +
    "\001\002\000\006\021\uffe7\u010f\uffe7\001\002\000\044\002" +
    "\uffff\003\033\102\030\125\022\146\uffff\173\010\200\025" +
    "\202\uffff\227\023\267\013\270\037\276\035\310\036\316" +
    "\034\322\032\346\004\351\041\001\002\000\006\021\046" +
    "\u010f\045\001\002\000\006\021\046\u010f\045\001\002\000" +
    "\006\021\046\u010f\045\001\002\000\006\021\046\u010f\045" +
    "\001\002\000\006\256\u0300\261\u02fd\001\002\000\032\076" +
    "\u0160\131\ufdea\166\ufec3\172\ufec3\234\u0329\252\ufec3\257\u0324" +
    "\302\u0326\321\u0325\331\u032a\360\ufdea\u0106\ufdea\001\002\000" +
    "\006\021\046\u010f\045\001\002\000\012\011\uff6d\031\uff6d" +
    "\206\uff6d\253\115\001\002\000\006\021\046\u010f\045\001" +
    "\002\000\006\021\046\u010f\045\001\002\000\022\076\u0160" +
    "\131\ufdea\234\u015d\257\u0158\321\u0159\331\u015e\360\ufdea\u0106" +
    "\ufdea\001\002\000\044\002\uffff\003\033\102\030\125\022" +
    "\146\uffff\173\010\200\025\202\uffff\227\023\267\013\270" +
    "\037\276\035\310\036\316\034\322\032\346\004\351\041" +
    "\001\002\000\022\131\u0128\172\u011e\234\u0124\257\u011d\321" +
    "\u011f\331\u0125\360\u0122\u0106\u0120\001\002\000\050\002\uffea" +
    "\003\uffea\021\046\102\uffea\125\uffea\146\uffea\173\uffea\200" +
    "\uffea\202\uffea\227\uffea\267\uffea\270\uffea\276\uffea\310\uffea" +
    "\316\uffea\322\uffea\346\uffea\351\uffea\u010f\045\001\002\000" +
    "\006\011\051\031\052\001\002\000\014\011\uff6d\031\uff6d" +
    "\123\uff6d\253\115\307\uff6d\001\002\000\010\011\uff6d\031" +
    "\uff6d\253\115\001\002\000\006\011\051\031\052\001\002" +
    "\000\006\021\046\u010f\045\001\002\000\010\011\ufe14\031" +
    "\ufe14\112\ufe14\001\002\000\010\002\000\146\000\202\000" +
    "\001\002\000\006\021\046\u010f\045\001\002\000\050\002" +
    "\ufff2\003\ufff2\102\ufff2\125\ufff2\132\ufff2\146\ufff2\173\ufff2" +
    "\200\ufff2\202\ufff2\227\ufff2\267\ufff2\270\ufff2\276\ufff2\310" +
    "\ufff2\316\ufff2\322\ufff2\332\ufff2\346\ufff2\351\ufff2\001\002" +
    "\000\052\002\uffe5\003\uffe5\102\uffe5\125\uffe5\132\uffe5\146" +
    "\uffe5\162\uffe5\173\uffe5\200\uffe5\202\uffe5\227\uffe5\267\uffe5" +
    "\270\uffe5\276\uffe5\310\uffe5\316\uffe5\322\uffe5\332\uffe5\346" +
    "\uffe5\351\uffe5\001\002\000\052\002\uffe6\003\uffe6\102\uffe6" +
    "\125\uffe6\132\uffe6\146\uffe6\162\uffe6\173\uffe6\200\uffe6\202" +
    "\uffe6\227\uffe6\267\uffe6\270\uffe6\276\uffe6\310\uffe6\316\uffe6" +
    "\322\uffe6\332\uffe6\346\uffe6\351\uffe6\001\002\000\044\002" +
    "\uffee\003\uffee\102\uffee\125\uffee\146\uffee\173\uffee\200\uffee" +
    "\202\uffee\227\uffee\267\uffee\270\uffee\276\uffee\310\uffee\316" +
    "\uffee\322\uffee\346\uffee\351\uffee\001\002\000\004\254\055" +
    "\001\002\000\314\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010" +
    "\uffe4\011\uffe4\012\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4" +
    "\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\031\uffe4\032" +
    "\uffe4\037\uffe4\043\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4" +
    "\053\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4\061" +
    "\uffe4\062\uffe4\063\uffe4\064\uffe4\065\uffe4\066\uffe4\067\uffe4" +
    "\070\uffe4\071\uffe4\072\uffe4\074\uffe4\075\uffe4\076\uffe4\102" +
    "\uffe4\110\uffe4\112\uffe4\113\uffe4\116\uffe4\123\uffe4\125\uffe4" +
    "\126\uffe4\130\uffe4\132\uffe4\142\uffe4\143\uffe4\145\uffe4\153" +
    "\uffe4\154\uffe4\155\uffe4\166\uffe4\167\uffe4\174\uffe4\175\uffe4" +
    "\210\uffe4\211\uffe4\212\uffe4\214\uffe4\225\uffe4\230\uffe4\252" +
    "\uffe4\254\uffe4\255\uffe4\260\uffe4\273\uffe4\302\uffe4\303\uffe4" +
    "\317\uffe4\322\uffe4\323\uffe4\325\uffe4\332\uffe4\342\uffe4\350" +
    "\uffe4\352\uffe4\u0100\uffe4\u0104\uffe4\u010a\uffe4\u010f\uffe4\u0110\uffe4" +
    "\u011d\uffe4\u0126\uffe4\u0129\uffe4\u012c\uffe4\u013f\uffe4\u014b\uffe4\u0155" +
    "\uffe4\u0158\uffe4\u0165\uffe4\u0166\uffe4\u016b\uffe4\u0176\uffe4\001\002" +
    "\000\004\011\053\001\002\000\004\046\054\001\002\000" +
    "\314\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3" +
    "\012\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021" +
    "\uffe3\022\uffe3\023\uffe3\024\uffe3\031\uffe3\032\uffe3\037\uffe3" +
    "\043\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\054" +
    "\uffe3\055\uffe3\056\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3" +
    "\063\uffe3\064\uffe3\065\uffe3\066\uffe3\067\uffe3\070\uffe3\071" +
    "\uffe3\072\uffe3\074\uffe3\075\uffe3\076\uffe3\102\uffe3\110\uffe3" +
    "\112\uffe3\113\uffe3\116\uffe3\123\uffe3\125\uffe3\126\uffe3\130" +
    "\uffe3\132\uffe3\142\uffe3\143\uffe3\145\uffe3\153\uffe3\154\uffe3" +
    "\155\uffe3\166\uffe3\167\uffe3\174\uffe3\175\uffe3\210\uffe3\211" +
    "\uffe3\212\uffe3\214\uffe3\225\uffe3\230\uffe3\252\uffe3\254\uffe3" +
    "\255\uffe3\260\uffe3\273\uffe3\302\uffe3\303\uffe3\317\uffe3\322" +
    "\uffe3\323\uffe3\325\uffe3\332\uffe3\342\uffe3\350\uffe3\352\uffe3" +
    "\u0100\uffe3\u0104\uffe3\u010a\uffe3\u010f\uffe3\u0110\uffe3\u011d\uffe3\u0126" +
    "\uffe3\u0129\uffe3\u012c\uffe3\u013f\uffe3\u014b\uffe3\u0155\uffe3\u0158\uffe3" +
    "\u0165\uffe3\u0166\uffe3\u016b\uffe3\u0176\uffe3\001\002\000\034\110" +
    "\ufe01\u010d\056\u0116\ufe01\u0143\057\u0181\ufe01\u0182\ufe01\u0183\ufe01" +
    "\u0184\ufe01\u0185\ufe01\u0186\ufe01\u0187\ufe01\u0188\ufe01\u0189\ufe01\001" +
    "\002\000\030\110\ufe02\u0116\ufe02\u0181\ufe02\u0182\ufe02\u0183\ufe02" +
    "\u0184\ufe02\u0185\ufe02\u0186\ufe02\u0187\ufe02\u0188\ufe02\u0189\ufe02\001" +
    "\002\000\030\110\ufe03\u0116\ufe03\u0181\ufe03\u0182\ufe03\u0183\ufe03" +
    "\u0184\ufe03\u0185\ufe03\u0186\ufe03\u0187\ufe03\u0188\ufe03\u0189\ufe03\001" +
    "\002\000\030\110\ufdfe\u0116\063\u0181\061\u0182\ufdfe\u0183\ufdfe" +
    "\u0184\ufdfe\u0185\ufdfe\u0186\ufdfe\u0187\ufdfe\u0188\ufdfe\u0189\ufdfe\001" +
    "\002\000\024\110\ufdff\u0182\ufdff\u0183\ufdff\u0184\ufdff\u0185\ufdff" +
    "\u0186\ufdff\u0187\ufdff\u0188\ufdff\u0189\ufdff\001\002\000\024\110" +
    "\ufdf9\u0182\064\u0183\065\u0184\066\u0185\070\u0186\ufdf9\u0187\ufdf9" +
    "\u0188\ufdf9\u0189\ufdf9\001\002\000\024\110\ufe00\u0182\ufe00\u0183" +
    "\ufe00\u0184\ufe00\u0185\ufe00\u0186\ufe00\u0187\ufe00\u0188\ufe00\u0189\ufe00" +
    "\001\002\000\014\110\ufdfd\u0186\ufdfd\u0187\ufdfd\u0188\ufdfd\u0189" +
    "\ufdfd\001\002\000\014\110\ufdfc\u0186\ufdfc\u0187\ufdfc\u0188\ufdfc" +
    "\u0189\ufdfc\001\002\000\014\110\ufdfb\u0186\ufdfb\u0187\ufdfb\u0188" +
    "\ufdfb\u0189\ufdfb\001\002\000\014\110\ufdf5\u0186\074\u0187\073" +
    "\u0188\072\u0189\ufdf5\001\002\000\014\110\ufdfa\u0186\ufdfa\u0187" +
    "\ufdfa\u0188\ufdfa\u0189\ufdfa\001\002\000\006\110\ufdf3\u0189\076" +
    "\001\002\000\006\110\ufdf6\u0189\ufdf6\001\002\000\006\110" +
    "\ufdf7\u0189\ufdf7\001\002\000\006\110\ufdf8\u0189\ufdf8\001\002" +
    "\000\004\110\077\001\002\000\004\110\ufdf4\001\002\000" +
    "\004\173\010\001\002\000\010\021\ufdf1\110\102\u010f\ufdf1" +
    "\001\002\000\006\021\ufe04\u010f\ufe04\001\002\000\004\310" +
    "\103\001\002\000\010\021\ufdef\266\105\u010f\ufdef\001\002" +
    "\000\006\021\ufdf2\u010f\ufdf2\001\002\000\006\011\051\031" +
    "\052\001\002\000\012\021\uff36\022\111\047\uff36\u010f\uff36" +
    "\001\002\000\006\021\ufdf0\u010f\ufdf0\001\002\000\010\021" +
    "\uff38\047\uff38\u010f\uff38\001\002\000\006\011\051\031\052" +
    "\001\002\000\012\021\uff36\022\111\047\uff36\u010f\uff36\001" +
    "\002\000\010\021\uff37\047\uff37\u010f\uff37\001\002\000\006" +
    "\011\051\031\052\001\002\000\004\032\116\001\002\000" +
    "\004\012\117\001\002\000\004\047\120\001\002\000\046" +
    "\007\uff6b\011\uff6b\012\uff6b\024\uff6b\031\uff6b\032\uff6b\037" +
    "\uff6b\043\uff6b\123\uff6b\206\uff6b\260\uff6b\307\uff6b\336\122" +
    "\u010b\uff6b\u0138\uff6b\u013d\uff6b\u0148\uff6b\u0149\uff6b\001\002\000" +
    "\044\007\uff6e\011\uff6e\012\uff6e\024\uff6e\031\uff6e\032\uff6e" +
    "\037\uff6e\043\uff6e\123\uff6e\206\uff6e\260\uff6e\307\uff6e\u010b" +
    "\uff6e\u0138\uff6e\u013d\uff6e\u0148\uff6e\u0149\uff6e\001\002\000\044" +
    "\007\uff6c\011\uff6c\012\uff6c\024\uff6c\031\uff6c\032\uff6c\037" +
    "\uff6c\043\uff6c\123\uff6c\206\uff6c\260\uff6c\307\uff6c\u010b\uff6c" +
    "\u0138\uff6c\u013d\uff6c\u0148\uff6c\u0149\uff6c\001\002\000\112\005" +
    "\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\021\uffdd\022\uffdd" +
    "\023\u0103\031\uffdd\032\uffdd\043\uffdd\047\uffdd\074\uffdd\102" +
    "\uffdd\110\uffdd\112\uffdd\123\uffdd\126\uffdd\142\uffdd\143\uffdd" +
    "\145\uffdd\174\uffdd\175\uffdd\212\uffdd\214\uffdd\225\uffdd\273" +
    "\uffdd\303\uffdd\322\uffdd\323\uffdd\325\uffdd\332\uffdd\342\uffdd" +
    "\u0104\uffdd\u010f\uffdd\u016b\uffdd\001\002\000\004\212\125\001" +
    "\002\000\006\011\051\031\052\001\002\000\004\004\307" +
    "\001\002\000\012\021\uff00\123\131\342\uff00\u010f\uff00\001" +
    "\002\000\010\021\uff3e\342\137\u010f\uff3e\001\002\000\006" +
    "\011\051\031\052\001\002\000\012\021\uff09\022\133\342" +
    "\uff09\u010f\uff09\001\002\000\006\011\051\031\052\001\002" +
    "\000\010\021\uff01\342\uff01\u010f\uff01\001\002\000\012\021" +
    "\uff09\022\133\342\uff09\u010f\uff09\001\002\000\010\021\uff0a" +
    "\342\uff0a\u010f\uff0a\001\002\000\034\011\uff6f\012\uff6f\024" +
    "\uff6f\031\uff6f\032\uff6f\037\uff6f\043\uff6f\255\142\u010b\uff6f" +
    "\u0138\uff6f\u013d\uff6f\u0148\uff6f\u0149\uff6f\001\002\000\006\021" +
    "\uff07\u010f\uff07\001\002\000\032\011\051\012\145\024\146" +
    "\031\052\032\162\037\150\043\156\u010b\157\u0138\144\u013d" +
    "\164\u0148\163\u0149\161\001\002\000\042\011\uff70\012\uff70" +
    "\024\uff70\031\uff70\032\uff70\037\uff70\043\uff70\130\uff70\167" +
    "\uff70\230\uff70\260\uff70\u010b\uff70\u0138\uff70\u013d\uff70\u0148\uff70" +
    "\u0149\uff70\001\002\000\022\021\uff3f\047\uff3f\110\uff3f\142" +
    "\uff3f\145\uff3f\325\uff3f\u010f\uff3f\u016b\uff3f\001\002\000\004" +
    "\032\305\001\002\000\102\004\uff4b\005\uff4b\006\uff4b\007" +
    "\uff4b\010\uff4b\014\uff4b\015\uff4b\016\uff4b\017\uff4b\020\uff4b" +
    "\021\uff4b\022\uff4b\047\uff4b\075\uff4b\076\uff4b\110\uff4b\126" +
    "\uff4b\130\uff4b\142\uff4b\143\uff4b\145\uff4b\167\uff4b\175\uff4b" +
    "\211\uff4b\214\uff4b\225\uff4b\230\uff4b\255\uff4b\325\uff4b\342" +
    "\uff4b\u010f\uff4b\u016b\uff4b\001\002\000\004\011\304\001\002" +
    "\000\102\004\uff4d\005\uff4d\006\uff4d\007\uff4d\010\uff4d\014" +
    "\uff4d\015\uff4d\016\uff4d\017\uff4d\020\uff4d\021\uff4d\022\uff4d" +
    "\047\uff4d\075\uff4d\076\uff4d\110\uff4d\126\uff4d\130\uff4d\142" +
    "\uff4d\143\uff4d\145\uff4d\167\uff4d\175\uff4d\211\uff4d\214\uff4d" +
    "\225\uff4d\230\uff4d\255\uff4d\325\uff4d\342\uff4d\u010f\uff4d\u016b" +
    "\uff4d\001\002\000\102\004\uff4a\005\uff4a\006\uff4a\007\uff4a" +
    "\010\uff4a\014\uff4a\015\uff4a\016\uff4a\017\uff4a\020\uff4a\021" +
    "\uff4a\022\uff4a\047\uff4a\075\uff4a\076\uff4a\110\uff4a\126\uff4a" +
    "\130\uff4a\142\uff4a\143\uff4a\145\uff4a\167\uff4a\175\uff4a\211" +
    "\uff4a\214\uff4a\225\uff4a\230\uff4a\255\uff4a\325\uff4a\342\uff4a" +
    "\u010f\uff4a\u016b\uff4a\001\002\000\102\004\uff4f\005\uff4f\006" +
    "\uff4f\007\277\010\275\014\uff4f\015\uff4f\016\uff4f\017\uff4f" +
    "\020\uff4f\021\uff4f\022\uff4f\047\uff4f\075\uff4f\076\uff4f\110" +
    "\uff4f\126\uff4f\130\uff4f\142\uff4f\143\uff4f\145\uff4f\167\uff4f" +
    "\175\uff4f\211\uff4f\214\uff4f\225\uff4f\230\uff4f\255\uff4f\325" +
    "\uff4f\342\uff4f\u010f\uff4f\u016b\uff4f\001\002\000\044\021\uff61" +
    "\022\uff61\047\uff61\075\270\076\272\110\uff61\126\uff61\142" +
    "\uff61\143\uff61\145\uff61\175\uff61\214\uff61\225\uff61\325\uff61" +
    "\342\uff61\u010f\uff61\u016b\uff61\001\002\000\072\004\244\014" +
    "\236\015\237\016\242\017\243\020\234\021\uff5c\022\uff5c" +
    "\047\uff5c\075\uff5c\076\uff5c\110\uff5c\126\uff5c\130\uff6f\142" +
    "\uff5c\143\uff5c\145\uff5c\167\uff6f\175\uff5c\211\245\214\uff5c" +
    "\225\uff5c\230\uff6f\255\142\325\uff5c\342\uff5c\u010f\uff5c\u016b" +
    "\uff5c\001\002\000\076\004\uff53\005\227\006\226\014\uff53" +
    "\015\uff53\016\uff53\017\uff53\020\uff53\021\uff53\022\uff53\047" +
    "\uff53\075\uff53\076\uff53\110\uff53\126\uff53\130\uff53\142\uff53" +
    "\143\uff53\145\uff53\167\uff53\175\uff53\211\uff53\214\uff53\225" +
    "\uff53\230\uff53\255\uff53\325\uff53\342\uff53\u010f\uff53\u016b\uff53" +
    "\001\002\000\170\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010" +
    "\uffe0\011\uffe0\012\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0" +
    "\020\uffe0\021\uffe0\022\uffe0\023\223\024\uffe0\031\uffe0\032" +
    "\uffe0\037\uffe0\043\uffe0\047\uffe0\074\uffe0\075\uffe0\076\uffe0" +
    "\102\uffe0\110\uffe0\112\uffe0\113\uffe0\116\uffe0\123\uffe0\126" +
    "\uffe0\130\uffe0\142\uffe0\143\uffe0\145\uffe0\155\uffe0\167\uffe0" +
    "\174\uffe0\175\uffe0\210\uffe0\211\uffe0\212\uffe0\214\uffe0\225" +
    "\uffe0\230\uffe0\255\uffe0\273\uffe0\302\uffe0\303\uffe0\322\uffe0" +
    "\323\uffe0\325\uffe0\332\uffe0\342\uffe0\350\uffe0\352\uffe0\u0104" +
    "\uffe0\u010f\uffe0\u016b\uffe0\001\002\000\102\004\uff49\005\uff49" +
    "\006\uff49\007\uff49\010\uff49\014\uff49\015\uff49\016\uff49\017" +
    "\uff49\020\uff49\021\uff49\022\uff49\047\uff49\075\uff49\076\uff49" +
    "\110\uff49\126\uff49\130\uff49\142\uff49\143\uff49\145\uff49\167" +
    "\uff49\175\uff49\211\uff49\214\uff49\225\uff49\230\uff49\255\uff49" +
    "\325\uff49\342\uff49\u010f\uff49\u016b\uff49\001\002\000\004\032" +
    "\220\001\002\000\102\004\uff48\005\uff48\006\uff48\007\uff48" +
    "\010\uff48\014\uff48\015\uff48\016\uff48\017\uff48\020\uff48\021" +
    "\uff48\022\uff48\047\uff48\075\uff48\076\uff48\110\uff48\126\uff48" +
    "\130\uff48\142\uff48\143\uff48\145\uff48\167\uff48\175\uff48\211" +
    "\uff48\214\uff48\225\uff48\230\uff48\255\uff48\325\uff48\342\uff48" +
    "\u010f\uff48\u016b\uff48\001\002\000\004\032\216\001\002\000" +
    "\034\011\uff6f\012\uff6f\024\uff6f\031\uff6f\032\uff6f\037\uff6f" +
    "\043\uff6f\255\142\u010b\uff6f\u0138\uff6f\u013d\uff6f\u0148\uff6f\u0149" +
    "\uff6f\001\002\000\004\032\212\001\002\000\004\032\202" +
    "\001\002\000\104\004\uff77\005\uff77\006\uff77\007\uff77\010" +
    "\uff77\014\uff77\015\uff77\016\uff77\017\uff77\020\uff77\021\uff77" +
    "\022\uff77\032\166\047\uff77\075\uff77\076\uff77\110\uff77\126" +
    "\uff77\130\uff77\142\uff77\143\uff77\145\uff77\167\uff77\175\uff77" +
    "\211\uff77\214\uff77\225\uff77\230\uff77\255\uff77\325\uff77\342" +
    "\uff77\u010f\uff77\u016b\uff77\001\002\000\012\012\173\024\146" +
    "\037\170\043\174\001\002\000\102\004\uff4c\005\uff4c\006" +
    "\uff4c\007\uff4c\010\uff4c\014\uff4c\015\uff4c\016\uff4c\017\uff4c" +
    "\020\uff4c\021\uff4c\022\uff4c\047\uff4c\075\uff4c\076\uff4c\110" +
    "\uff4c\126\uff4c\130\uff4c\142\uff4c\143\uff4c\145\uff4c\167\uff4c" +
    "\175\uff4c\211\uff4c\214\uff4c\225\uff4c\230\uff4c\255\uff4c\325" +
    "\uff4c\342\uff4c\u010f\uff4c\u016b\uff4c\001\002\000\006\022\ufdd7" +
    "\047\ufdd7\001\002\000\006\022\200\047\uff74\001\002\000" +
    "\006\022\ufdd9\047\ufdd9\001\002\000\006\022\ufdd8\047\ufdd8" +
    "\001\002\000\006\022\ufdd6\047\ufdd6\001\002\000\004\047" +
    "\176\001\002\000\124\004\uff78\005\uff78\006\uff78\007\uff78" +
    "\010\uff78\011\uff78\014\uff78\015\uff78\016\uff78\017\uff78\020" +
    "\uff78\021\uff78\022\uff78\031\uff78\043\uff78\047\uff78\075\uff78" +
    "\076\uff78\110\uff78\112\uff78\123\uff78\126\uff78\130\uff78\142" +
    "\uff78\143\uff78\145\uff78\167\uff78\174\uff78\175\uff78\211\uff78" +
    "\214\uff78\225\uff78\230\uff78\255\uff78\303\uff78\325\uff78\332" +
    "\uff78\342\uff78\u0104\uff78\u010f\uff78\u016b\uff78\001\002\000\004" +
    "\047\uff76\001\002\000\012\012\173\024\146\037\170\043" +
    "\174\001\002\000\004\047\uff75\001\002\000\012\007\205" +
    "\011\051\012\206\031\052\001\002\000\004\047\211\001" +
    "\002\000\102\004\uff43\005\uff43\006\uff43\007\uff43\010\uff43" +
    "\014\uff43\015\uff43\016\uff43\017\uff43\020\uff43\021\uff43\022" +
    "\uff43\047\uff43\075\uff43\076\uff43\110\uff43\126\uff43\130\uff43" +
    "\142\uff43\143\uff43\145\uff43\167\uff43\175\uff43\211\uff43\214" +
    "\uff43\225\uff43\230\uff43\255\uff43\325\uff43\342\uff43\u010f\uff43" +
    "\u016b\uff43\001\002\000\004\047\210\001\002\000\004\047" +
    "\207\001\002\000\102\004\uff41\005\uff41\006\uff41\007\uff41" +
    "\010\uff41\014\uff41\015\uff41\016\uff41\017\uff41\020\uff41\021" +
    "\uff41\022\uff41\047\uff41\075\uff41\076\uff41\110\uff41\126\uff41" +
    "\130\uff41\142\uff41\143\uff41\145\uff41\167\uff41\175\uff41\211" +
    "\uff41\214\uff41\225\uff41\230\uff41\255\uff41\325\uff41\342\uff41" +
    "\u010f\uff41\u016b\uff41\001\002\000\102\004\uff40\005\uff40\006" +
    "\uff40\007\uff40\010\uff40\014\uff40\015\uff40\016\uff40\017\uff40" +
    "\020\uff40\021\uff40\022\uff40\047\uff40\075\uff40\076\uff40\110" +
    "\uff40\126\uff40\130\uff40\142\uff40\143\uff40\145\uff40\167\uff40" +
    "\175\uff40\211\uff40\214\uff40\225\uff40\230\uff40\255\uff40\325" +
    "\uff40\342\uff40\u010f\uff40\u016b\uff40\001\002\000\102\004\uff42" +
    "\005\uff42\006\uff42\007\uff42\010\uff42\014\uff42\015\uff42\016" +
    "\uff42\017\uff42\020\uff42\021\uff42\022\uff42\047\uff42\075\uff42" +
    "\076\uff42\110\uff42\126\uff42\130\uff42\142\uff42\143\uff42\145" +
    "\uff42\167\uff42\175\uff42\211\uff42\214\uff42\225\uff42\230\uff42" +
    "\255\uff42\325\uff42\342\uff42\u010f\uff42\u016b\uff42\001\002\000" +
    "\012\007\205\011\051\012\206\031\052\001\002\000\102" +
    "\004\uff44\005\uff44\006\uff44\007\uff44\010\uff44\014\uff44\015" +
    "\uff44\016\uff44\017\uff44\020\uff44\021\uff44\022\uff44\047\uff44" +
    "\075\uff44\076\uff44\110\uff44\126\uff44\130\uff44\142\uff44\143" +
    "\uff44\145\uff44\167\uff44\175\uff44\211\uff44\214\uff44\225\uff44" +
    "\230\uff44\255\uff44\325\uff44\342\uff44\u010f\uff44\u016b\uff44\001" +
    "\002\000\004\047\215\001\002\000\102\004\uff4e\005\uff4e" +
    "\006\uff4e\007\uff4e\010\uff4e\014\uff4e\015\uff4e\016\uff4e\017" +
    "\uff4e\020\uff4e\021\uff4e\022\uff4e\047\uff4e\075\uff4e\076\uff4e" +
    "\110\uff4e\126\uff4e\130\uff4e\142\uff4e\143\uff4e\145\uff4e\167" +
    "\uff4e\175\uff4e\211\uff4e\214\uff4e\225\uff4e\230\uff4e\255\uff4e" +
    "\325\uff4e\342\uff4e\u010f\uff4e\u016b\uff4e\001\002\000\012\007" +
    "\205\011\051\012\206\031\052\001\002\000\102\004\uff45" +
    "\005\uff45\006\uff45\007\uff45\010\uff45\014\uff45\015\uff45\016" +
    "\uff45\017\uff45\020\uff45\021\uff45\022\uff45\047\uff45\075\uff45" +
    "\076\uff45\110\uff45\126\uff45\130\uff45\142\uff45\143\uff45\145" +
    "\uff45\167\uff45\175\uff45\211\uff45\214\uff45\225\uff45\230\uff45" +
    "\255\uff45\325\uff45\342\uff45\u010f\uff45\u016b\uff45\001\002\000" +
    "\012\007\205\011\051\012\206\031\052\001\002\000\102" +
    "\004\uff46\005\uff46\006\uff46\007\uff46\010\uff46\014\uff46\015" +
    "\uff46\016\uff46\017\uff46\020\uff46\021\uff46\022\uff46\047\uff46" +
    "\075\uff46\076\uff46\110\uff46\126\uff46\130\uff46\142\uff46\143" +
    "\uff46\145\uff46\167\uff46\175\uff46\211\uff46\214\uff46\225\uff46" +
    "\230\uff46\255\uff46\325\uff46\342\uff46\u010f\uff46\u016b\uff46\001" +
    "\002\000\166\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2" +
    "\011\uffe2\012\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020" +
    "\uffe2\021\uffe2\022\uffe2\024\uffe2\031\uffe2\032\uffe2\037\uffe2" +
    "\043\uffe2\047\uffe2\074\uffe2\075\uffe2\076\uffe2\102\uffe2\110" +
    "\uffe2\112\uffe2\113\uffe2\116\uffe2\123\uffe2\126\uffe2\130\uffe2" +
    "\142\uffe2\143\uffe2\145\uffe2\155\uffe2\167\uffe2\174\uffe2\175" +
    "\uffe2\210\uffe2\211\uffe2\212\uffe2\214\uffe2\225\uffe2\230\uffe2" +
    "\255\uffe2\273\uffe2\302\uffe2\303\uffe2\322\uffe2\323\uffe2\325" +
    "\uffe2\332\uffe2\342\uffe2\350\uffe2\352\uffe2\u0104\uffe2\u010f\uffe2" +
    "\u016b\uffe2\001\002\000\006\011\051\031\052\001\002\000" +
    "\166\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1" +
    "\012\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021" +
    "\uffe1\022\uffe1\024\uffe1\031\uffe1\032\uffe1\037\uffe1\043\uffe1" +
    "\047\uffe1\074\uffe1\075\uffe1\076\uffe1\102\uffe1\110\uffe1\112" +
    "\uffe1\113\uffe1\116\uffe1\123\uffe1\126\uffe1\130\uffe1\142\uffe1" +
    "\143\uffe1\145\uffe1\155\uffe1\167\uffe1\174\uffe1\175\uffe1\210" +
    "\uffe1\211\uffe1\212\uffe1\214\uffe1\225\uffe1\230\uffe1\255\uffe1" +
    "\273\uffe1\302\uffe1\303\uffe1\322\uffe1\323\uffe1\325\uffe1\332" +
    "\uffe1\342\uffe1\350\uffe1\352\uffe1\u0104\uffe1\u010f\uffe1\u016b\uffe1" +
    "\001\002\000\072\004\uff56\014\uff56\015\uff56\016\uff56\017" +
    "\uff56\020\uff56\021\uff56\022\uff56\047\uff56\075\uff56\076\uff56" +
    "\110\uff56\126\uff56\130\uff56\142\uff56\143\uff56\145\uff56\167" +
    "\uff56\175\uff56\211\uff56\214\uff56\225\uff56\230\uff56\255\uff56" +
    "\325\uff56\342\uff56\u010f\uff56\u016b\uff56\001\002\000\032\011" +
    "\051\012\145\024\146\031\052\032\162\037\150\043\156" +
    "\u010b\157\u0138\144\u013d\164\u0148\163\u0149\161\001\002\000" +
    "\032\011\051\012\145\024\146\031\052\032\162\037\150" +
    "\043\156\u010b\157\u0138\144\u013d\164\u0148\163\u0149\161\001" +
    "\002\000\076\004\uff53\005\227\006\226\014\uff53\015\uff53" +
    "\016\uff53\017\uff53\020\uff53\021\uff53\022\uff53\047\uff53\075" +
    "\uff53\076\uff53\110\uff53\126\uff53\130\uff53\142\uff53\143\uff53" +
    "\145\uff53\167\uff53\175\uff53\211\uff53\214\uff53\225\uff53\230" +
    "\uff53\255\uff53\325\uff53\342\uff53\u010f\uff53\u016b\uff53\001\002" +
    "\000\072\004\uff55\014\uff55\015\uff55\016\uff55\017\uff55\020" +
    "\uff55\021\uff55\022\uff55\047\uff55\075\uff55\076\uff55\110\uff55" +
    "\126\uff55\130\uff55\142\uff55\143\uff55\145\uff55\167\uff55\175" +
    "\uff55\211\uff55\214\uff55\225\uff55\230\uff55\255\uff55\325\uff55" +
    "\342\uff55\u010f\uff55\u016b\uff55\001\002\000\076\004\uff53\005" +
    "\227\006\226\014\uff53\015\uff53\016\uff53\017\uff53\020\uff53" +
    "\021\uff53\022\uff53\047\uff53\075\uff53\076\uff53\110\uff53\126" +
    "\uff53\130\uff53\142\uff53\143\uff53\145\uff53\167\uff53\175\uff53" +
    "\211\uff53\214\uff53\225\uff53\230\uff53\255\uff53\325\uff53\342" +
    "\uff53\u010f\uff53\u016b\uff53\001\002\000\072\004\uff54\014\uff54" +
    "\015\uff54\016\uff54\017\uff54\020\uff54\021\uff54\022\uff54\047" +
    "\uff54\075\uff54\076\uff54\110\uff54\126\uff54\130\uff54\142\uff54" +
    "\143\uff54\145\uff54\167\uff54\175\uff54\211\uff54\214\uff54\225" +
    "\uff54\230\uff54\255\uff54\325\uff54\342\uff54\u010f\uff54\u016b\uff54" +
    "\001\002\000\032\011\uff69\012\uff69\024\uff69\031\uff69\032" +
    "\uff69\037\uff69\043\uff69\u010b\uff69\u0138\uff69\u013d\uff69\u0148\uff69" +
    "\u0149\uff69\001\002\000\010\130\253\167\252\230\251\001" +
    "\002\000\032\011\uff66\012\uff66\024\uff66\031\uff66\032\uff66" +
    "\037\uff66\043\uff66\u010b\uff66\u0138\uff66\u013d\uff66\u0148\uff66\u0149" +
    "\uff66\001\002\000\032\011\uff65\012\uff65\024\uff65\031\uff65" +
    "\032\uff65\037\uff65\043\uff65\u010b\uff65\u0138\uff65\u013d\uff65\u0148" +
    "\uff65\u0149\uff65\001\002\000\032\011\051\012\145\024\146" +
    "\031\052\032\162\037\150\043\156\u010b\157\u0138\144\u013d" +
    "\164\u0148\163\u0149\161\001\002\000\044\021\uff60\022\uff60" +
    "\047\uff60\075\uff60\076\uff60\110\uff60\126\uff60\142\uff60\143" +
    "\uff60\145\uff60\175\uff60\214\uff60\225\uff60\325\uff60\342\uff60" +
    "\u010f\uff60\u016b\uff60\001\002\000\032\011\uff68\012\uff68\024" +
    "\uff68\031\uff68\032\uff68\037\uff68\043\uff68\u010b\uff68\u0138\uff68" +
    "\u013d\uff68\u0148\uff68\u0149\uff68\001\002\000\032\011\uff67\012" +
    "\uff67\024\uff67\031\uff67\032\uff67\037\uff67\043\uff67\u010b\uff67" +
    "\u0138\uff67\u013d\uff67\u0148\uff67\u0149\uff67\001\002\000\032\011" +
    "\uff6a\012\uff6a\024\uff6a\031\uff6a\032\uff6a\037\uff6a\043\uff6a" +
    "\u010b\uff6a\u0138\uff6a\u013d\uff6a\u0148\uff6a\u0149\uff6a\001\002\000" +
    "\006\255\142\260\uff6f\001\002\000\004\260\247\001\002" +
    "\000\044\021\uff5e\022\uff5e\047\uff5e\075\uff5e\076\uff5e\110" +
    "\uff5e\126\uff5e\142\uff5e\143\uff5e\145\uff5e\175\uff5e\214\uff5e" +
    "\225\uff5e\325\uff5e\342\uff5e\u010f\uff5e\u016b\uff5e\001\002\000" +
    "\044\021\uff5f\022\uff5f\047\uff5f\075\uff5f\076\uff5f\110\uff5f" +
    "\126\uff5f\142\uff5f\143\uff5f\145\uff5f\175\uff5f\214\uff5f\225" +
    "\uff5f\325\uff5f\342\uff5f\u010f\uff5f\u016b\uff5f\001\002\000\032" +
    "\011\051\012\145\024\146\031\052\032\162\037\150\043" +
    "\156\u010b\157\u0138\144\u013d\164\u0148\163\u0149\161\001\002" +
    "\000\004\032\260\001\002\000\032\011\051\012\145\024" +
    "\146\031\052\032\162\037\150\043\156\u010b\157\u0138\144" +
    "\u013d\164\u0148\163\u0149\161\001\002\000\044\021\uff5d\022" +
    "\uff5d\047\uff5d\075\uff5d\076\uff5d\110\uff5d\126\uff5d\142\uff5d" +
    "\143\uff5d\145\uff5d\175\uff5d\214\uff5d\225\uff5d\325\uff5d\342" +
    "\uff5d\u010f\uff5d\u016b\uff5d\001\002\000\004\075\256\001\002" +
    "\000\032\011\051\012\145\024\146\031\052\032\162\037" +
    "\150\043\156\u010b\157\u0138\144\u013d\164\u0148\163\u0149\161" +
    "\001\002\000\044\021\uff5a\022\uff5a\047\uff5a\075\uff5a\076" +
    "\uff5a\110\uff5a\126\uff5a\142\uff5a\143\uff5a\145\uff5a\175\uff5a" +
    "\214\uff5a\225\uff5a\325\uff5a\342\uff5a\u010f\uff5a\u016b\uff5a\001" +
    "\002\000\032\011\051\012\145\024\146\031\052\032\162" +
    "\037\150\043\156\u010b\157\u0138\144\u013d\164\u0148\163\u0149" +
    "\161\001\002\000\006\022\262\047\uff57\001\002\000\032" +
    "\011\051\012\145\024\146\031\052\032\162\037\150\043" +
    "\156\u010b\157\u0138\144\u013d\164\u0148\163\u0149\161\001\002" +
    "\000\004\047\264\001\002\000\044\021\uff5b\022\uff5b\047" +
    "\uff5b\075\uff5b\076\uff5b\110\uff5b\126\uff5b\142\uff5b\143\uff5b" +
    "\145\uff5b\175\uff5b\214\uff5b\225\uff5b\325\uff5b\342\uff5b\u010f" +
    "\uff5b\u016b\uff5b\001\002\000\006\022\262\047\uff57\001\002" +
    "\000\004\047\uff58\001\002\000\044\021\uff59\022\uff59\047" +
    "\uff59\075\uff59\076\uff59\110\uff59\126\uff59\142\uff59\143\uff59" +
    "\145\uff59\175\uff59\214\uff59\225\uff59\325\uff59\342\uff59\u010f" +
    "\uff59\u016b\uff59\001\002\000\034\011\uff6f\012\uff6f\024\uff6f" +
    "\031\uff6f\032\uff6f\037\uff6f\043\uff6f\255\142\u010b\uff6f\u0138" +
    "\uff6f\u013d\uff6f\u0148\uff6f\u0149\uff6f\001\002\000\040\021\uff64" +
    "\022\uff64\047\uff64\110\uff64\126\uff64\142\uff64\143\uff64\145" +
    "\uff64\175\uff64\214\uff64\225\uff64\325\uff64\342\uff64\u010f\uff64" +
    "\u016b\uff64\001\002\000\034\011\uff6f\012\uff6f\024\uff6f\031" +
    "\uff6f\032\uff6f\037\uff6f\043\uff6f\255\142\u010b\uff6f\u0138\uff6f" +
    "\u013d\uff6f\u0148\uff6f\u0149\uff6f\001\002\000\040\021\uff62\022" +
    "\uff62\047\uff62\110\uff62\126\uff62\142\uff62\143\uff62\145\uff62" +
    "\175\uff62\214\uff62\225\uff62\325\uff62\342\uff62\u010f\uff62\u016b" +
    "\uff62\001\002\000\040\021\uff63\022\uff63\047\uff63\110\uff63" +
    "\126\uff63\142\uff63\143\uff63\145\uff63\175\uff63\214\uff63\225" +
    "\uff63\325\uff63\342\uff63\u010f\uff63\u016b\uff63\001\002\000\032" +
    "\011\051\012\145\024\146\031\052\032\162\037\150\043" +
    "\156\u010b\157\u0138\144\u013d\164\u0148\163\u0149\161\001\002" +
    "\000\076\004\uff52\005\uff52\006\uff52\014\uff52\015\uff52\016" +
    "\uff52\017\uff52\020\uff52\021\uff52\022\uff52\047\uff52\075\uff52" +
    "\076\uff52\110\uff52\126\uff52\130\uff52\142\uff52\143\uff52\145" +
    "\uff52\167\uff52\175\uff52\211\uff52\214\uff52\225\uff52\230\uff52" +
    "\255\uff52\325\uff52\342\uff52\u010f\uff52\u016b\uff52\001\002\000" +
    "\032\011\051\012\145\024\146\031\052\032\162\037\150" +
    "\043\156\u010b\157\u0138\144\u013d\164\u0148\163\u0149\161\001" +
    "\002\000\102\004\uff4f\005\uff4f\006\uff4f\007\277\010\275" +
    "\014\uff4f\015\uff4f\016\uff4f\017\uff4f\020\uff4f\021\uff4f\022" +
    "\uff4f\047\uff4f\075\uff4f\076\uff4f\110\uff4f\126\uff4f\130\uff4f" +
    "\142\uff4f\143\uff4f\145\uff4f\167\uff4f\175\uff4f\211\uff4f\214" +
    "\uff4f\225\uff4f\230\uff4f\255\uff4f\325\uff4f\342\uff4f\u010f\uff4f" +
    "\u016b\uff4f\001\002\000\076\004\uff51\005\uff51\006\uff51\014" +
    "\uff51\015\uff51\016\uff51\017\uff51\020\uff51\021\uff51\022\uff51" +
    "\047\uff51\075\uff51\076\uff51\110\uff51\126\uff51\130\uff51\142" +
    "\uff51\143\uff51\145\uff51\167\uff51\175\uff51\211\uff51\214\uff51" +
    "\225\uff51\230\uff51\255\uff51\325\uff51\342\uff51\u010f\uff51\u016b" +
    "\uff51\001\002\000\102\004\uff4f\005\uff4f\006\uff4f\007\277" +
    "\010\275\014\uff4f\015\uff4f\016\uff4f\017\uff4f\020\uff4f\021" +
    "\uff4f\022\uff4f\047\uff4f\075\uff4f\076\uff4f\110\uff4f\126\uff4f" +
    "\130\uff4f\142\uff4f\143\uff4f\145\uff4f\167\uff4f\175\uff4f\211" +
    "\uff4f\214\uff4f\225\uff4f\230\uff4f\255\uff4f\325\uff4f\342\uff4f" +
    "\u010f\uff4f\u016b\uff4f\001\002\000\076\004\uff50\005\uff50\006" +
    "\uff50\014\uff50\015\uff50\016\uff50\017\uff50\020\uff50\021\uff50" +
    "\022\uff50\047\uff50\075\uff50\076\uff50\110\uff50\126\uff50\130" +
    "\uff50\142\uff50\143\uff50\145\uff50\167\uff50\175\uff50\211\uff50" +
    "\214\uff50\225\uff50\230\uff50\255\uff50\325\uff50\342\uff50\u010f" +
    "\uff50\u016b\uff50\001\002\000\232\004\uffd7\005\uffd7\006\uffd7" +
    "\007\uffd7\010\uffd7\011\uffd7\014\uffd7\015\uffd7\016\uffd7\017" +
    "\uffd7\020\uffd7\021\uffd7\022\uffd7\031\uffd7\043\uffd7\047\uffd7" +
    "\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\056" +
    "\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7\063\uffd7\064\uffd7" +
    "\065\uffd7\066\uffd7\067\uffd7\070\uffd7\071\uffd7\072\uffd7\075" +
    "\uffd7\076\uffd7\110\uffd7\112\uffd7\123\uffd7\126\uffd7\130\uffd7" +
    "\142\uffd7\143\uffd7\145\uffd7\167\uffd7\174\uffd7\175\uffd7\211" +
    "\uffd7\214\uffd7\225\uffd7\230\uffd7\254\uffd7\255\uffd7\303\uffd7" +
    "\317\uffd7\325\uffd7\332\uffd7\342\uffd7\350\uffd7\u0100\uffd7\u0104" +
    "\uffd7\u010a\uffd7\u010f\uffd7\u0110\uffd7\u011d\uffd7\u0126\uffd7\u0129\uffd7" +
    "\u012c\uffd7\u013f\uffd7\u014b\uffd7\u0155\uffd7\u0158\uffd7\u0165\uffd7\u0166" +
    "\uffd7\u016b\uffd7\001\002\000\012\007\205\011\051\012\206" +
    "\031\052\001\002\000\102\004\uff47\005\uff47\006\uff47\007" +
    "\uff47\010\uff47\014\uff47\015\uff47\016\uff47\017\uff47\020\uff47" +
    "\021\uff47\022\uff47\047\uff47\075\uff47\076\uff47\110\uff47\126" +
    "\uff47\130\uff47\142\uff47\143\uff47\145\uff47\167\uff47\175\uff47" +
    "\211\uff47\214\uff47\225\uff47\230\uff47\255\uff47\325\uff47\342" +
    "\uff47\u010f\uff47\u016b\uff47\001\002\000\036\011\051\012\312" +
    "\024\146\031\052\032\325\037\315\043\321\260\331\273" +
    "\326\u010b\322\u0138\311\u013d\330\u0148\327\u0149\324\001\002" +
    "\000\014\021\uff02\022\377\123\uff02\342\uff02\u010f\uff02\001" +
    "\002\000\004\032\375\001\002\000\056\005\uff82\006\uff82" +
    "\007\uff82\010\uff82\011\uff82\021\uff82\022\uff82\031\uff82\043" +
    "\uff82\047\uff82\110\uff82\112\uff82\123\uff82\142\uff82\145\uff82" +
    "\174\uff82\303\uff82\325\uff82\332\uff82\342\uff82\u0104\uff82\u010f" +
    "\uff82\001\002\000\056\005\uff84\006\uff84\007\uff84\010\uff84" +
    "\011\uff84\021\uff84\022\uff84\031\uff84\043\uff84\047\uff84\110" +
    "\uff84\112\uff84\123\uff84\142\uff84\145\uff84\174\uff84\303\uff84" +
    "\325\uff84\332\uff84\342\uff84\u0104\uff84\u010f\uff84\001\002\000" +
    "\014\021\uff04\022\uff04\123\uff04\342\uff04\u010f\uff04\001\002" +
    "\000\056\005\uff81\006\uff81\007\uff81\010\uff81\011\uff81\021" +
    "\uff81\022\uff81\031\uff81\043\uff81\047\uff81\110\uff81\112\uff81" +
    "\123\uff81\142\uff81\145\uff81\174\uff81\303\uff81\325\uff81\332" +
    "\uff81\342\uff81\u0104\uff81\u010f\uff81\001\002\000\056\005\uff86" +
    "\006\uff86\007\370\010\366\011\uff86\021\uff86\022\uff86\031" +
    "\uff86\043\uff86\047\uff86\110\uff86\112\uff86\123\uff86\142\uff86" +
    "\145\uff86\174\uff86\303\uff86\325\uff86\332\uff86\342\uff86\u0104" +
    "\uff86\u010f\uff86\001\002\000\052\005\360\006\357\011\uff8a" +
    "\021\uff8a\022\uff8a\031\uff8a\043\uff8a\047\uff8a\110\uff8a\112" +
    "\uff8a\123\uff8a\142\uff8a\145\uff8a\174\uff8a\303\uff8a\325\uff8a" +
    "\332\uff8a\342\uff8a\u0104\uff8a\u010f\uff8a\001\002\000\062\005" +
    "\uffda\006\uffda\007\uffda\010\uffda\011\uffda\021\uffda\022\uffda" +
    "\023\355\031\uffda\032\uffda\043\uffda\047\uffda\110\uffda\112" +
    "\uffda\123\uffda\142\uffda\145\uffda\174\uffda\303\uffda\325\uffda" +
    "\332\uffda\342\uffda\u0104\uffda\u010f\uffda\001\002\000\056\005" +
    "\uff80\006\uff80\007\uff80\010\uff80\011\uff80\021\uff80\022\uff80" +
    "\031\uff80\043\uff80\047\uff80\110\uff80\112\uff80\123\uff80\142" +
    "\uff80\145\uff80\174\uff80\303\uff80\325\uff80\332\uff80\342\uff80" +
    "\u0104\uff80\u010f\uff80\001\002\000\004\032\352\001\002\000" +
    "\056\005\uff7e\006\uff7e\007\uff7e\010\uff7e\011\uff7e\021\uff7e" +
    "\022\uff7e\031\uff7e\043\uff7e\047\uff7e\110\uff7e\112\uff7e\123" +
    "\uff7e\142\uff7e\145\uff7e\174\uff7e\303\uff7e\325\uff7e\332\uff7e" +
    "\342\uff7e\u0104\uff7e\u010f\uff7e\001\002\000\004\032\350\001" +
    "\002\000\034\011\051\012\312\024\146\031\052\032\325" +
    "\037\315\043\321\260\331\u010b\322\u0138\311\u013d\330\u0148" +
    "\327\u0149\324\001\002\000\014\021\uff05\022\uff05\123\uff05" +
    "\342\uff05\u010f\uff05\001\002\000\004\032\344\001\002\000" +
    "\004\032\334\001\002\000\056\005\uff7f\006\uff7f\007\uff7f" +
    "\010\uff7f\011\uff7f\021\uff7f\022\uff7f\031\uff7f\043\uff7f\047" +
    "\uff7f\110\uff7f\112\uff7f\123\uff7f\142\uff7f\145\uff7f\174\uff7f" +
    "\303\uff7f\325\uff7f\332\uff7f\342\uff7f\u0104\uff7f\u010f\uff7f\001" +
    "\002\000\060\005\uff77\006\uff77\007\uff77\010\uff77\011\uff77" +
    "\021\uff77\022\uff77\031\uff77\032\166\043\uff77\047\uff77\110" +
    "\uff77\112\uff77\123\uff77\142\uff77\145\uff77\174\uff77\303\uff77" +
    "\325\uff77\332\uff77\342\uff77\u0104\uff77\u010f\uff77\001\002\000" +
    "\056\005\uff83\006\uff83\007\uff83\010\uff83\011\uff83\021\uff83" +
    "\022\uff83\031\uff83\043\uff83\047\uff83\110\uff83\112\uff83\123" +
    "\uff83\142\uff83\145\uff83\174\uff83\303\uff83\325\uff83\332\uff83" +
    "\342\uff83\u0104\uff83\u010f\uff83\001\002\000\012\007\337\011" +
    "\051\012\340\031\052\001\002\000\004\047\343\001\002" +
    "\000\056\005\uff79\006\uff79\007\uff79\010\uff79\011\uff79\021" +
    "\uff79\022\uff79\031\uff79\043\uff79\047\uff79\110\uff79\112\uff79" +
    "\123\uff79\142\uff79\145\uff79\174\uff79\303\uff79\325\uff79\332" +
    "\uff79\342\uff79\u0104\uff79\u010f\uff79\001\002\000\004\047\342" +
    "\001\002\000\004\047\341\001\002\000\056\005\uff72\006" +
    "\uff72\007\uff72\010\uff72\011\uff72\021\uff72\022\uff72\031\uff72" +
    "\043\uff72\047\uff72\110\uff72\112\uff72\123\uff72\142\uff72\145" +
    "\uff72\174\uff72\303\uff72\325\uff72\332\uff72\342\uff72\u0104\uff72" +
    "\u010f\uff72\001\002\000\056\005\uff71\006\uff71\007\uff71\010" +
    "\uff71\011\uff71\021\uff71\022\uff71\031\uff71\043\uff71\047\uff71" +
    "\110\uff71\112\uff71\123\uff71\142\uff71\145\uff71\174\uff71\303" +
    "\uff71\325\uff71\332\uff71\342\uff71\u0104\uff71\u010f\uff71\001\002" +
    "\000\056\005\uff73\006\uff73\007\uff73\010\uff73\011\uff73\021" +
    "\uff73\022\uff73\031\uff73\043\uff73\047\uff73\110\uff73\112\uff73" +
    "\123\uff73\142\uff73\145\uff73\174\uff73\303\uff73\325\uff73\332" +
    "\uff73\342\uff73\u0104\uff73\u010f\uff73\001\002\000\012\007\337" +
    "\011\051\012\340\031\052\001\002\000\056\005\uff7a\006" +
    "\uff7a\007\uff7a\010\uff7a\011\uff7a\021\uff7a\022\uff7a\031\uff7a" +
    "\043\uff7a\047\uff7a\110\uff7a\112\uff7a\123\uff7a\142\uff7a\145" +
    "\uff7a\174\uff7a\303\uff7a\325\uff7a\332\uff7a\342\uff7a\u0104\uff7a" +
    "\u010f\uff7a\001\002\000\004\047\347\001\002\000\056\005" +
    "\uff85\006\uff85\007\uff85\010\uff85\011\uff85\021\uff85\022\uff85" +
    "\031\uff85\043\uff85\047\uff85\110\uff85\112\uff85\123\uff85\142" +
    "\uff85\145\uff85\174\uff85\303\uff85\325\uff85\332\uff85\342\uff85" +
    "\u0104\uff85\u010f\uff85\001\002\000\012\007\337\011\051\012" +
    "\340\031\052\001\002\000\056\005\uff7b\006\uff7b\007\uff7b" +
    "\010\uff7b\011\uff7b\021\uff7b\022\uff7b\031\uff7b\043\uff7b\047" +
    "\uff7b\110\uff7b\112\uff7b\123\uff7b\142\uff7b\145\uff7b\174\uff7b" +
    "\303\uff7b\325\uff7b\332\uff7b\342\uff7b\u0104\uff7b\u010f\uff7b\001" +
    "\002\000\012\007\337\011\051\012\340\031\052\001\002" +
    "\000\056\005\uff7c\006\uff7c\007\uff7c\010\uff7c\011\uff7c\021" +
    "\uff7c\022\uff7c\031\uff7c\043\uff7c\047\uff7c\110\uff7c\112\uff7c" +
    "\123\uff7c\142\uff7c\145\uff7c\174\uff7c\303\uff7c\325\uff7c\332" +
    "\uff7c\342\uff7c\u0104\uff7c\u010f\uff7c\001\002\000\060\005\uffdc" +
    "\006\uffdc\007\uffdc\010\uffdc\011\uffdc\021\uffdc\022\uffdc\031" +
    "\uffdc\032\uffdc\043\uffdc\047\uffdc\110\uffdc\112\uffdc\123\uffdc" +
    "\142\uffdc\145\uffdc\174\uffdc\303\uffdc\325\uffdc\332\uffdc\342" +
    "\uffdc\u0104\uffdc\u010f\uffdc\001\002\000\006\011\051\031\052" +
    "\001\002\000\060\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011" +
    "\uffdb\021\uffdb\022\uffdb\031\uffdb\032\uffdb\043\uffdb\047\uffdb" +
    "\110\uffdb\112\uffdb\123\uffdb\142\uffdb\145\uffdb\174\uffdb\303" +
    "\uffdb\325\uffdb\332\uffdb\342\uffdb\u0104\uffdb\u010f\uffdb\001\002" +
    "\000\034\011\051\012\312\024\146\031\052\032\325\037" +
    "\315\043\321\260\331\u010b\322\u0138\311\u013d\330\u0148\327" +
    "\u0149\324\001\002\000\034\011\051\012\312\024\146\031" +
    "\052\032\325\037\315\043\321\260\331\u010b\322\u0138\311" +
    "\u013d\330\u0148\327\u0149\324\001\002\000\046\011\uff8d\021" +
    "\uff8d\022\uff8d\031\uff8d\043\uff8d\047\uff8d\110\uff8d\112\uff8d" +
    "\123\uff8d\142\uff8d\145\uff8d\174\uff8d\303\uff8d\325\uff8d\332" +
    "\uff8d\342\uff8d\u0104\uff8d\u010f\uff8d\001\002\000\052\005\360" +
    "\006\357\011\uff8a\021\uff8a\022\uff8a\031\uff8a\043\uff8a\047" +
    "\uff8a\110\uff8a\112\uff8a\123\uff8a\142\uff8a\145\uff8a\174\uff8a" +
    "\303\uff8a\325\uff8a\332\uff8a\342\uff8a\u0104\uff8a\u010f\uff8a\001" +
    "\002\000\046\011\uff8c\021\uff8c\022\uff8c\031\uff8c\043\uff8c" +
    "\047\uff8c\110\uff8c\112\uff8c\123\uff8c\142\uff8c\145\uff8c\174" +
    "\uff8c\303\uff8c\325\uff8c\332\uff8c\342\uff8c\u0104\uff8c\u010f\uff8c" +
    "\001\002\000\052\005\360\006\357\011\uff8a\021\uff8a\022" +
    "\uff8a\031\uff8a\043\uff8a\047\uff8a\110\uff8a\112\uff8a\123\uff8a" +
    "\142\uff8a\145\uff8a\174\uff8a\303\uff8a\325\uff8a\332\uff8a\342" +
    "\uff8a\u0104\uff8a\u010f\uff8a\001\002\000\046\011\uff8b\021\uff8b" +
    "\022\uff8b\031\uff8b\043\uff8b\047\uff8b\110\uff8b\112\uff8b\123" +
    "\uff8b\142\uff8b\145\uff8b\174\uff8b\303\uff8b\325\uff8b\332\uff8b" +
    "\342\uff8b\u0104\uff8b\u010f\uff8b\001\002\000\034\011\051\012" +
    "\312\024\146\031\052\032\325\037\315\043\321\260\331" +
    "\u010b\322\u0138\311\u013d\330\u0148\327\u0149\324\001\002\000" +
    "\052\005\uff89\006\uff89\011\uff89\021\uff89\022\uff89\031\uff89" +
    "\043\uff89\047\uff89\110\uff89\112\uff89\123\uff89\142\uff89\145" +
    "\uff89\174\uff89\303\uff89\325\uff89\332\uff89\342\uff89\u0104\uff89" +
    "\u010f\uff89\001\002\000\034\011\051\012\312\024\146\031" +
    "\052\032\325\037\315\043\321\260\331\u010b\322\u0138\311" +
    "\u013d\330\u0148\327\u0149\324\001\002\000\056\005\uff86\006" +
    "\uff86\007\370\010\366\011\uff86\021\uff86\022\uff86\031\uff86" +
    "\043\uff86\047\uff86\110\uff86\112\uff86\123\uff86\142\uff86\145" +
    "\uff86\174\uff86\303\uff86\325\uff86\332\uff86\342\uff86\u0104\uff86" +
    "\u010f\uff86\001\002\000\052\005\uff88\006\uff88\011\uff88\021" +
    "\uff88\022\uff88\031\uff88\043\uff88\047\uff88\110\uff88\112\uff88" +
    "\123\uff88\142\uff88\145\uff88\174\uff88\303\uff88\325\uff88\332" +
    "\uff88\342\uff88\u0104\uff88\u010f\uff88\001\002\000\056\005\uff86" +
    "\006\uff86\007\370\010\366\011\uff86\021\uff86\022\uff86\031" +
    "\uff86\043\uff86\047\uff86\110\uff86\112\uff86\123\uff86\142\uff86" +
    "\145\uff86\174\uff86\303\uff86\325\uff86\332\uff86\342\uff86\u0104" +
    "\uff86\u010f\uff86\001\002\000\052\005\uff87\006\uff87\011\uff87" +
    "\021\uff87\022\uff87\031\uff87\043\uff87\047\uff87\110\uff87\112" +
    "\uff87\123\uff87\142\uff87\145\uff87\174\uff87\303\uff87\325\uff87" +
    "\332\uff87\342\uff87\u0104\uff87\u010f\uff87\001\002\000\012\007" +
    "\337\011\051\012\340\031\052\001\002\000\056\005\uff7d" +
    "\006\uff7d\007\uff7d\010\uff7d\011\uff7d\021\uff7d\022\uff7d\031" +
    "\uff7d\043\uff7d\047\uff7d\110\uff7d\112\uff7d\123\uff7d\142\uff7d" +
    "\145\uff7d\174\uff7d\303\uff7d\325\uff7d\332\uff7d\342\uff7d\u0104" +
    "\uff7d\u010f\uff7d\001\002\000\006\011\051\031\052\001\002" +
    "\000\012\021\uff06\123\uff06\342\uff06\u010f\uff06\001\002\000" +
    "\012\021\uff03\123\uff03\342\uff03\u010f\uff03\001\002\000\110" +
    "\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\021\uffdf\022" +
    "\uffdf\031\uffdf\032\uffdf\043\uffdf\047\uffdf\074\uffdf\102\uffdf" +
    "\110\uffdf\112\uffdf\123\uffdf\126\uffdf\142\uffdf\143\uffdf\145" +
    "\uffdf\174\uffdf\175\uffdf\212\uffdf\214\uffdf\225\uffdf\273\uffdf" +
    "\303\uffdf\322\uffdf\323\uffdf\325\uffdf\332\uffdf\342\uffdf\u0104" +
    "\uffdf\u010f\uffdf\u016b\uffdf\001\002\000\006\011\051\031\052" +
    "\001\002\000\110\005\uffde\006\uffde\007\uffde\010\uffde\011" +
    "\uffde\021\uffde\022\uffde\031\uffde\032\uffde\043\uffde\047\uffde" +
    "\074\uffde\102\uffde\110\uffde\112\uffde\123\uffde\126\uffde\142" +
    "\uffde\143\uffde\145\uffde\174\uffde\175\uffde\212\uffde\214\uffde" +
    "\225\uffde\273\uffde\303\uffde\322\uffde\323\uffde\325\uffde\332" +
    "\uffde\342\uffde\u0104\uffde\u010f\uffde\u016b\uffde\001\002\000\012" +
    "\011\uff0f\031\uff0f\123\u0106\307\uff0f\001\002\000\010\011" +
    "\uff10\031\uff10\307\uff10\001\002\000\010\011\051\031\052" +
    "\307\u010a\001\002\000\006\021\uff11\u010f\uff11\001\002\000" +
    "\012\021\uff0b\123\u0111\342\uff0b\u010f\uff0b\001\002\000\004" +
    "\032\u010b\001\002\000\006\011\051\031\052\001\002\000" +
    "\006\021\uff0e\u010f\uff0e\001\002\000\004\022\u010e\001\002" +
    "\000\004\012\u010f\001\002\000\004\047\u0110\001\002\000" +
    "\006\021\uff08\u010f\uff08\001\002\000\006\011\051\031\052" +
    "\001\002\000\010\021\uff3e\342\137\u010f\uff3e\001\002\000" +
    "\006\021\uff0d\u010f\uff0d\001\002\000\012\021\uff09\022\133" +
    "\342\uff09\u010f\uff09\001\002\000\010\021\uff0c\342\uff0c\u010f" +
    "\uff0c\001\002\000\006\021\046\u010f\045\001\002\000\044" +
    "\002\uffff\003\033\102\030\125\022\146\uffff\173\010\200" +
    "\025\202\uffff\227\023\267\013\270\037\276\035\310\036" +
    "\316\034\322\032\346\004\351\041\001\002\000\010\002" +
    "\ufffa\146\ufffa\202\ufffa\001\002\000\050\002\uffef\003\uffef" +
    "\102\uffef\125\uffef\132\uffef\146\uffef\173\uffef\200\uffef\202" +
    "\uffef\227\uffef\267\uffef\270\uffef\276\uffef\310\uffef\316\uffef" +
    "\322\uffef\332\uffef\346\uffef\351\uffef\001\002\000\006\021" +
    "\uffa7\u010f\uffa7\001\002\000\006\021\uffaa\u010f\uffaa\001\002" +
    "\000\006\021\uffac\u010f\uffac\001\002\000\010\011\uffd8\031" +
    "\uffd8\164\u012b\001\002\000\010\011\uffd8\031\uffd8\164\u012b" +
    "\001\002\000\010\011\uffd8\031\uffd8\164\u012b\001\002\000" +
    "\010\011\ufe2b\031\ufe2b\164\ufe2b\001\002\000\006\021\uffa6" +
    "\u010f\uffa6\001\002\000\010\011\ufe2c\031\ufe2c\164\ufe2c\001" +
    "\002\000\006\021\uffab\u010f\uffab\001\002\000\010\011\uffd8" +
    "\031\uffd8\164\u012b\001\002\000\010\011\uffd8\031\uffd8\164" +
    "\u012b\001\002\000\006\021\uffad\u010f\uffad\001\002\000\010" +
    "\011\uffd8\031\uffd8\164\u012b\001\002\000\010\011\uffd8\031" +
    "\uffd8\164\u012b\001\002\000\006\021\uffa8\u010f\uffa8\001\002" +
    "\000\006\021\uffa9\u010f\uffa9\001\002\000\004\354\u0132\001" +
    "\002\000\006\011\051\031\052\001\002\000\010\021\uff95" +
    "\022\u012f\u010f\uff95\001\002\000\006\021\uff94\u010f\uff94\001" +
    "\002\000\006\011\051\031\052\001\002\000\010\021\uff95" +
    "\022\u012f\u010f\uff95\001\002\000\006\021\uff96\u010f\uff96\001" +
    "\002\000\006\011\uffd9\031\uffd9\001\002\000\006\011\051" +
    "\031\052\001\002\000\010\021\uff95\022\u012f\u010f\uff95\001" +
    "\002\000\006\021\uff97\u010f\uff97\001\002\000\006\011\051" +
    "\031\052\001\002\000\010\021\uff9c\022\u0138\u010f\uff9c\001" +
    "\002\000\006\011\051\031\052\001\002\000\006\021\uff9e" +
    "\u010f\uff9e\001\002\000\010\021\uff9c\022\u0138\u010f\uff9c\001" +
    "\002\000\006\021\uff9d\u010f\uff9d\001\002\000\006\011\051" +
    "\031\052\001\002\000\010\021\uffa3\022\u013e\u010f\uffa3\001" +
    "\002\000\006\011\051\031\052\001\002\000\006\021\uffa5" +
    "\u010f\uffa5\001\002\000\010\021\uffa3\022\u013e\u010f\uffa3\001" +
    "\002\000\006\021\uffa4\u010f\uffa4\001\002\000\006\011\051" +
    "\031\052\001\002\000\006\021\uffa2\u010f\uffa2\001\002\000" +
    "\006\011\051\031\052\001\002\000\004\u016b\u014b\001\002" +
    "\000\010\021\uff98\022\u0148\u010f\uff98\001\002\000\006\021" +
    "\uff9b\u010f\uff9b\001\002\000\006\011\051\031\052\001\002" +
    "\000\010\021\uff98\022\u0148\u010f\uff98\001\002\000\006\021" +
    "\uff99\u010f\uff99\001\002\000\006\011\051\031\052\001\002" +
    "\000\010\021\uff9a\022\uff9a\u010f\uff9a\001\002\000\006\011" +
    "\051\031\052\001\002\000\010\021\uff9f\022\u014f\u010f\uff9f" +
    "\001\002\000\006\011\051\031\052\001\002\000\006\021" +
    "\uffa1\u010f\uffa1\001\002\000\010\021\uff9f\022\u014f\u010f\uff9f" +
    "\001\002\000\006\021\uffa0\u010f\uffa0\001\002\000\010\002" +
    "\ufffc\146\ufffc\202\ufffc\001\002\000\006\021\ufe6a\u010f\ufe6a" +
    "\001\002\000\006\021\ufe65\u010f\ufe65\001\002\000\010\131" +
    "\u025b\360\u0122\u0106\u0120\001\002\000\006\021\ufe66\u010f\ufe66" +
    "\001\002\000\010\011\051\031\052\235\u0252\001\002\000" +
    "\006\011\051\031\052\001\002\000\006\021\ufe69\u010f\ufe69" +
    "\001\002\000\006\021\ufe68\u010f\ufe68\001\002\000\006\021" +
    "\ufe6b\u010f\ufe6b\001\002\000\006\011\051\031\052\001\002" +
    "\000\006\011\051\031\052\001\002\000\006\021\ufe67\u010f" +
    "\ufe67\001\002\000\004\102\u0161\001\002\000\010\131\ufdeb" +
    "\360\ufdeb\u0106\ufdeb\001\002\000\006\032\u0164\112\ufe5c\001" +
    "\002\000\004\112\ufe5d\001\002\000\006\011\051\031\052" +
    "\001\002\000\004\112\u0166\001\002\000\004\173\010\001" +
    "\002\000\006\021\ufe5e\u010f\ufe5e\001\002\000\004\047\u0169" +
    "\001\002\000\020\021\uff39\112\uff39\273\uff39\323\uff39\342" +
    "\uff39\u010f\uff39\u016b\uff39\001\002\000\010\074\u016d\102\u016c" +
    "\322\u0170\001\002\000\006\021\ufe5b\u010f\ufe5b\001\002\000" +
    "\004\177\u0241\001\002\000\022\011\051\031\052\113\ufe8b" +
    "\155\ufe8b\172\u017d\210\u0181\302\ufe8b\352\ufe8b\001\002\000" +
    "\006\021\ufe58\u010f\ufe58\001\002\000\006\021\ufe5a\u010f\ufe5a" +
    "\001\002\000\014\011\ufe4b\031\ufe4b\164\ufe4b\177\u0172\210" +
    "\u0173\001\002\000\010\021\ufe49\022\u0179\u010f\ufe49\001\002" +
    "\000\010\011\uffd8\031\uffd8\164\u012b\001\002\000\010\011" +
    "\ufe4c\031\ufe4c\164\ufe4c\001\002\000\010\011\uffd8\031\uffd8" +
    "\164\u012b\001\002\000\006\011\051\031\052\001\002\000" +
    "\010\021\ufe4e\022\ufe4e\u010f\ufe4e\001\002\000\006\011\051" +
    "\031\052\001\002\000\010\021\ufe4d\022\ufe4d\u010f\ufe4d\001" +
    "\002\000\014\011\ufe4b\031\ufe4b\164\ufe4b\177\u0172\210\u0173" +
    "\001\002\000\006\021\ufe4f\u010f\ufe4f\001\002\000\010\021" +
    "\ufe49\022\u0179\u010f\ufe49\001\002\000\006\021\ufe4a\u010f\ufe4a" +
    "\001\002\000\006\011\051\031\052\001\002\000\012\021" +
    "\ufeb0\022\ufeb0\047\ufeb0\u010f\ufeb0\001\002\000\012\021\ufeb1" +
    "\022\ufeb1\047\ufeb1\u010f\ufeb1\001\002\000\010\021\ufead\022" +
    "\u023a\u010f\ufead\001\002\000\006\011\051\031\052\001\002" +
    "\000\110\031\u01c7\050\u01da\051\u01e6\052\u01c8\053\u01eb\054" +
    "\u01de\055\u01d0\056\u01cc\057\u01e7\060\u01dd\061\u01dc\062\u01ea" +
    "\063\u01d4\064\u01d8\065\u01d2\066\u01e9\067\u01cf\070\u01d5\071" +
    "\u01e4\072\u01e8\254\u01e1\317\u01c9\u0100\u01e3\u010a\u01e0\u0110\u01df" +
    "\u011d\u01c6\u0126\u01e5\u0129\u01cd\u012c\u01ca\u013f\u01cb\u014b\u01ce\u0155" +
    "\u01db\u0158\u01e2\u0165\u01d1\u0166\u01d9\001\002\000\012\113\u0185" +
    "\155\u0186\302\u0189\352\u0187\001\002\000\012\021\ufeaf\022" +
    "\ufeaf\047\ufeaf\u010f\ufeaf\001\002\000\004\217\u01a9\001\002" +
    "\000\006\032\ufeb6\255\u019c\001\002\000\004\217\u0199\001" +
    "\002\000\012\021\ufe77\022\ufe77\047\ufe77\u010f\ufe77\001\002" +
    "\000\010\032\ufe84\166\u018b\252\u018a\001\002\000\032\021" +
    "\ufe85\022\ufe85\032\ufe85\047\ufe85\113\ufe85\116\ufe85\155\ufe85" +
    "\172\ufe85\210\ufe85\302\ufe85\352\ufe85\u010f\ufe85\001\002\000" +
    "\032\021\ufe86\022\ufe86\032\ufe86\047\ufe86\113\ufe86\116\ufe86" +
    "\155\ufe86\172\ufe86\210\ufe86\302\ufe86\352\ufe86\u010f\ufe86\001" +
    "\002\000\004\032\u018d\001\002\000\006\011\051\031\052" +
    "\001\002\000\012\021\ufe75\022\ufe75\047\ufe75\u010f\ufe75\001" +
    "\002\000\012\022\uff29\047\uff29\303\u0190\u0104\u0191\001\002" +
    "\000\014\021\uff2a\022\uff2a\047\uff2a\110\uff2a\u010f\uff2a\001" +
    "\002\000\014\021\uff2b\022\uff2b\047\uff2b\110\uff2b\u010f\uff2b" +
    "\001\002\000\006\022\u0194\047\ufe70\001\002\000\004\047" +
    "\u0198\001\002\000\006\011\051\031\052\001\002\000\012" +
    "\022\uff29\047\uff29\303\u0190\u0104\u0191\001\002\000\006\022" +
    "\u0194\047\ufe70\001\002\000\004\047\ufe71\001\002\000\012" +
    "\021\ufe72\022\ufe72\047\ufe72\u010f\ufe72\001\002\000\010\032" +
    "\ufe84\166\u018b\252\u018a\001\002\000\004\032\u018d\001\002" +
    "\000\012\021\ufe76\022\ufe76\047\ufe76\u010f\ufe76\001\002\000" +
    "\006\110\u01a1\260\u01a3\001\002\000\004\032\u019e\001\002" +
    "\000\034\011\uff6f\012\uff6f\024\uff6f\031\uff6f\032\uff6f\037" +
    "\uff6f\043\uff6f\255\142\u010b\uff6f\u0138\uff6f\u013d\uff6f\u0148\uff6f" +
    "\u0149\uff6f\001\002\000\004\047\u01a0\001\002\000\012\021" +
    "\ufe73\022\ufe73\047\ufe73\u010f\ufe73\001\002\000\004\121\u01a4" +
    "\001\002\000\032\021\ufeb7\022\ufeb7\032\ufeb7\047\ufeb7\113" +
    "\ufeb7\116\ufeb7\154\ufeb7\155\ufeb7\210\ufeb7\302\ufeb7\352\ufeb7" +
    "\u010f\ufeb7\001\002\000\032\021\ufeb4\022\ufeb4\032\ufeb4\047" +
    "\ufeb4\113\ufeb4\116\ufeb4\154\ufeb4\155\ufeb4\210\ufeb4\302\ufeb4" +
    "\352\ufeb4\u010f\ufeb4\001\002\000\034\021\ufeb2\022\ufeb2\032" +
    "\ufeb2\047\ufeb2\113\ufeb2\116\ufeb2\154\ufeb2\155\ufeb2\210\ufeb2" +
    "\255\u01a5\302\ufeb2\352\ufeb2\u010f\ufeb2\001\002\000\034\021" +
    "\ufe91\022\ufe91\032\ufe91\047\ufe91\113\ufe91\116\ufe91\154\ufe91" +
    "\155\ufe91\210\ufe91\260\u01a8\302\ufe91\352\ufe91\u010f\ufe91\001" +
    "\002\000\032\021\ufeb5\022\ufeb5\032\ufeb5\047\ufeb5\113\ufeb5" +
    "\116\ufeb5\154\ufeb5\155\ufeb5\210\ufeb5\302\ufeb5\352\ufeb5\u010f" +
    "\ufeb5\001\002\000\032\021\ufeb3\022\ufeb3\032\ufeb3\047\ufeb3" +
    "\113\ufeb3\116\ufeb3\154\ufeb3\155\ufeb3\210\ufeb3\302\ufeb3\352" +
    "\ufeb3\u010f\ufeb3\001\002\000\032\021\ufe92\022\ufe92\032\ufe92" +
    "\047\ufe92\113\ufe92\116\ufe92\154\ufe92\155\ufe92\210\ufe92\302" +
    "\ufe92\352\ufe92\u010f\ufe92\001\002\000\004\032\u01aa\001\002" +
    "\000\006\011\051\031\052\001\002\000\004\116\u01ac\001" +
    "\002\000\006\011\051\031\052\001\002\000\020\021\ufe80" +
    "\022\ufe80\032\u01ae\047\ufe80\255\ufe80\u010f\ufe80\u016b\ufe80\001" +
    "\002\000\006\011\051\031\052\001\002\000\016\021\ufe7e" +
    "\022\ufe7e\047\ufe7e\255\ufe7e\u010f\ufe7e\u016b\u01b0\001\002\000" +
    "\006\276\u01b4\310\u01b5\001\002\000\014\021\ufeb6\022\ufeb6" +
    "\047\ufeb6\255\u019c\u010f\ufeb6\001\002\000\012\021\ufe74\022" +
    "\ufe74\047\ufe74\u010f\ufe74\001\002\000\032\021\ufe7e\022\ufe7e" +
    "\047\ufe7e\113\ufe7e\116\ufe7e\155\ufe7e\210\ufe7e\255\ufe7e\302" +
    "\ufe7e\352\ufe7e\u010f\ufe7e\u016b\u01b0\001\002\000\006\147\u01b8" +
    "\212\u01b7\001\002\000\006\147\u01b8\212\u01b7\001\002\000" +
    "\032\021\ufe7c\022\ufe7c\047\ufe7c\113\ufe7c\116\ufe7c\155\ufe7c" +
    "\210\ufe7c\255\ufe7c\302\ufe7c\352\ufe7c\u010f\ufe7c\u016b\ufe7c\001" +
    "\002\000\006\260\u01bb\273\u01b9\001\002\000\032\021\ufe79" +
    "\022\ufe79\047\ufe79\113\ufe79\116\ufe79\155\ufe79\210\ufe79\255" +
    "\ufe79\302\ufe79\352\ufe79\u010f\ufe79\u016b\ufe79\001\002\000\032" +
    "\021\ufe7a\022\ufe7a\047\ufe7a\113\ufe7a\116\ufe7a\155\ufe7a\210" +
    "\ufe7a\255\ufe7a\302\ufe7a\352\ufe7a\u010f\ufe7a\u016b\ufe7a\001\002" +
    "\000\032\021\ufe78\022\ufe78\047\ufe78\113\ufe78\116\ufe78\155" +
    "\ufe78\210\ufe78\255\ufe78\302\ufe78\352\ufe78\u010f\ufe78\u016b\ufe78" +
    "\001\002\000\032\021\ufe7b\022\ufe7b\047\ufe7b\113\ufe7b\116" +
    "\ufe7b\155\ufe7b\210\ufe7b\255\ufe7b\302\ufe7b\352\ufe7b\u010f\ufe7b" +
    "\u016b\ufe7b\001\002\000\032\021\ufe7d\022\ufe7d\047\ufe7d\113" +
    "\ufe7d\116\ufe7d\155\ufe7d\210\ufe7d\255\ufe7d\302\ufe7d\352\ufe7d" +
    "\u010f\ufe7d\u016b\ufe7d\001\002\000\030\021\ufe7f\022\ufe7f\047" +
    "\ufe7f\113\ufe7f\116\ufe7f\155\ufe7f\210\ufe7f\255\ufe7f\302\ufe7f" +
    "\352\ufe7f\u010f\ufe7f\001\002\000\004\047\u01bf\001\002\000" +
    "\032\021\ufe81\022\ufe81\047\ufe81\113\ufe81\116\ufe81\155\ufe81" +
    "\210\ufe81\255\ufe81\302\ufe81\352\ufe81\u010f\ufe81\u016b\ufe81\001" +
    "\002\000\006\022\u01c2\047\ufe6d\001\002\000\004\047\u01c5" +
    "\001\002\000\006\011\051\031\052\001\002\000\006\022" +
    "\u01c2\047\ufe6d\001\002\000\004\047\ufe6e\001\002\000\004" +
    "\116\ufe6f\001\002\000\066\004\uffcd\021\uffcd\022\uffcd\032" +
    "\uffcd\046\uffcd\047\uffcd\110\uffcd\112\uffcd\113\uffcd\116\uffcd" +
    "\125\uffcd\153\uffcd\154\uffcd\155\uffcd\174\uffcd\210\uffcd\255" +
    "\uffcd\260\uffcd\273\uffcd\302\uffcd\350\uffcd\352\uffcd\u010f\uffcd" +
    "\u0172\uffcd\u0175\uffcd\u0176\uffcd\001\002\000\106\050\u01da\051" +
    "\u01e6\052\u01c8\053\u01eb\054\u01de\055\u01d0\056\u01cc\057\u01e7" +
    "\060\u01dd\061\u01dc\062\u01ea\063\u01d4\064\u01d8\065\u01d2\066" +
    "\u01e9\067\u01cf\070\u01d5\071\u01e4\072\u01e8\254\u01e1\317\u01c9" +
    "\u0100\u01e3\u010a\u01e0\u0110\u01df\u011d\u01c6\u0126\u01e5\u0129\u01cd\u012c" +
    "\u01ca\u013f\u01cb\u014b\u01ce\u0155\u01db\u0158\u01e2\u0165\u01d1\u0166\u01d9" +
    "\001\002\000\066\004\uffc2\021\uffc2\022\uffc2\032\uffc2\046" +
    "\uffc2\047\uffc2\110\uffc2\112\uffc2\113\uffc2\116\uffc2\125\uffc2" +
    "\153\uffc2\154\uffc2\155\uffc2\174\uffc2\210\uffc2\255\uffc2\260" +
    "\uffc2\273\uffc2\302\uffc2\350\uffc2\352\uffc2\u010f\uffc2\u0172\uffc2" +
    "\u0175\uffc2\u0176\uffc2\001\002\000\066\004\uffce\021\uffce\022" +
    "\uffce\032\uffce\046\uffce\047\uffce\110\uffce\112\uffce\113\uffce" +
    "\116\uffce\125\uffce\153\uffce\154\uffce\155\uffce\174\uffce\210" +
    "\uffce\255\uffce\260\uffce\273\uffce\302\uffce\350\uffce\352\uffce" +
    "\u010f\uffce\u0172\uffce\u0175\uffce\u0176\uffce\001\002\000\066\004" +
    "\uffd2\021\uffd2\022\uffd2\032\uffd2\046\uffd2\047\uffd2\110\uffd2" +
    "\112\uffd2\113\uffd2\116\uffd2\125\uffd2\153\uffd2\154\uffd2\155" +
    "\uffd2\174\uffd2\210\uffd2\255\uffd2\260\uffd2\273\uffd2\302\uffd2" +
    "\350\uffd2\352\uffd2\u010f\uffd2\u0172\uffd2\u0175\uffd2\u0176\uffd2\001" +
    "\002\000\066\004\uffc9\021\uffc9\022\uffc9\032\uffc9\046\uffc9" +
    "\047\uffc9\110\uffc9\112\uffc9\113\uffc9\116\uffc9\125\uffc9\153" +
    "\uffc9\154\uffc9\155\uffc9\174\uffc9\210\uffc9\255\uffc9\260\uffc9" +
    "\273\uffc9\302\uffc9\350\uffc9\352\uffc9\u010f\uffc9\u0172\uffc9\u0175" +
    "\uffc9\u0176\uffc9\001\002\000\066\004\uffbe\021\uffbe\022\uffbe" +
    "\032\uffbe\046\uffbe\047\uffbe\110\uffbe\112\uffbe\113\uffbe\116" +
    "\uffbe\125\uffbe\153\uffbe\154\uffbe\155\uffbe\174\uffbe\210\uffbe" +
    "\255\uffbe\260\uffbe\273\uffbe\302\uffbe\350\uffbe\352\uffbe\u010f" +
    "\uffbe\u0172\uffbe\u0175\uffbe\u0176\uffbe\001\002\000\066\004\uffc8" +
    "\021\uffc8\022\uffc8\032\uffc8\046\uffc8\047\uffc8\110\uffc8\112" +
    "\uffc8\113\uffc8\116\uffc8\125\uffc8\153\uffc8\154\uffc8\155\uffc8" +
    "\174\uffc8\210\uffc8\255\uffc8\260\uffc8\273\uffc8\302\uffc8\350" +
    "\uffc8\352\uffc8\u010f\uffc8\u0172\uffc8\u0175\uffc8\u0176\uffc8\001\002" +
    "\000\066\004\uffd0\021\uffd0\022\uffd0\032\uffd0\046\uffd0\047" +
    "\uffd0\110\uffd0\112\uffd0\113\uffd0\116\uffd0\125\uffd0\153\uffd0" +
    "\154\uffd0\155\uffd0\174\uffd0\210\uffd0\255\uffd0\260\uffd0\273" +
    "\uffd0\302\uffd0\350\uffd0\352\uffd0\u010f\uffd0\u0172\uffd0\u0175\uffd0" +
    "\u0176\uffd0\001\002\000\066\004\uffb5\021\uffb5\022\uffb5\032" +
    "\uffb5\046\uffb5\047\uffb5\110\uffb5\112\uffb5\113\uffb5\116\uffb5" +
    "\125\uffb5\153\uffb5\154\uffb5\155\uffb5\174\uffb5\210\uffb5\255" +
    "\uffb5\260\uffb5\273\uffb5\302\uffb5\350\uffb5\352\uffb5\u010f\uffb5" +
    "\u0172\uffb5\u0175\uffb5\u0176\uffb5\001\002\000\066\004\uffbf\021" +
    "\uffbf\022\uffbf\032\uffbf\046\uffbf\047\uffbf\110\uffbf\112\uffbf" +
    "\113\uffbf\116\uffbf\125\uffbf\153\uffbf\154\uffbf\155\uffbf\174" +
    "\uffbf\210\uffbf\255\uffbf\260\uffbf\273\uffbf\302\uffbf\350\uffbf" +
    "\352\uffbf\u010f\uffbf\u0172\uffbf\u0175\uffbf\u0176\uffbf\001\002\000" +
    "\066\004\uffc5\021\uffc5\022\uffc5\032\uffc5\046\uffc5\047\uffc5" +
    "\110\uffc5\112\uffc5\113\uffc5\116\uffc5\125\uffc5\153\uffc5\154" +
    "\uffc5\155\uffc5\174\uffc5\210\uffc5\255\uffc5\260\uffc5\273\uffc5" +
    "\302\uffc5\350\uffc5\352\uffc5\u010f\uffc5\u0172\uffc5\u0175\uffc5\u0176" +
    "\uffc5\001\002\000\066\004\uffb7\021\uffb7\022\uffb7\032\uffb7" +
    "\046\uffb7\047\uffb7\110\uffb7\112\uffb7\113\uffb7\116\uffb7\125" +
    "\uffb7\153\uffb7\154\uffb7\155\uffb7\174\uffb7\210\uffb7\255\uffb7" +
    "\260\uffb7\273\uffb7\302\uffb7\350\uffb7\352\uffb7\u010f\uffb7\u0172" +
    "\uffb7\u0175\uffb7\u0176\uffb7\001\002\000\060\004\uffb0\021\uffb0" +
    "\022\uffb0\032\u0230\047\uffb0\110\uffb0\112\uffb0\113\uffb0\116" +
    "\uffb0\153\uffb0\154\uffb0\155\uffb0\174\uffb0\210\uffb0\255\uffb0" +
    "\260\uffb0\273\uffb0\302\uffb0\350\uffb0\352\uffb0\u010f\uffb0\u0172" +
    "\uffb0\u0175\uffb0\001\002\000\066\004\uffb9\021\uffb9\022\uffb9" +
    "\032\uffb9\046\uffb9\047\uffb9\110\uffb9\112\uffb9\113\uffb9\116" +
    "\uffb9\125\uffb9\153\uffb9\154\uffb9\155\uffb9\174\uffb9\210\uffb9" +
    "\255\uffb9\260\uffb9\273\uffb9\302\uffb9\350\uffb9\352\uffb9\u010f" +
    "\uffb9\u0172\uffb9\u0175\uffb9\u0176\uffb9\001\002\000\066\004\uffb4" +
    "\021\uffb4\022\uffb4\032\uffb4\046\uffb4\047\uffb4\110\uffb4\112" +
    "\uffb4\113\uffb4\116\uffb4\125\uffb4\153\uffb4\154\uffb4\155\uffb4" +
    "\174\uffb4\210\uffb4\255\uffb4\260\uffb4\273\uffb4\302\uffb4\350" +
    "\uffb4\352\uffb4\u010f\uffb4\u0172\uffb4\u0175\uffb4\u0176\uffb4\001\002" +
    "\000\060\004\uffd5\021\uffd5\022\uffd5\032\uffd5\047\uffd5\110" +
    "\uffd5\112\uffd5\113\uffd5\116\uffd5\153\uffd5\154\uffd5\155\uffd5" +
    "\174\uffd5\210\uffd5\255\uffd5\260\uffd5\273\uffd5\302\uffd5\350" +
    "\uffd5\352\uffd5\u010f\uffd5\u0172\uffd5\u0175\uffd5\001\002\000\044" +
    "\021\ufe9b\022\ufe9b\047\ufe9b\110\ufe9b\113\ufe9b\116\ufe9b\153" +
    "\ufe9b\154\ufe9b\155\ufe9b\174\u01ec\210\ufe9b\255\ufe9b\260\ufe9b" +
    "\273\ufe9b\302\ufe9b\352\ufe9b\u010f\ufe9b\001\002\000\066\004" +
    "\uffb8\021\uffb8\022\uffb8\032\uffb8\046\uffb8\047\uffb8\110\uffb8" +
    "\112\uffb8\113\uffb8\116\uffb8\125\uffb8\153\uffb8\154\uffb8\155" +
    "\uffb8\174\uffb8\210\uffb8\255\uffb8\260\uffb8\273\uffb8\302\uffb8" +
    "\350\uffb8\352\uffb8\u010f\uffb8\u0172\uffb8\u0175\uffb8\u0176\uffb8\001" +
    "\002\000\066\004\uffd3\021\uffd3\022\uffd3\032\uffd3\046\uffd3" +
    "\047\uffd3\110\uffd3\112\uffd3\113\uffd3\116\uffd3\125\uffd3\153" +
    "\uffd3\154\uffd3\155\uffd3\174\uffd3\210\uffd3\255\uffd3\260\uffd3" +
    "\273\uffd3\302\uffd3\350\uffd3\352\uffd3\u010f\uffd3\u0172\uffd3\u0175" +
    "\uffd3\u0176\uffd3\001\002\000\066\004\uffc4\021\uffc4\022\uffc4" +
    "\032\uffc4\046\uffc4\047\uffc4\110\uffc4\112\uffc4\113\uffc4\116" +
    "\uffc4\125\uffc4\153\uffc4\154\uffc4\155\uffc4\174\uffc4\210\uffc4" +
    "\255\uffc4\260\uffc4\273\uffc4\302\uffc4\350\uffc4\352\uffc4\u010f" +
    "\uffc4\u0172\uffc4\u0175\uffc4\u0176\uffc4\001\002\000\066\004\uffc7" +
    "\021\uffc7\022\uffc7\032\uffc7\046\uffc7\047\uffc7\110\uffc7\112" +
    "\uffc7\113\uffc7\116\uffc7\125\uffc7\153\uffc7\154\uffc7\155\uffc7" +
    "\174\uffc7\210\uffc7\255\uffc7\260\uffc7\273\uffc7\302\uffc7\350" +
    "\uffc7\352\uffc7\u010f\uffc7\u0172\uffc7\u0175\uffc7\u0176\uffc7\001\002" +
    "\000\066\004\uffbb\021\uffbb\022\uffbb\032\uffbb\046\uffbb\047" +
    "\uffbb\110\uffbb\112\uffbb\113\uffbb\116\uffbb\125\uffbb\153\uffbb" +
    "\154\uffbb\155\uffbb\174\uffbb\210\uffbb\255\uffbb\260\uffbb\273" +
    "\uffbb\302\uffbb\350\uffbb\352\uffbb\u010f\uffbb\u0172\uffbb\u0175\uffbb" +
    "\u0176\uffbb\001\002\000\066\004\uffbc\021\uffbc\022\uffbc\032" +
    "\uffbc\046\uffbc\047\uffbc\110\uffbc\112\uffbc\113\uffbc\116\uffbc" +
    "\125\uffbc\153\uffbc\154\uffbc\155\uffbc\174\uffbc\210\uffbc\255" +
    "\uffbc\260\uffbc\273\uffbc\302\uffbc\350\uffbc\352\uffbc\u010f\uffbc" +
    "\u0172\uffbc\u0175\uffbc\u0176\uffbc\001\002\000\066\004\uffc0\021" +
    "\uffc0\022\uffc0\032\uffc0\046\uffc0\047\uffc0\110\uffc0\112\uffc0" +
    "\113\uffc0\116\uffc0\125\uffc0\153\uffc0\154\uffc0\155\uffc0\174" +
    "\uffc0\210\uffc0\255\uffc0\260\uffc0\273\uffc0\302\uffc0\350\uffc0" +
    "\352\uffc0\u010f\uffc0\u0172\uffc0\u0175\uffc0\u0176\uffc0\001\002\000" +
    "\066\004\uffcf\021\uffcf\022\uffcf\032\uffcf\046\uffcf\047\uffcf" +
    "\110\uffcf\112\uffcf\113\uffcf\116\uffcf\125\uffcf\153\uffcf\154" +
    "\uffcf\155\uffcf\174\uffcf\210\uffcf\255\uffcf\260\uffcf\273\uffcf" +
    "\302\uffcf\350\uffcf\352\uffcf\u010f\uffcf\u0172\uffcf\u0175\uffcf\u0176" +
    "\uffcf\001\002\000\066\004\uffca\021\uffca\022\uffca\032\uffca" +
    "\046\uffca\047\uffca\110\uffca\112\uffca\113\uffca\116\uffca\125" +
    "\uffca\153\uffca\154\uffca\155\uffca\174\uffca\210\uffca\255\uffca" +
    "\260\uffca\273\uffca\302\uffca\350\uffca\352\uffca\u010f\uffca\u0172" +
    "\uffca\u0175\uffca\u0176\uffca\001\002\000\060\021\uffcc\022\uffcc" +
    "\032\uffcc\046\uffcc\047\uffcc\110\uffcc\112\uffcc\113\uffcc\116" +
    "\uffcc\125\uffcc\153\uffcc\154\uffcc\155\uffcc\174\uffcc\210\uffcc" +
    "\255\uffcc\260\uffcc\273\uffcc\302\uffcc\350\uffcc\352\uffcc\u010f" +
    "\uffcc\u0176\uffcc\001\002\000\066\004\uffcb\021\uffcb\022\uffcb" +
    "\032\uffcb\046\uffcb\047\uffcb\110\uffcb\112\uffcb\113\uffcb\116" +
    "\uffcb\125\uffcb\153\uffcb\154\uffcb\155\uffcb\174\uffcb\210\uffcb" +
    "\255\uffcb\260\uffcb\273\uffcb\302\uffcb\350\uffcb\352\uffcb\u010f" +
    "\uffcb\u0172\uffcb\u0175\uffcb\u0176\uffcb\001\002\000\066\004\uffd1" +
    "\021\uffd1\022\uffd1\032\uffd1\046\uffd1\047\uffd1\110\uffd1\112" +
    "\uffd1\113\uffd1\116\uffd1\125\uffd1\153\uffd1\154\uffd1\155\uffd1" +
    "\174\uffd1\210\uffd1\255\uffd1\260\uffd1\273\uffd1\302\uffd1\350" +
    "\uffd1\352\uffd1\u010f\uffd1\u0172\uffd1\u0175\uffd1\u0176\uffd1\001\002" +
    "\000\066\004\uffb3\021\uffb3\022\uffb3\032\uffb3\046\uffb3\047" +
    "\uffb3\110\uffb3\112\uffb3\113\uffb3\116\uffb3\125\uffb3\153\uffb3" +
    "\154\uffb3\155\uffb3\174\uffb3\210\uffb3\255\uffb3\260\uffb3\273" +
    "\uffb3\302\uffb3\350\uffb3\352\uffb3\u010f\uffb3\u0172\uffb3\u0175\uffb3" +
    "\u0176\uffb3\001\002\000\066\004\uffc6\021\uffc6\022\uffc6\032" +
    "\uffc6\046\uffc6\047\uffc6\110\uffc6\112\uffc6\113\uffc6\116\uffc6" +
    "\125\uffc6\153\uffc6\154\uffc6\155\uffc6\174\uffc6\210\uffc6\255" +
    "\uffc6\260\uffc6\273\uffc6\302\uffc6\350\uffc6\352\uffc6\u010f\uffc6" +
    "\u0172\uffc6\u0175\uffc6\u0176\uffc6\001\002\000\066\004\uffc3\021" +
    "\uffc3\022\uffc3\032\uffc3\046\uffc3\047\uffc3\110\uffc3\112\uffc3" +
    "\113\uffc3\116\uffc3\125\uffc3\153\uffc3\154\uffc3\155\uffc3\174" +
    "\uffc3\210\uffc3\255\uffc3\260\uffc3\273\uffc3\302\uffc3\350\uffc3" +
    "\352\uffc3\u010f\uffc3\u0172\uffc3\u0175\uffc3\u0176\uffc3\001\002\000" +
    "\066\004\uffbd\021\uffbd\022\uffbd\032\uffbd\046\uffbd\047\uffbd" +
    "\110\uffbd\112\uffbd\113\uffbd\116\uffbd\125\uffbd\153\uffbd\154" +
    "\uffbd\155\uffbd\174\uffbd\210\uffbd\255\uffbd\260\uffbd\273\uffbd" +
    "\302\uffbd\350\uffbd\352\uffbd\u010f\uffbd\u0172\uffbd\u0175\uffbd\u0176" +
    "\uffbd\001\002\000\066\004\uffb2\021\uffb2\022\uffb2\032\uffb2" +
    "\046\uffb2\047\uffb2\110\uffb2\112\uffb2\113\uffb2\116\uffb2\125" +
    "\uffb2\153\uffb2\154\uffb2\155\uffb2\174\uffb2\210\uffb2\255\uffb2" +
    "\260\uffb2\273\uffb2\302\uffb2\350\uffb2\352\uffb2\u010f\uffb2\u0172" +
    "\uffb2\u0175\uffb2\u0176\uffb2\001\002\000\066\004\uffb6\021\uffb6" +
    "\022\uffb6\032\uffb6\046\uffb6\047\uffb6\110\uffb6\112\uffb6\113" +
    "\uffb6\116\uffb6\125\uffb6\153\uffb6\154\uffb6\155\uffb6\174\uffb6" +
    "\210\uffb6\255\uffb6\260\uffb6\273\uffb6\302\uffb6\350\uffb6\352" +
    "\uffb6\u010f\uffb6\u0172\uffb6\u0175\uffb6\u0176\uffb6\001\002\000\066" +
    "\004\uffba\021\uffba\022\uffba\032\uffba\046\uffba\047\uffba\110" +
    "\uffba\112\uffba\113\uffba\116\uffba\125\uffba\153\uffba\154\uffba" +
    "\155\uffba\174\uffba\210\uffba\255\uffba\260\uffba\273\uffba\302" +
    "\uffba\350\uffba\352\uffba\u010f\uffba\u0172\uffba\u0175\uffba\u0176\uffba" +
    "\001\002\000\066\004\uffc1\021\uffc1\022\uffc1\032\uffc1\046" +
    "\uffc1\047\uffc1\110\uffc1\112\uffc1\113\uffc1\116\uffc1\125\uffc1" +
    "\153\uffc1\154\uffc1\155\uffc1\174\uffc1\210\uffc1\255\uffc1\260" +
    "\uffc1\273\uffc1\302\uffc1\350\uffc1\352\uffc1\u010f\uffc1\u0172\uffc1" +
    "\u0175\uffc1\u0176\uffc1\001\002\000\006\011\051\031\052\001" +
    "\002\000\042\021\ufea9\022\ufea9\047\ufea9\110\ufea2\113\u01fb" +
    "\116\ufe82\153\u01ee\154\u01f5\155\u01f9\210\u01f4\255\u01f8\260" +
    "\ufea2\273\u01f3\302\u01f2\352\u01fa\u010f\ufea9\001\002\000\034" +
    "\021\ufe93\022\ufe93\032\u021a\047\ufe93\113\ufe93\116\ufe93\154" +
    "\ufe93\155\ufe93\210\ufe93\255\ufe93\302\ufe93\352\ufe93\u010f\ufe93" +
    "\001\002\000\012\021\ufeac\022\ufeac\047\ufeac\u010f\ufeac\001" +
    "\002\000\012\021\ufeaa\022\ufeaa\047\ufeaa\u010f\ufeaa\001\002" +
    "\000\006\110\u0221\260\u0222\001\002\000\032\021\ufe84\022" +
    "\ufe84\047\ufe84\113\ufe84\116\ufe84\155\ufe84\166\u018b\210\ufe84" +
    "\252\u018a\302\ufe84\352\ufe84\u010f\ufe84\001\002\000\012\012" +
    "\u0213\037\u020f\043\u0212\260\u0211\001\002\000\006\011\051" +
    "\031\052\001\002\000\026\021\ufe8d\022\ufe8d\047\ufe8d\113" +
    "\ufe8b\116\ufe8b\155\ufe8b\210\u0181\302\ufe8b\352\ufe8b\u010f\ufe8d" +
    "\001\002\000\004\116\u0207\001\002\000\026\021\ufe8d\022" +
    "\ufe8d\047\ufe8d\113\ufe8b\116\ufe8b\155\ufe8b\210\u0181\302\ufe8b" +
    "\352\ufe8b\u010f\ufe8d\001\002\000\006\110\ufea3\260\ufea3\001" +
    "\002\000\006\032\ufeb6\255\u019c\001\002\000\004\217\u01fd" +
    "\001\002\000\004\217\u01fc\001\002\000\004\116\ufe83\001" +
    "\002\000\032\021\ufe84\022\ufe84\047\ufe84\113\ufe84\116\ufe84" +
    "\155\ufe84\166\u018b\210\ufe84\252\u018a\302\ufe84\352\ufe84\u010f" +
    "\ufe84\001\002\000\026\021\ufe8a\022\ufe8a\047\ufe8a\113\ufe8a" +
    "\116\ufe8a\155\ufe8a\210\ufe8a\302\ufe8a\352\ufe8a\u010f\ufe8a\001" +
    "\002\000\004\032\u0200\001\002\000\034\011\uff6f\012\uff6f" +
    "\024\uff6f\031\uff6f\032\uff6f\037\uff6f\043\uff6f\255\142\u010b" +
    "\uff6f\u0138\uff6f\u013d\uff6f\u0148\uff6f\u0149\uff6f\001\002\000\004" +
    "\047\u0202\001\002\000\026\021\ufe87\022\ufe87\047\ufe87\113" +
    "\ufe87\116\ufe87\155\ufe87\210\ufe87\302\ufe87\352\ufe87\u010f\ufe87" +
    "\001\002\000\012\021\ufea4\022\ufea4\047\ufea4\u010f\ufea4\001" +
    "\002\000\014\113\u01fb\116\ufe82\155\u01f9\302\u01f2\352\u01fa" +
    "\001\002\000\026\021\ufe8d\022\ufe8d\047\ufe8d\113\ufe8b\116" +
    "\ufe8b\155\ufe8b\210\u0181\302\ufe8b\352\ufe8b\u010f\ufe8d\001\002" +
    "\000\012\021\ufe8e\022\ufe8e\047\ufe8e\u010f\ufe8e\001\002\000" +
    "\006\011\051\031\052\001\002\000\034\021\ufe80\022\ufe80" +
    "\032\u01ae\047\ufe80\113\ufe80\116\ufe80\155\ufe80\210\ufe80\255" +
    "\ufe80\302\ufe80\352\ufe80\u010f\ufe80\u016b\ufe80\001\002\000\032" +
    "\021\ufe7e\022\ufe7e\047\ufe7e\113\ufe7e\116\ufe7e\155\ufe7e\210" +
    "\ufe7e\255\ufe7e\302\ufe7e\352\ufe7e\u010f\ufe7e\u016b\u01b0\001\002" +
    "\000\030\021\ufeb6\022\ufeb6\047\ufeb6\113\ufeb6\116\ufeb6\155" +
    "\ufeb6\210\ufeb6\255\u019c\302\ufeb6\352\ufeb6\u010f\ufeb6\001\002" +
    "\000\026\021\ufe88\022\ufe88\047\ufe88\113\ufe88\116\ufe88\155" +
    "\ufe88\210\ufe88\302\ufe88\352\ufe88\u010f\ufe88\001\002\000\012" +
    "\021\ufea5\022\ufea5\047\ufea5\u010f\ufea5\001\002\000\030\110" +
    "\ufea2\113\u01fb\116\ufe82\153\u01ee\154\u01f5\155\u01f9\255\u01f8" +
    "\260\ufea2\273\u01f3\302\u01f2\352\u01fa\001\002\000\012\021" +
    "\ufeab\022\ufeab\047\ufeab\u010f\ufeab\001\002\000\034\021\ufe99" +
    "\022\ufe99\047\ufe99\113\ufe99\116\ufe99\153\ufe99\154\ufe99\155" +
    "\ufe99\210\ufe99\255\ufe99\302\ufe99\352\ufe99\u010f\ufe99\001\002" +
    "\000\034\021\ufe95\022\ufe95\047\ufe95\113\ufe95\116\ufe95\153" +
    "\u0214\154\ufe95\155\ufe95\210\ufe95\255\ufe95\302\ufe95\352\ufe95" +
    "\u010f\ufe95\001\002\000\034\021\ufe97\022\ufe97\047\ufe97\113" +
    "\ufe97\116\ufe97\153\ufe97\154\ufe97\155\ufe97\210\ufe97\255\ufe97" +
    "\302\ufe97\352\ufe97\u010f\ufe97\001\002\000\034\021\ufe98\022" +
    "\ufe98\047\ufe98\113\ufe98\116\ufe98\153\ufe98\154\ufe98\155\ufe98" +
    "\210\ufe98\255\ufe98\302\ufe98\352\ufe98\u010f\ufe98\001\002\000" +
    "\034\021\ufe9a\022\ufe9a\047\ufe9a\113\ufe9a\116\ufe9a\153\ufe9a" +
    "\154\ufe9a\155\ufe9a\210\ufe9a\255\ufe9a\302\ufe9a\352\ufe9a\u010f" +
    "\ufe9a\001\002\000\034\021\ufe93\022\ufe93\032\u021a\047\ufe93" +
    "\113\ufe93\116\ufe93\154\ufe93\155\ufe93\210\ufe93\255\ufe93\302" +
    "\ufe93\352\ufe93\u010f\ufe93\001\002\000\032\021\ufeb6\022\ufeb6" +
    "\047\ufeb6\113\ufeb6\116\ufeb6\154\ufeb6\155\ufeb6\210\ufeb6\255" +
    "\u019c\302\ufeb6\352\ufeb6\u010f\ufeb6\001\002\000\030\021\ufe8f" +
    "\022\ufe8f\047\ufe8f\113\ufe8f\116\ufe8f\154\u0217\155\ufe8f\210" +
    "\ufe8f\302\ufe8f\352\ufe8f\u010f\ufe8f\001\002\000\026\021\ufe90" +
    "\022\ufe90\047\ufe90\113\ufe90\116\ufe90\155\ufe90\210\ufe90\302" +
    "\ufe90\352\ufe90\u010f\ufe90\001\002\000\026\021\ufe8d\022\ufe8d" +
    "\047\ufe8d\113\ufe8b\116\ufe8b\155\ufe8b\210\u0181\302\ufe8b\352" +
    "\ufe8b\u010f\ufe8d\001\002\000\012\021\ufea8\022\ufea8\047\ufea8" +
    "\u010f\ufea8\001\002\000\004\012\u021c\001\002\000\032\021" +
    "\ufe96\022\ufe96\047\ufe96\113\ufe96\116\ufe96\154\ufe96\155\ufe96" +
    "\210\ufe96\255\ufe96\302\ufe96\352\ufe96\u010f\ufe96\001\002\000" +
    "\004\022\u021d\001\002\000\004\012\u021e\001\002\000\004" +
    "\047\u021f\001\002\000\032\021\ufe94\022\ufe94\047\ufe94\113" +
    "\ufe94\116\ufe94\154\ufe94\155\ufe94\210\ufe94\255\ufe94\302\ufe94" +
    "\352\ufe94\u010f\ufe94\001\002\000\026\021\ufe89\022\ufe89\047" +
    "\ufe89\113\ufe89\116\ufe89\155\ufe89\210\ufe89\302\ufe89\352\ufe89" +
    "\u010f\ufe89\001\002\000\004\121\u0226\001\002\000\030\021" +
    "\ufea1\022\ufea1\047\ufea1\113\ufea1\116\ufea1\154\ufea1\155\ufea1" +
    "\210\ufea1\302\ufea1\352\ufea1\u010f\ufea1\001\002\000\030\021" +
    "\ufe8f\022\ufe8f\047\ufe8f\113\ufe8f\116\ufe8f\154\u0217\155\ufe8f" +
    "\210\ufe8f\302\ufe8f\352\ufe8f\u010f\ufe8f\001\002\000\026\021" +
    "\ufe8d\022\ufe8d\047\ufe8d\113\ufe8b\116\ufe8b\155\ufe8b\210\u0181" +
    "\302\ufe8b\352\ufe8b\u010f\ufe8d\001\002\000\012\021\ufea6\022" +
    "\ufea6\047\ufea6\u010f\ufea6\001\002\000\034\021\ufe9d\022\ufe9d" +
    "\047\ufe9d\113\ufe9d\116\ufe9d\154\ufe9d\155\ufe9d\210\ufe9d\255" +
    "\u0228\260\u0229\302\ufe9d\352\ufe9d\u010f\ufe9d\001\002\000\030" +
    "\021\ufea0\022\ufea0\047\ufea0\113\ufea0\116\ufea0\154\ufea0\155" +
    "\ufea0\210\ufea0\302\ufea0\352\ufea0\u010f\ufea0\001\002\000\004" +
    "\260\u022a\001\002\000\030\021\ufe9e\022\ufe9e\047\ufe9e\113" +
    "\ufe9e\116\ufe9e\154\ufe9e\155\ufe9e\210\ufe9e\302\ufe9e\352\ufe9e" +
    "\u010f\ufe9e\001\002\000\030\021\ufe9f\022\ufe9f\047\ufe9f\113" +
    "\ufe9f\116\ufe9f\154\ufe9f\155\ufe9f\210\ufe9f\302\ufe9f\352\ufe9f" +
    "\u010f\ufe9f\001\002\000\032\021\ufeb6\022\ufeb6\047\ufeb6\113" +
    "\ufeb6\116\ufeb6\154\ufeb6\155\ufeb6\210\ufeb6\255\u019c\302\ufeb6" +
    "\352\ufeb6\u010f\ufeb6\001\002\000\030\021\ufe8f\022\ufe8f\047" +
    "\ufe8f\113\ufe8f\116\ufe8f\154\u0217\155\ufe8f\210\ufe8f\302\ufe8f" +
    "\352\ufe8f\u010f\ufe8f\001\002\000\026\021\ufe8d\022\ufe8d\047" +
    "\ufe8d\113\ufe8b\116\ufe8b\155\ufe8b\210\u0181\302\ufe8b\352\ufe8b" +
    "\u010f\ufe8d\001\002\000\012\021\ufea7\022\ufea7\047\ufea7\u010f" +
    "\ufea7\001\002\000\042\021\ufe9c\022\ufe9c\047\ufe9c\110\ufe9c" +
    "\113\ufe9c\116\ufe9c\153\ufe9c\154\ufe9c\155\ufe9c\210\ufe9c\255" +
    "\ufe9c\260\ufe9c\273\ufe9c\302\ufe9c\352\ufe9c\u010f\ufe9c\001\002" +
    "\000\004\012\u0232\001\002\000\056\004\uffd6\021\uffd6\022" +
    "\uffd6\047\uffd6\110\uffd6\112\uffd6\113\uffd6\116\uffd6\153\uffd6" +
    "\154\uffd6\155\uffd6\174\uffd6\210\uffd6\255\uffd6\260\uffd6\273" +
    "\uffd6\302\uffd6\350\uffd6\352\uffd6\u010f\uffd6\u0172\uffd6\u0175\uffd6" +
    "\001\002\000\006\022\u0233\047\uffae\001\002\000\004\012" +
    "\u0236\001\002\000\004\047\u0235\001\002\000\056\004\uffb1" +
    "\021\uffb1\022\uffb1\047\uffb1\110\uffb1\112\uffb1\113\uffb1\116" +
    "\uffb1\153\uffb1\154\uffb1\155\uffb1\174\uffb1\210\uffb1\255\uffb1" +
    "\260\uffb1\273\uffb1\302\uffb1\350\uffb1\352\uffb1\u010f\uffb1\u0172" +
    "\uffb1\u0175\uffb1\001\002\000\004\047\uffaf\001\002\000\004" +
    "\046\u0238\001\002\000\060\004\uffd4\021\uffd4\022\uffd4\032" +
    "\uffd4\047\uffd4\110\uffd4\112\uffd4\113\uffd4\116\uffd4\153\uffd4" +
    "\154\uffd4\155\uffd4\174\uffd4\210\uffd4\255\uffd4\260\uffd4\273" +
    "\uffd4\302\uffd4\350\uffd4\352\uffd4\u010f\uffd4\u0172\uffd4\u0175\uffd4" +
    "\001\002\000\014\113\ufe8c\116\ufe8c\155\ufe8c\302\ufe8c\352" +
    "\ufe8c\001\002\000\022\011\051\031\052\113\ufe8b\155\ufe8b" +
    "\172\u017d\210\u0181\302\ufe8b\352\ufe8b\001\002\000\006\021" +
    "\ufe59\u010f\ufe59\001\002\000\012\021\ufead\022\u023a\047\ufead" +
    "\u010f\ufead\001\002\000\010\021\ufeae\047\ufeae\u010f\ufeae\001" +
    "\002\000\010\032\ufe84\166\u018b\252\u018a\001\002\000\004" +
    "\032\u018d\001\002\000\012\021\ufe6c\022\ufe6c\047\ufe6c\u010f" +
    "\ufe6c\001\002\000\006\011\051\031\052\001\002\000\114" +
    "\031\u01c7\050\u01da\051\u01e6\052\u01c8\053\u01eb\054\u01de\055" +
    "\u01d0\056\u01cc\057\u01e7\060\u01dd\061\u01dc\062\u01ea\063\u01d4" +
    "\064\u01d8\065\u01d2\066\u01e9\067\u01cf\070\u01d5\071\u01e4\072" +
    "\u01e8\074\u0244\254\u01e1\317\u01c9\322\u0245\u0100\u01e3\u010a\u01e0" +
    "\u0110\u01df\u011d\u01c6\u0126\u01e5\u0129\u01cd\u012c\u01ca\u013f\u01cb\u014b" +
    "\u01ce\u0155\u01db\u0158\u01e2\u0165\u01d1\u0166\u01d9\001\002\000\012" +
    "\021\ufe9b\174\u01ec\260\ufe9b\u010f\ufe9b\001\002\000\006\154" +
    "\ufe53\255\ufe53\001\002\000\006\154\ufe52\255\ufe52\001\002" +
    "\000\006\154\u0249\255\u024a\001\002\000\006\021\ufe57\u010f" +
    "\ufe57\001\002\000\006\021\ufe56\u010f\ufe56\001\002\000\006" +
    "\021\ufe51\u010f\ufe51\001\002\000\004\110\u024c\001\002\000" +
    "\006\021\ufe55\u010f\ufe55\001\002\000\004\121\u024d\001\002" +
    "\000\006\021\ufe50\u010f\ufe50\001\002\000\010\021\ufe91\260" +
    "\u01a8\u010f\ufe91\001\002\000\006\021\ufe54\u010f\ufe54\001\002" +
    "\000\006\021\ufe5f\u010f\ufe5f\001\002\000\006\174\ufe63\212" +
    "\ufe63\001\002\000\006\174\ufe62\212\ufe62\001\002\000\006" +
    "\174\u0254\212\u0256\001\002\000\006\011\051\031\052\001" +
    "\002\000\006\021\ufe64\u010f\ufe64\001\002\000\004\146\u0257" +
    "\001\002\000\004\u0117\u0258\001\002\000\006\021\ufe60\u010f" +
    "\ufe60\001\002\000\006\021\ufe61\u010f\ufe61\001\002\000\006" +
    "\011\051\031\052\001\002\000\006\011\051\031\052\001" +
    "\002\000\004\032\u025d\001\002\000\006\024\146\047\ufdec" +
    "\001\002\000\004\047\ufded\001\002\000\006\022\u029d\047" +
    "\ufde6\001\002\000\110\050\ufde4\051\ufde4\052\ufde4\053\ufde4" +
    "\054\ufde4\055\ufde4\056\ufde4\057\ufde4\060\ufde4\061\ufde4\062" +
    "\ufde4\063\ufde4\064\ufde4\065\ufde4\066\ufde4\067\ufde4\070\ufde4" +
    "\071\ufde4\072\ufde4\112\u026b\254\ufde4\317\ufde4\u0100\ufde4\u010a" +
    "\ufde4\u0110\ufde4\u011d\ufde4\u0126\ufde4\u0129\ufde4\u012c\ufde4\u013f\ufde4" +
    "\u014b\ufde4\u0155\ufde4\u0158\ufde4\u0165\ufde4\u0166\ufde4\001\002\000" +
    "\004\047\u0262\001\002\000\004\u0178\u0263\001\002\000\110" +
    "\050\u01da\051\u01e6\052\u01c8\053\u01eb\054\u01de\055\u01d0\056" +
    "\u01cc\057\u01e7\060\u01dd\061\u01dc\062\u01ea\063\u01d4\064\u01d8" +
    "\065\u01d2\066\u01e9\067\u01cf\070\u01d5\071\u01e4\072\u01e8\234" +
    "\u0267\254\u01e1\317\u01c9\u0100\u01e3\u010a\u01e0\u0110\u01df\u011d\u01c6" +
    "\u0126\u01e5\u0129\u01cd\u012c\u01ca\u013f\u01cb\u014b\u01ce\u0155\u01db\u0158" +
    "\u01e2\u0165\u01d1\u0166\u01d9\001\002\000\006\021\ufdee\u010f\ufdee" +
    "\001\002\000\006\021\ufde0\u010f\ufde0\001\002\000\010\112" +
    "\ufdd4\125\ufdd4\350\u0269\001\002\000\010\112\ufdd4\132\ufdd4" +
    "\350\u0269\001\002\000\006\021\ufde1\u010f\ufde1\001\002\000" +
    "\020\346\004\351\041\u0177\u027b\u0178\u0273\u0179\u0278\u017a\u0277" +
    "\u017b\u0279\001\002\000\006\112\u026b\132\ufde4\001\002\000" +
    "\112\050\ufde5\051\ufde5\052\ufde5\053\ufde5\054\ufde5\055\ufde5" +
    "\056\ufde5\057\ufde5\060\ufde5\061\ufde5\062\ufde5\063\ufde5\064" +
    "\ufde5\065\ufde5\066\ufde5\067\ufde5\070\ufde5\071\ufde5\072\ufde5" +
    "\125\ufde5\132\ufde5\254\ufde5\317\ufde5\u0100\ufde5\u010a\ufde5\u0110" +
    "\ufde5\u011d\ufde5\u0126\ufde5\u0129\ufde5\u012c\ufde5\u013f\ufde5\u014b\ufde5" +
    "\u0155\ufde5\u0158\ufde5\u0165\ufde5\u0166\ufde5\001\002\000\004\132" +
    "\u026d\001\002\000\006\032\u026e\173\010\001\002\000\004" +
    "\173\010\001\002\000\006\021\ufdde\u010f\ufdde\001\002\000" +
    "\006\021\ufddc\u010f\ufddc\001\002\000\004\047\u0272\001\002" +
    "\000\006\021\ufddd\u010f\ufddd\001\002\000\004\260\u028c\001" +
    "\002\000\010\112\ufdd5\125\ufdd5\132\ufdd5\001\002\000\004" +
    "\112\u0286\001\002\000\012\022\u0283\112\ufdcb\125\ufdcb\132" +
    "\ufdcb\001\002\000\004\u016b\u0280\001\002\000\012\022\ufdd1" +
    "\112\ufdd1\125\ufdd1\132\ufdd1\001\002\000\004\004\u027c\001" +
    "\002\000\012\022\ufdce\112\ufdce\125\ufdce\132\ufdce\001\002" +
    "\000\012\022\ufdd2\112\ufdd2\125\ufdd2\132\ufdd2\001\002\000" +
    "\006\271\u027f\u016b\u027d\001\002\000\012\022\ufdca\112\ufdca" +
    "\125\ufdca\132\ufdca\001\002\000\012\022\ufdcd\112\ufdcd\125" +
    "\ufdcd\132\ufdcd\001\002\000\012\022\ufdc9\112\ufdc9\125\ufdc9" +
    "\132\ufdc9\001\002\000\004\260\u0281\001\002\000\004\u0125" +
    "\u0282\001\002\000\012\022\ufdcf\112\ufdcf\125\ufdcf\132\ufdcf" +
    "\001\002\000\020\346\004\351\041\u0177\u027b\u0178\u0273\u0179" +
    "\u0278\u017a\u0277\u017b\u0279\001\002\000\010\112\ufdd3\125\ufdd3" +
    "\132\ufdd3\001\002\000\010\112\ufdcc\125\ufdcc\132\ufdcc\001" +
    "\002\000\014\011\051\031\052\u017c\u0288\u017d\u028b\u017e\u0287" +
    "\001\002\000\014\022\ufe0e\110\ufe0e\112\ufe0e\125\ufe0e\132" +
    "\ufe0e\001\002\000\014\022\ufe10\110\ufe10\112\ufe10\125\ufe10" +
    "\132\ufe10\001\002\000\014\022\ufe0d\110\ufe0d\112\ufe0d\125" +
    "\ufe0d\132\ufe0d\001\002\000\012\022\ufdc8\112\ufdc8\125\ufdc8" +
    "\132\ufdc8\001\002\000\014\022\ufe0f\110\ufe0f\112\ufe0f\125" +
    "\ufe0f\132\ufe0f\001\002\000\004\u016b\u028d\001\002\000\004" +
    "\260\u028e\001\002\000\004\u0125\u028f\001\002\000\012\022" +
    "\ufdd0\112\ufdd0\125\ufdd0\132\ufdd0\001\002\000\006\112\u026b" +
    "\125\ufde4\001\002\000\004\125\u0292\001\002\000\014\003" +
    "\u0294\173\010\200\025\276\035\310\036\001\002\000\004" +
    "\132\u0295\001\002\000\006\021\046\u010f\045\001\002\000" +
    "\034\011\051\012\312\024\146\031\052\032\325\037\315" +
    "\043\321\260\331\u010b\322\u0138\311\u013d\330\u0148\327\u0149" +
    "\324\001\002\000\004\332\u0297\001\002\000\006\021\ufddf" +
    "\u010f\ufddf\001\002\000\106\050\u01da\051\u01e6\052\u01c8\053" +
    "\u01eb\054\u01de\055\u01d0\056\u01cc\057\u01e7\060\u01dd\061\u01dc" +
    "\062\u01ea\063\u01d4\064\u01d8\065\u01d2\066\u01e9\067\u01cf\070" +
    "\u01d5\071\u01e4\072\u01e8\254\u01e1\317\u01c9\u0100\u01e3\u010a\u01e0" +
    "\u0110\u01df\u011d\u01c6\u0126\u01e5\u0129\u01cd\u012c\u01ca\u013f\u01cb\u014b" +
    "\u01ce\u0155\u01db\u0158\u01e2\u0165\u01d1\u0166\u01d9\001\002\000\010" +
    "\022\ufde2\047\ufde2\u0176\u029b\001\002\000\006\022\ufde9\047" +
    "\ufde9\001\002\000\006\022\ufde3\047\ufde3\001\002\000\004" +
    "\047\ufde8\001\002\000\004\024\146\001\002\000\004\047" +
    "\ufde7\001\002\000\014\021\u02a0\024\ufe29\110\ufe29\112\ufe29" +
    "\350\ufe29\001\002\000\004\012\u02d0\001\002\000\012\024" +
    "\146\110\ufe27\112\ufe27\350\ufe27\001\002\000\010\110\ufe19" +
    "\112\ufe19\350\u02b7\001\002\000\112\011\051\031\u02a5\050" +
    "\u01da\051\u01e6\052\u01c8\053\u01eb\054\u01de\055\u01d0\056\u01cc" +
    "\057\u01e7\060\u01dd\061\u01dc\062\u01ea\063\u01d4\064\u01d8\065" +
    "\u01d2\066\u01e9\067\u01cf\070\u01d5\071\u01e4\072\u01e8\254\u02a9" +
    "\317\u01c9\u0100\u01e3\u010a\u01e0\u0110\u01df\u011d\u01c6\u0126\u01e5\u0129" +
    "\u01cd\u012c\u01ca\u013f\u01cb\u014b\u01ce\u0155\u01db\u0158\u01e2\u0165\u01d1" +
    "\u0166\u01d9\001\002\000\010\110\ufe28\112\ufe28\350\ufe28\001" +
    "\002\000\110\011\053\050\u01da\051\u01e6\052\u01c8\053\u01eb" +
    "\054\u01de\055\u01d0\056\u01cc\057\u01e7\060\u01dd\061\u01dc\062" +
    "\u01ea\063\u01d4\064\u01d8\065\u01d2\066\u01e9\067\u01cf\070\u01d5" +
    "\071\u01e4\072\u01e8\254\u01e1\317\u01c9\u0100\u01e3\u010a\u01e0\u0110" +
    "\u01df\u011d\u01c6\u0126\u01e5\u0129\u01cd\u012c\u01ca\u013f\u01cb\u014b\u01ce" +
    "\u0155\u01db\u0158\u01e2\u0165\u01d1\u0166\u01d9\001\002\000\012\022" +
    "\u02b5\110\ufe24\112\ufe24\350\ufe24\001\002\000\020\004\u02b0" +
    "\022\ufe1f\110\ufe1f\112\ufe1f\350\ufe1f\u0172\ufe1f\u0175\ufe1f\001" +
    "\002\000\004\u0176\u02ae\001\002\000\024\004\uffcc\022\uffcc" +
    "\032\uffcc\110\uffcc\112\uffcc\350\uffcc\u0169\u02aa\u0172\uffcc\u0175" +
    "\uffcc\001\002\000\006\u0172\u02ac\u0175\u02ab\001\002\000\012" +
    "\022\ufe1c\110\ufe1c\112\ufe1c\350\ufe1c\001\002\000\012\022" +
    "\ufe1b\110\ufe1b\112\ufe1b\350\ufe1b\001\002\000\012\022\ufe22" +
    "\110\ufe22\112\ufe22\350\ufe22\001\002\000\012\022\ufe21\110" +
    "\ufe21\112\ufe21\350\ufe21\001\002\000\016\022\ufe1d\110\ufe1d" +
    "\112\ufe1d\350\ufe1d\u0172\u02ac\u0175\u02ab\001\002\000\004\273" +
    "\u02b1\001\002\000\016\022\ufe20\110\ufe20\112\ufe20\350\ufe20" +
    "\u0172\ufe20\u0175\ufe20\001\002\000\012\022\ufe23\110\ufe23\112" +
    "\ufe23\350\ufe23\001\002\000\012\022\ufe1e\110\ufe1e\112\ufe1e" +
    "\350\ufe1e\001\002\000\010\110\ufe26\112\ufe26\350\ufe26\001" +
    "\002\000\004\024\146\001\002\000\010\110\ufe25\112\ufe25" +
    "\350\ufe25\001\002\000\012\346\004\351\041\u0177\u02c8\u017f" +
    "\u02ca\001\002\000\006\110\u02ba\112\ufe0b\001\002\000\004" +
    "\112\u02bc\001\002\000\004\121\u02bb\001\002\000\004\112" +
    "\ufe0c\001\002\000\004\125\u02be\001\002\000\006\021\ufe2d" +
    "\u010f\ufe2d\001\002\000\014\003\u0294\173\010\200\025\276" +
    "\035\310\036\001\002\000\016\003\u0294\173\010\200\025" +
    "\276\035\310\036\332\ufe07\001\002\000\004\332\u02c1\001" +
    "\002\000\006\021\ufe0a\u010f\ufe0a\001\002\000\016\003\u0294" +
    "\173\010\200\025\276\035\310\036\332\ufe05\001\002\000" +
    "\004\332\ufe09\001\002\000\004\332\ufe06\001\002\000\004" +
    "\332\ufe08\001\002\000\010\022\u02ce\110\ufe11\112\ufe11\001" +
    "\002\000\006\110\ufe1a\112\ufe1a\001\002\000\010\022\ufe17" +
    "\110\ufe17\112\ufe17\001\002\000\004\112\u02cb\001\002\000" +
    "\010\022\ufe16\110\ufe16\112\ufe16\001\002\000\014\011\051" +
    "\031\052\u017c\u0288\u017d\u028b\u017e\u0287\001\002\000\010\022" +
    "\ufe15\110\ufe15\112\ufe15\001\002\000\006\110\ufe18\112\ufe18" +
    "\001\002\000\012\346\004\351\041\u0177\u02c8\u017f\u02ca\001" +
    "\002\000\006\110\ufe12\112\ufe12\001\002\000\012\024\ufe2a" +
    "\110\ufe2a\112\ufe2a\350\ufe2a\001\002\000\044\002\uffec\003" +
    "\uffec\102\uffec\125\uffec\146\uffec\173\uffec\200\uffec\202\uffec" +
    "\227\uffec\267\uffec\270\uffec\276\uffec\310\uffec\316\uffec\322" +
    "\uffec\346\uffec\351\uffec\001\002\000\050\002\ufff3\003\ufff3" +
    "\102\ufff3\125\ufff3\132\ufff3\146\ufff3\173\ufff3\200\ufff3\202" +
    "\ufff3\227\ufff3\267\ufff3\270\ufff3\276\ufff3\310\ufff3\316\ufff3" +
    "\322\ufff3\332\ufff3\346\ufff3\351\ufff3\001\002\000\010\011" +
    "\uff20\031\uff20\206\u02d5\001\002\000\006\011\051\031\052" +
    "\001\002\000\006\011\uff21\031\uff21\001\002\000\014\021" +
    "\uff1e\032\u0164\273\uff1e\323\uff1e\u010f\uff1e\001\002\000\012" +
    "\021\uff1f\273\uff1f\323\uff1f\u010f\uff1f\001\002\000\012\021" +
    "\uff14\273\u02d9\323\u02da\u010f\uff14\001\002\000\004\323\u02ee" +
    "\001\002\000\004\032\u02dc\001\002\000\006\021\uff22\u010f" +
    "\uff22\001\002\000\012\012\u02e2\037\u02dd\043\u02e1\273\u02de" +
    "\001\002\000\006\022\uff1a\047\uff1a\001\002\000\006\022" +
    "\uff1c\047\uff1c\001\002\000\004\047\u02e7\001\002\000\006" +
    "\022\u02e3\047\uff17\001\002\000\006\022\uff19\047\uff19\001" +
    "\002\000\006\022\uff1b\047\uff1b\001\002\000\012\012\u02e2" +
    "\037\u02dd\043\u02e1\273\u02de\001\002\000\004\047\uff1d\001" +
    "\002\000\006\022\u02e3\047\uff17\001\002\000\004\047\uff18" +
    "\001\002\000\010\021\uff12\022\u02e9\u010f\uff12\001\002\000" +
    "\006\021\uff16\u010f\uff16\001\002\000\004\032\u02ea\001\002" +
    "\000\012\012\u02e2\037\u02dd\043\u02e1\273\u02de\001\002\000" +
    "\004\047\u02ec\001\002\000\010\021\uff12\022\u02e9\u010f\uff12" +
    "\001\002\000\006\021\uff13\u010f\uff13\001\002\000\006\021" +
    "\uff15\u010f\uff15\001\002\000\040\003\033\102\030\125\022" +
    "\162\u02f1\173\010\200\025\227\023\267\013\270\037\276" +
    "\035\310\036\316\u02f6\322\032\346\004\351\041\001\002" +
    "\000\006\021\046\u010f\045\001\002\000\006\256\u0300\261" +
    "\u02fd\001\002\000\042\003\033\102\030\125\022\146\uffff" +
    "\173\010\200\025\202\uffff\227\023\267\013\270\037\276" +
    "\035\310\036\316\034\322\032\346\004\351\041\001\002" +
    "\000\042\003\033\102\030\125\022\146\uffff\173\010\200" +
    "\025\202\uffff\227\023\267\013\270\037\276\035\310\036" +
    "\316\034\322\032\346\004\351\041\001\002\000\006\021" +
    "\046\u010f\045\001\002\000\042\003\033\102\030\125\022" +
    "\146\uffff\173\010\200\025\202\uffff\227\023\267\013\270" +
    "\037\276\035\310\036\316\034\322\032\346\004\351\041" +
    "\001\002\000\006\011\051\031\052\001\002\000\006\146" +
    "\u02fc\202\u02f9\001\002\000\006\021\046\u010f\045\001\002" +
    "\000\014\021\ufe35\256\u0300\261\u02fd\350\ufe35\u010f\ufe35\001" +
    "\002\000\006\021\046\u010f\045\001\002\000\044\002\uffe9" +
    "\003\uffe9\102\uffe9\125\uffe9\146\uffe9\173\uffe9\200\uffe9\202" +
    "\uffe9\227\uffe9\267\uffe9\270\uffe9\276\uffe9\310\uffe9\316\uffe9" +
    "\322\uffe9\346\uffe9\351\uffe9\001\002\000\012\021\ufe2e\256" +
    "\u0300\261\u02fd\u010f\ufe2e\001\002\000\016\011\ufe38\021\ufe38" +
    "\024\ufe38\031\ufe38\350\ufe38\u010f\ufe38\001\002\000\006\021" +
    "\ufe30\u010f\ufe30\001\002\000\014\011\051\021\ufe3a\024\146" +
    "\031\052\u010f\ufe3a\001\002\000\016\011\ufe39\021\ufe39\024" +
    "\ufe39\031\ufe39\350\ufe39\u010f\ufe39\001\002\000\010\021\ufe3c" +
    "\350\ufe3c\u010f\ufe3c\001\002\000\010\021\ufe3b\350\ufe3b\u010f" +
    "\ufe3b\001\002\000\006\021\ufe2f\u010f\ufe2f\001\002\000\044" +
    "\002\ufe41\003\ufe41\102\ufe41\125\ufe41\146\ufe41\173\ufe41\200" +
    "\ufe41\202\ufe41\227\ufe41\267\ufe41\270\ufe41\276\ufe41\310\ufe41" +
    "\316\ufe41\322\ufe41\346\ufe41\351\ufe41\001\002\000\010\021" +
    "\ufe33\350\u0308\u010f\ufe33\001\002\000\016\011\051\021\ufe3a" +
    "\024\146\031\052\350\ufe3a\u010f\ufe3a\001\002\000\010\021" +
    "\ufe36\350\ufe36\u010f\ufe36\001\002\000\004\032\u030a\001\002" +
    "\000\006\021\ufe37\u010f\ufe37\001\002\000\004\u0194\u030b\001" +
    "\002\000\004\004\u030c\001\002\000\006\271\u030f\u016b\u030d" +
    "\001\002\000\004\047\ufe32\001\002\000\004\047\u0310\001" +
    "\002\000\004\047\ufe31\001\002\000\006\021\ufe34\u010f\ufe34" +
    "\001\002\000\044\002\ufe40\003\ufe40\102\ufe40\125\ufe40\146" +
    "\ufe40\173\ufe40\200\ufe40\202\ufe40\227\ufe40\267\ufe40\270\ufe40" +
    "\276\ufe40\310\ufe40\316\ufe40\322\ufe40\346\ufe40\351\ufe40\001" +
    "\002\000\006\021\046\u010f\045\001\002\000\042\003\033" +
    "\102\030\125\022\146\uffff\173\010\200\025\202\uffff\227" +
    "\023\267\013\270\037\276\035\310\036\316\034\322\032" +
    "\346\004\351\041\001\002\000\006\146\ufff5\202\ufff5\001" +
    "\002\000\006\146\ufff7\202\ufff7\001\002\000\042\003\033" +
    "\102\030\125\022\146\uffff\173\010\200\025\202\uffff\227" +
    "\023\267\013\270\037\276\035\310\036\316\034\322\032" +
    "\346\004\351\041\001\002\000\006\146\ufff6\202\ufff6\001" +
    "\002\000\006\146\ufff9\202\ufff9\001\002\000\006\146\ufff8" +
    "\202\ufff8\001\002\000\010\011\051\024\146\031\052\001" +
    "\002\000\010\021\ufe3e\350\ufe3e\u010f\ufe3e\001\002\000\006" +
    "\021\ufe3f\u010f\ufe3f\001\002\000\010\021\ufe3d\350\ufe3d\u010f" +
    "\ufe3d\001\002\000\040\003\033\102\030\125\022\162\u02f1" +
    "\173\010\200\025\227\023\267\013\270\037\276\035\310" +
    "\036\316\u02f6\322\032\346\004\351\041\001\002\000\006" +
    "\146\ufff4\202\ufff4\001\002\000\006\021\ufeeb\u010f\ufeeb\001" +
    "\002\000\006\021\ufef1\u010f\ufef1\001\002\000\006\021\ufeed" +
    "\u010f\ufeed\001\002\000\006\021\ufeec\u010f\ufeec\001\002\000" +
    "\006\011\051\031\052\001\002\000\004\011\u0353\001\002" +
    "\000\010\166\ufec4\172\ufec4\252\ufec4\001\002\000\006\021" +
    "\ufef0\u010f\ufef0\001\002\000\006\021\ufef2\u010f\ufef2\001\002" +
    "\000\006\011\051\031\052\001\002\000\006\011\051\031" +
    "\052\001\002\000\006\021\ufeef\u010f\ufeef\001\002\000\006" +
    "\021\ufeee\u010f\ufeee\001\002\000\010\166\u018b\172\ufe84\252" +
    "\u018a\001\002\000\004\172\u032f\001\002\000\006\011\051" +
    "\031\052\001\002\000\004\u016b\u0331\001\002\000\006\011" +
    "\051\031\052\001\002\000\004\032\u0333\001\002\000\006" +
    "\011\051\031\052\001\002\000\014\021\ufebd\342\ufebd\u010f" +
    "\ufebd\u011c\u0335\u016b\ufebd\001\002\000\004\032\u0164\001\002" +
    "\000\012\021\uff3e\342\137\u010f\uff3e\u016b\uff3e\001\002\000" +
    "\010\021\ufebb\u010f\ufebb\u016b\u0338\001\002\000\006\011\051" +
    "\031\052\001\002\000\006\021\ufec5\u010f\ufec5\001\002\000" +
    "\004\032\u033b\001\002\000\006\011\051\031\052\001\002" +
    "\000\004\047\u033d\001\002\000\006\021\ufebc\u010f\ufebc\001" +
    "\002\000\012\021\ufebe\342\ufebe\u010f\ufebe\u016b\ufebe\001\002" +
    "\000\012\022\uff29\047\uff29\303\u0190\u0104\u0191\001\002\000" +
    "\004\047\u0341\001\002\000\014\021\ufec2\342\ufec2\u010f\ufec2" +
    "\u011c\ufec2\u016b\ufec2\001\002\000\006\022\u0344\047\ufebf\001" +
    "\002\000\004\047\ufec1\001\002\000\006\011\051\031\052" +
    "\001\002\000\012\022\uff29\047\uff29\303\u0190\u0104\u0191\001" +
    "\002\000\006\022\u0344\047\ufebf\001\002\000\004\047\ufec0" +
    "\001\002\000\004\112\u0349\001\002\000\004\173\010\001" +
    "\002\000\006\021\ufec6\u010f\ufec6\001\002\000\004\032\u034c" +
    "\001\002\000\022\011\051\031\052\113\ufe8b\155\ufe8b\172" +
    "\u017d\210\u0181\302\ufe8b\352\ufe8b\001\002\000\006\022\u023a" +
    "\047\ufead\001\002\000\004\047\u034f\001\002\000\010\021" +
    "\ufeb8\u010f\ufeb8\u016b\u0351\001\002\000\006\021\ufeba\u010f\ufeba" +
    "\001\002\000\004\352\u0352\001\002\000\006\021\ufeb9\u010f" +
    "\ufeb9\001\002\000\006\021\ufeea\u010f\ufeea\001\002\000\012" +
    "\021\ufee6\174\ufee6\u010f\ufee6\u016b\u0356\001\002\000\010\021" +
    "\ufedb\174\u0388\u010f\ufedb\001\002\000\006\032\ufee4\352\u0358" +
    "\001\002\000\006\021\ufee9\u010f\ufee9\001\002\000\004\032" +
    "\ufee5\001\002\000\004\032\u035a\001\002\000\006\u0154\u0360" +
    "\u018a\u035f\001\002\000\010\021\ufee7\174\ufee7\u010f\ufee7\001" +
    "\002\000\012\021\ufee2\022\u035d\174\ufee2\u010f\ufee2\001\002" +
    "\000\004\032\u035a\001\002\000\010\021\ufee3\174\ufee3\u010f" +
    "\ufee3\001\002\000\004\004\ufee0\001\002\000\004\004\ufedf" +
    "\001\002\000\004\004\u0362\001\002\000\004\043\u0363\001" +
    "\002\000\004\022\u0364\001\002\000\006\103\u0367\u018b\u0366" +
    "\001\002\000\004\004\u0368\001\002\000\004\004\ufedd\001" +
    "\002\000\004\004\ufede\001\002\000\004\043\u0369\001\002" +
    "\000\006\022\u036b\047\ufed9\001\002\000\004\047\u0387\001" +
    "\002\000\010\u0124\u0374\u0190\u0373\u0192\u0372\001\002\000\006" +
    "\022\ufed4\047\ufed4\001\002\000\006\022\ufed7\047\ufed7\001" +
    "\002\000\006\022\ufed8\047\ufed8\001\002\000\006\022\ufed6" +
    "\047\ufed6\001\002\000\006\022\u036b\047\ufed9\001\002\000" +
    "\006\022\ufed5\047\ufed5\001\002\000\004\004\u0381\001\002" +
    "\000\004\004\u037c\001\002\000\004\004\u0375\001\002\000" +
    "\004\012\u0376\001\002\000\016\022\ufed2\047\ufed2\u018c\u0379" +
    "\u018d\u037a\u018e\u0378\u018f\u037b\001\002\000\006\022\ufed3\047" +
    "\ufed3\001\002\000\006\022\ufece\047\ufece\001\002\000\006" +
    "\022\ufed1\047\ufed1\001\002\000\006\022\ufecf\047\ufecf\001" +
    "\002\000\006\022\ufed0\047\ufed0\001\002\000\006\012\u037e" +
    "\u0191\u037f\001\002\000\006\022\ufecd\047\ufecd\001\002\000" +
    "\012\u018c\u0379\u018d\u037a\u018e\u0378\u018f\u037b\001\002\000\006" +
    "\022\ufecb\047\ufecb\001\002\000\006\022\ufecc\047\ufecc\001" +
    "\002\000\004\012\u0382\001\002\000\020\022\ufec7\047\ufec7" +
    "\u018c\u0379\u018d\u037a\u018e\u0378\u018f\u037b\u0193\u0384\001\002\000" +
    "\006\022\ufec9\047\ufec9\001\002\000\006\022\ufec8\047\ufec8" +
    "\001\002\000\006\022\ufeca\047\ufeca\001\002\000\004\047" +
    "\ufeda\001\002\000\012\021\ufee1\022\ufee1\174\ufee1\u010f\ufee1" +
    "\001\002\000\006\011\051\031\052\001\002\000\006\021" +
    "\ufee8\u010f\ufee8\001\002\000\006\021\ufedc\u010f\ufedc\001\002" +
    "\000\014\011\051\021\ufe46\024\146\031\052\u010f\ufe46\001" +
    "\002\000\010\021\ufe44\350\u038e\u010f\ufe44\001\002\000\006" +
    "\021\ufe48\u010f\ufe48\001\002\000\004\u0180\u0390\001\002\000" +
    "\006\021\ufe47\u010f\ufe47\001\002\000\010\021\ufe42\043\u0392" +
    "\u010f\ufe42\001\002\000\006\021\ufe45\u010f\ufe45\001\002\000" +
    "\006\021\ufe43\u010f\ufe43\001\002\000\044\002\uffff\003\033" +
    "\102\030\125\022\146\uffff\173\010\200\025\202\uffff\227" +
    "\023\267\013\270\037\276\035\310\036\316\034\322\032" +
    "\346\004\351\041\001\002\000\010\002\ufffb\146\ufffb\202" +
    "\ufffb\001\002\000\044\002\uffed\003\uffed\102\uffed\125\uffed" +
    "\146\uffed\173\uffed\200\uffed\202\uffed\227\uffed\267\uffed\270" +
    "\uffed\276\uffed\310\uffed\316\uffed\322\uffed\346\uffed\351\uffed" +
    "\001\002\000\050\002\ufff1\003\ufff1\102\ufff1\125\ufff1\132" +
    "\ufff1\146\ufff1\173\ufff1\200\ufff1\202\ufff1\227\ufff1\267\ufff1" +
    "\270\ufff1\276\ufff1\310\ufff1\316\ufff1\322\ufff1\332\ufff1\346" +
    "\ufff1\351\ufff1\001\002\000\050\002\ufff0\003\ufff0\102\ufff0" +
    "\125\ufff0\132\ufff0\146\ufff0\173\ufff0\200\ufff0\202\ufff0\227" +
    "\ufff0\267\ufff0\270\ufff0\276\ufff0\310\ufff0\316\ufff0\322\ufff0" +
    "\332\ufff0\346\ufff0\351\ufff0\001\002\000\010\002\ufffe\146" +
    "\ufffe\202\ufffe\001\002\000\006\011\051\031\052\001\002" +
    "\000\006\021\uff93\u010f\uff93\001\002\000\010\002\ufffd\146" +
    "\ufffd\202\ufffd\001\002\000\020\012\u03a3\021\ufdc7\024\146" +
    "\032\u039e\037\u039d\043\u03a2\u010f\ufdc7\001\002\000\012\021" +
    "\ufdbf\022\ufdbf\047\ufdbf\u010f\ufdbf\001\002\000\012\012\u03a3" +
    "\024\146\037\u039d\043\u03a2\001\002\000\004\004\u03a7\001" +
    "\002\000\012\021\ufdc1\022\u03a4\047\ufdc1\u010f\ufdc1\001\002" +
    "\000\006\021\ufdc5\u010f\ufdc5\001\002\000\012\021\ufdbe\022" +
    "\ufdbe\047\ufdbe\u010f\ufdbe\001\002\000\012\021\ufdc0\022\ufdc0" +
    "\047\ufdc0\u010f\ufdc0\001\002\000\012\012\u03a3\024\146\037" +
    "\u039d\043\u03a2\001\002\000\010\021\ufdc3\047\ufdc3\u010f\ufdc3" +
    "\001\002\000\010\021\ufdc2\047\ufdc2\u010f\ufdc2\001\002\000" +
    "\010\012\u03a3\037\u039d\043\u03a2\001\002\000\012\021\ufdc1" +
    "\022\u03a4\047\ufdc1\u010f\ufdc1\001\002\000\010\021\ufdc4\047" +
    "\ufdc4\u010f\ufdc4\001\002\000\004\047\u03ab\001\002\000\006" +
    "\021\ufdc6\u010f\ufdc6\001\002\000\040\007\uff33\011\uff33\012" +
    "\uff33\024\uff33\031\uff33\032\uff33\037\uff33\043\uff33\253\uff33" +
    "\260\uff33\u010b\uff33\u0138\uff33\u013d\uff33\u0148\uff33\u0149\uff33\001" +
    "\002\000\040\007\uff34\011\uff34\012\uff34\024\uff34\031\uff34" +
    "\032\uff34\037\uff34\043\uff34\253\uff34\260\uff34\u010b\uff34\u0138" +
    "\uff34\u013d\uff34\u0148\uff34\u0149\uff34\001\002\000\040\007\uff6d" +
    "\011\uff6d\012\uff6d\024\uff6d\031\uff6d\032\uff6d\037\uff6d\043" +
    "\uff6d\253\115\260\uff6d\u010b\uff6d\u0138\uff6d\u013d\uff6d\u0148\uff6d" +
    "\u0149\uff6d\001\002\000\036\007\u03b2\011\051\012\312\024" +
    "\146\031\052\032\325\037\315\043\321\260\331\u010b\322" +
    "\u0138\311\u013d\330\u0148\327\u0149\324\001\002\000\036\011" +
    "\051\021\uff90\022\uff90\031\052\043\u03ba\047\uff90\110\uff90" +
    "\112\u03b8\123\uff90\142\uff90\145\uff90\325\uff90\342\uff90\u010f" +
    "\uff90\001\002\000\024\021\ufefe\047\ufefe\110\ufefe\123\u03be" +
    "\142\ufefe\145\ufefe\325\ufefe\342\ufefe\u010f\ufefe\001\002\000" +
    "\026\021\uff3a\022\u03b3\047\uff3a\110\uff3a\123\uff3a\142\uff3a" +
    "\145\uff3a\325\uff3a\342\uff3a\u010f\uff3a\001\002\000\034\011" +
    "\051\012\312\024\146\031\052\032\325\037\315\043\321" +
    "\260\331\u010b\322\u0138\311\u013d\330\u0148\327\u0149\324\001" +
    "\002\000\024\021\uff3c\047\uff3c\110\uff3c\123\uff3c\142\uff3c" +
    "\145\uff3c\325\uff3c\342\uff3c\u010f\uff3c\001\002\000\036\011" +
    "\051\021\uff90\022\uff90\031\052\043\u03ba\047\uff90\110\uff90" +
    "\112\u03b8\123\uff90\142\uff90\145\uff90\325\uff90\342\uff90\u010f" +
    "\uff90\001\002\000\042\021\uff8f\022\uff8f\047\uff8f\110\uff8f" +
    "\123\uff8f\126\uff8f\142\uff8f\143\uff8f\145\uff8f\175\uff8f\214" +
    "\uff8f\225\uff8f\325\uff8f\342\uff8f\u010f\uff8f\u016b\uff8f\001\002" +
    "\000\042\021\uff91\022\uff91\047\uff91\110\uff91\123\uff91\126" +
    "\uff91\142\uff91\143\uff91\145\uff91\175\uff91\214\uff91\225\uff91" +
    "\325\uff91\342\uff91\u010f\uff91\u016b\uff91\001\002\000\010\011" +
    "\051\031\052\043\u03ba\001\002\000\026\021\uff3a\022\u03b3" +
    "\047\uff3a\110\uff3a\123\uff3a\142\uff3a\145\uff3a\325\uff3a\342" +
    "\uff3a\u010f\uff3a\001\002\000\042\021\uff8e\022\uff8e\047\uff8e" +
    "\110\uff8e\123\uff8e\126\uff8e\142\uff8e\143\uff8e\145\uff8e\175" +
    "\uff8e\214\uff8e\225\uff8e\325\uff8e\342\uff8e\u010f\uff8e\u016b\uff8e" +
    "\001\002\000\024\021\uff3b\047\uff3b\110\uff3b\123\uff3b\142" +
    "\uff3b\145\uff3b\325\uff3b\342\uff3b\u010f\uff3b\001\002\000\042" +
    "\021\uff92\022\uff92\047\uff92\110\uff92\123\uff92\126\uff92\142" +
    "\uff92\143\uff92\145\uff92\175\uff92\214\uff92\225\uff92\325\uff92" +
    "\342\uff92\u010f\uff92\u016b\uff92\001\002\000\022\021\uff3e\047" +
    "\uff3e\110\uff3e\142\uff3e\145\uff3e\325\uff3e\342\137\u010f\uff3e" +
    "\001\002\000\006\011\051\031\052\001\002\000\046\011" +
    "\051\021\uff90\022\uff90\031\052\043\u03ba\047\uff90\110\uff90" +
    "\112\u03b8\126\uff90\142\uff90\143\uff90\145\uff90\175\uff90\214" +
    "\uff90\225\uff90\325\uff90\342\uff90\u010f\uff90\001\002\000\036" +
    "\021\ufefa\022\ufefa\047\ufefa\110\ufefa\126\u03c6\142\ufefa\143" +
    "\u03c4\145\ufefa\175\u03c1\214\ufef5\225\u03c3\325\ufefa\342\ufefa" +
    "\u010f\ufefa\001\002\000\004\214\ufef9\001\002\000\004\214" +
    "\u03d0\001\002\000\006\214\ufef3\330\u03c7\001\002\000\006" +
    "\214\ufef3\330\u03c7\001\002\000\024\021\ufefc\022\u03c9\047" +
    "\ufefc\110\ufefc\142\ufefc\145\ufefc\325\ufefc\342\ufefc\u010f\ufefc" +
    "\001\002\000\006\214\ufef3\330\u03c7\001\002\000\004\214" +
    "\ufef4\001\002\000\004\214\ufef6\001\002\000\006\011\051" +
    "\031\052\001\002\000\022\021\ufeff\047\ufeff\110\ufeff\142" +
    "\ufeff\145\ufeff\325\ufeff\342\ufeff\u010f\ufeff\001\002\000\044" +
    "\011\051\021\uff90\031\052\043\u03ba\047\uff90\110\uff90\112" +
    "\u03b8\126\uff90\142\uff90\143\uff90\145\uff90\175\uff90\214\uff90" +
    "\225\uff90\325\uff90\342\uff90\u010f\uff90\001\002\000\034\021" +
    "\ufefa\047\ufefa\110\ufefa\126\u03c6\142\ufefa\143\u03c4\145\ufefa" +
    "\175\u03c1\214\ufef5\225\u03c3\325\ufefa\342\ufefa\u010f\ufefa\001" +
    "\002\000\022\021\ufefd\047\ufefd\110\ufefd\142\ufefd\145\ufefd" +
    "\325\ufefd\342\ufefd\u010f\ufefd\001\002\000\004\214\ufef8\001" +
    "\002\000\004\214\ufef7\001\002\000\006\011\051\031\052" +
    "\001\002\000\014\011\051\031\052\043\u03ba\112\u03b8\u016b" +
    "\uff90\001\002\000\004\u016b\u03d3\001\002\000\034\011\uff6f" +
    "\012\uff6f\024\uff6f\031\uff6f\032\uff6f\037\uff6f\043\uff6f\255" +
    "\142\u010b\uff6f\u0138\uff6f\u013d\uff6f\u0148\uff6f\u0149\uff6f\001\002" +
    "\000\036\021\ufefa\022\ufefa\047\ufefa\110\ufefa\126\u03c6\142" +
    "\ufefa\143\u03c4\145\ufefa\175\u03c1\214\ufef5\225\u03c3\325\ufefa" +
    "\342\ufefa\u010f\ufefa\001\002\000\024\021\ufefb\022\ufefb\047" +
    "\ufefb\110\ufefb\142\ufefb\145\ufefb\325\ufefb\342\ufefb\u010f\ufefb" +
    "\001\002\000\020\021\uff25\047\uff25\110\uff25\142\u03d8\145" +
    "\uff25\325\uff25\u010f\uff25\001\002\000\016\021\uff30\047\uff30" +
    "\110\uff30\145\u03df\325\uff30\u010f\uff30\001\002\000\004\144" +
    "\u03d9\001\002\000\034\011\051\012\312\024\146\031\052" +
    "\032\325\037\315\043\321\260\331\u010b\322\u0138\311\u013d" +
    "\330\u0148\327\u0149\324\001\002\000\020\021\uff23\022\u03db" +
    "\047\uff23\110\uff23\145\uff23\325\uff23\u010f\uff23\001\002\000" +
    "\034\011\051\012\312\024\146\031\052\032\325\037\315" +
    "\043\321\260\331\u010b\322\u0138\311\u013d\330\u0148\327\u0149" +
    "\324\001\002\000\016\021\uff26\047\uff26\110\uff26\145\uff26" +
    "\325\uff26\u010f\uff26\001\002\000\020\021\uff23\022\u03db\047" +
    "\uff23\110\uff23\145\uff23\325\uff23\u010f\uff23\001\002\000\016" +
    "\021\uff24\047\uff24\110\uff24\145\uff24\325\uff24\u010f\uff24\001" +
    "\002\000\034\011\uff6f\012\uff6f\024\uff6f\031\uff6f\032\uff6f" +
    "\037\uff6f\043\uff6f\255\142\u010b\uff6f\u0138\uff6f\u013d\uff6f\u0148" +
    "\uff6f\u0149\uff6f\001\002\000\014\021\uff2e\047\uff2e\110\uff2e" +
    "\325\u03e1\u010f\uff2e\001\002\000\004\144\u03e3\001\002\000" +
    "\012\021\uff35\047\uff35\110\uff35\u010f\uff35\001\002\000\034" +
    "\011\051\012\312\024\146\031\052\032\325\037\315\043" +
    "\321\260\331\u010b\322\u0138\311\u013d\330\u0148\327\u0149\324" +
    "\001\002\000\022\021\uff2c\022\uff2c\047\uff2c\110\uff2c\174" +
    "\u03e5\303\uff2c\u0104\uff2c\u010f\uff2c\001\002\000\006\011\051" +
    "\031\052\001\002\000\020\021\uff29\022\uff29\047\uff29\110" +
    "\uff29\303\u0190\u0104\u0191\u010f\uff29\001\002\000\014\021\uff27" +
    "\022\u03e8\047\uff27\110\uff27\u010f\uff27\001\002\000\034\011" +
    "\051\012\312\024\146\031\052\032\325\037\315\043\321" +
    "\260\331\u010b\322\u0138\311\u013d\330\u0148\327\u0149\324\001" +
    "\002\000\012\021\uff2f\047\uff2f\110\uff2f\u010f\uff2f\001\002" +
    "\000\020\021\uff2c\047\uff2c\110\uff2c\174\u03e5\303\uff2c\u0104" +
    "\uff2c\u010f\uff2c\001\002\000\016\021\uff29\047\uff29\110\uff29" +
    "\303\u0190\u0104\u0191\u010f\uff29\001\002\000\012\021\uff28\047" +
    "\uff28\110\uff28\u010f\uff28\001\002\000\020\021\uff2d\022\uff2d" +
    "\047\uff2d\110\uff2d\303\uff2d\u0104\uff2d\u010f\uff2d\001\002\000" +
    "\014\021\uff31\047\uff31\110\uff31\325\uff31\u010f\uff31\001\002" +
    "\000\026\021\uff3a\022\u03b3\047\uff3a\110\uff3a\123\uff3a\142" +
    "\uff3a\145\uff3a\325\uff3a\342\uff3a\u010f\uff3a\001\002\000\024" +
    "\021\uff3d\047\uff3d\110\uff3d\123\uff3d\142\uff3d\145\uff3d\325" +
    "\uff3d\342\uff3d\u010f\uff3d\001\002\000\004\002\001\001\002" +
    "\000\044\002\uffeb\003\uffeb\102\uffeb\125\uffeb\146\uffeb\173" +
    "\uffeb\200\uffeb\202\uffeb\227\uffeb\267\uffeb\270\uffeb\276\uffeb" +
    "\310\uffeb\316\uffeb\322\uffeb\346\uffeb\351\uffeb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u03f0\000\046\003\006\004\041\005\014\006\011\007" +
    "\030\010\020\030\026\044\005\105\025\116\042\126\016" +
    "\134\015\146\037\237\017\263\023\314\010\350\004\372" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\u03f1\001\001\000\002\001\001\000\004\106\u03ad\001" +
    "\001\000\006\012\154\013\u039b\001\001\000\046\003\u039a" +
    "\004\041\005\014\006\011\007\030\010\020\030\026\044" +
    "\005\105\025\116\042\126\016\134\015\146\037\237\017" +
    "\263\023\314\010\350\004\372\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\003\u0397\004\041\005\014" +
    "\006\011\007\030\010\020\030\026\044\005\105\025\116" +
    "\042\126\016\134\015\146\037\237\017\263\023\314\010" +
    "\350\004\372\013\001\001\000\004\011\u0396\001\001\000" +
    "\004\011\u0395\001\001\000\004\011\u0394\001\001\000\004" +
    "\011\u0392\001\001\000\004\272\u038a\001\001\000\026\147" +
    "\u0327\150\u032b\151\u0326\172\u0321\173\u032a\174\u032c\202\u0320" +
    "\277\u0322\324\u031f\326\u0155\001\001\000\004\011\u02ee\001" +
    "\001\000\004\057\u02d2\001\001\000\004\011\u02d1\001\001" +
    "\000\004\011\u02d0\001\001\000\022\240\u015b\241\u015a\244" +
    "\u0159\245\u015e\247\u0153\277\u0156\324\u0154\326\u0155\001\001" +
    "\000\046\003\u0152\004\041\005\014\006\011\007\030\010" +
    "\020\030\026\044\005\105\025\116\042\126\016\134\015" +
    "\146\037\237\017\263\023\314\010\350\004\372\013\001" +
    "\001\000\024\031\u0125\032\u011b\034\u0122\035\u011a\037\u0129" +
    "\041\u0128\300\u0126\u0108\u0119\u010a\u0120\001\001\000\004\011" +
    "\u0118\001\001\000\006\012\317\017\u0115\001\001\000\004" +
    "\057\u0104\001\001\000\004\057\113\001\001\000\004\012" +
    "\047\001\001\000\004\011\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\351\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\352\061\001" +
    "\001\000\002\001\001\000\004\353\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\354\070\001\001\000\002\001\001\000\004" +
    "\355\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\105\077\001\001\000\004\356\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\357\103\001\001\000\002" +
    "\001\001\000\006\012\105\103\106\001\001\000\004\104" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\111\001\001\000\004\104\112\001\001\000\002\001" +
    "\001\000\006\012\122\015\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\060\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\u0101" +
    "\001\001\000\002\001\001\000\006\012\125\135\126\001" +
    "\001\000\002\001\001\000\004\140\127\001\001\000\004" +
    "\067\137\001\001\000\006\012\122\015\131\001\001\000" +
    "\004\132\133\001\001\000\006\012\122\015\134\001\001" +
    "\000\002\001\001\000\004\132\135\001\001\000\002\001" +
    "\001\000\006\056\140\062\142\001\001\000\002\001\001" +
    "\000\022\012\154\013\164\022\157\064\151\073\152\075" +
    "\153\077\150\100\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\076\275" +
    "\001\001\000\004\063\270\001\001\000\010\002\237\056" +
    "\234\065\240\001\001\000\004\074\224\001\001\000\004" +
    "\014\221\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\056\140\062\213" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\377" +
    "\166\001\001\000\010\022\171\340\170\u0100\174\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\u0101\176\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\022\171\340\170\u0100\200\001\001\000\002\001\001" +
    "\000\010\012\154\013\202\101\203\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\154\013\202\101\212\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\154\013" +
    "\202\101\216\001\001\000\002\001\001\000\010\012\154" +
    "\013\202\101\220\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\223\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\012\154\013\164\022\157\075\231\077" +
    "\150\100\146\001\001\000\016\012\154\013\164\022\157" +
    "\075\227\077\150\100\146\001\001\000\004\074\230\001" +
    "\001\000\002\001\001\000\004\074\232\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\066\253\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\012\154\013\164" +
    "\022\157\073\247\075\153\077\150\100\146\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\056\245\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\012\154\013\164" +
    "\022\157\073\266\075\153\077\150\100\146\001\001\000" +
    "\002\001\001\000\020\012\154\013\164\022\157\073\254" +
    "\075\153\077\150\100\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\012\154\013\164\022\157\073\256" +
    "\075\153\077\150\100\146\001\001\000\002\001\001\000" +
    "\020\012\154\013\164\022\157\073\260\075\153\077\150" +
    "\100\146\001\001\000\004\102\262\001\001\000\020\012" +
    "\154\013\164\022\157\073\264\075\153\077\150\100\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\102" +
    "\265\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\056\140\062\273\001\001\000\002\001\001\000\006\056" +
    "\140\062\272\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\012\154\013\164\022\157\077\301\100\146\001" +
    "\001\000\002\001\001\000\014\012\154\013\164\022\157" +
    "\077\277\100\146\001\001\000\004\076\300\001\001\000" +
    "\002\001\001\000\004\076\302\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\154\013\202\101\305\001" +
    "\001\000\002\001\001\000\022\012\317\017\331\022\322" +
    "\047\313\051\316\053\315\054\312\136\307\001\001\000" +
    "\004\137\377\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\052\366\001\001\000\004\050\360\001\001\000\004" +
    "\020\353\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\012\317\017\331" +
    "\022\322\047\345\051\316\053\315\054\312\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\377\332\001\001\000\002\001\001\000" +
    "\010\012\317\017\334\055\335\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\317\017\334\055\344\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\317\017\334" +
    "\055\350\001\001\000\002\001\001\000\010\012\317\017" +
    "\334\055\352\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\122\015\355\001\001\000\002\001\001\000" +
    "\016\012\317\017\331\022\322\051\363\053\315\054\312" +
    "\001\001\000\016\012\317\017\331\022\322\051\361\053" +
    "\315\054\312\001\001\000\002\001\001\000\004\050\362" +
    "\001\001\000\002\001\001\000\004\050\364\001\001\000" +
    "\002\001\001\000\014\012\317\017\331\022\322\053\372" +
    "\054\312\001\001\000\002\001\001\000\014\012\317\017" +
    "\331\022\322\053\370\054\312\001\001\000\004\052\371" +
    "\001\001\000\002\001\001\000\004\052\373\001\001\000" +
    "\002\001\001\000\010\012\317\017\334\055\375\001\001" +
    "\000\002\001\001\000\006\012\125\135\u0100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\154\013\u0103\001\001\000\002\001\001\000\004\127" +
    "\u0106\001\001\000\002\001\001\000\010\012\122\015\u0108" +
    "\130\u0107\001\001\000\002\001\001\000\004\131\u0111\001" +
    "\001\000\004\133\u010b\001\001\000\004\012\u010c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\122\015\u0113" +
    "\001\001\000\004\067\u0112\001\001\000\002\001\001\000" +
    "\004\132\u0114\001\001\000\002\001\001\000\004\011\u0116" +
    "\001\001\000\046\003\u0117\004\041\005\014\006\011\007" +
    "\030\010\020\030\026\044\005\105\025\116\042\126\016" +
    "\134\015\146\037\237\017\263\023\314\010\350\004\372" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\u014c\001\001\000\004\021\u0143\001\001\000\004\021\u0141" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\u013b\001\001\000\004" +
    "\021\u0135\001\001\000\002\001\001\000\004\021\u0132\001" +
    "\001\000\004\021\u012b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\154\013\u012c\001" +
    "\001\000\004\u0109\u012d\001\001\000\002\001\001\000\006" +
    "\012\154\013\u012f\001\001\000\004\u0109\u0130\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\154\013\u0133" +
    "\001\001\000\004\u0109\u0134\001\001\000\002\001\001\000" +
    "\006\012\154\013\u0136\001\001\000\004\040\u0138\001\001" +
    "\000\006\012\154\013\u0139\001\001\000\002\001\001\000" +
    "\004\040\u013a\001\001\000\002\001\001\000\006\012\122" +
    "\015\u013c\001\001\000\004\033\u013e\001\001\000\006\012" +
    "\122\015\u013f\001\001\000\002\001\001\000\004\033\u0140" +
    "\001\001\000\002\001\001\000\004\012\u0142\001\001\000" +
    "\002\001\001\000\006\012\u0144\042\u0145\001\001\000\002" +
    "\001\001\000\004\043\u0146\001\001\000\002\001\001\000" +
    "\006\012\u0144\042\u0148\001\001\000\004\043\u0149\001\001" +
    "\000\002\001\001\000\006\012\122\015\u014b\001\001\000" +
    "\002\001\001\000\004\012\u014d\001\001\000\004\036\u014f" +
    "\001\001\000\004\012\u0150\001\001\000\002\001\001\000" +
    "\004\036\u0151\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\300\u0259\001" +
    "\001\000\002\001\001\000\006\012\u0250\242\u0252\001\001" +
    "\000\004\012\u024f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\122\015\u0169\001\001" +
    "\000\006\012\154\013\u0161\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\072\u0162\246\u0164" +
    "\001\001\000\002\001\001\000\006\012\105\103\u0167\001" +
    "\001\000\002\001\001\000\004\105\u0166\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\250" +
    "\u016a\251\u016e\256\u016d\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\012\u0181\205\u017f\207\u017e\217\u0182\230" +
    "\u017d\236\u0183\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\257\u0170\260\u0173\001\001\000\004\261\u0179\001" +
    "\001\000\004\021\u0176\001\001\000\002\001\001\000\004" +
    "\021\u0174\001\001\000\004\012\u0175\001\001\000\002\001" +
    "\001\000\004\012\u0177\001\001\000\002\001\001\000\006" +
    "\257\u017a\260\u0173\001\001\000\002\001\001\000\004\261" +
    "\u017b\001\001\000\002\001\001\000\004\012\u023d\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\206\u023a\001" +
    "\001\000\004\012\u0238\001\001\000\010\023\u01d6\024\u01d2" +
    "\025\u01d5\001\001\000\004\231\u0187\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\204\u019c\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\221\u018b\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\232\u018d\001\001" +
    "\000\004\012\u018e\001\001\000\002\001\001\000\004\112" +
    "\u0191\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\233\u0192\001\001\000\002\001\001\000\004\012\u0194\001" +
    "\001\000\004\112\u0195\001\001\000\004\233\u0196\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\221\u0199\001" +
    "\001\000\004\232\u019a\001\001\000\002\001\001\000\004" +
    "\361\u01a1\001\001\000\002\001\001\000\006\056\140\062" +
    "\u019e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\362" +
    "\u01a5\001\001\000\004\214\u01a6\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\234\u01aa\001" +
    "\001\000\004\012\u01bf\001\001\000\002\001\001\000\006" +
    "\012\154\013\u01ac\001\001\000\004\223\u01ae\001\001\000" +
    "\004\012\u01bd\001\001\000\004\224\u01b0\001\001\000\004" +
    "\225\u01b2\001\001\000\004\204\u01b1\001\001\000\002\001" +
    "\001\000\004\224\u01bc\001\001\000\004\227\u01bb\001\001" +
    "\000\004\227\u01b5\001\001\000\002\001\001\000\004\226" +
    "\u01b9\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\235\u01c0" +
    "\001\001\000\002\001\001\000\004\012\u01c2\001\001\000" +
    "\004\235\u01c3\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\u0236\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\u0230\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\210\u01ec\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\u022e\001\001\000\014\220\u01f6\222" +
    "\u01f5\364\u01f0\366\u01ee\367\u01ef\001\001\000\004\213\u022a" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\365" +
    "\u0222\001\001\000\004\221\u021f\001\001\000\004\211\u020f" +
    "\001\001\000\004\012\u020c\001\001\000\006\216\u020b\217" +
    "\u0203\001\001\000\002\001\001\000\006\216\u0202\217\u0203" +
    "\001\001\000\002\001\001\000\004\204\u01fe\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\221\u01fd\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\056\140\062\u0200\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\220\u0204\222\u01f5\001" +
    "\001\000\006\216\u0205\217\u0203\001\001\000\002\001\001" +
    "\000\006\012\154\013\u0207\001\001\000\004\223\u0208\001" +
    "\001\000\004\224\u0209\001\001\000\004\204\u020a\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\220\u01f6\222" +
    "\u01f5\364\u01f0\367\u020d\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\212\u0214\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\213\u021a\001\001" +
    "\000\004\204\u0215\001\001\000\004\215\u0217\001\001\000" +
    "\002\001\001\000\006\216\u0218\217\u0203\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\215\u0223\001\001\000\006\216\u0224\217\u0203\001\001" +
    "\000\002\001\001\000\004\363\u0226\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\204\u022b\001\001\000\004\215\u022c\001\001\000" +
    "\006\216\u022d\217\u0203\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\u0233\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\012\u0181\205\u023b\207\u017e" +
    "\217\u0182\230\u017d\236\u0183\001\001\000\002\001\001\000" +
    "\004\206\u023c\001\001\000\002\001\001\000\004\221\u023e" +
    "\001\001\000\004\232\u023f\001\001\000\002\001\001\000" +
    "\004\012\u0241\001\001\000\016\023\u0242\024\u01d2\025\u01d5" +
    "\252\u0246\253\u0247\254\u0245\001\001\000\004\210\u024d\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\255\u024a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\214\u024e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\243\u0254\001\001\000\004\012\u0258\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\154\013\u029e\001" +
    "\001\000\006\012\154\013\u025b\001\001\000\002\001\001" +
    "\000\012\022\u025f\325\u0260\327\u025e\330\u025d\001\001\000" +
    "\002\001\001\000\004\331\u029b\001\001\000\004\332\u0297" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\025" +
    "\u0265\334\u0263\335\u0267\336\u0264\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\341\u028f\001\001\000\004\341" +
    "\u0269\001\001\000\002\001\001\000\012\314\u0274\342\u0273" +
    "\343\u0275\376\u0279\001\001\000\004\332\u026b\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\105\u026f\337\u026e" +
    "\001\001\000\004\105\u0270\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\344" +
    "\u0283\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\345" +
    "\u027d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\314\u0274\342\u0284\343\u0275\376\u0279\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\u0288\316" +
    "\u0289\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\332\u0290\001\001\000\002\001\001\000\014\005" +
    "\u0292\105\025\116\042\126\016\134\015\001\001\000\002" +
    "\001\001\000\004\011\u0118\001\001\000\020\012\317\017" +
    "\331\022\322\047\u0295\051\316\053\315\054\312\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\u0298\001" +
    "\001\000\004\333\u0299\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\022\u025f\327\u025e\330" +
    "\u029d\001\001\000\002\001\001\000\004\301\u02a0\001\001" +
    "\000\002\001\001\000\010\022\u02a2\302\u02a1\303\u02a3\001" +
    "\001\000\004\311\u02b7\001\001\000\014\012\u02a7\023\u02a6" +
    "\024\u01d2\025\u01d5\305\u02a5\001\001\000\002\001\001\000" +
    "\004\025\u0236\001\001\000\004\304\u02b3\001\001\000\004" +
    "\306\u02ae\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\310\u02ac\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\307\u02b1\310" +
    "\u02b2\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\022" +
    "\u02a2\303\u02b5\001\001\000\002\001\001\000\010\312\u02c6" +
    "\313\u02c5\314\u02c8\001\001\000\004\317\u02b8\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\320\u02bc\001\001\000\002\001\001\000\016\005\u02be\105" +
    "\025\116\042\126\016\134\015\321\u02bf\001\001\000\016" +
    "\005\u02c1\105\025\116\042\126\016\134\015\322\u02c2\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\005\u02c3" +
    "\105\025\116\042\126\016\134\015\323\u02c4\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\315\u02cc\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\u0288\316\u02cb" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\312" +
    "\u02ce\313\u02c5\314\u02c8\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\117" +
    "\u02d3\001\001\000\006\012\122\015\u02d5\001\001\000\002" +
    "\001\001\000\006\072\u02d6\120\u02d7\001\001\000\002\001" +
    "\001\000\004\124\u02da\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\121\u02de\122\u02df\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\123\u02e3\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\122\u02e4\001\001\000\002\001\001\000\004" +
    "\123\u02e5\001\001\000\002\001\001\000\004\125\u02e7\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\121\u02ea" +
    "\122\u02df\001\001\000\002\001\001\000\004\125\u02ec\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\005\u02f2" +
    "\006\u02f1\007\u02f4\010\u02f3\030\026\044\005\105\025\116" +
    "\042\126\016\134\015\146\037\237\017\263\023\267\u02ef" +
    "\314\010\350\004\360\u02f6\372\013\001\001\000\004\011" +
    "\u031d\001\001\000\004\272\u0319\001\001\000\046\003\u0318" +
    "\004\041\005\014\006\011\007\030\010\020\030\026\044" +
    "\005\105\025\116\042\126\016\134\015\146\037\237\017" +
    "\263\023\314\010\350\004\372\013\001\001\000\046\003" +
    "\u0317\004\041\005\014\006\011\007\030\010\020\030\026" +
    "\044\005\105\025\116\042\126\016\134\015\146\037\237" +
    "\017\263\023\314\010\350\004\372\013\001\001\000\004" +
    "\011\u0315\001\001\000\046\003\u0314\004\041\005\014\006" +
    "\011\007\030\010\020\030\026\044\005\105\025\116\042" +
    "\126\016\134\015\146\037\237\017\263\023\314\010\350" +
    "\004\372\013\001\001\000\006\012\317\017\u0311\001\001" +
    "\000\010\273\u02f9\275\u02f7\u0105\u02fa\001\001\000\004\011" +
    "\u0310\001\001\000\006\272\u0305\274\u0304\001\001\000\004" +
    "\011\u0303\001\001\000\002\001\001\000\006\272\u02fe\276" +
    "\u02fd\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\u0300\022\u0301\271\u0302\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\u0106\u0308\001\001\000\010\012\u0300\022" +
    "\u0301\271\u0306\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\u0107\u030d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\u0312\001\001\000\046\003\u0313\004\041\005\014" +
    "\006\011\007\030\010\020\030\026\044\005\105\025\116" +
    "\042\126\016\134\015\146\037\237\017\263\023\314\010" +
    "\350\004\372\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\003\u0316\004\041\005\014\006\011\007\030" +
    "\010\020\030\026\044\005\105\025\116\042\126\016\134" +
    "\015\146\037\237\017\263\023\314\010\350\004\372\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\u031a\022\u031c\270\u031b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\005" +
    "\u02f2\006\u02f1\007\u02f4\010\u02f3\030\026\044\005\105\025" +
    "\116\042\126\016\134\015\146\037\237\017\263\023\267" +
    "\u02ef\314\010\350\004\360\u031e\372\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\u0353\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\122\015\u034a\001\001\000\006\012\154" +
    "\013\u0347\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\221\u032d\001\001\000\002\001\001\000\004\012\u032f" +
    "\001\001\000\002\001\001\000\006\012\122\015\u0331\001" +
    "\001\000\004\175\u0333\001\001\000\006\012\u033e\176\u033f" +
    "\001\001\000\004\200\u0335\001\001\000\004\072\u033d\001" +
    "\001\000\004\067\u0336\001\001\000\004\201\u0338\001\001" +
    "\000\004\012\u0339\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\u033b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\112\u0341\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\177\u0342\001\001" +
    "\000\002\001\001\000\004\012\u0344\001\001\000\004\112" +
    "\u0345\001\001\000\004\177\u0346\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\105\u0349\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\012\u0181\205\u034c\207\u017e" +
    "\217\u0182\230\u017d\236\u0183\001\001\000\004\206\u034d\001" +
    "\001\000\002\001\001\000\004\203\u034f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\152\u0356\153\u0354\001\001\000\004\157\u0388" +
    "\001\001\000\004\154\u0358\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\155\u035a\156\u035b\001\001\000\004" +
    "\u0103\u0360\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\155\u035d\156\u035b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\u0104\u0364\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\161\u0369\001\001\000\002\001\001\000\016" +
    "\163\u036f\164\u036d\166\u036c\170\u036e\370\u0370\371\u036b\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\161\u0385\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\165\u0376\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\167\u037c\001\001\000\002\001" +
    "\001\000\004\165\u037f\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\165\u0382\171\u0384\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\u0389\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\012\u031a" +
    "\022\u031c\264\u038c\270\u038b\001\001\000\004\265\u038e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\266\u0390\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\003\u0393\004\041\005\014\006\011\007\030" +
    "\010\020\030\026\044\005\105\025\116\042\126\016\134" +
    "\015\146\037\237\017\263\023\314\010\350\004\372\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\122" +
    "\015\u0399\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\022\u039e\373\u03a0\375\u039f\001\001\000\002\001\001" +
    "\000\010\022\u039e\373\u03a9\375\u039f\001\001\000\002\001" +
    "\001\000\004\374\u03a4\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\022\u039e\373\u03a5\375" +
    "\u039f\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\375\u03a7\001\001\000\004\374\u03a8\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\057\u03ae\001\001\000\022\012" +
    "\317\017\331\022\322\047\u03af\051\316\053\315\054\312" +
    "\070\u03b0\001\001\000\010\012\u03b5\045\u03ee\046\u03b6\001" +
    "\001\000\004\141\u03bc\001\001\000\004\071\u03b3\001\001" +
    "\000\020\012\317\017\331\022\322\047\u03b4\051\316\053" +
    "\315\054\312\001\001\000\002\001\001\000\010\012\u03b5" +
    "\045\u03b8\046\u03b6\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\u03b5\046\u03bb\001\001\000\004\071\u03ba" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\067\u03d5\001\001\000\006\012\122\015\u03be" +
    "\001\001\000\010\012\u03b5\045\u03bf\046\u03b6\001\001\000" +
    "\006\143\u03c4\144\u03c1\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\145\u03ce\001\001\000\004\145\u03cd\001" +
    "\001\000\004\142\u03c9\001\001\000\004\145\u03c7\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\122\015" +
    "\u03ca\001\001\000\002\001\001\000\010\012\u03b5\045\u03cb" +
    "\046\u03b6\001\001\000\006\143\u03cc\144\u03c1\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\122\015\u03d0\001\001\000\010\012\u03b5\045\u03d1\046" +
    "\u03b6\001\001\000\002\001\001\000\006\056\140\062\u03d3" +
    "\001\001\000\006\143\u03d4\144\u03c1\001\001\000\002\001" +
    "\001\000\004\114\u03d6\001\001\000\004\107\u03df\001\001" +
    "\000\002\001\001\000\020\012\317\017\331\022\322\047" +
    "\u03d9\051\316\053\315\054\312\001\001\000\004\115\u03db" +
    "\001\001\000\020\012\317\017\331\022\322\047\u03dc\051" +
    "\316\053\315\054\312\001\001\000\002\001\001\000\004" +
    "\115\u03dd\001\001\000\002\001\001\000\006\056\140\062" +
    "\u03ed\001\001\000\004\110\u03e1\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\012\317\017\331\022\322\047" +
    "\u03e3\051\316\053\315\054\312\001\001\000\004\111\u03e5" +
    "\001\001\000\004\012\u03ec\001\001\000\004\112\u03e6\001" +
    "\001\000\004\113\u03e8\001\001\000\020\012\317\017\331" +
    "\022\322\047\u03e9\051\316\053\315\054\312\001\001\000" +
    "\002\001\001\000\004\111\u03ea\001\001\000\004\112\u03eb" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\071\u03ef\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
    public List<String> SynErr = new ArrayList();
    public List<CupError> Errs = new ArrayList();
    private Symbol s;

    public final Class getSymbolContainer() {
        return sym.class;
    }

    public void syntax_error(Symbol cur_token){
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) cur_token);
        List<Integer> ids = expected_token_ids();
        CupError cupError = new CupError(s.right + 1, s.left + 1, s.value);
        for (Integer expected : ids) {
                String aux = symbl_name_from_id(expected);
                cupError.addExpected(aux);
        }
        Errs.add(cupError);
    }

    public void unrecovered_syntax_error(Symbol cur_token){
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) cur_token);
        List<Integer> ids = expected_token_ids();
        CupError cupError = new CupError(s.right + 1, s.left + 1, s.value);
        for (Integer expected : ids) {
                String aux = symbl_name_from_id(expected);
                cupError.addExpected(aux);
        }
        Errs.add(cupError);
    }

    public String symbl_name_from_id(int id) {
        Field[] fields = getSymbolContainer().getFields();
        for(Field f : fields){
            try {
                  if (f.getInt(null)==id) return f.getName();
            } catch (IllegalArgumentException e) {
            } catch (IllegalAccessException e) {
            }
        }
        return "Simbolo Invalido id";
    }

    public List<Integer> expected_token_ids() {
        List<Integer> ret = new ArrayList();
        int parse_state = ((Symbol)stack.peek()).parse_state ;
        short[] row = action_tab[parse_state];
        for (int i = 0; i<row.length; i+=2){
                if (row[i]==-1) continue;
                if (!validate_expected_symbol(row[i])) continue;
                ret.add(new Integer(row[i]));
        }
        return ret;
    }

    protected static final int _error_sync_size(){
        return 1;
    }

    private boolean validate_expected_symbol(int id){
        short lhs,rhs_size;
        int act;
        try {
            virtual_parse_stack vstack = new virtual_parse_stack(stack);
            for (;;)
            {
                act = get_action(vstack.top(), id);
                if (act == 0) return false;
                if (act > 0)
                {
                        vstack.push(act-1);
                        if (!advance_lookahead()) return true;
                }
                else
                {
                        if ((-act)-1 == start_production())  return true;
                        lhs = production_tab[(-act)-1][0];
                        rhs_size = production_tab[(-act)-1][1];
                        for (int i = 0; i < rhs_size; i++) vstack.pop();
                        vstack.push(get_reduce(vstack.top(), lhs));
                }
            }
        } catch (Exception e) {
                e.printStackTrace();
        }
        return true;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 579: // Data_Type ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Data_Type",251, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 578: // Data_Type ::= Flotante 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Data_Type",251, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 577: // Data_Type ::= Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Data_Type",251, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 576: // RepeatProcedureA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RepeatProcedureA",250, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 575: // RepeatProcedureA ::= Coma RepeatProcedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RepeatProcedureA",250, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 574: // RepeatProcedure ::= Data_Type RepeatProcedureA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RepeatProcedure",249, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 573: // RepeatProcedure ::= Variable Igual Data_Type RepeatProcedureA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RepeatProcedure",249, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 572: // ExecProcedure ::= ClauseExec Object2 RepeatProcedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExecProcedure",248, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 571: // ExecProcedure ::= ClauseExec Object2 AbreParentesis RepeatProcedure CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExecProcedure",248, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 570: // ExecProcedure ::= ClauseExec Object2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExecProcedure",248, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 569: // EXECUTE_AS_CLAUSE ::= ClauseExec AS Clause 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXECUTE_AS_CLAUSE",252, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 568: // FuncOpcC ::= OFF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcC",227, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 567: // FuncOpcC ::= ON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcC",227, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 566: // FuncOpcB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcB",226, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 565: // FuncOpcB ::= Coma FuncOpc 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcB",226, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 564: // FuncOpcA ::= INLINE Igual FuncOpcC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 563: // FuncOpcA ::= EXECUTE_AS_CLAUSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 562: // FuncOpcA ::= CALLED ON NULL INPUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 561: // FuncOpcA ::= RETURNS NULL ON NULL INPUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 560: // FuncOpcA ::= SCHEMABINDING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 559: // FuncOpcA ::= ENCRYPTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 558: // FuncOpc ::= FuncOpcA FuncOpcB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpc",224, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 557: // With ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("With",223, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 556: // With ::= WITH FuncOpc 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("With",223, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 555: // DType ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DType",222, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 554: // DType ::= Flotante 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DType",222, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 553: // DType ::= Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DType",222, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 552: // DType ::= Variable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DType",222, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 551: // DTypes ::= DType 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DTypes",256, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 550: // DTypes ::= AbreParentesis DType CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DTypes",256, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 549: // SCT ::= Select 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SCT",221, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 548: // SCT ::= AbreParentesis Select CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SCT",221, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 547: // Table ::= TABLE With As RETURN SCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Table",220, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 546: // Data ::= Tipo_datoA With As BEGIN DML RETURN Expresion END 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Data",219, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 545: // Type_Return ::= Table 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type_Return",218, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 544: // Type_Return ::= Data 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type_Return",218, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 543: // ReadOnly ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReadOnly",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 542: // ReadOnly ::= READONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReadOnly",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 541: // As ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("As",216, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 540: // As ::= AS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("As",216, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 539: // Param_B ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Param_B",215, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 538: // Param_B ::= Coma Param_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Param_B",215, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 537: // Param_A ::= Param Param_B 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Param_A",214, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 536: // Param ::= Variable As Tipo_datoA ReadOnly 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Param",213, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 535: // OrAlter ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrAlter",212, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 534: // OrAlter ::= OR ALTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrAlter",212, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 533: // Params ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Params",211, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 532: // Params ::= Param_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Params",211, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 531: // Function ::= OrAlter FUNCTION Object2 AbreParentesis Params CierraParentesis RETURNS Type_Return 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Function",210, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 530: // CursorDeclareg ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareg",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 529: // CursorDeclareg ::= OF ColumnListA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareg",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 528: // CursorDeclaref ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaref",236, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 527: // CursorDeclaref ::= FOR UPDATE CursorDeclareg 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaref",236, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 526: // CursorDeclaree ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaree",235, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 525: // CursorDeclaree ::= TYPE_WARNING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaree",235, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 524: // CursorDeclared ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",234, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 523: // CursorDeclared ::= OPTIMISTIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",234, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 522: // CursorDeclared ::= SCROLL_LOCKS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",234, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 521: // CursorDeclared ::= READ_ONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",234, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 520: // CursorDeclarec ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",233, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 519: // CursorDeclarec ::= FAST_FORWARD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",233, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 518: // CursorDeclarec ::= DYNAMIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",233, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 517: // CursorDeclarec ::= KEYSET 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",233, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 516: // CursorDeclarec ::= STATIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",233, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 515: // CursorDeclareb ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareb",232, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 514: // CursorDeclareb ::= FORWARD_ONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareb",232, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 513: // CursorDeclareb ::= SCROLL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareb",232, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 512: // CursorDeclarea ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarea",231, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 511: // CursorDeclarea ::= GLOBAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarea",231, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 510: // CursorDeclarea ::= LOCAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarea",231, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 509: // CursorDeclare ::= DECLARE ID CURSOR CursorDeclarea CursorDeclareb CursorDeclarec CursorDeclared CursorDeclaree FOR Select CursorDeclaref 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclare",230, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 508: // StmtSP2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP2",209, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 507: // StmtSP2 ::= DML 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP2",209, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 506: // StmtSP1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP1",208, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 505: // StmtSP1 ::= DML StmtSP2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP1",208, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 504: // StmtSP ::= DML StmtSP1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP",207, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 503: // StartSP ::= BEGIN StmtSP END 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StartSP",206, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 502: // ReplicationSP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReplicationSP",205, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 501: // ReplicationSP ::= FOR REPLICATION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReplicationSP",205, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 500: // Clause ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clause",204, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 499: // Clause ::= OWNER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clause",204, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 498: // Clause ::= SELF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clause",204, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 497: // Clause ::= CALLER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clause",204, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 496: // ProcOptionRec ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOptionRec",203, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 495: // ProcOptionRec ::= Coma ProcOption1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOptionRec",203, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 494: // ClauseExec ::= EXEC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ClauseExec",202, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 493: // ClauseExec ::= EXECUTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ClauseExec",202, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 492: // ProcOption2 ::= ClauseExec AS Clause 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption2",201, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 491: // ProcOption2 ::= RECOMPILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption2",201, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 490: // ProcOption2 ::= ENCRYPTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption2",201, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 489: // ProcOption1 ::= ProcOption2 ProcOptionRec 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption1",200, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 488: // ProcOption ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption",199, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 487: // ProcOption ::= WITH ProcOption1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption",199, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 486: // TipoD_SP3 ::= OUTPUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP3",198, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 485: // TipoD_SP3 ::= OUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP3",198, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 484: // TipoD_SP2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP2",197, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 483: // TipoD_SP2 ::= TipoD_SP3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP2",197, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 482: // TipoD_SP1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP1",196, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 481: // TipoD_SP1 ::= Igual DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP1",196, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 480: // TipoD_SP ::= ID READONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP",195, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 479: // TipoD_SP ::= CURSOR VARYING TipoD_SP3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP",195, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 478: // TipoD_SP ::= Tipo_dato TipoD_SP1 TipoD_SP2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP",195, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 477: // ParamsB_SP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsB_SP",194, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 476: // ParamsB_SP ::= Coma ParamsA_SP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsB_SP",194, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 475: // ParamsA_SP ::= Variable TipoD_SP ParamsB_SP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsA_SP",193, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 474: // ParamsSP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsSP",192, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 473: // ParamsSP ::= ParamsA_SP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsSP",192, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 472: // NumSP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NumSP",191, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 471: // NumSP ::= PyC Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NumSP",191, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 470: // SP_Reservada ::= PROCEDURE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SP_Reservada",190, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 469: // SP_Reservada ::= PROC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SP_Reservada",190, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 468: // Procedure ::= OrAlter SP_Reservada Object2 NumSP ParamsSP ProcOption ReplicationSP AS StartSP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Procedure",189, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 467: // RollbackA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RollbackA",188, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 466: // RollbackA ::= TranName NameA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RollbackA",188, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 465: // Rollback ::= ROLLBACK RollbackA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Rollback",187, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 464: // OnOff ::= OFF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OnOff",261, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 463: // OnOff ::= ON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OnOff",261, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 462: // CommitB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CommitB",260, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 461: // CommitB ::= WITH AbreParentesis DELAYED_DURABILITY Igual OnOff CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CommitB",260, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 460: // CommitA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CommitA",186, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 459: // CommitA ::= TranName NameA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CommitA",186, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // Commit ::= COMMIT CommitA CommitB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Commit",185, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // TranName ::= TRANSACTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TranName",184, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // TranName ::= TRAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TranName",184, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // NameA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NameA",183, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // NameA ::= Variable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NameA",183, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // NameA ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NameA",183, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // Name ::= Variable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Name",182, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // Name ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Name",182, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // SavePoint ::= SAVE TranName Name 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SavePoint",181, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // FinalTran ::= Rollback Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FinalTran",259, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // FinalTran ::= Commit Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FinalTran",259, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // BeginTranC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranC",180, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // BeginTranC ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranC",180, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // BeginTranB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranB",179, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // BeginTranB ::= WITH MARK BeginTranC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranB",179, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // BeginTranA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranA",178, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // BeginTranA ::= Name BeginTranB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranA",178, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // BeginTran ::= BEGIN TranName BeginTranA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTran",177, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // AlterTableDropC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropC",175, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // AlterTableDropC ::= Coma AlterTableDropA AlterTableDropC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropC",175, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // AlterTableDropB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropB",174, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // AlterTableDropB ::= CONSTRAINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropB",174, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // AlterTableDropA ::= COLUMN IFE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropA",173, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // AlterTableDropA ::= AlterTableDropB IFE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropA",173, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // AlterTableDrop ::= DROP AlterTableDropA AlterTableDropC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDrop",172, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // AlterColumnE ::= NOT FOR REPLICATION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnE",171, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // AlterColumnE ::= ROWGUIDCOL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnE",171, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // AlterColumnD ::= DROP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnD",170, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // AlterColumnD ::= ADD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnD",170, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // AlterColumnA ::= Tipo_dato ColumnDefA ColumnDefG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnA",169, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // AlterColumnC ::= AlterColumnD AlterColumnE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnC",168, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // AlterColumnC ::= AlterColumnA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnC",168, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // AlterColumn ::= ALTER COLUMN ID AlterColumnC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumn",167, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // AlterTableA ::= AlterTableDrop 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableA",166, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // AlterTableA ::= ADD CNC CNCA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableA",166, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // AlterTableA ::= AlterColumn 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableA",166, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // AlterTable ::= TABLE Object3 AlterTableA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTable",165, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // AlterViewA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterViewA",164, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // AlterViewA ::= ColumnList 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterViewA",164, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // AlterView ::= VIEW Object2 AlterViewA AS Select 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterView",163, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // AlterUser ::= USER ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterUser",162, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // AlterDBB ::= SET ROLLBACK IMMEDIATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDBB",161, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // AlterDBB ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDBB",161, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // AlterDBA ::= CURRENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDBA",160, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // AlterDBA ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDBA",160, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // AlterDatabase ::= DATABASE AlterDBA AlterDBB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDatabase",159, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // AlterA ::= Function 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",158, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // AlterA ::= Procedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",158, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // AlterA ::= AlterView 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",158, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // AlterA ::= AlterDatabase 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",158, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // AlterA ::= AlterUser 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",158, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // AlterA ::= AlterTable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",158, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // Alter ::= ALTER AlterA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alter",157, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // TableIndex ::= INDEX ID ColumnConstrC TableConstrB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableIndex",156, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // TableConstrE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrE",155, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // TableConstrE ::= Coma ID TableConstrE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrE",155, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // TableConstrD ::= AbreParentesis ID TableConstrE CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrD",154, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // TableConstrC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrC",153, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // TableConstrC ::= Coma ID OrderB TableConstrC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrC",153, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // TableConstrB ::= AbreParentesis ID OrderB TableConstrC CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrB",152, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // TableConstrA ::= CHECK NFR AbreParentesis NSC CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",151, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // TableConstrA ::= FOREIGN KEY TableConstrD REFERENCES Object2 ColumnConstrE ColumnConstrF NFR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",151, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // TableConstrA ::= UNIQUE ColumnConstrC TableConstrB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",151, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // TableConstrA ::= PRIMARY KEY ColumnConstrC TableConstrB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",151, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // TableConstr ::= ColumnConstrA TableConstrA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstr",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // ColumnConstrI ::= SET ColumnConstrH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrI",149, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // ColumnConstrI ::= CASCADE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrI",149, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // ColumnConstrH ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrH",148, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // ColumnConstrH ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrH",148, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // ColumnConstrG ::= UPDATE ColumnConstrI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrG",147, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // ColumnConstrG ::= DELETE ColumnConstrI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrG",147, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // ColumnConstrF ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrF",146, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // ColumnConstrF ::= ON ColumnConstrG ColumnConstrF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrF",146, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // ColumnConstrE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrE",145, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // ColumnConstrE ::= AbreParentesis ID CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrE",145, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // ColumnConstrD ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrD",144, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // ColumnConstrD ::= FOREIGN KEY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrD",144, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // ColumnConstrC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrC",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // ColumnConstrC ::= NONCLUSTERED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrC",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // ColumnConstrC ::= CLUSTERED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrC",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // ColumnConstrB ::= CHECK NFR AbreParentesis NSC CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",142, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // ColumnConstrB ::= ColumnConstrD REFERENCES Object2 ColumnConstrE ColumnConstrF NFR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",142, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // ColumnConstrB ::= UNIQUE ColumnConstrC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",142, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // ColumnConstrB ::= PRIMARY KEY ColumnConstrC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",142, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // ColumnConstrA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrA",141, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // ColumnConstrA ::= CONSTRAINT ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrA",141, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // ColumnConstr ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstr",140, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // ColumnConstr ::= ColumnConstrA ColumnConstrB ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstr",140, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // ColumnDefH ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefH",139, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // ColumnDefH ::= ROWGUIDCOL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefH",139, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // ColumnDefG ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefG",138, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // ColumnDefG ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefG",138, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // ColumnDefF ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefF",137, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // ColumnDefF ::= AbreParentesis Entero Coma Entero CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefF",137, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // ColumnDefE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefE",136, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // ColumnDefE ::= IDENTITY ColumnDefF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefE",136, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // ColumnDefD ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // ColumnDefD ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // ColumnDefD ::= Flotante 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // ColumnDefD ::= Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // ColumnDefA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefA",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // ColumnDefA ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefA",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // ColumnDefV ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefV",241, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // ColumnDefV ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefV",241, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // ColumnDefV ::= NOT NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefV",241, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // ColumnDefW ::= FOR REPLICATION ColumnDefV 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefW",243, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // ColumnDefW ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefW",243, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // ColumnDefX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefX",242, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // ColumnDefX ::= NOT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefX",242, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // ColumnDefY ::= ColumnConstrB ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",245, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // ColumnDefY ::= ROWGUIDCOL ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",245, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // ColumnDefY ::= ColumnDefX ColumnDefW ColumnDefH ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",245, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // ColumnDefY ::= IDENTITY ColumnDefF NFR ColumnDefH ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",245, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // ColumnDefY ::= DEFAULT ColumnDefD ColumnDefE NFR ColumnDefH ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",245, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // ColumnDefZ ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefZ",244, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // ColumnDefZ ::= ColumnDefY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefZ",244, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // ColumnDefZ ::= CONSTRAINT ID ColumnDefY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefZ",244, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // ColumnDef ::= ID Tipo_dato ColumnDefA ColumnDefZ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDef",133, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // CNCA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNCA",132, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // CNCA ::= Coma CNC CNCA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNCA",132, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // CNC ::= TableIndex 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNC",131, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // CNC ::= TableConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNC",131, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // CNC ::= ColumnDef 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNC",131, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // NFR2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR2",240, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // NFR2 ::= NOT ColumnDefG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR2",240, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // NFR1 ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR1",239, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // NFR1 ::= FOR REPLICATION NFR2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR1",239, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // NFR ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR",130, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // NFR ::= NOT NFR1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR",130, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // FileGroup ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileGroup",129, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // FileGroup ::= ON PRIMARY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileGroup",129, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // CreateTable ::= TABLE Object3 AbreParentesis CNC CNCA CierraParentesis FileGroup 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateTable",128, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // OptionalOn ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OptionalOn",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // OptionalOn ::= ON ID AbreParentesis ID CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OptionalOn",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // IncludeIndex ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IncludeIndex",126, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // IncludeIndex ::= INCLUDE ColumnList 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IncludeIndex",126, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // ColumnIndexB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndexB",125, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // ColumnIndexB ::= Coma ID OrderB ColumnIndexB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndexB",125, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // ColumnIndexA ::= ID OrderB ColumnIndexB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndexA",124, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // ColumnIndex ::= AbreParentesis ColumnIndexA CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndex",123, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // CreateIndexA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateIndexA",122, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // CreateIndexA ::= UNIQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateIndexA",122, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // CreateIndex ::= CreateIndexA ColumnConstrC INDEX ID ON Object3 ColumnIndex IncludeIndex Where OptionalOn 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateIndex",121, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // CreateView ::= VIEW Object2 AS Select 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateView",120, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // Filegrowth_A ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth_A",119, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // Filegrowth_A ::= MODULAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth_A",119, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // Filegrowth_A ::= Size_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth_A",119, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // Filegrowth ::= FILEGROWTH Igual Entero Filegrowth_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth",118, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // Maxsize_A ::= UNLIMITED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Maxsize_A",117, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // Maxsize_A ::= Entero Size_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Maxsize_A",117, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // Maxsize ::= MAXSIZE Igual Maxsize_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Maxsize",116, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // Size_A ::= TB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size_A",115, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // Size_A ::= GB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size_A",115, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // Size_A ::= MB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size_A",115, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // Size_A ::= KB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size_A",115, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // Sizenw ::= SIZE Igual Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sizenw",247, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // Sizew ::= SIZE Igual Entero Size_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sizew",246, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // Size ::= Sizenw 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size",114, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // Size ::= Sizew 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size",114, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // Optional ::= Filegrowth 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optional",113, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // Optional ::= Maxsize 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optional",113, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // Optional ::= Size 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optional",113, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // Optionals ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optionals",111, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // Optionals ::= Coma Optional Optionals 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optionals",111, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // COLLATEDB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLLATEDB",109, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // COLLATEDB ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLLATEDB",109, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // FileDB ::= FILENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileDB",258, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // FileDB ::= FILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileDB",258, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // NameDB ::= NAMES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NameDB",257, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // NameDB ::= NAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NameDB",257, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // FileSpec ::= AbreParentesis NameDB Igual Cadena Coma FileDB Igual Cadena Optionals CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileSpec",108, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // FileSpecs ::= FileSpec 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileSpecs",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // FileSpecs ::= FileSpec Coma FileSpecs 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileSpecs",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // Primary ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Primary",106, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // Primary ::= PRIMARY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Primary",106, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // CreateDBB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDBB",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // CreateDBB ::= ON Primary FileSpecs 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDBB",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // CreateDBA ::= CreateDBB COLLATEDB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDBA",104, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // CreateDB ::= DATABASE ID CreateDBA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDB",103, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // CreateUser ::= USER Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateUser",102, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // CreateA ::= Function 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",101, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // CreateA ::= Procedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",101, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // CreateA ::= CreateView 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",101, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // CreateA ::= CreateUser 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",101, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // CreateA ::= CreateIndex 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",101, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // CreateA ::= CreateDB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",101, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // CreateA ::= CreateTable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",101, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // Create ::= CREATE CreateA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Create",100, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // Outer ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Outer",99, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // Outer ::= OUTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Outer",99, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // Type ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",98, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // Type ::= FULL Outer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",98, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // Type ::= LEFT Outer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",98, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // Type ::= RIGHT Outer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",98, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // Type ::= INNER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",98, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // Join ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Join",97, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // Join ::= Type JOIN Object3 Alias ON NSC Join 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Join",97, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // FromSelectA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromSelectA",96, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // FromSelectA ::= Coma Object3 Alias Join 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromSelectA",96, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // FromSelect ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromSelect",95, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // FromSelect ::= FROM Object3 Alias Join FromSelectA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromSelect",95, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // FromUpdate ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromUpdate",94, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // FromUpdate ::= FROM Object3 DeleteC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromUpdate",94, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // UpdateC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateC",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // UpdateC ::= Coma UpdateA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateC",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // UpdateB ::= Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateB",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // UpdateB ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateB",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // UpdateA ::= ID Igual UpdateB UpdateC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateA",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // Update ::= UPDATE Top Object3 SET UpdateA FromUpdate Where 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Update",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // Server ::= AbreParentesis ID Coma Entero CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Server",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // DeleteC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteC",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // DeleteC ::= Coma Object3 DeleteC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteC",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // DeleteB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteB",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // DeleteB ::= FROM Object3 DeleteC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteB",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // DeleteA ::= Object3 DeleteB Where 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteA",86, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // DeleteA ::= OPENQUERY Server 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteA",86, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // FromDelete ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromDelete",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // FromDelete ::= FROM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromDelete",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // Delete ::= DELETE Top FromDelete DeleteA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Delete",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // InsertValoresA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValoresA",83, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // InsertValoresA ::= Coma AbreParentesis InsertExpresion CierraParentesis InsertValoresA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValoresA",83, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // InsertValores ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValores",82, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // InsertValores ::= DEFAULT VALUES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValores",82, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // InsertValores ::= VALUES AbreParentesis InsertExpresion CierraParentesis InsertValoresA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValores",82, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // InsertExpresionB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionB",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // InsertExpresionB ::= Coma InsertExpresionA InsertExpresionB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionB",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // InsertExpresionA ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // InsertExpresionA ::= Flotante 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // InsertExpresionA ::= Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // InsertExpresionA ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // InsertExpresion ::= InsertExpresionA InsertExpresionB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresion",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // InsertColumnList ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertColumnList",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // InsertColumnList ::= ColumnList 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertColumnList",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // InsertInto ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertInto",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // InsertInto ::= INTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertInto",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // Insert ::= INSERT Top InsertInto Object3 InsertColumnList InsertValores 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Insert",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // GroupA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GroupA",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // GroupA ::= Coma Expresion GroupA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GroupA",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // Group ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Group",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // Group ::= GROUP BY Expresion GroupA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Group",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // OrderC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderC",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // OrderC ::= Coma Expresion OrderA OrderB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderC",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // OrderB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderB",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // OrderB ::= DESC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderB",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // OrderB ::= ASC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderB",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // OrderA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderA",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // OrderA ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderA",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // Order ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Order",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // Order ::= ORDER BY Expresion OrderA OrderB OrderC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Order",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // Having ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Having",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // Having ::= HAVING NSC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Having",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // SelectA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectA",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // SelectA ::= DISTINCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectA",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // SelectA ::= ALL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectA",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // Select ::= SELECT SelectA Top SelectColumns FromSelect Where Group Having Order 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Select",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // ColumnListB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnListB",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // ColumnListB ::= Coma ID ColumnListB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnListB",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // ColumnListA ::= ID ColumnListB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnListA",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // ColumnList ::= AbreParentesis ColumnListA CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnList",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // SelectColumnsA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectColumnsA",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // SelectColumnsA ::= Coma Expresion Alias SelectColumnsA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectColumnsA",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // SelectColumns ::= Multiplicacion SelectColumnsA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectColumns",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // SelectColumns ::= Expresion Alias SelectColumnsA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectColumns",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // Where ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Where",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // Where ::= WHERE NSC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Where",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // NSEaritF ::= Multiplicacion CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NSEaritF",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // NSEaritF ::= Entero CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NSEaritF",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // NSEaritF ::= Object2 CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NSEaritF",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // NSEaritE ::= COUNT AbreParentesis NSEaritF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NSEaritE",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // NSEaritE ::= MAX AbreParentesis NSEaritF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NSEaritE",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // NSEaritE ::= MIN AbreParentesis NSEaritF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NSEaritE",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // NSEaritE ::= AVG AbreParentesis NSEaritF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NSEaritE",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // NSEaritE ::= SUM AbreParentesis NSEaritF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NSEaritE",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // NSEaritE ::= Variable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NSEaritE",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // NSEaritE ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NSEaritE",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // NSEaritE ::= Flotante 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NSEaritE",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // NSEaritE ::= Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NSEaritE",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // NSEaritE ::= Object2 CallFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NSEaritE",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // NSEaritD ::= NSEaritE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NSEaritD",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // NSEaritD ::= AbreParentesis NSC CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NSEaritD",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // NSEaritC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NSEaritC",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // NSEaritC ::= Division NSEaritD NSEaritC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NSEaritC",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // NSEaritC ::= Multiplicacion NSEaritD NSEaritC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NSEaritC",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // NSEaritB ::= NSEaritD NSEaritC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NSEaritB",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // NSEaritA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NSEaritA",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // NSEaritA ::= Resta NSEaritB NSEaritA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NSEaritA",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // NSEaritA ::= Suma NSEaritB NSEaritA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NSEaritA",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // NSEarit ::= NSEaritB NSEaritA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NSEarit",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // NSEarits ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NSEarits",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // NSEarits ::= Coma NSEarit NSEarits 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NSEarits",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // NPredC ::= LIKE NSEarit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NPredC",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // NPredC ::= BETWEEN NSEarit AND NSEarit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NPredC",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // NPredC ::= IN AbreParentesis NSEarit NSEarits CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NPredC",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // NPredA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NPredA",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // NPredA ::= Not NPredC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NPredA",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // NPredA ::= IS Not NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NPredA",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // NPredA ::= OperadoresBooleanos NSEarit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NPredA",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // NPred ::= NSEarit NPredA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NPred",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // NSCA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NSCA",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // NSCA ::= OR NSC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NSCA",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // NSCA ::= AND NSC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NSCA",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // NSC ::= Not NPred NSCA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NSC",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // OperadoresBooleanos ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // OperadoresBooleanos ::= Menor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // OperadoresBooleanos ::= MayorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // OperadoresBooleanos ::= Mayor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // OperadoresBooleanos ::= NoIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // OperadoresBooleanos ::= Igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // TopA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TopA",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // TopA ::= PERCENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TopA",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Top ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Top",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Top ::= TOP AbreParentesis Entero CierraParentesis TopA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Top",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Not ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Not",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Not ::= NOT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Not",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ExpresionF ::= Multiplicacion CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionF",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ExpresionF ::= Entero CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionF",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ExpresionF ::= Object4 CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionF",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // FunctionContentA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FunctionContentA",255, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // FunctionContentA ::= Coma FunctionContent 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FunctionContentA",255, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // FunctionContent ::= DType FunctionContentA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FunctionContent",254, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // CallFunction ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CallFunction",253, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // CallFunction ::= AbreParentesis FunctionContent CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CallFunction",253, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ExpresionE ::= COUNT AbreParentesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ExpresionE ::= MAX AbreParentesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ExpresionE ::= MIN AbreParentesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ExpresionE ::= AVG AbreParentesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ExpresionE ::= SUM AbreParentesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ExpresionE ::= Variable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ExpresionE ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ExpresionE ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ExpresionE ::= Flotante 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ExpresionE ::= Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ExpresionE ::= Object4 CallFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ExpresionD ::= ExpresionE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionD",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ExpresionD ::= AbreParentesis Expresion CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionD",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ExpresionC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionC",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ExpresionC ::= Division ExpresionD ExpresionC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionC",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ExpresionC ::= Multiplicacion ExpresionD ExpresionC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionC",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ExpresionB ::= ExpresionD ExpresionC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionB",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ExpresionA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ExpresionA ::= Resta ExpresionB ExpresionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ExpresionA ::= Suma ExpresionB ExpresionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Expresion ::= ExpresionB ExpresionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Expresion",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // AliasA ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AliasA",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // AliasA ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AliasA",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Alias ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alias",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Alias ::= AliasA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alias",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Alias ::= AS AliasA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alias",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Truncate ::= TRUNCATE TABLE Object3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Truncate",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DropFunction ::= FUNCTION IFE Object2 DropProcedureA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropFunction",264, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // DropProcedureA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropProcedureA",263, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // DropProcedureA ::= Coma Object2 DropProcedureA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropProcedureA",263, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DropProcedure ::= SP_Reservada IFE Object2 DropProcedureA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropProcedure",262, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DropIndexB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndexB",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // DropIndexB ::= Coma DropIndexA DropIndexB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndexB",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // DropIndexA ::= ID ON Object3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndexA",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // DropIndex ::= INDEX IFE DropIndexA DropIndexB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndex",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // DropViewA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropViewA",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DropViewA ::= Coma Object2 DropViewA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropViewA",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DropView ::= VIEW IFE Object2 DropViewA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropView",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DropDatabaseA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropDatabaseA",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DropDatabaseA ::= Coma ID DropDatabaseA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropDatabaseA",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DropDatabase ::= DATABASE IFE ID DropDatabaseA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropDatabase",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DropUser ::= USER IFE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropUser",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DropTableA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropTableA",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DropTableA ::= Coma Object3 DropTableA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropTableA",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DropTable ::= TABLE IFE Object3 DropTableA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropTable",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DropA ::= DropFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DropA ::= DropProcedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DropA ::= DropIndex 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DropA ::= DropView 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DropA ::= DropDatabase 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DropA ::= DropUser 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DropA ::= DropTable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Drop ::= DROP DropA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Drop",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Tipo_datoC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoC",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Tipo_datoC ::= Coma Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoC",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Tipo_datoB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoB",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Tipo_datoB ::= AbreParentesis Entero Tipo_datoC CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoB",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Tipo_datoA ::= XML 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Tipo_datoA ::= VARBINARY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Tipo_datoA ::= UNIQUEIDENTIFIER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Tipo_datoA ::= TINYINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Tipo_datoA ::= TEXT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Tipo_datoA ::= SQL_VARIANT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Tipo_datoA ::= SMALLMONEY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Tipo_datoA ::= SMALLDATETIME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Tipo_datoA ::= ROWVERSION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Tipo_datoA ::= NVARCHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Tipo_datoA ::= NTEXT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Tipo_datoA ::= MONEY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Tipo_datoA ::= IMAGE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Tipo_datoA ::= HIERARCHYID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Tipo_datoA ::= DATETIMEOFFSET 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Tipo_datoA ::= DATETIME2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Tipo_datoA ::= DATETIME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Tipo_datoA ::= BINARY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Tipo_datoA ::= BIGINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Tipo_datoA ::= NUMERIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Tipo_datoA ::= SMALLINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Tipo_datoA ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Tipo_datoA ::= INT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Tipo_datoA ::= TIME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Tipo_datoA ::= REAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Tipo_datoA ::= NCHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Tipo_datoA ::= CURSOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Tipo_datoA ::= CHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Tipo_datoA ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Tipo_datoA ::= BIT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Tipo_datoA ::= DATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Tipo_datoA ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Tipo_datoA ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Tipo_datoA ::= VARCHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Tipo_datoD ::= AbreCorchetes Tipo_datoA CierraCorchetes 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoD",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Tipo_datoD ::= Tipo_datoA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoD",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Tipo_dato ::= Tipo_datoD Tipo_datoB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_dato",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Variable ::= Arroba Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variable",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // IFE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IFE ::= IF EXISTS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Object4A ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object4A",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Object4A ::= Punto Object3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object4A",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Object4 ::= ID Object4A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object4",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Object3A ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object3A",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Object3A ::= Punto Object2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object3A",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Object3 ::= ID Object3A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object3",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Object2A ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object2A",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Object2A ::= Punto ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object2A",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Object2 ::= ID Object2A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object2",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ID ::= AbreCorchetes Identificador CierraCorchetes 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ID",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ID ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ID",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Final ::= GO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Final",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Final ::= PyC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Final",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TSQL ::= ExecProcedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TSQL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TSQL ::= CursorDeclare 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TSQL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TCL ::= BeginTran Final InicialB FinalTran 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DDL ::= error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DDL ::= Truncate Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DDL ::= Drop Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DDL ::= Alter Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DDL ::= Create Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DML ::= error Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DML ::= Update Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DML ::= Delete Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DML ::= Insert Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DML ::= Select Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // InicialB ::= SavePoint Final InicialB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialB",238, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // InicialB ::= USE Object4 Final Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialB",238, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // InicialB ::= TSQL Final Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialB",238, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // InicialB ::= TCL Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialB",238, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // InicialB ::= DDL Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialB",238, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // InicialB ::= DML Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialB",238, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // InicialA ::= USE Object4 Final Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // InicialA ::= TSQL Final Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // InicialA ::= TCL Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // InicialA ::= DDL Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // InicialA ::= DML Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Inicial ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicial",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicial ::= InicialA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicial",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

