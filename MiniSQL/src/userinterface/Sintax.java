
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Oct 31 10:21:45 CST 2019
//----------------------------------------------------

package userinterface;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.virtual_parse_stack;
import java.lang.reflect.Field;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Oct 31 10:21:45 CST 2019
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u020f\000\002\002\004\000\002\003\005\000\002\003" +
    "\005\000\002\003\002\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\010\003\000\002\010\003\000" +
    "\002\011\003\000\002\011\003\000\002\012\003\000\002" +
    "\012\005\000\002\013\004\000\002\014\004\000\002\014" +
    "\002\000\002\015\004\000\002\016\004\000\002\016\002" +
    "\000\002\017\004\000\002\020\004\000\002\020\002\000" +
    "\002\021\004\000\002\021\002\000\002\022\004\000\002" +
    "\023\004\000\002\024\003\000\002\024\005\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\026\006\000\002\026\002\000\002" +
    "\027\004\000\002\027\002\000\002\030\004\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\032\006\000\002\033\005\000" +
    "\002\033\002\000\002\034\005\000\002\035\006\000\002" +
    "\036\005\000\002\036\002\000\002\037\006\000\002\040" +
    "\005\000\002\040\002\000\002\041\006\000\002\042\005" +
    "\000\002\043\005\000\002\043\002\000\002\044\005\000" +
    "\002\045\004\000\002\045\003\000\002\045\002\000\002" +
    "\046\003\000\002\046\003\000\002\047\004\000\002\050" +
    "\005\000\002\050\005\000\002\050\002\000\002\051\004" +
    "\000\002\052\005\000\002\052\005\000\002\052\002\000" +
    "\002\053\005\000\002\053\003\000\002\054\003\000\002" +
    "\054\003\000\002\054\003\000\002\054\003\000\002\054" +
    "\003\000\002\054\003\000\002\054\005\000\002\054\005" +
    "\000\002\054\005\000\002\054\005\000\002\054\005\000" +
    "\002\055\004\000\002\055\004\000\002\055\004\000\002" +
    "\056\003\000\002\056\002\000\002\057\007\000\002\057" +
    "\002\000\002\060\003\000\002\060\002\000\002\061\005" +
    "\000\002\061\002\000\002\062\005\000\002\062\006\000" +
    "\002\063\004\000\002\063\004\000\002\063\002\000\002" +
    "\064\004\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\065\004\000\002\065\005\000\002\065\004\000" +
    "\002\066\007\000\002\066\006\000\002\066\004\000\002" +
    "\067\004\000\002\067\002\000\002\070\005\000\002\070" +
    "\004\000\002\071\006\000\002\071\002\000\002\072\005" +
    "\000\002\073\004\000\002\074\005\000\002\074\002\000" +
    "\002\075\013\000\002\076\003\000\002\076\003\000\002" +
    "\076\002\000\002\077\004\000\002\077\002\000\002\100" +
    "\010\000\002\100\002\000\002\101\004\000\002\101\002" +
    "\000\002\102\003\000\002\102\003\000\002\102\002\000" +
    "\002\103\005\000\002\103\002\000\002\104\006\000\002" +
    "\104\002\000\002\105\005\000\002\105\002\000\002\106" +
    "\010\000\002\107\003\000\002\107\002\000\002\110\003" +
    "\000\002\110\002\000\002\111\004\000\002\112\003\000" +
    "\002\112\003\000\002\112\003\000\002\112\003\000\002" +
    "\113\005\000\002\113\002\000\002\114\007\000\002\114" +
    "\004\000\002\114\002\000\002\115\007\000\002\115\002" +
    "\000\002\116\006\000\002\117\003\000\002\117\002\000" +
    "\002\120\004\000\002\120\005\000\002\121\005\000\002" +
    "\122\005\000\002\122\002\000\002\123\007\000\002\124" +
    "\011\000\002\125\006\000\002\126\003\000\002\126\003" +
    "\000\002\127\004\000\002\127\002\000\002\130\005\000" +
    "\002\130\002\000\002\131\007\000\002\131\002\000\002" +
    "\132\006\000\002\132\002\000\002\133\011\000\002\133" +
    "\002\000\002\134\003\000\002\134\004\000\002\134\004" +
    "\000\002\134\004\000\002\134\002\000\002\135\003\000" +
    "\002\135\002\000\002\136\004\000\002\137\003\000\002" +
    "\137\003\000\002\137\003\000\002\137\003\000\002\137" +
    "\003\000\002\137\003\000\002\137\003\000\002\140\004" +
    "\000\002\141\005\000\002\142\004\000\002\143\005\000" +
    "\002\143\002\000\002\144\003\000\002\144\002\000\002" +
    "\145\005\000\002\145\003\000\002\146\014\000\002\147" +
    "\004\000\002\147\002\000\002\151\005\000\002\151\002" +
    "\000\002\153\003\000\002\153\003\000\002\153\003\000" +
    "\002\154\003\000\002\154\003\000\002\360\006\000\002" +
    "\361\005\000\002\155\003\000\002\155\003\000\002\155" +
    "\003\000\002\155\003\000\002\156\005\000\002\157\004" +
    "\000\002\157\003\000\002\160\006\000\002\161\003\000" +
    "\002\161\003\000\002\161\002\000\002\162\006\000\002" +
    "\163\014\000\002\164\003\000\002\164\002\000\002\165" +
    "\005\000\002\166\005\000\002\167\006\000\002\167\002" +
    "\000\002\170\004\000\002\170\002\000\002\171\007\000" +
    "\002\171\002\000\002\172\011\000\002\173\004\000\002" +
    "\173\002\000\002\174\004\000\002\174\002\000\002\351" +
    "\005\000\002\351\003\000\002\352\004\000\002\352\002" +
    "\000\002\175\003\000\002\175\003\000\002\175\003\000" +
    "\002\176\005\000\002\176\002\000\002\177\006\000\002" +
    "\356\005\000\002\356\003\000\002\356\002\000\002\357" +
    "\010\000\002\357\007\000\002\357\006\000\002\357\004" +
    "\000\002\357\004\000\002\354\003\000\002\354\002\000" +
    "\002\355\003\000\002\355\005\000\002\353\004\000\002" +
    "\353\003\000\002\353\002\000\002\200\004\000\002\200" +
    "\002\000\002\201\003\000\002\201\003\000\002\201\003" +
    "\000\002\201\003\000\002\202\004\000\002\202\002\000" +
    "\002\203\007\000\002\203\002\000\002\204\003\000\002" +
    "\204\002\000\002\205\003\000\002\205\002\000\002\206" +
    "\005\000\002\206\002\000\002\207\004\000\002\207\002" +
    "\000\002\210\005\000\002\210\004\000\002\210\010\000" +
    "\002\210\007\000\002\211\003\000\002\211\003\000\002" +
    "\211\002\000\002\212\004\000\002\212\002\000\002\213" +
    "\005\000\002\213\002\000\002\214\005\000\002\214\002" +
    "\000\002\215\004\000\002\215\004\000\002\216\003\000" +
    "\002\216\003\000\002\217\003\000\002\217\004\000\002" +
    "\220\004\000\002\221\006\000\002\221\005\000\002\221" +
    "\012\000\002\221\007\000\002\222\007\000\002\223\006" +
    "\000\002\223\002\000\002\224\006\000\002\225\005\000" +
    "\002\225\002\000\002\226\006\000\002\227\004\000\002" +
    "\230\003\000\002\230\003\000\002\230\003\000\002\230" +
    "\003\000\002\230\003\000\002\230\003\000\002\231\005" +
    "\000\002\232\003\000\002\232\003\000\002\233\004\000" +
    "\002\233\005\000\002\234\004\000\002\235\007\000\002" +
    "\236\003\000\002\236\002\000\002\237\005\000\002\240" +
    "\003\000\002\240\005\000\002\240\003\000\002\241\006" +
    "\000\002\242\003\000\002\242\004\000\002\243\005\000" +
    "\002\244\003\000\002\244\003\000\002\245\003\000\002" +
    "\245\005\000\002\246\005\000\002\247\005\000\002\247" +
    "\005\000\002\250\003\000\002\250\002\000\002\251\005" +
    "\000\002\251\002\000\002\253\005\000\002\254\004\000" +
    "\002\254\002\000\002\255\005\000\002\255\002\000\002" +
    "\256\003\000\002\256\002\000\002\257\005\000\002\260" +
    "\003\000\002\260\003\000\002\261\003\000\002\261\003" +
    "\000\002\261\002\000\002\262\003\000\002\262\003\000" +
    "\002\263\004\000\002\264\004\000\002\264\002\000\002" +
    "\265\004\000\002\266\004\000\002\266\002\000\002\267" +
    "\013\000\002\270\003\000\002\270\003\000\002\271\004" +
    "\000\002\271\002\000\002\272\003\000\002\272\002\000" +
    "\002\273\005\000\002\274\004\000\002\274\002\000\002" +
    "\275\005\000\002\275\005\000\002\275\004\000\002\276" +
    "\004\000\002\276\002\000\002\277\003\000\002\277\002" +
    "\000\002\300\003\000\002\300\003\000\002\301\004\000" +
    "\002\301\002\000\002\302\004\000\002\303\003\000\002" +
    "\303\003\000\002\303\005\000\002\304\003\000\002\304" +
    "\003\000\002\305\004\000\002\305\002\000\002\306\003" +
    "\000\002\306\003\000\002\306\003\000\002\306\003\000" +
    "\002\307\004\000\002\307\002\000\002\310\005\000\002" +
    "\311\004\000\002\312\004\000\002\312\002\000\002\313" +
    "\003\000\002\313\002\000\002\340\015\000\002\341\003" +
    "\000\002\341\003\000\002\341\002\000\002\342\003\000" +
    "\002\342\003\000\002\342\002\000\002\343\003\000\002" +
    "\343\003\000\002\343\003\000\002\343\003\000\002\343" +
    "\002\000\002\344\003\000\002\344\003\000\002\344\003" +
    "\000\002\344\002\000\002\345\003\000\002\345\002\000" +
    "\002\346\005\000\002\346\002\000\002\347\004\000\002" +
    "\347\002\000\002\314\012\000\002\315\003\000\002\315" +
    "\002\000\002\316\004\000\002\316\002\000\002\317\006" +
    "\000\002\320\004\000\002\321\004\000\002\321\002\000" +
    "\002\322\003\000\002\322\002\000\002\323\003\000\002" +
    "\323\002\000\002\324\003\000\002\324\003\000\002\325" +
    "\012\000\002\326\007\000\002\327\005\000\002\327\003" +
    "\000\002\330\003\000\002\330\003\000\002\330\003\000" +
    "\002\330\003\000\002\331\004\000\002\332\004\000\002" +
    "\333\003\000\002\333\003\000\002\333\007\000\002\333" +
    "\006\000\002\333\003\000\002\333\005\000\002\334\004" +
    "\000\002\334\002\000\002\335\003\000\002\335\003\000" +
    "\002\366\005\000\002\362\004\000\002\362\007\000\002" +
    "\362\005\000\002\363\006\000\002\363\004\000\002\364" +
    "\004\000\002\364\002\000\002\365\003\000\002\365\003" +
    "\000\002\365\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u037f\000\044\002\ufffe\003\023\102\015\125\020\146" +
    "\047\162\033\173\021\200\034\202\045\227\035\267\007" +
    "\270\026\276\014\310\013\322\037\346\044\351\012\001" +
    "\002\000\006\021\u02cd\u010f\u02cc\001\002\000\022\021\ufff6" +
    "\132\ufff6\173\ufff6\200\ufff6\276\ufff6\310\ufff6\332\ufff6\u010f" +
    "\ufff6\001\002\000\006\021\ufffc\u010f\ufffc\001\002\000\004" +
    "\234\u037e\001\002\000\022\021\ufff7\132\ufff7\173\ufff7\200" +
    "\ufff7\276\ufff7\310\ufff7\332\ufff7\u010f\ufff7\001\002\000\006" +
    "\021\ufffd\u010f\ufffd\001\002\000\010\011\ufe46\031\ufe46\112" +
    "\ufe46\001\002\000\010\011\uff7d\031\uff7d\253\u028b\001\002" +
    "\000\014\011\uff7d\031\uff7d\123\uff7d\253\u028b\307\uff7d\001" +
    "\002\000\022\076\213\131\ufe1c\234\u0323\257\u031e\321\u031f" +
    "\331\u0324\360\ufe1c\u0106\ufe1c\001\002\000\006\021\ufff3\u010f" +
    "\ufff3\001\002\000\022\021\ufff9\132\ufff9\173\ufff9\200\ufff9" +
    "\276\ufff9\310\ufff9\332\ufff9\u010f\ufff9\001\002\000\006\256" +
    "\054\261\051\001\002\000\044\007\uff59\011\uff59\012\uff59" +
    "\024\uff59\031\uff59\032\uff59\037\uff59\043\uff59\253\uff59\260" +
    "\uff59\311\u02cf\370\u02d0\u010b\uff59\u0138\uff59\u013d\uff59\u0148\uff59" +
    "\u0149\uff59\001\002\000\006\021\ufff0\u010f\ufff0\001\002\000" +
    "\006\021\u02cd\u010f\u02cc\001\002\000\006\021\ufffb\u010f\ufffb" +
    "\001\002\000\006\021\ufff2\u010f\ufff2\001\002\000\006\011" +
    "\061\031\057\001\002\000\006\021\ufffa\u010f\ufffa\001\002" +
    "\000\006\021\uffec\u010f\uffec\001\002\000\022\021\ufff8\132" +
    "\ufff8\173\ufff8\200\ufff8\276\ufff8\310\ufff8\332\ufff8\u010f\ufff8" +
    "\001\002\000\006\021\ufff5\u010f\ufff5\001\002\000\006\256" +
    "\054\261\051\001\002\000\012\011\uff7d\031\uff7d\206\uff7d" +
    "\253\u028b\001\002\000\032\076\213\131\ufe1c\166\ufeef\172" +
    "\ufeef\234\207\252\ufeef\257\201\302\203\321\202\331\206" +
    "\360\ufe1c\u0106\ufe1c\001\002\000\006\021\uffee\u010f\uffee\001" +
    "\002\000\014\172\120\234\125\257\121\321\122\331\124" +
    "\001\002\000\006\021\uffef\u010f\uffef\001\002\000\006\021" +
    "\ufff1\u010f\ufff1\001\002\000\004\002\115\001\002\000\006" +
    "\021\uffed\u010f\uffed\001\002\000\010\011\ufe45\031\ufe45\112" +
    "\ufe45\001\002\000\012\021\ufe63\256\054\261\051\u010f\ufe63" +
    "\001\002\000\006\011\061\031\057\001\002\000\012\021" +
    "\ufe60\256\054\261\051\u010f\ufe60\001\002\000\006\021\ufff4" +
    "\u010f\ufff4\001\002\000\014\011\ufe66\021\ufe66\024\ufe66\031" +
    "\ufe66\u010f\ufe66\001\002\000\006\021\ufe62\u010f\ufe62\001\002" +
    "\000\014\011\061\021\ufe68\024\060\031\057\u010f\ufe68\001" +
    "\002\000\014\011\ufe67\021\ufe67\024\ufe67\031\ufe67\u010f\ufe67" +
    "\001\002\000\006\021\ufe6a\u010f\ufe6a\001\002\000\006\021" +
    "\ufe69\u010f\ufe69\001\002\000\004\011\064\001\002\000\004" +
    "\011\063\001\002\000\336\004\uffe9\005\uffe9\006\uffe9\007" +
    "\uffe9\010\uffe9\011\uffe9\012\uffe9\014\uffe9\015\uffe9\016\uffe9" +
    "\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\031" +
    "\uffe9\032\uffe9\037\uffe9\043\uffe9\047\uffe9\050\uffe9\051\uffe9" +
    "\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9\060" +
    "\uffe9\061\uffe9\062\uffe9\063\uffe9\064\uffe9\065\uffe9\066\uffe9" +
    "\067\uffe9\070\uffe9\071\uffe9\072\uffe9\074\uffe9\075\uffe9\076" +
    "\uffe9\102\uffe9\110\uffe9\112\uffe9\113\uffe9\116\uffe9\123\uffe9" +
    "\125\uffe9\126\uffe9\130\uffe9\132\uffe9\142\uffe9\143\uffe9\145" +
    "\uffe9\153\uffe9\154\uffe9\155\uffe9\166\uffe9\167\uffe9\173\uffe9" +
    "\174\uffe9\175\uffe9\200\uffe9\210\uffe9\211\uffe9\212\uffe9\214" +
    "\uffe9\225\uffe9\230\uffe9\252\uffe9\254\uffe9\255\uffe9\260\uffe9" +
    "\273\uffe9\276\uffe9\302\uffe9\303\uffe9\310\uffe9\317\uffe9\322" +
    "\uffe9\323\uffe9\325\uffe9\332\uffe9\342\uffe9\350\uffe9\352\uffe9" +
    "\u0100\uffe9\u0104\uffe9\u010a\uffe9\u010b\uffe9\u010f\uffe9\u0110\uffe9\u011d" +
    "\uffe9\u0126\uffe9\u0129\uffe9\u012c\uffe9\u0138\uffe9\u013d\uffe9\u013f\uffe9" +
    "\u0148\uffe9\u0149\uffe9\u014b\uffe9\u0155\uffe9\u0158\uffe9\u0165\uffe9\u0166" +
    "\uffe9\u016b\uffe9\u0176\uffe9\001\002\000\006\021\ufe61\u010f\ufe61" +
    "\001\002\000\270\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010" +
    "\uffdc\011\uffdc\012\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc" +
    "\020\uffdc\021\uffdc\022\uffdc\024\uffdc\031\uffdc\032\uffdc\037" +
    "\uffdc\043\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc" +
    "\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc\062" +
    "\uffdc\063\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc\070\uffdc" +
    "\071\uffdc\072\uffdc\075\uffdc\076\uffdc\110\uffdc\112\uffdc\123" +
    "\uffdc\126\uffdc\130\uffdc\132\uffdc\142\uffdc\143\uffdc\145\uffdc" +
    "\167\uffdc\173\uffdc\174\uffdc\175\uffdc\200\uffdc\211\uffdc\214" +
    "\uffdc\225\uffdc\230\uffdc\254\uffdc\255\uffdc\260\uffdc\276\uffdc" +
    "\303\uffdc\310\uffdc\317\uffdc\325\uffdc\332\uffdc\342\uffdc\350" +
    "\uffdc\u0100\uffdc\u0104\uffdc\u010a\uffdc\u010b\uffdc\u010f\uffdc\u0110\uffdc" +
    "\u011d\uffdc\u0126\uffdc\u0129\uffdc\u012c\uffdc\u0138\uffdc\u013d\uffdc\u013f" +
    "\uffdc\u0148\uffdc\u0149\uffdc\u014b\uffdc\u0155\uffdc\u0158\uffdc\u0165\uffdc" +
    "\u0166\uffdc\u016b\uffdc\001\002\000\004\046\065\001\002\000" +
    "\336\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8" +
    "\012\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021" +
    "\uffe8\022\uffe8\023\uffe8\024\uffe8\031\uffe8\032\uffe8\037\uffe8" +
    "\043\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054" +
    "\uffe8\055\uffe8\056\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8" +
    "\063\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\070\uffe8\071" +
    "\uffe8\072\uffe8\074\uffe8\075\uffe8\076\uffe8\102\uffe8\110\uffe8" +
    "\112\uffe8\113\uffe8\116\uffe8\123\uffe8\125\uffe8\126\uffe8\130" +
    "\uffe8\132\uffe8\142\uffe8\143\uffe8\145\uffe8\153\uffe8\154\uffe8" +
    "\155\uffe8\166\uffe8\167\uffe8\173\uffe8\174\uffe8\175\uffe8\200" +
    "\uffe8\210\uffe8\211\uffe8\212\uffe8\214\uffe8\225\uffe8\230\uffe8" +
    "\252\uffe8\254\uffe8\255\uffe8\260\uffe8\273\uffe8\276\uffe8\302" +
    "\uffe8\303\uffe8\310\uffe8\317\uffe8\322\uffe8\323\uffe8\325\uffe8" +
    "\332\uffe8\342\uffe8\350\uffe8\352\uffe8\u0100\uffe8\u0104\uffe8\u010a" +
    "\uffe8\u010b\uffe8\u010f\uffe8\u0110\uffe8\u011d\uffe8\u0126\uffe8\u0129\uffe8" +
    "\u012c\uffe8\u0138\uffe8\u013d\uffe8\u013f\uffe8\u0148\uffe8\u0149\uffe8\u014b" +
    "\uffe8\u0155\uffe8\u0158\uffe8\u0165\uffe8\u0166\uffe8\u016b\uffe8\u0176\uffe8" +
    "\001\002\000\216\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010" +
    "\uffe5\011\uffe5\012\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5" +
    "\020\uffe5\021\uffe5\022\uffe5\023\110\024\uffe5\031\uffe5\032" +
    "\uffe5\037\uffe5\043\uffe5\047\uffe5\074\uffe5\075\uffe5\076\uffe5" +
    "\102\uffe5\110\uffe5\112\uffe5\113\uffe5\116\uffe5\123\uffe5\126" +
    "\uffe5\130\uffe5\132\uffe5\142\uffe5\143\uffe5\145\uffe5\155\uffe5" +
    "\167\uffe5\173\uffe5\174\uffe5\175\uffe5\200\uffe5\210\uffe5\211" +
    "\uffe5\212\uffe5\214\uffe5\225\uffe5\230\uffe5\255\uffe5\260\uffe5" +
    "\273\uffe5\276\uffe5\302\uffe5\303\uffe5\310\uffe5\322\uffe5\323" +
    "\uffe5\325\uffe5\332\uffe5\342\uffe5\350\uffe5\352\uffe5\u0104\uffe5" +
    "\u010b\uffe5\u010f\uffe5\u0138\uffe5\u013d\uffe5\u0148\uffe5\u0149\uffe5\u016b" +
    "\uffe5\001\002\000\020\012\075\021\ufdfc\024\060\032\070" +
    "\037\071\043\076\u010f\ufdfc\001\002\000\012\012\075\024" +
    "\060\037\071\043\076\001\002\000\012\021\ufdf4\022\ufdf4" +
    "\047\ufdf4\u010f\ufdf4\001\002\000\004\004\102\001\002\000" +
    "\012\021\ufdf6\022\077\047\ufdf6\u010f\ufdf6\001\002\000\006" +
    "\021\ufdfa\u010f\ufdfa\001\002\000\012\021\ufdf5\022\ufdf5\047" +
    "\ufdf5\u010f\ufdf5\001\002\000\012\021\ufdf3\022\ufdf3\047\ufdf3" +
    "\u010f\ufdf3\001\002\000\012\012\075\024\060\037\071\043" +
    "\076\001\002\000\010\021\ufdf8\047\ufdf8\u010f\ufdf8\001\002" +
    "\000\010\021\ufdf7\047\ufdf7\u010f\ufdf7\001\002\000\010\012" +
    "\075\037\071\043\076\001\002\000\012\021\ufdf6\022\077" +
    "\047\ufdf6\u010f\ufdf6\001\002\000\010\021\ufdf9\047\ufdf9\u010f" +
    "\ufdf9\001\002\000\004\047\106\001\002\000\006\021\ufdfb" +
    "\u010f\ufdfb\001\002\000\214\004\uffe7\005\uffe7\006\uffe7\007" +
    "\uffe7\010\uffe7\011\uffe7\012\uffe7\014\uffe7\015\uffe7\016\uffe7" +
    "\017\uffe7\020\uffe7\021\uffe7\022\uffe7\024\uffe7\031\uffe7\032" +
    "\uffe7\037\uffe7\043\uffe7\047\uffe7\074\uffe7\075\uffe7\076\uffe7" +
    "\102\uffe7\110\uffe7\112\uffe7\113\uffe7\116\uffe7\123\uffe7\126" +
    "\uffe7\130\uffe7\132\uffe7\142\uffe7\143\uffe7\145\uffe7\155\uffe7" +
    "\167\uffe7\173\uffe7\174\uffe7\175\uffe7\200\uffe7\210\uffe7\211" +
    "\uffe7\212\uffe7\214\uffe7\225\uffe7\230\uffe7\255\uffe7\260\uffe7" +
    "\273\uffe7\276\uffe7\302\uffe7\303\uffe7\310\uffe7\322\uffe7\323" +
    "\uffe7\325\uffe7\332\uffe7\342\uffe7\350\uffe7\352\uffe7\u0104\uffe7" +
    "\u010b\uffe7\u010f\uffe7\u0138\uffe7\u013d\uffe7\u0148\uffe7\u0149\uffe7\u016b" +
    "\uffe7\001\002\000\006\011\061\031\057\001\002\000\214" +
    "\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012" +
    "\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6" +
    "\022\uffe6\024\uffe6\031\uffe6\032\uffe6\037\uffe6\043\uffe6\047" +
    "\uffe6\074\uffe6\075\uffe6\076\uffe6\102\uffe6\110\uffe6\112\uffe6" +
    "\113\uffe6\116\uffe6\123\uffe6\126\uffe6\130\uffe6\132\uffe6\142" +
    "\uffe6\143\uffe6\145\uffe6\155\uffe6\167\uffe6\173\uffe6\174\uffe6" +
    "\175\uffe6\200\uffe6\210\uffe6\211\uffe6\212\uffe6\214\uffe6\225" +
    "\uffe6\230\uffe6\255\uffe6\260\uffe6\273\uffe6\276\uffe6\302\uffe6" +
    "\303\uffe6\310\uffe6\322\uffe6\323\uffe6\325\uffe6\332\uffe6\342" +
    "\uffe6\350\uffe6\352\uffe6\u0104\uffe6\u010b\uffe6\u010f\uffe6\u0138\uffe6" +
    "\u013d\uffe6\u0148\uffe6\u0149\uffe6\u016b\uffe6\001\002\000\006\021" +
    "\ufe65\u010f\ufe65\001\002\000\014\011\061\021\ufe68\024\060" +
    "\031\057\u010f\ufe68\001\002\000\006\021\ufe64\u010f\ufe64\001" +
    "\002\000\004\002\001\001\002\000\006\021\uffb1\u010f\uffb1" +
    "\001\002\000\006\021\uffaf\u010f\uffaf\001\002\000\010\011" +
    "\uffdd\031\uffdd\164\132\001\002\000\010\011\uffdd\031\uffdd" +
    "\164\132\001\002\000\010\011\uffdd\031\uffdd\164\132\001" +
    "\002\000\006\021\uffb0\u010f\uffb0\001\002\000\010\011\uffdd" +
    "\031\uffdd\164\132\001\002\000\010\011\uffdd\031\uffdd\164" +
    "\132\001\002\000\006\021\uffb2\u010f\uffb2\001\002\000\006" +
    "\021\uffad\u010f\uffad\001\002\000\006\021\uffae\u010f\uffae\001" +
    "\002\000\006\011\061\031\057\001\002\000\004\354\133" +
    "\001\002\000\006\011\uffde\031\uffde\001\002\000\200\004" +
    "\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2" +
    "\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022" +
    "\uffe2\023\143\024\uffe2\031\uffe2\032\uffe2\037\uffe2\043\uffe2" +
    "\047\uffe2\074\uffe2\075\uffe2\076\uffe2\102\uffe2\110\uffe2\112" +
    "\uffe2\123\uffe2\126\uffe2\130\uffe2\132\uffe2\142\uffe2\143\uffe2" +
    "\145\uffe2\167\uffe2\173\uffe2\174\uffe2\175\uffe2\200\uffe2\211" +
    "\uffe2\212\uffe2\214\uffe2\225\uffe2\230\uffe2\255\uffe2\260\uffe2" +
    "\273\uffe2\276\uffe2\303\uffe2\310\uffe2\322\uffe2\323\uffe2\325" +
    "\uffe2\332\uffe2\342\uffe2\u0104\uffe2\u010b\uffe2\u010f\uffe2\u0138\uffe2" +
    "\u013d\uffe2\u0148\uffe2\u0149\uffe2\u016b\uffe2\001\002\000\010\021" +
    "\uffaa\022\136\u010f\uffaa\001\002\000\006\011\061\031\057" +
    "\001\002\000\006\021\uffac\u010f\uffac\001\002\000\010\021" +
    "\uffaa\022\136\u010f\uffaa\001\002\000\006\021\uffab\u010f\uffab" +
    "\001\002\000\176\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010" +
    "\uffe4\011\uffe4\012\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4" +
    "\020\uffe4\021\uffe4\022\uffe4\024\uffe4\031\uffe4\032\uffe4\037" +
    "\uffe4\043\uffe4\047\uffe4\074\uffe4\075\uffe4\076\uffe4\102\uffe4" +
    "\110\uffe4\112\uffe4\123\uffe4\126\uffe4\130\uffe4\132\uffe4\142" +
    "\uffe4\143\uffe4\145\uffe4\167\uffe4\173\uffe4\174\uffe4\175\uffe4" +
    "\200\uffe4\211\uffe4\212\uffe4\214\uffe4\225\uffe4\230\uffe4\255" +
    "\uffe4\260\uffe4\273\uffe4\276\uffe4\303\uffe4\310\uffe4\322\uffe4" +
    "\323\uffe4\325\uffe4\332\uffe4\342\uffe4\u0104\uffe4\u010b\uffe4\u010f" +
    "\uffe4\u0138\uffe4\u013d\uffe4\u0148\uffe4\u0149\uffe4\u016b\uffe4\001\002" +
    "\000\006\011\061\031\057\001\002\000\176\004\uffe3\005" +
    "\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\014\uffe3" +
    "\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\024" +
    "\uffe3\031\uffe3\032\uffe3\037\uffe3\043\uffe3\047\uffe3\074\uffe3" +
    "\075\uffe3\076\uffe3\102\uffe3\110\uffe3\112\uffe3\123\uffe3\126" +
    "\uffe3\130\uffe3\132\uffe3\142\uffe3\143\uffe3\145\uffe3\167\uffe3" +
    "\173\uffe3\174\uffe3\175\uffe3\200\uffe3\211\uffe3\212\uffe3\214" +
    "\uffe3\225\uffe3\230\uffe3\255\uffe3\260\uffe3\273\uffe3\276\uffe3" +
    "\303\uffe3\310\uffe3\322\uffe3\323\uffe3\325\uffe3\332\uffe3\342" +
    "\uffe3\u0104\uffe3\u010b\uffe3\u010f\uffe3\u0138\uffe3\u013d\uffe3\u0148\uffe3" +
    "\u0149\uffe3\u016b\uffe3\001\002\000\006\011\061\031\057\001" +
    "\002\000\010\021\uffa3\022\147\u010f\uffa3\001\002\000\006" +
    "\011\061\031\057\001\002\000\006\021\uffa5\u010f\uffa5\001" +
    "\002\000\010\021\uffa3\022\147\u010f\uffa3\001\002\000\006" +
    "\021\uffa4\u010f\uffa4\001\002\000\006\011\061\031\057\001" +
    "\002\000\006\021\uffa9\u010f\uffa9\001\002\000\006\011\061" +
    "\031\057\001\002\000\010\021\uffa6\022\157\u010f\uffa6\001" +
    "\002\000\006\011\061\031\057\001\002\000\006\021\uffa8" +
    "\u010f\uffa8\001\002\000\010\021\uffa6\022\157\u010f\uffa6\001" +
    "\002\000\006\021\uffa7\u010f\uffa7\001\002\000\006\011\061" +
    "\031\057\001\002\000\004\u016b\172\001\002\000\010\021" +
    "\uff9f\022\167\u010f\uff9f\001\002\000\006\021\uffa2\u010f\uffa2" +
    "\001\002\000\006\011\061\031\057\001\002\000\010\021" +
    "\uff9f\022\167\u010f\uff9f\001\002\000\006\021\uffa0\u010f\uffa0" +
    "\001\002\000\006\011\061\031\057\001\002\000\010\021" +
    "\uffa1\022\uffa1\u010f\uffa1\001\002\000\006\021\uff13\u010f\uff13" +
    "\001\002\000\006\021\uff19\u010f\uff19\001\002\000\006\021" +
    "\uff15\u010f\uff15\001\002\000\010\131\u0211\360\u0210\u0106\u020e" +
    "\001\002\000\006\021\uff14\u010f\uff14\001\002\000\006\011" +
    "\061\031\057\001\002\000\004\011\u01da\001\002\000\010" +
    "\166\ufef0\172\ufef0\252\ufef0\001\002\000\006\021\uff18\u010f" +
    "\uff18\001\002\000\006\021\uff1a\u010f\uff1a\001\002\000\006" +
    "\011\061\031\057\001\002\000\006\011\061\031\057\001" +
    "\002\000\006\021\uff17\u010f\uff17\001\002\000\006\021\uff16" +
    "\u010f\uff16\001\002\000\010\166\216\172\ufeb0\252\215\001" +
    "\002\000\004\102\214\001\002\000\010\131\ufe1d\360\ufe1d" +
    "\u0106\ufe1d\001\002\000\032\021\ufeb1\022\ufeb1\032\ufeb1\047" +
    "\ufeb1\113\ufeb1\116\ufeb1\155\ufeb1\172\ufeb1\210\ufeb1\302\ufeb1" +
    "\352\ufeb1\u010f\ufeb1\001\002\000\032\021\ufeb2\022\ufeb2\032" +
    "\ufeb2\047\ufeb2\113\ufeb2\116\ufeb2\155\ufeb2\172\ufeb2\210\ufeb2" +
    "\302\ufeb2\352\ufeb2\u010f\ufeb2\001\002\000\004\172\220\001" +
    "\002\000\006\011\061\031\057\001\002\000\004\u016b\222" +
    "\001\002\000\006\011\061\031\057\001\002\000\004\032" +
    "\224\001\002\000\006\011\061\031\057\001\002\000\014" +
    "\021\ufee9\342\ufee9\u010f\ufee9\u011c\226\u016b\ufee9\001\002\000" +
    "\004\032\376\001\002\000\012\021\uff65\342\230\u010f\uff65" +
    "\u016b\uff65\001\002\000\036\011\uff7f\012\uff7f\024\uff7f\031" +
    "\uff7f\032\240\037\uff7f\043\uff7f\255\243\260\uff7f\u010b\uff7f" +
    "\u0138\uff7f\u013d\uff7f\u0148\uff7f\u0149\uff7f\001\002\000\010\021" +
    "\ufee7\u010f\ufee7\u016b\232\001\002\000\006\011\061\031\057" +
    "\001\002\000\006\021\ufef1\u010f\ufef1\001\002\000\004\032" +
    "\235\001\002\000\006\011\061\031\057\001\002\000\004" +
    "\047\237\001\002\000\006\021\ufee8\u010f\ufee8\001\002\000" +
    "\036\011\uff7f\012\uff7f\024\uff7f\031\uff7f\032\240\037\uff7f" +
    "\043\uff7f\255\243\260\uff7f\u010b\uff7f\u0138\uff7f\u013d\uff7f\u0148" +
    "\uff7f\u0149\uff7f\001\002\000\036\021\uff66\047\uff66\110\uff66" +
    "\132\uff66\142\uff66\145\uff66\173\uff66\200\uff66\276\uff66\310" +
    "\uff66\325\uff66\332\uff66\u010f\uff66\u016b\uff66\001\002\000\034" +
    "\011\061\012\245\024\060\031\057\032\261\037\250\043" +
    "\255\260\263\u010b\256\u0138\244\u013d\264\u0148\262\u0149\260" +
    "\001\002\000\042\011\uff80\012\uff80\024\uff80\031\uff80\032" +
    "\uff80\037\uff80\043\uff80\130\uff80\167\uff80\230\uff80\260\uff80" +
    "\u010b\uff80\u0138\uff80\u013d\uff80\u0148\uff80\u0149\uff80\001\002\000" +
    "\004\032\370\001\002\000\162\004\uff8d\005\uff8d\006\uff8d" +
    "\007\uff8d\010\uff8d\011\uff8d\012\uff8d\014\uff8d\015\uff8d\016" +
    "\uff8d\017\uff8d\020\uff8d\021\uff8d\022\uff8d\024\uff8d\031\uff8d" +
    "\032\uff8d\037\uff8d\043\uff8d\047\uff8d\075\uff8d\076\uff8d\110" +
    "\uff8d\112\uff8d\123\uff8d\126\uff8d\130\uff8d\132\uff8d\142\uff8d" +
    "\143\uff8d\145\uff8d\167\uff8d\173\uff8d\174\uff8d\175\uff8d\200" +
    "\uff8d\211\uff8d\214\uff8d\225\uff8d\230\uff8d\255\uff8d\260\uff8d" +
    "\276\uff8d\303\uff8d\310\uff8d\325\uff8d\332\uff8d\342\uff8d\u0104" +
    "\uff8d\u010b\uff8d\u010f\uff8d\u0138\uff8d\u013d\uff8d\u0148\uff8d\u0149\uff8d" +
    "\u016b\uff8d\001\002\000\162\004\uff8f\005\uff8f\006\uff8f\007" +
    "\uff8f\010\uff8f\011\uff8f\012\uff8f\014\uff8f\015\uff8f\016\uff8f" +
    "\017\uff8f\020\uff8f\021\uff8f\022\uff8f\024\uff8f\031\uff8f\032" +
    "\uff8f\037\uff8f\043\uff8f\047\uff8f\075\uff8f\076\uff8f\110\uff8f" +
    "\112\uff8f\123\uff8f\126\uff8f\130\uff8f\132\uff8f\142\uff8f\143" +
    "\uff8f\145\uff8f\167\uff8f\173\uff8f\174\uff8f\175\uff8f\200\uff8f" +
    "\211\uff8f\214\uff8f\225\uff8f\230\uff8f\255\uff8f\260\uff8f\276" +
    "\uff8f\303\uff8f\310\uff8f\325\uff8f\332\uff8f\342\uff8f\u0104\uff8f" +
    "\u010b\uff8f\u010f\uff8f\u0138\uff8f\u013d\uff8f\u0148\uff8f\u0149\uff8f\u016b" +
    "\uff8f\001\002\000\030\004\343\014\335\015\337\016\342" +
    "\017\341\020\334\130\uff7f\167\uff7f\211\345\230\uff7f\255" +
    "\243\001\002\000\162\004\uff8c\005\uff8c\006\uff8c\007\uff8c" +
    "\010\uff8c\011\uff8c\012\uff8c\014\uff8c\015\uff8c\016\uff8c\017" +
    "\uff8c\020\uff8c\021\uff8c\022\uff8c\024\uff8c\031\uff8c\032\uff8c" +
    "\037\uff8c\043\uff8c\047\uff8c\075\uff8c\076\uff8c\110\uff8c\112" +
    "\uff8c\123\uff8c\126\uff8c\130\uff8c\132\uff8c\142\uff8c\143\uff8c" +
    "\145\uff8c\167\uff8c\173\uff8c\174\uff8c\175\uff8c\200\uff8c\211" +
    "\uff8c\214\uff8c\225\uff8c\230\uff8c\255\uff8c\260\uff8c\276\uff8c" +
    "\303\uff8c\310\uff8c\325\uff8c\332\uff8c\342\uff8c\u0104\uff8c\u010b" +
    "\uff8c\u010f\uff8c\u0138\uff8c\u013d\uff8c\u0148\uff8c\u0149\uff8c\u016b\uff8c" +
    "\001\002\000\162\004\uff91\005\uff91\006\uff91\007\327\010" +
    "\325\011\uff91\012\uff91\014\uff91\015\uff91\016\uff91\017\uff91" +
    "\020\uff91\021\uff91\022\uff91\024\uff91\031\uff91\032\uff91\037" +
    "\uff91\043\uff91\047\uff91\075\uff91\076\uff91\110\uff91\112\uff91" +
    "\123\uff91\126\uff91\130\uff91\132\uff91\142\uff91\143\uff91\145" +
    "\uff91\167\uff91\173\uff91\174\uff91\175\uff91\200\uff91\211\uff91" +
    "\214\uff91\225\uff91\230\uff91\255\uff91\260\uff91\276\uff91\303" +
    "\uff91\310\uff91\325\uff91\332\uff91\342\uff91\u0104\uff91\u010b\uff91" +
    "\u010f\uff91\u0138\uff91\u013d\uff91\u0148\uff91\u0149\uff91\u016b\uff91\001" +
    "\002\000\156\004\uff95\005\317\006\316\011\uff95\012\uff95" +
    "\014\uff95\015\uff95\016\uff95\017\uff95\020\uff95\021\uff95\022" +
    "\uff95\024\uff95\031\uff95\032\uff95\037\uff95\043\uff95\047\uff95" +
    "\075\uff95\076\uff95\110\uff95\112\uff95\123\uff95\126\uff95\130" +
    "\uff95\132\uff95\142\uff95\143\uff95\145\uff95\167\uff95\173\uff95" +
    "\174\uff95\175\uff95\200\uff95\211\uff95\214\uff95\225\uff95\230" +
    "\uff95\255\uff95\260\uff95\276\uff95\303\uff95\310\uff95\325\uff95" +
    "\332\uff95\342\uff95\u0104\uff95\u010b\uff95\u010f\uff95\u0138\uff95\u013d" +
    "\uff95\u0148\uff95\u0149\uff95\u016b\uff95\001\002\000\164\004\uffdf" +
    "\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\014" +
    "\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf" +
    "\023\314\024\uffdf\031\uffdf\032\uffdf\037\uffdf\043\uffdf\047" +
    "\uffdf\075\uffdf\076\uffdf\110\uffdf\112\uffdf\123\uffdf\126\uffdf" +
    "\130\uffdf\132\uffdf\142\uffdf\143\uffdf\145\uffdf\167\uffdf\173" +
    "\uffdf\174\uffdf\175\uffdf\200\uffdf\211\uffdf\214\uffdf\225\uffdf" +
    "\230\uffdf\255\uffdf\260\uffdf\276\uffdf\303\uffdf\310\uffdf\325" +
    "\uffdf\332\uffdf\342\uffdf\u0104\uffdf\u010b\uffdf\u010f\uffdf\u0138\uffdf" +
    "\u013d\uffdf\u0148\uffdf\u0149\uffdf\u016b\uffdf\001\002\000\060\021" +
    "\uff74\022\uff74\047\uff74\075\306\076\307\110\uff74\126\uff74" +
    "\132\uff74\142\uff74\143\uff74\145\uff74\173\uff74\175\uff74\200" +
    "\uff74\214\uff74\225\uff74\276\uff74\310\uff74\325\uff74\332\uff74" +
    "\342\uff74\u010f\uff74\u016b\uff74\001\002\000\162\004\uff8b\005" +
    "\uff8b\006\uff8b\007\uff8b\010\uff8b\011\uff8b\012\uff8b\014\uff8b" +
    "\015\uff8b\016\uff8b\017\uff8b\020\uff8b\021\uff8b\022\uff8b\024" +
    "\uff8b\031\uff8b\032\uff8b\037\uff8b\043\uff8b\047\uff8b\075\uff8b" +
    "\076\uff8b\110\uff8b\112\uff8b\123\uff8b\126\uff8b\130\uff8b\132" +
    "\uff8b\142\uff8b\143\uff8b\145\uff8b\167\uff8b\173\uff8b\174\uff8b" +
    "\175\uff8b\200\uff8b\211\uff8b\214\uff8b\225\uff8b\230\uff8b\255" +
    "\uff8b\260\uff8b\276\uff8b\303\uff8b\310\uff8b\325\uff8b\332\uff8b" +
    "\342\uff8b\u0104\uff8b\u010b\uff8b\u010f\uff8b\u0138\uff8b\u013d\uff8b\u0148" +
    "\uff8b\u0149\uff8b\u016b\uff8b\001\002\000\004\032\304\001\002" +
    "\000\162\004\uff89\005\uff89\006\uff89\007\uff89\010\uff89\011" +
    "\uff89\012\uff89\014\uff89\015\uff89\016\uff89\017\uff89\020\uff89" +
    "\021\uff89\022\uff89\024\uff89\031\uff89\032\uff89\037\uff89\043" +
    "\uff89\047\uff89\075\uff89\076\uff89\110\uff89\112\uff89\123\uff89" +
    "\126\uff89\130\uff89\132\uff89\142\uff89\143\uff89\145\uff89\167" +
    "\uff89\173\uff89\174\uff89\175\uff89\200\uff89\211\uff89\214\uff89" +
    "\225\uff89\230\uff89\255\uff89\260\uff89\276\uff89\303\uff89\310" +
    "\uff89\325\uff89\332\uff89\342\uff89\u0104\uff89\u010b\uff89\u010f\uff89" +
    "\u0138\uff89\u013d\uff89\u0148\uff89\u0149\uff89\u016b\uff89\001\002\000" +
    "\004\032\302\001\002\000\034\011\061\012\245\024\060" +
    "\031\057\032\261\037\250\043\255\260\263\u010b\256\u0138" +
    "\244\u013d\264\u0148\262\u0149\260\001\002\000\004\032\276" +
    "\001\002\000\162\004\uff8a\005\uff8a\006\uff8a\007\uff8a\010" +
    "\uff8a\011\uff8a\012\uff8a\014\uff8a\015\uff8a\016\uff8a\017\uff8a" +
    "\020\uff8a\021\uff8a\022\uff8a\024\uff8a\031\uff8a\032\uff8a\037" +
    "\uff8a\043\uff8a\047\uff8a\075\uff8a\076\uff8a\110\uff8a\112\uff8a" +
    "\123\uff8a\126\uff8a\130\uff8a\132\uff8a\142\uff8a\143\uff8a\145" +
    "\uff8a\167\uff8a\173\uff8a\174\uff8a\175\uff8a\200\uff8a\211\uff8a" +
    "\214\uff8a\225\uff8a\230\uff8a\255\uff8a\260\uff8a\276\uff8a\303" +
    "\uff8a\310\uff8a\325\uff8a\332\uff8a\342\uff8a\u0104\uff8a\u010b\uff8a" +
    "\u010f\uff8a\u0138\uff8a\u013d\uff8a\u0148\uff8a\u0149\uff8a\u016b\uff8a\001" +
    "\002\000\004\032\266\001\002\000\162\004\uff8e\005\uff8e" +
    "\006\uff8e\007\uff8e\010\uff8e\011\uff8e\012\uff8e\014\uff8e\015" +
    "\uff8e\016\uff8e\017\uff8e\020\uff8e\021\uff8e\022\uff8e\024\uff8e" +
    "\031\uff8e\032\uff8e\037\uff8e\043\uff8e\047\uff8e\075\uff8e\076" +
    "\uff8e\110\uff8e\112\uff8e\123\uff8e\126\uff8e\130\uff8e\132\uff8e" +
    "\142\uff8e\143\uff8e\145\uff8e\167\uff8e\173\uff8e\174\uff8e\175" +
    "\uff8e\200\uff8e\211\uff8e\214\uff8e\225\uff8e\230\uff8e\255\uff8e" +
    "\260\uff8e\276\uff8e\303\uff8e\310\uff8e\325\uff8e\332\uff8e\342" +
    "\uff8e\u0104\uff8e\u010b\uff8e\u010f\uff8e\u0138\uff8e\u013d\uff8e\u0148\uff8e" +
    "\u0149\uff8e\u016b\uff8e\001\002\000\012\007\271\011\061\012" +
    "\272\031\057\001\002\000\004\047\275\001\002\000\162" +
    "\004\uff84\005\uff84\006\uff84\007\uff84\010\uff84\011\uff84\012" +
    "\uff84\014\uff84\015\uff84\016\uff84\017\uff84\020\uff84\021\uff84" +
    "\022\uff84\024\uff84\031\uff84\032\uff84\037\uff84\043\uff84\047" +
    "\uff84\075\uff84\076\uff84\110\uff84\112\uff84\123\uff84\126\uff84" +
    "\130\uff84\132\uff84\142\uff84\143\uff84\145\uff84\167\uff84\173" +
    "\uff84\174\uff84\175\uff84\200\uff84\211\uff84\214\uff84\225\uff84" +
    "\230\uff84\255\uff84\260\uff84\276\uff84\303\uff84\310\uff84\325" +
    "\uff84\332\uff84\342\uff84\u0104\uff84\u010b\uff84\u010f\uff84\u0138\uff84" +
    "\u013d\uff84\u0148\uff84\u0149\uff84\u016b\uff84\001\002\000\004\047" +
    "\274\001\002\000\004\047\273\001\002\000\162\004\uff82" +
    "\005\uff82\006\uff82\007\uff82\010\uff82\011\uff82\012\uff82\014" +
    "\uff82\015\uff82\016\uff82\017\uff82\020\uff82\021\uff82\022\uff82" +
    "\024\uff82\031\uff82\032\uff82\037\uff82\043\uff82\047\uff82\075" +
    "\uff82\076\uff82\110\uff82\112\uff82\123\uff82\126\uff82\130\uff82" +
    "\132\uff82\142\uff82\143\uff82\145\uff82\167\uff82\173\uff82\174" +
    "\uff82\175\uff82\200\uff82\211\uff82\214\uff82\225\uff82\230\uff82" +
    "\255\uff82\260\uff82\276\uff82\303\uff82\310\uff82\325\uff82\332" +
    "\uff82\342\uff82\u0104\uff82\u010b\uff82\u010f\uff82\u0138\uff82\u013d\uff82" +
    "\u0148\uff82\u0149\uff82\u016b\uff82\001\002\000\162\004\uff81\005" +
    "\uff81\006\uff81\007\uff81\010\uff81\011\uff81\012\uff81\014\uff81" +
    "\015\uff81\016\uff81\017\uff81\020\uff81\021\uff81\022\uff81\024" +
    "\uff81\031\uff81\032\uff81\037\uff81\043\uff81\047\uff81\075\uff81" +
    "\076\uff81\110\uff81\112\uff81\123\uff81\126\uff81\130\uff81\132" +
    "\uff81\142\uff81\143\uff81\145\uff81\167\uff81\173\uff81\174\uff81" +
    "\175\uff81\200\uff81\211\uff81\214\uff81\225\uff81\230\uff81\255" +
    "\uff81\260\uff81\276\uff81\303\uff81\310\uff81\325\uff81\332\uff81" +
    "\342\uff81\u0104\uff81\u010b\uff81\u010f\uff81\u0138\uff81\u013d\uff81\u0148" +
    "\uff81\u0149\uff81\u016b\uff81\001\002\000\162\004\uff83\005\uff83" +
    "\006\uff83\007\uff83\010\uff83\011\uff83\012\uff83\014\uff83\015" +
    "\uff83\016\uff83\017\uff83\020\uff83\021\uff83\022\uff83\024\uff83" +
    "\031\uff83\032\uff83\037\uff83\043\uff83\047\uff83\075\uff83\076" +
    "\uff83\110\uff83\112\uff83\123\uff83\126\uff83\130\uff83\132\uff83" +
    "\142\uff83\143\uff83\145\uff83\167\uff83\173\uff83\174\uff83\175" +
    "\uff83\200\uff83\211\uff83\214\uff83\225\uff83\230\uff83\255\uff83" +
    "\260\uff83\276\uff83\303\uff83\310\uff83\325\uff83\332\uff83\342" +
    "\uff83\u0104\uff83\u010b\uff83\u010f\uff83\u0138\uff83\u013d\uff83\u0148\uff83" +
    "\u0149\uff83\u016b\uff83\001\002\000\012\007\271\011\061\012" +
    "\272\031\057\001\002\000\162\004\uff85\005\uff85\006\uff85" +
    "\007\uff85\010\uff85\011\uff85\012\uff85\014\uff85\015\uff85\016" +
    "\uff85\017\uff85\020\uff85\021\uff85\022\uff85\024\uff85\031\uff85" +
    "\032\uff85\037\uff85\043\uff85\047\uff85\075\uff85\076\uff85\110" +
    "\uff85\112\uff85\123\uff85\126\uff85\130\uff85\132\uff85\142\uff85" +
    "\143\uff85\145\uff85\167\uff85\173\uff85\174\uff85\175\uff85\200" +
    "\uff85\211\uff85\214\uff85\225\uff85\230\uff85\255\uff85\260\uff85" +
    "\276\uff85\303\uff85\310\uff85\325\uff85\332\uff85\342\uff85\u0104" +
    "\uff85\u010b\uff85\u010f\uff85\u0138\uff85\u013d\uff85\u0148\uff85\u0149\uff85" +
    "\u016b\uff85\001\002\000\004\047\301\001\002\000\162\004" +
    "\uff90\005\uff90\006\uff90\007\uff90\010\uff90\011\uff90\012\uff90" +
    "\014\uff90\015\uff90\016\uff90\017\uff90\020\uff90\021\uff90\022" +
    "\uff90\024\uff90\031\uff90\032\uff90\037\uff90\043\uff90\047\uff90" +
    "\075\uff90\076\uff90\110\uff90\112\uff90\123\uff90\126\uff90\130" +
    "\uff90\132\uff90\142\uff90\143\uff90\145\uff90\167\uff90\173\uff90" +
    "\174\uff90\175\uff90\200\uff90\211\uff90\214\uff90\225\uff90\230" +
    "\uff90\255\uff90\260\uff90\276\uff90\303\uff90\310\uff90\325\uff90" +
    "\332\uff90\342\uff90\u0104\uff90\u010b\uff90\u010f\uff90\u0138\uff90\u013d" +
    "\uff90\u0148\uff90\u0149\uff90\u016b\uff90\001\002\000\012\007\271" +
    "\011\061\012\272\031\057\001\002\000\162\004\uff86\005" +
    "\uff86\006\uff86\007\uff86\010\uff86\011\uff86\012\uff86\014\uff86" +
    "\015\uff86\016\uff86\017\uff86\020\uff86\021\uff86\022\uff86\024" +
    "\uff86\031\uff86\032\uff86\037\uff86\043\uff86\047\uff86\075\uff86" +
    "\076\uff86\110\uff86\112\uff86\123\uff86\126\uff86\130\uff86\132" +
    "\uff86\142\uff86\143\uff86\145\uff86\167\uff86\173\uff86\174\uff86" +
    "\175\uff86\200\uff86\211\uff86\214\uff86\225\uff86\230\uff86\255" +
    "\uff86\260\uff86\276\uff86\303\uff86\310\uff86\325\uff86\332\uff86" +
    "\342\uff86\u0104\uff86\u010b\uff86\u010f\uff86\u0138\uff86\u013d\uff86\u0148" +
    "\uff86\u0149\uff86\u016b\uff86\001\002\000\012\007\271\011\061" +
    "\012\272\031\057\001\002\000\162\004\uff87\005\uff87\006" +
    "\uff87\007\uff87\010\uff87\011\uff87\012\uff87\014\uff87\015\uff87" +
    "\016\uff87\017\uff87\020\uff87\021\uff87\022\uff87\024\uff87\031" +
    "\uff87\032\uff87\037\uff87\043\uff87\047\uff87\075\uff87\076\uff87" +
    "\110\uff87\112\uff87\123\uff87\126\uff87\130\uff87\132\uff87\142" +
    "\uff87\143\uff87\145\uff87\167\uff87\173\uff87\174\uff87\175\uff87" +
    "\200\uff87\211\uff87\214\uff87\225\uff87\230\uff87\255\uff87\260" +
    "\uff87\276\uff87\303\uff87\310\uff87\325\uff87\332\uff87\342\uff87" +
    "\u0104\uff87\u010b\uff87\u010f\uff87\u0138\uff87\u013d\uff87\u0148\uff87\u0149" +
    "\uff87\u016b\uff87\001\002\000\036\011\uff7f\012\uff7f\024\uff7f" +
    "\031\uff7f\032\240\037\uff7f\043\uff7f\255\243\260\uff7f\u010b" +
    "\uff7f\u0138\uff7f\u013d\uff7f\u0148\uff7f\u0149\uff7f\001\002\000\036" +
    "\011\uff7f\012\uff7f\024\uff7f\031\uff7f\032\240\037\uff7f\043" +
    "\uff7f\255\243\260\uff7f\u010b\uff7f\u0138\uff7f\u013d\uff7f\u0148\uff7f" +
    "\u0149\uff7f\001\002\000\054\021\uff78\022\uff78\047\uff78\110" +
    "\uff78\126\uff78\132\uff78\142\uff78\143\uff78\145\uff78\173\uff78" +
    "\175\uff78\200\uff78\214\uff78\225\uff78\276\uff78\310\uff78\325" +
    "\uff78\332\uff78\342\uff78\u010f\uff78\u016b\uff78\001\002\000\054" +
    "\021\uff75\022\uff75\047\uff75\110\uff75\126\uff75\132\uff75\142" +
    "\uff75\143\uff75\145\uff75\173\uff75\175\uff75\200\uff75\214\uff75" +
    "\225\uff75\276\uff75\310\uff75\325\uff75\332\uff75\342\uff75\u010f" +
    "\uff75\u016b\uff75\001\002\000\054\021\uff76\022\uff76\047\uff76" +
    "\110\uff76\126\uff76\132\uff76\142\uff76\143\uff76\145\uff76\173" +
    "\uff76\175\uff76\200\uff76\214\uff76\225\uff76\276\uff76\310\uff76" +
    "\325\uff76\332\uff76\342\uff76\u010f\uff76\u016b\uff76\001\002\000" +
    "\162\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1" +
    "\012\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021" +
    "\uffe1\022\uffe1\024\uffe1\031\uffe1\032\uffe1\037\uffe1\043\uffe1" +
    "\047\uffe1\075\uffe1\076\uffe1\110\uffe1\112\uffe1\123\uffe1\126" +
    "\uffe1\130\uffe1\132\uffe1\142\uffe1\143\uffe1\145\uffe1\167\uffe1" +
    "\173\uffe1\174\uffe1\175\uffe1\200\uffe1\211\uffe1\214\uffe1\225" +
    "\uffe1\230\uffe1\255\uffe1\260\uffe1\276\uffe1\303\uffe1\310\uffe1" +
    "\325\uffe1\332\uffe1\342\uffe1\u0104\uffe1\u010b\uffe1\u010f\uffe1\u0138" +
    "\uffe1\u013d\uffe1\u0148\uffe1\u0149\uffe1\u016b\uffe1\001\002\000\006" +
    "\011\061\031\057\001\002\000\162\004\uffe0\005\uffe0\006" +
    "\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\014\uffe0\015\uffe0" +
    "\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\024\uffe0\031" +
    "\uffe0\032\uffe0\037\uffe0\043\uffe0\047\uffe0\075\uffe0\076\uffe0" +
    "\110\uffe0\112\uffe0\123\uffe0\126\uffe0\130\uffe0\132\uffe0\142" +
    "\uffe0\143\uffe0\145\uffe0\167\uffe0\173\uffe0\174\uffe0\175\uffe0" +
    "\200\uffe0\211\uffe0\214\uffe0\225\uffe0\230\uffe0\255\uffe0\260" +
    "\uffe0\276\uffe0\303\uffe0\310\uffe0\325\uffe0\332\uffe0\342\uffe0" +
    "\u0104\uffe0\u010b\uffe0\u010f\uffe0\u0138\uffe0\u013d\uffe0\u0148\uffe0\u0149" +
    "\uffe0\u016b\uffe0\001\002\000\034\011\061\012\245\024\060" +
    "\031\057\032\261\037\250\043\255\260\263\u010b\256\u0138" +
    "\244\u013d\264\u0148\262\u0149\260\001\002\000\034\011\061" +
    "\012\245\024\060\031\057\032\261\037\250\043\255\260" +
    "\263\u010b\256\u0138\244\u013d\264\u0148\262\u0149\260\001\002" +
    "\000\152\004\uff98\011\uff98\012\uff98\014\uff98\015\uff98\016" +
    "\uff98\017\uff98\020\uff98\021\uff98\022\uff98\024\uff98\031\uff98" +
    "\032\uff98\037\uff98\043\uff98\047\uff98\075\uff98\076\uff98\110" +
    "\uff98\112\uff98\123\uff98\126\uff98\130\uff98\132\uff98\142\uff98" +
    "\143\uff98\145\uff98\167\uff98\173\uff98\174\uff98\175\uff98\200" +
    "\uff98\211\uff98\214\uff98\225\uff98\230\uff98\255\uff98\260\uff98" +
    "\276\uff98\303\uff98\310\uff98\325\uff98\332\uff98\342\uff98\u0104" +
    "\uff98\u010b\uff98\u010f\uff98\u0138\uff98\u013d\uff98\u0148\uff98\u0149\uff98" +
    "\u016b\uff98\001\002\000\156\004\uff95\005\317\006\316\011" +
    "\uff95\012\uff95\014\uff95\015\uff95\016\uff95\017\uff95\020\uff95" +
    "\021\uff95\022\uff95\024\uff95\031\uff95\032\uff95\037\uff95\043" +
    "\uff95\047\uff95\075\uff95\076\uff95\110\uff95\112\uff95\123\uff95" +
    "\126\uff95\130\uff95\132\uff95\142\uff95\143\uff95\145\uff95\167" +
    "\uff95\173\uff95\174\uff95\175\uff95\200\uff95\211\uff95\214\uff95" +
    "\225\uff95\230\uff95\255\uff95\260\uff95\276\uff95\303\uff95\310" +
    "\uff95\325\uff95\332\uff95\342\uff95\u0104\uff95\u010b\uff95\u010f\uff95" +
    "\u0138\uff95\u013d\uff95\u0148\uff95\u0149\uff95\u016b\uff95\001\002\000" +
    "\152\004\uff97\011\uff97\012\uff97\014\uff97\015\uff97\016\uff97" +
    "\017\uff97\020\uff97\021\uff97\022\uff97\024\uff97\031\uff97\032" +
    "\uff97\037\uff97\043\uff97\047\uff97\075\uff97\076\uff97\110\uff97" +
    "\112\uff97\123\uff97\126\uff97\130\uff97\132\uff97\142\uff97\143" +
    "\uff97\145\uff97\167\uff97\173\uff97\174\uff97\175\uff97\200\uff97" +
    "\211\uff97\214\uff97\225\uff97\230\uff97\255\uff97\260\uff97\276" +
    "\uff97\303\uff97\310\uff97\325\uff97\332\uff97\342\uff97\u0104\uff97" +
    "\u010b\uff97\u010f\uff97\u0138\uff97\u013d\uff97\u0148\uff97\u0149\uff97\u016b" +
    "\uff97\001\002\000\156\004\uff95\005\317\006\316\011\uff95" +
    "\012\uff95\014\uff95\015\uff95\016\uff95\017\uff95\020\uff95\021" +
    "\uff95\022\uff95\024\uff95\031\uff95\032\uff95\037\uff95\043\uff95" +
    "\047\uff95\075\uff95\076\uff95\110\uff95\112\uff95\123\uff95\126" +
    "\uff95\130\uff95\132\uff95\142\uff95\143\uff95\145\uff95\167\uff95" +
    "\173\uff95\174\uff95\175\uff95\200\uff95\211\uff95\214\uff95\225" +
    "\uff95\230\uff95\255\uff95\260\uff95\276\uff95\303\uff95\310\uff95" +
    "\325\uff95\332\uff95\342\uff95\u0104\uff95\u010b\uff95\u010f\uff95\u0138" +
    "\uff95\u013d\uff95\u0148\uff95\u0149\uff95\u016b\uff95\001\002\000\152" +
    "\004\uff96\011\uff96\012\uff96\014\uff96\015\uff96\016\uff96\017" +
    "\uff96\020\uff96\021\uff96\022\uff96\024\uff96\031\uff96\032\uff96" +
    "\037\uff96\043\uff96\047\uff96\075\uff96\076\uff96\110\uff96\112" +
    "\uff96\123\uff96\126\uff96\130\uff96\132\uff96\142\uff96\143\uff96" +
    "\145\uff96\167\uff96\173\uff96\174\uff96\175\uff96\200\uff96\211" +
    "\uff96\214\uff96\225\uff96\230\uff96\255\uff96\260\uff96\276\uff96" +
    "\303\uff96\310\uff96\325\uff96\332\uff96\342\uff96\u0104\uff96\u010b" +
    "\uff96\u010f\uff96\u0138\uff96\u013d\uff96\u0148\uff96\u0149\uff96\u016b\uff96" +
    "\001\002\000\034\011\061\012\245\024\060\031\057\032" +
    "\261\037\250\043\255\260\263\u010b\256\u0138\244\u013d\264" +
    "\u0148\262\u0149\260\001\002\000\156\004\uff94\005\uff94\006" +
    "\uff94\011\uff94\012\uff94\014\uff94\015\uff94\016\uff94\017\uff94" +
    "\020\uff94\021\uff94\022\uff94\024\uff94\031\uff94\032\uff94\037" +
    "\uff94\043\uff94\047\uff94\075\uff94\076\uff94\110\uff94\112\uff94" +
    "\123\uff94\126\uff94\130\uff94\132\uff94\142\uff94\143\uff94\145" +
    "\uff94\167\uff94\173\uff94\174\uff94\175\uff94\200\uff94\211\uff94" +
    "\214\uff94\225\uff94\230\uff94\255\uff94\260\uff94\276\uff94\303" +
    "\uff94\310\uff94\325\uff94\332\uff94\342\uff94\u0104\uff94\u010b\uff94" +
    "\u010f\uff94\u0138\uff94\u013d\uff94\u0148\uff94\u0149\uff94\u016b\uff94\001" +
    "\002\000\034\011\061\012\245\024\060\031\057\032\261" +
    "\037\250\043\255\260\263\u010b\256\u0138\244\u013d\264\u0148" +
    "\262\u0149\260\001\002\000\162\004\uff91\005\uff91\006\uff91" +
    "\007\327\010\325\011\uff91\012\uff91\014\uff91\015\uff91\016" +
    "\uff91\017\uff91\020\uff91\021\uff91\022\uff91\024\uff91\031\uff91" +
    "\032\uff91\037\uff91\043\uff91\047\uff91\075\uff91\076\uff91\110" +
    "\uff91\112\uff91\123\uff91\126\uff91\130\uff91\132\uff91\142\uff91" +
    "\143\uff91\145\uff91\167\uff91\173\uff91\174\uff91\175\uff91\200" +
    "\uff91\211\uff91\214\uff91\225\uff91\230\uff91\255\uff91\260\uff91" +
    "\276\uff91\303\uff91\310\uff91\325\uff91\332\uff91\342\uff91\u0104" +
    "\uff91\u010b\uff91\u010f\uff91\u0138\uff91\u013d\uff91\u0148\uff91\u0149\uff91" +
    "\u016b\uff91\001\002\000\156\004\uff93\005\uff93\006\uff93\011" +
    "\uff93\012\uff93\014\uff93\015\uff93\016\uff93\017\uff93\020\uff93" +
    "\021\uff93\022\uff93\024\uff93\031\uff93\032\uff93\037\uff93\043" +
    "\uff93\047\uff93\075\uff93\076\uff93\110\uff93\112\uff93\123\uff93" +
    "\126\uff93\130\uff93\132\uff93\142\uff93\143\uff93\145\uff93\167" +
    "\uff93\173\uff93\174\uff93\175\uff93\200\uff93\211\uff93\214\uff93" +
    "\225\uff93\230\uff93\255\uff93\260\uff93\276\uff93\303\uff93\310" +
    "\uff93\325\uff93\332\uff93\342\uff93\u0104\uff93\u010b\uff93\u010f\uff93" +
    "\u0138\uff93\u013d\uff93\u0148\uff93\u0149\uff93\u016b\uff93\001\002\000" +
    "\162\004\uff91\005\uff91\006\uff91\007\327\010\325\011\uff91" +
    "\012\uff91\014\uff91\015\uff91\016\uff91\017\uff91\020\uff91\021" +
    "\uff91\022\uff91\024\uff91\031\uff91\032\uff91\037\uff91\043\uff91" +
    "\047\uff91\075\uff91\076\uff91\110\uff91\112\uff91\123\uff91\126" +
    "\uff91\130\uff91\132\uff91\142\uff91\143\uff91\145\uff91\167\uff91" +
    "\173\uff91\174\uff91\175\uff91\200\uff91\211\uff91\214\uff91\225" +
    "\uff91\230\uff91\255\uff91\260\uff91\276\uff91\303\uff91\310\uff91" +
    "\325\uff91\332\uff91\342\uff91\u0104\uff91\u010b\uff91\u010f\uff91\u0138" +
    "\uff91\u013d\uff91\u0148\uff91\u0149\uff91\u016b\uff91\001\002\000\156" +
    "\004\uff92\005\uff92\006\uff92\011\uff92\012\uff92\014\uff92\015" +
    "\uff92\016\uff92\017\uff92\020\uff92\021\uff92\022\uff92\024\uff92" +
    "\031\uff92\032\uff92\037\uff92\043\uff92\047\uff92\075\uff92\076" +
    "\uff92\110\uff92\112\uff92\123\uff92\126\uff92\130\uff92\132\uff92" +
    "\142\uff92\143\uff92\145\uff92\167\uff92\173\uff92\174\uff92\175" +
    "\uff92\200\uff92\211\uff92\214\uff92\225\uff92\230\uff92\255\uff92" +
    "\260\uff92\276\uff92\303\uff92\310\uff92\325\uff92\332\uff92\342" +
    "\uff92\u0104\uff92\u010b\uff92\u010f\uff92\u0138\uff92\u013d\uff92\u0148\uff92" +
    "\u0149\uff92\u016b\uff92\001\002\000\034\011\uff71\012\uff71\024" +
    "\uff71\031\uff71\032\uff71\037\uff71\043\uff71\260\uff71\u010b\uff71" +
    "\u0138\uff71\u013d\uff71\u0148\uff71\u0149\uff71\001\002\000\034\011" +
    "\uff6e\012\uff6e\024\uff6e\031\uff6e\032\uff6e\037\uff6e\043\uff6e" +
    "\260\uff6e\u010b\uff6e\u0138\uff6e\u013d\uff6e\u0148\uff6e\u0149\uff6e\001" +
    "\002\000\010\130\353\167\352\230\351\001\002\000\034" +
    "\011\uff6d\012\uff6d\024\uff6d\031\uff6d\032\uff6d\037\uff6d\043" +
    "\uff6d\260\uff6d\u010b\uff6d\u0138\uff6d\u013d\uff6d\u0148\uff6d\u0149\uff6d" +
    "\001\002\000\034\011\061\012\245\024\060\031\057\032" +
    "\261\037\250\043\255\260\263\u010b\256\u0138\244\u013d\264" +
    "\u0148\262\u0149\260\001\002\000\034\011\uff6f\012\uff6f\024" +
    "\uff6f\031\uff6f\032\uff6f\037\uff6f\043\uff6f\260\uff6f\u010b\uff6f" +
    "\u0138\uff6f\u013d\uff6f\u0148\uff6f\u0149\uff6f\001\002\000\034\011" +
    "\uff70\012\uff70\024\uff70\031\uff70\032\uff70\037\uff70\043\uff70" +
    "\260\uff70\u010b\uff70\u0138\uff70\u013d\uff70\u0148\uff70\u0149\uff70\001" +
    "\002\000\034\011\uff72\012\uff72\024\uff72\031\uff72\032\uff72" +
    "\037\uff72\043\uff72\260\uff72\u010b\uff72\u0138\uff72\u013d\uff72\u0148" +
    "\uff72\u0149\uff72\001\002\000\060\021\uff73\022\uff73\047\uff73" +
    "\075\uff73\076\uff73\110\uff73\126\uff73\132\uff73\142\uff73\143" +
    "\uff73\145\uff73\173\uff73\175\uff73\200\uff73\214\uff73\225\uff73" +
    "\276\uff73\310\uff73\325\uff73\332\uff73\342\uff73\u010f\uff73\u016b" +
    "\uff73\001\002\000\006\255\243\260\uff7f\001\002\000\004" +
    "\260\347\001\002\000\060\021\uff6b\022\uff6b\047\uff6b\075" +
    "\uff6b\076\uff6b\110\uff6b\126\uff6b\132\uff6b\142\uff6b\143\uff6b" +
    "\145\uff6b\173\uff6b\175\uff6b\200\uff6b\214\uff6b\225\uff6b\276" +
    "\uff6b\310\uff6b\325\uff6b\332\uff6b\342\uff6b\u010f\uff6b\u016b\uff6b" +
    "\001\002\000\060\021\uff6c\022\uff6c\047\uff6c\075\uff6c\076" +
    "\uff6c\110\uff6c\126\uff6c\132\uff6c\142\uff6c\143\uff6c\145\uff6c" +
    "\173\uff6c\175\uff6c\200\uff6c\214\uff6c\225\uff6c\276\uff6c\310" +
    "\uff6c\325\uff6c\332\uff6c\342\uff6c\u010f\uff6c\u016b\uff6c\001\002" +
    "\000\034\011\061\012\245\024\060\031\057\032\261\037" +
    "\250\043\255\260\263\u010b\256\u0138\244\u013d\264\u0148\262" +
    "\u0149\260\001\002\000\004\032\360\001\002\000\034\011" +
    "\061\012\245\024\060\031\057\032\261\037\250\043\255" +
    "\260\263\u010b\256\u0138\244\u013d\264\u0148\262\u0149\260\001" +
    "\002\000\060\021\uff6a\022\uff6a\047\uff6a\075\uff6a\076\uff6a" +
    "\110\uff6a\126\uff6a\132\uff6a\142\uff6a\143\uff6a\145\uff6a\173" +
    "\uff6a\175\uff6a\200\uff6a\214\uff6a\225\uff6a\276\uff6a\310\uff6a" +
    "\325\uff6a\332\uff6a\342\uff6a\u010f\uff6a\u016b\uff6a\001\002\000" +
    "\004\075\356\001\002\000\034\011\061\012\245\024\060" +
    "\031\057\032\261\037\250\043\255\260\263\u010b\256\u0138" +
    "\244\u013d\264\u0148\262\u0149\260\001\002\000\060\021\uff68" +
    "\022\uff68\047\uff68\075\uff68\076\uff68\110\uff68\126\uff68\132" +
    "\uff68\142\uff68\143\uff68\145\uff68\173\uff68\175\uff68\200\uff68" +
    "\214\uff68\225\uff68\276\uff68\310\uff68\325\uff68\332\uff68\342" +
    "\uff68\u010f\uff68\u016b\uff68\001\002\000\034\011\061\012\245" +
    "\024\060\031\057\032\261\037\250\043\255\260\263\u010b" +
    "\256\u0138\244\u013d\264\u0148\262\u0149\260\001\002\000\006" +
    "\022\362\047\uff79\001\002\000\034\011\061\012\245\024" +
    "\060\031\057\032\261\037\250\043\255\260\263\u010b\256" +
    "\u0138\244\u013d\264\u0148\262\u0149\260\001\002\000\004\047" +
    "\364\001\002\000\060\021\uff69\022\uff69\047\uff69\075\uff69" +
    "\076\uff69\110\uff69\126\uff69\132\uff69\142\uff69\143\uff69\145" +
    "\uff69\173\uff69\175\uff69\200\uff69\214\uff69\225\uff69\276\uff69" +
    "\310\uff69\325\uff69\332\uff69\342\uff69\u010f\uff69\u016b\uff69\001" +
    "\002\000\006\022\362\047\uff79\001\002\000\004\047\uff7a" +
    "\001\002\000\060\021\uff67\022\uff67\047\uff67\075\uff67\076" +
    "\uff67\110\uff67\126\uff67\132\uff67\142\uff67\143\uff67\145\uff67" +
    "\173\uff67\175\uff67\200\uff67\214\uff67\225\uff67\276\uff67\310" +
    "\uff67\325\uff67\332\uff67\342\uff67\u010f\uff67\u016b\uff67\001\002" +
    "\000\012\007\271\011\061\012\272\031\057\001\002\000" +
    "\162\004\uff88\005\uff88\006\uff88\007\uff88\010\uff88\011\uff88" +
    "\012\uff88\014\uff88\015\uff88\016\uff88\017\uff88\020\uff88\021" +
    "\uff88\022\uff88\024\uff88\031\uff88\032\uff88\037\uff88\043\uff88" +
    "\047\uff88\075\uff88\076\uff88\110\uff88\112\uff88\123\uff88\126" +
    "\uff88\130\uff88\132\uff88\142\uff88\143\uff88\145\uff88\167\uff88" +
    "\173\uff88\174\uff88\175\uff88\200\uff88\211\uff88\214\uff88\225" +
    "\uff88\230\uff88\255\uff88\260\uff88\276\uff88\303\uff88\310\uff88" +
    "\325\uff88\332\uff88\342\uff88\u0104\uff88\u010b\uff88\u010f\uff88\u0138" +
    "\uff88\u013d\uff88\u0148\uff88\u0149\uff88\u016b\uff88\001\002\000\004" +
    "\047\373\001\002\000\060\021\uff74\022\uff74\047\uff74\075" +
    "\306\076\307\110\uff74\126\uff74\132\uff74\142\uff74\143\uff74" +
    "\145\uff74\173\uff74\175\uff74\200\uff74\214\uff74\225\uff74\276" +
    "\uff74\310\uff74\325\uff74\332\uff74\342\uff74\u010f\uff74\u016b\uff74" +
    "\001\002\000\054\021\uff77\022\uff77\047\uff77\110\uff77\126" +
    "\uff77\132\uff77\142\uff77\143\uff77\145\uff77\173\uff77\175\uff77" +
    "\200\uff77\214\uff77\225\uff77\276\uff77\310\uff77\325\uff77\332" +
    "\uff77\342\uff77\u010f\uff77\u016b\uff77\001\002\000\012\021\ufeea" +
    "\342\ufeea\u010f\ufeea\u016b\ufeea\001\002\000\006\011\061\031" +
    "\057\001\002\000\012\021\uff5d\022\u0103\047\uff5d\u010f\uff5d" +
    "\001\002\000\004\047\u0101\001\002\000\034\021\uff60\112" +
    "\uff60\132\uff60\173\uff60\200\uff60\273\uff60\276\uff60\310\uff60" +
    "\323\uff60\332\uff60\342\uff60\u010f\uff60\u016b\uff60\001\002\000" +
    "\010\021\uff5f\047\uff5f\u010f\uff5f\001\002\000\006\011\061" +
    "\031\057\001\002\000\012\021\uff5d\022\u0103\047\uff5d\u010f" +
    "\uff5d\001\002\000\010\021\uff5e\047\uff5e\u010f\uff5e\001\002" +
    "\000\012\022\uff50\047\uff50\303\u0109\u0104\u010a\001\002\000" +
    "\004\047\u0108\001\002\000\014\021\ufeee\342\ufeee\u010f\ufeee" +
    "\u011c\ufeee\u016b\ufeee\001\002\000\062\011\uff51\012\uff51\021" +
    "\uff51\022\uff51\024\uff51\031\uff51\032\uff51\037\uff51\043\uff51" +
    "\047\uff51\110\uff51\132\uff51\173\uff51\200\uff51\260\uff51\276" +
    "\uff51\310\uff51\332\uff51\u010b\uff51\u010f\uff51\u0138\uff51\u013d\uff51" +
    "\u0148\uff51\u0149\uff51\001\002\000\062\011\uff52\012\uff52\021" +
    "\uff52\022\uff52\024\uff52\031\uff52\032\uff52\037\uff52\043\uff52" +
    "\047\uff52\110\uff52\132\uff52\173\uff52\200\uff52\260\uff52\276" +
    "\uff52\310\uff52\332\uff52\u010b\uff52\u010f\uff52\u0138\uff52\u013d\uff52" +
    "\u0148\uff52\u0149\uff52\001\002\000\006\022\u010d\047\ufeeb\001" +
    "\002\000\004\047\ufeed\001\002\000\006\011\061\031\057" +
    "\001\002\000\012\022\uff50\047\uff50\303\u0109\u0104\u010a\001" +
    "\002\000\006\022\u010d\047\ufeeb\001\002\000\004\047\ufeec" +
    "\001\002\000\004\032\u0112\001\002\000\022\011\061\031" +
    "\057\113\ufeb7\155\ufeb7\172\u0113\210\u0117\302\ufeb7\352\ufeb7" +
    "\001\002\000\006\011\061\031\057\001\002\000\012\021" +
    "\ufedc\022\ufedc\047\ufedc\u010f\ufedc\001\002\000\012\021\ufedd" +
    "\022\ufedd\047\ufedd\u010f\ufedd\001\002\000\006\022\u01cc\047" +
    "\ufed9\001\002\000\006\011\061\031\057\001\002\000\110" +
    "\031\u0159\050\u016c\051\u0178\052\u015a\053\u017d\054\u0170\055" +
    "\u0162\056\u015e\057\u0179\060\u016f\061\u016e\062\u017c\063\u0166" +
    "\064\u016a\065\u0164\066\u017b\067\u0161\070\u0167\071\u0176\072" +
    "\u017a\254\u0173\317\u015b\u0100\u0175\u010a\u0172\u0110\u0171\u011d\u0158" +
    "\u0126\u0177\u0129\u015f\u012c\u015c\u013f\u015d\u014b\u0160\u0155\u016d\u0158" +
    "\u0174\u0165\u0163\u0166\u016b\001\002\000\012\113\u011b\155\u011c" +
    "\302\u011f\352\u011d\001\002\000\012\021\ufedb\022\ufedb\047" +
    "\ufedb\u010f\ufedb\001\002\000\004\217\u013b\001\002\000\006" +
    "\032\ufee2\255\u012e\001\002\000\004\217\u012b\001\002\000" +
    "\012\021\ufea3\022\ufea3\047\ufea3\u010f\ufea3\001\002\000\010" +
    "\032\ufeb0\166\216\252\215\001\002\000\004\032\u0121\001" +
    "\002\000\006\011\061\031\057\001\002\000\012\021\ufea1" +
    "\022\ufea1\047\ufea1\u010f\ufea1\001\002\000\012\022\uff50\047" +
    "\uff50\303\u0109\u0104\u010a\001\002\000\006\022\u0126\047\ufe9c" +
    "\001\002\000\004\047\u012a\001\002\000\006\011\061\031" +
    "\057\001\002\000\012\022\uff50\047\uff50\303\u0109\u0104\u010a" +
    "\001\002\000\006\022\u0126\047\ufe9c\001\002\000\004\047" +
    "\ufe9d\001\002\000\012\021\ufe9e\022\ufe9e\047\ufe9e\u010f\ufe9e" +
    "\001\002\000\010\032\ufeb0\166\216\252\215\001\002\000" +
    "\004\032\u0121\001\002\000\012\021\ufea2\022\ufea2\047\ufea2" +
    "\u010f\ufea2\001\002\000\006\110\u0133\260\u0135\001\002\000" +
    "\004\032\u0130\001\002\000\036\011\uff7f\012\uff7f\024\uff7f" +
    "\031\uff7f\032\240\037\uff7f\043\uff7f\255\243\260\uff7f\u010b" +
    "\uff7f\u0138\uff7f\u013d\uff7f\u0148\uff7f\u0149\uff7f\001\002\000\004" +
    "\047\u0132\001\002\000\012\021\ufe9f\022\ufe9f\047\ufe9f\u010f" +
    "\ufe9f\001\002\000\004\121\u0136\001\002\000\032\021\ufee3" +
    "\022\ufee3\032\ufee3\047\ufee3\113\ufee3\116\ufee3\154\ufee3\155" +
    "\ufee3\210\ufee3\302\ufee3\352\ufee3\u010f\ufee3\001\002\000\032" +
    "\021\ufee0\022\ufee0\032\ufee0\047\ufee0\113\ufee0\116\ufee0\154" +
    "\ufee0\155\ufee0\210\ufee0\302\ufee0\352\ufee0\u010f\ufee0\001\002" +
    "\000\034\021\ufede\022\ufede\032\ufede\047\ufede\113\ufede\116" +
    "\ufede\154\ufede\155\ufede\210\ufede\255\u0137\302\ufede\352\ufede" +
    "\u010f\ufede\001\002\000\034\021\ufebd\022\ufebd\032\ufebd\047" +
    "\ufebd\113\ufebd\116\ufebd\154\ufebd\155\ufebd\210\ufebd\260\u013a" +
    "\302\ufebd\352\ufebd\u010f\ufebd\001\002\000\032\021\ufee1\022" +
    "\ufee1\032\ufee1\047\ufee1\113\ufee1\116\ufee1\154\ufee1\155\ufee1" +
    "\210\ufee1\302\ufee1\352\ufee1\u010f\ufee1\001\002\000\032\021" +
    "\ufedf\022\ufedf\032\ufedf\047\ufedf\113\ufedf\116\ufedf\154\ufedf" +
    "\155\ufedf\210\ufedf\302\ufedf\352\ufedf\u010f\ufedf\001\002\000" +
    "\032\021\ufebe\022\ufebe\032\ufebe\047\ufebe\113\ufebe\116\ufebe" +
    "\154\ufebe\155\ufebe\210\ufebe\302\ufebe\352\ufebe\u010f\ufebe\001" +
    "\002\000\004\032\u013c\001\002\000\006\011\061\031\057" +
    "\001\002\000\004\116\u013e\001\002\000\006\011\061\031" +
    "\057\001\002\000\020\021\ufeac\022\ufeac\032\u0140\047\ufeac" +
    "\255\ufeac\u010f\ufeac\u016b\ufeac\001\002\000\006\011\061\031" +
    "\057\001\002\000\016\021\ufeaa\022\ufeaa\047\ufeaa\255\ufeaa" +
    "\u010f\ufeaa\u016b\u0142\001\002\000\006\276\u0146\310\u0147\001" +
    "\002\000\014\021\ufee2\022\ufee2\047\ufee2\255\u012e\u010f\ufee2" +
    "\001\002\000\012\021\ufea0\022\ufea0\047\ufea0\u010f\ufea0\001" +
    "\002\000\032\021\ufeaa\022\ufeaa\047\ufeaa\113\ufeaa\116\ufeaa" +
    "\155\ufeaa\210\ufeaa\255\ufeaa\302\ufeaa\352\ufeaa\u010f\ufeaa\u016b" +
    "\u0142\001\002\000\006\147\u014a\212\u0149\001\002\000\006" +
    "\147\u014a\212\u0149\001\002\000\032\021\ufea8\022\ufea8\047" +
    "\ufea8\113\ufea8\116\ufea8\155\ufea8\210\ufea8\255\ufea8\302\ufea8" +
    "\352\ufea8\u010f\ufea8\u016b\ufea8\001\002\000\006\260\u014d\273" +
    "\u014b\001\002\000\032\021\ufea5\022\ufea5\047\ufea5\113\ufea5" +
    "\116\ufea5\155\ufea5\210\ufea5\255\ufea5\302\ufea5\352\ufea5\u010f" +
    "\ufea5\u016b\ufea5\001\002\000\032\021\ufea6\022\ufea6\047\ufea6" +
    "\113\ufea6\116\ufea6\155\ufea6\210\ufea6\255\ufea6\302\ufea6\352" +
    "\ufea6\u010f\ufea6\u016b\ufea6\001\002\000\032\021\ufea4\022\ufea4" +
    "\047\ufea4\113\ufea4\116\ufea4\155\ufea4\210\ufea4\255\ufea4\302" +
    "\ufea4\352\ufea4\u010f\ufea4\u016b\ufea4\001\002\000\032\021\ufea7" +
    "\022\ufea7\047\ufea7\113\ufea7\116\ufea7\155\ufea7\210\ufea7\255" +
    "\ufea7\302\ufea7\352\ufea7\u010f\ufea7\u016b\ufea7\001\002\000\032" +
    "\021\ufea9\022\ufea9\047\ufea9\113\ufea9\116\ufea9\155\ufea9\210" +
    "\ufea9\255\ufea9\302\ufea9\352\ufea9\u010f\ufea9\u016b\ufea9\001\002" +
    "\000\030\021\ufeab\022\ufeab\047\ufeab\113\ufeab\116\ufeab\155" +
    "\ufeab\210\ufeab\255\ufeab\302\ufeab\352\ufeab\u010f\ufeab\001\002" +
    "\000\004\047\u0151\001\002\000\032\021\ufead\022\ufead\047" +
    "\ufead\113\ufead\116\ufead\155\ufead\210\ufead\255\ufead\302\ufead" +
    "\352\ufead\u010f\ufead\u016b\ufead\001\002\000\006\022\u0154\047" +
    "\ufe99\001\002\000\004\047\u0157\001\002\000\006\011\061" +
    "\031\057\001\002\000\006\022\u0154\047\ufe99\001\002\000" +
    "\004\047\ufe9a\001\002\000\004\116\ufe9b\001\002\000\064" +
    "\004\uffd2\021\uffd2\022\uffd2\032\uffd2\046\uffd2\047\uffd2\110" +
    "\uffd2\112\uffd2\113\uffd2\116\uffd2\153\uffd2\154\uffd2\155\uffd2" +
    "\174\uffd2\210\uffd2\255\uffd2\260\uffd2\273\uffd2\302\uffd2\350" +
    "\uffd2\352\uffd2\u010f\uffd2\u0172\uffd2\u0175\uffd2\u0176\uffd2\001\002" +
    "\000\106\050\u016c\051\u0178\052\u015a\053\u017d\054\u0170\055" +
    "\u0162\056\u015e\057\u0179\060\u016f\061\u016e\062\u017c\063\u0166" +
    "\064\u016a\065\u0164\066\u017b\067\u0161\070\u0167\071\u0176\072" +
    "\u017a\254\u0173\317\u015b\u0100\u0175\u010a\u0172\u0110\u0171\u011d\u0158" +
    "\u0126\u0177\u0129\u015f\u012c\u015c\u013f\u015d\u014b\u0160\u0155\u016d\u0158" +
    "\u0174\u0165\u0163\u0166\u016b\001\002\000\064\004\uffc7\021\uffc7" +
    "\022\uffc7\032\uffc7\046\uffc7\047\uffc7\110\uffc7\112\uffc7\113" +
    "\uffc7\116\uffc7\153\uffc7\154\uffc7\155\uffc7\174\uffc7\210\uffc7" +
    "\255\uffc7\260\uffc7\273\uffc7\302\uffc7\350\uffc7\352\uffc7\u010f" +
    "\uffc7\u0172\uffc7\u0175\uffc7\u0176\uffc7\001\002\000\064\004\uffd3" +
    "\021\uffd3\022\uffd3\032\uffd3\046\uffd3\047\uffd3\110\uffd3\112" +
    "\uffd3\113\uffd3\116\uffd3\153\uffd3\154\uffd3\155\uffd3\174\uffd3" +
    "\210\uffd3\255\uffd3\260\uffd3\273\uffd3\302\uffd3\350\uffd3\352" +
    "\uffd3\u010f\uffd3\u0172\uffd3\u0175\uffd3\u0176\uffd3\001\002\000\064" +
    "\004\uffd7\021\uffd7\022\uffd7\032\uffd7\046\uffd7\047\uffd7\110" +
    "\uffd7\112\uffd7\113\uffd7\116\uffd7\153\uffd7\154\uffd7\155\uffd7" +
    "\174\uffd7\210\uffd7\255\uffd7\260\uffd7\273\uffd7\302\uffd7\350" +
    "\uffd7\352\uffd7\u010f\uffd7\u0172\uffd7\u0175\uffd7\u0176\uffd7\001\002" +
    "\000\064\004\uffce\021\uffce\022\uffce\032\uffce\046\uffce\047" +
    "\uffce\110\uffce\112\uffce\113\uffce\116\uffce\153\uffce\154\uffce" +
    "\155\uffce\174\uffce\210\uffce\255\uffce\260\uffce\273\uffce\302" +
    "\uffce\350\uffce\352\uffce\u010f\uffce\u0172\uffce\u0175\uffce\u0176\uffce" +
    "\001\002\000\064\004\uffc3\021\uffc3\022\uffc3\032\uffc3\046" +
    "\uffc3\047\uffc3\110\uffc3\112\uffc3\113\uffc3\116\uffc3\153\uffc3" +
    "\154\uffc3\155\uffc3\174\uffc3\210\uffc3\255\uffc3\260\uffc3\273" +
    "\uffc3\302\uffc3\350\uffc3\352\uffc3\u010f\uffc3\u0172\uffc3\u0175\uffc3" +
    "\u0176\uffc3\001\002\000\064\004\uffcd\021\uffcd\022\uffcd\032" +
    "\uffcd\046\uffcd\047\uffcd\110\uffcd\112\uffcd\113\uffcd\116\uffcd" +
    "\153\uffcd\154\uffcd\155\uffcd\174\uffcd\210\uffcd\255\uffcd\260" +
    "\uffcd\273\uffcd\302\uffcd\350\uffcd\352\uffcd\u010f\uffcd\u0172\uffcd" +
    "\u0175\uffcd\u0176\uffcd\001\002\000\064\004\uffd5\021\uffd5\022" +
    "\uffd5\032\uffd5\046\uffd5\047\uffd5\110\uffd5\112\uffd5\113\uffd5" +
    "\116\uffd5\153\uffd5\154\uffd5\155\uffd5\174\uffd5\210\uffd5\255" +
    "\uffd5\260\uffd5\273\uffd5\302\uffd5\350\uffd5\352\uffd5\u010f\uffd5" +
    "\u0172\uffd5\u0175\uffd5\u0176\uffd5\001\002\000\064\004\uffba\021" +
    "\uffba\022\uffba\032\uffba\046\uffba\047\uffba\110\uffba\112\uffba" +
    "\113\uffba\116\uffba\153\uffba\154\uffba\155\uffba\174\uffba\210" +
    "\uffba\255\uffba\260\uffba\273\uffba\302\uffba\350\uffba\352\uffba" +
    "\u010f\uffba\u0172\uffba\u0175\uffba\u0176\uffba\001\002\000\064\004" +
    "\uffc4\021\uffc4\022\uffc4\032\uffc4\046\uffc4\047\uffc4\110\uffc4" +
    "\112\uffc4\113\uffc4\116\uffc4\153\uffc4\154\uffc4\155\uffc4\174" +
    "\uffc4\210\uffc4\255\uffc4\260\uffc4\273\uffc4\302\uffc4\350\uffc4" +
    "\352\uffc4\u010f\uffc4\u0172\uffc4\u0175\uffc4\u0176\uffc4\001\002\000" +
    "\064\004\uffca\021\uffca\022\uffca\032\uffca\046\uffca\047\uffca" +
    "\110\uffca\112\uffca\113\uffca\116\uffca\153\uffca\154\uffca\155" +
    "\uffca\174\uffca\210\uffca\255\uffca\260\uffca\273\uffca\302\uffca" +
    "\350\uffca\352\uffca\u010f\uffca\u0172\uffca\u0175\uffca\u0176\uffca\001" +
    "\002\000\064\004\uffbc\021\uffbc\022\uffbc\032\uffbc\046\uffbc" +
    "\047\uffbc\110\uffbc\112\uffbc\113\uffbc\116\uffbc\153\uffbc\154" +
    "\uffbc\155\uffbc\174\uffbc\210\uffbc\255\uffbc\260\uffbc\273\uffbc" +
    "\302\uffbc\350\uffbc\352\uffbc\u010f\uffbc\u0172\uffbc\u0175\uffbc\u0176" +
    "\uffbc\001\002\000\060\004\uffb5\021\uffb5\022\uffb5\032\u01c2" +
    "\047\uffb5\110\uffb5\112\uffb5\113\uffb5\116\uffb5\153\uffb5\154" +
    "\uffb5\155\uffb5\174\uffb5\210\uffb5\255\uffb5\260\uffb5\273\uffb5" +
    "\302\uffb5\350\uffb5\352\uffb5\u010f\uffb5\u0172\uffb5\u0175\uffb5\001" +
    "\002\000\064\004\uffbe\021\uffbe\022\uffbe\032\uffbe\046\uffbe" +
    "\047\uffbe\110\uffbe\112\uffbe\113\uffbe\116\uffbe\153\uffbe\154" +
    "\uffbe\155\uffbe\174\uffbe\210\uffbe\255\uffbe\260\uffbe\273\uffbe" +
    "\302\uffbe\350\uffbe\352\uffbe\u010f\uffbe\u0172\uffbe\u0175\uffbe\u0176" +
    "\uffbe\001\002\000\064\004\uffb9\021\uffb9\022\uffb9\032\uffb9" +
    "\046\uffb9\047\uffb9\110\uffb9\112\uffb9\113\uffb9\116\uffb9\153" +
    "\uffb9\154\uffb9\155\uffb9\174\uffb9\210\uffb9\255\uffb9\260\uffb9" +
    "\273\uffb9\302\uffb9\350\uffb9\352\uffb9\u010f\uffb9\u0172\uffb9\u0175" +
    "\uffb9\u0176\uffb9\001\002\000\060\004\uffda\021\uffda\022\uffda" +
    "\032\uffda\047\uffda\110\uffda\112\uffda\113\uffda\116\uffda\153" +
    "\uffda\154\uffda\155\uffda\174\uffda\210\uffda\255\uffda\260\uffda" +
    "\273\uffda\302\uffda\350\uffda\352\uffda\u010f\uffda\u0172\uffda\u0175" +
    "\uffda\001\002\000\044\021\ufec7\022\ufec7\047\ufec7\110\ufec7" +
    "\113\ufec7\116\ufec7\153\ufec7\154\ufec7\155\ufec7\174\u017e\210" +
    "\ufec7\255\ufec7\260\ufec7\273\ufec7\302\ufec7\352\ufec7\u010f\ufec7" +
    "\001\002\000\064\004\uffbd\021\uffbd\022\uffbd\032\uffbd\046" +
    "\uffbd\047\uffbd\110\uffbd\112\uffbd\113\uffbd\116\uffbd\153\uffbd" +
    "\154\uffbd\155\uffbd\174\uffbd\210\uffbd\255\uffbd\260\uffbd\273" +
    "\uffbd\302\uffbd\350\uffbd\352\uffbd\u010f\uffbd\u0172\uffbd\u0175\uffbd" +
    "\u0176\uffbd\001\002\000\064\004\uffd8\021\uffd8\022\uffd8\032" +
    "\uffd8\046\uffd8\047\uffd8\110\uffd8\112\uffd8\113\uffd8\116\uffd8" +
    "\153\uffd8\154\uffd8\155\uffd8\174\uffd8\210\uffd8\255\uffd8\260" +
    "\uffd8\273\uffd8\302\uffd8\350\uffd8\352\uffd8\u010f\uffd8\u0172\uffd8" +
    "\u0175\uffd8\u0176\uffd8\001\002\000\064\004\uffc9\021\uffc9\022" +
    "\uffc9\032\uffc9\046\uffc9\047\uffc9\110\uffc9\112\uffc9\113\uffc9" +
    "\116\uffc9\153\uffc9\154\uffc9\155\uffc9\174\uffc9\210\uffc9\255" +
    "\uffc9\260\uffc9\273\uffc9\302\uffc9\350\uffc9\352\uffc9\u010f\uffc9" +
    "\u0172\uffc9\u0175\uffc9\u0176\uffc9\001\002\000\064\004\uffcc\021" +
    "\uffcc\022\uffcc\032\uffcc\046\uffcc\047\uffcc\110\uffcc\112\uffcc" +
    "\113\uffcc\116\uffcc\153\uffcc\154\uffcc\155\uffcc\174\uffcc\210" +
    "\uffcc\255\uffcc\260\uffcc\273\uffcc\302\uffcc\350\uffcc\352\uffcc" +
    "\u010f\uffcc\u0172\uffcc\u0175\uffcc\u0176\uffcc\001\002\000\064\004" +
    "\uffc0\021\uffc0\022\uffc0\032\uffc0\046\uffc0\047\uffc0\110\uffc0" +
    "\112\uffc0\113\uffc0\116\uffc0\153\uffc0\154\uffc0\155\uffc0\174" +
    "\uffc0\210\uffc0\255\uffc0\260\uffc0\273\uffc0\302\uffc0\350\uffc0" +
    "\352\uffc0\u010f\uffc0\u0172\uffc0\u0175\uffc0\u0176\uffc0\001\002\000" +
    "\064\004\uffc1\021\uffc1\022\uffc1\032\uffc1\046\uffc1\047\uffc1" +
    "\110\uffc1\112\uffc1\113\uffc1\116\uffc1\153\uffc1\154\uffc1\155" +
    "\uffc1\174\uffc1\210\uffc1\255\uffc1\260\uffc1\273\uffc1\302\uffc1" +
    "\350\uffc1\352\uffc1\u010f\uffc1\u0172\uffc1\u0175\uffc1\u0176\uffc1\001" +
    "\002\000\064\004\uffc5\021\uffc5\022\uffc5\032\uffc5\046\uffc5" +
    "\047\uffc5\110\uffc5\112\uffc5\113\uffc5\116\uffc5\153\uffc5\154" +
    "\uffc5\155\uffc5\174\uffc5\210\uffc5\255\uffc5\260\uffc5\273\uffc5" +
    "\302\uffc5\350\uffc5\352\uffc5\u010f\uffc5\u0172\uffc5\u0175\uffc5\u0176" +
    "\uffc5\001\002\000\064\004\uffd4\021\uffd4\022\uffd4\032\uffd4" +
    "\046\uffd4\047\uffd4\110\uffd4\112\uffd4\113\uffd4\116\uffd4\153" +
    "\uffd4\154\uffd4\155\uffd4\174\uffd4\210\uffd4\255\uffd4\260\uffd4" +
    "\273\uffd4\302\uffd4\350\uffd4\352\uffd4\u010f\uffd4\u0172\uffd4\u0175" +
    "\uffd4\u0176\uffd4\001\002\000\064\004\uffcf\021\uffcf\022\uffcf" +
    "\032\uffcf\046\uffcf\047\uffcf\110\uffcf\112\uffcf\113\uffcf\116" +
    "\uffcf\153\uffcf\154\uffcf\155\uffcf\174\uffcf\210\uffcf\255\uffcf" +
    "\260\uffcf\273\uffcf\302\uffcf\350\uffcf\352\uffcf\u010f\uffcf\u0172" +
    "\uffcf\u0175\uffcf\u0176\uffcf\001\002\000\054\021\uffd1\022\uffd1" +
    "\032\uffd1\046\uffd1\047\uffd1\110\uffd1\113\uffd1\116\uffd1\153" +
    "\uffd1\154\uffd1\155\uffd1\174\uffd1\210\uffd1\255\uffd1\260\uffd1" +
    "\273\uffd1\302\uffd1\350\uffd1\352\uffd1\u010f\uffd1\u0176\uffd1\001" +
    "\002\000\064\004\uffd0\021\uffd0\022\uffd0\032\uffd0\046\uffd0" +
    "\047\uffd0\110\uffd0\112\uffd0\113\uffd0\116\uffd0\153\uffd0\154" +
    "\uffd0\155\uffd0\174\uffd0\210\uffd0\255\uffd0\260\uffd0\273\uffd0" +
    "\302\uffd0\350\uffd0\352\uffd0\u010f\uffd0\u0172\uffd0\u0175\uffd0\u0176" +
    "\uffd0\001\002\000\064\004\uffd6\021\uffd6\022\uffd6\032\uffd6" +
    "\046\uffd6\047\uffd6\110\uffd6\112\uffd6\113\uffd6\116\uffd6\153" +
    "\uffd6\154\uffd6\155\uffd6\174\uffd6\210\uffd6\255\uffd6\260\uffd6" +
    "\273\uffd6\302\uffd6\350\uffd6\352\uffd6\u010f\uffd6\u0172\uffd6\u0175" +
    "\uffd6\u0176\uffd6\001\002\000\064\004\uffb8\021\uffb8\022\uffb8" +
    "\032\uffb8\046\uffb8\047\uffb8\110\uffb8\112\uffb8\113\uffb8\116" +
    "\uffb8\153\uffb8\154\uffb8\155\uffb8\174\uffb8\210\uffb8\255\uffb8" +
    "\260\uffb8\273\uffb8\302\uffb8\350\uffb8\352\uffb8\u010f\uffb8\u0172" +
    "\uffb8\u0175\uffb8\u0176\uffb8\001\002\000\064\004\uffcb\021\uffcb" +
    "\022\uffcb\032\uffcb\046\uffcb\047\uffcb\110\uffcb\112\uffcb\113" +
    "\uffcb\116\uffcb\153\uffcb\154\uffcb\155\uffcb\174\uffcb\210\uffcb" +
    "\255\uffcb\260\uffcb\273\uffcb\302\uffcb\350\uffcb\352\uffcb\u010f" +
    "\uffcb\u0172\uffcb\u0175\uffcb\u0176\uffcb\001\002\000\064\004\uffc8" +
    "\021\uffc8\022\uffc8\032\uffc8\046\uffc8\047\uffc8\110\uffc8\112" +
    "\uffc8\113\uffc8\116\uffc8\153\uffc8\154\uffc8\155\uffc8\174\uffc8" +
    "\210\uffc8\255\uffc8\260\uffc8\273\uffc8\302\uffc8\350\uffc8\352" +
    "\uffc8\u010f\uffc8\u0172\uffc8\u0175\uffc8\u0176\uffc8\001\002\000\064" +
    "\004\uffc2\021\uffc2\022\uffc2\032\uffc2\046\uffc2\047\uffc2\110" +
    "\uffc2\112\uffc2\113\uffc2\116\uffc2\153\uffc2\154\uffc2\155\uffc2" +
    "\174\uffc2\210\uffc2\255\uffc2\260\uffc2\273\uffc2\302\uffc2\350" +
    "\uffc2\352\uffc2\u010f\uffc2\u0172\uffc2\u0175\uffc2\u0176\uffc2\001\002" +
    "\000\064\004\uffb7\021\uffb7\022\uffb7\032\uffb7\046\uffb7\047" +
    "\uffb7\110\uffb7\112\uffb7\113\uffb7\116\uffb7\153\uffb7\154\uffb7" +
    "\155\uffb7\174\uffb7\210\uffb7\255\uffb7\260\uffb7\273\uffb7\302" +
    "\uffb7\350\uffb7\352\uffb7\u010f\uffb7\u0172\uffb7\u0175\uffb7\u0176\uffb7" +
    "\001\002\000\064\004\uffbb\021\uffbb\022\uffbb\032\uffbb\046" +
    "\uffbb\047\uffbb\110\uffbb\112\uffbb\113\uffbb\116\uffbb\153\uffbb" +
    "\154\uffbb\155\uffbb\174\uffbb\210\uffbb\255\uffbb\260\uffbb\273" +
    "\uffbb\302\uffbb\350\uffbb\352\uffbb\u010f\uffbb\u0172\uffbb\u0175\uffbb" +
    "\u0176\uffbb\001\002\000\064\004\uffbf\021\uffbf\022\uffbf\032" +
    "\uffbf\046\uffbf\047\uffbf\110\uffbf\112\uffbf\113\uffbf\116\uffbf" +
    "\153\uffbf\154\uffbf\155\uffbf\174\uffbf\210\uffbf\255\uffbf\260" +
    "\uffbf\273\uffbf\302\uffbf\350\uffbf\352\uffbf\u010f\uffbf\u0172\uffbf" +
    "\u0175\uffbf\u0176\uffbf\001\002\000\064\004\uffc6\021\uffc6\022" +
    "\uffc6\032\uffc6\046\uffc6\047\uffc6\110\uffc6\112\uffc6\113\uffc6" +
    "\116\uffc6\153\uffc6\154\uffc6\155\uffc6\174\uffc6\210\uffc6\255" +
    "\uffc6\260\uffc6\273\uffc6\302\uffc6\350\uffc6\352\uffc6\u010f\uffc6" +
    "\u0172\uffc6\u0175\uffc6\u0176\uffc6\001\002\000\006\011\061\031" +
    "\057\001\002\000\042\021\ufed5\022\ufed5\047\ufed5\110\ufece" +
    "\113\u018d\116\ufeae\153\u0180\154\u0187\155\u018a\210\u0186\255" +
    "\u018b\260\ufece\273\u0185\302\u0184\352\u018c\u010f\ufed5\001\002" +
    "\000\034\021\ufebf\022\ufebf\032\u01ac\047\ufebf\113\ufebf\116" +
    "\ufebf\154\ufebf\155\ufebf\210\ufebf\255\ufebf\302\ufebf\352\ufebf" +
    "\u010f\ufebf\001\002\000\012\021\ufed8\022\ufed8\047\ufed8\u010f" +
    "\ufed8\001\002\000\012\021\ufed6\022\ufed6\047\ufed6\u010f\ufed6" +
    "\001\002\000\006\110\u01b3\260\u01b4\001\002\000\032\021" +
    "\ufeb0\022\ufeb0\047\ufeb0\113\ufeb0\116\ufeb0\155\ufeb0\166\216" +
    "\210\ufeb0\252\215\302\ufeb0\352\ufeb0\u010f\ufeb0\001\002\000" +
    "\012\012\u01a5\037\u01a1\043\u01a4\260\u01a3\001\002\000\006" +
    "\011\061\031\057\001\002\000\026\021\ufeb9\022\ufeb9\047" +
    "\ufeb9\113\ufeb7\116\ufeb7\155\ufeb7\210\u0117\302\ufeb7\352\ufeb7" +
    "\u010f\ufeb9\001\002\000\004\116\u0199\001\002\000\026\021" +
    "\ufeb9\022\ufeb9\047\ufeb9\113\ufeb7\116\ufeb7\155\ufeb7\210\u0117" +
    "\302\ufeb7\352\ufeb7\u010f\ufeb9\001\002\000\006\032\ufee2\255" +
    "\u012e\001\002\000\006\110\ufecf\260\ufecf\001\002\000\004" +
    "\217\u018f\001\002\000\004\217\u018e\001\002\000\004\116" +
    "\ufeaf\001\002\000\032\021\ufeb0\022\ufeb0\047\ufeb0\113\ufeb0" +
    "\116\ufeb0\155\ufeb0\166\216\210\ufeb0\252\215\302\ufeb0\352" +
    "\ufeb0\u010f\ufeb0\001\002\000\026\021\ufeb6\022\ufeb6\047\ufeb6" +
    "\113\ufeb6\116\ufeb6\155\ufeb6\210\ufeb6\302\ufeb6\352\ufeb6\u010f" +
    "\ufeb6\001\002\000\004\032\u0192\001\002\000\036\011\uff7f" +
    "\012\uff7f\024\uff7f\031\uff7f\032\240\037\uff7f\043\uff7f\255" +
    "\243\260\uff7f\u010b\uff7f\u0138\uff7f\u013d\uff7f\u0148\uff7f\u0149\uff7f" +
    "\001\002\000\004\047\u0194\001\002\000\026\021\ufeb3\022" +
    "\ufeb3\047\ufeb3\113\ufeb3\116\ufeb3\155\ufeb3\210\ufeb3\302\ufeb3" +
    "\352\ufeb3\u010f\ufeb3\001\002\000\012\021\ufed0\022\ufed0\047" +
    "\ufed0\u010f\ufed0\001\002\000\014\113\u018d\116\ufeae\155\u018a" +
    "\302\u0184\352\u018c\001\002\000\026\021\ufeb9\022\ufeb9\047" +
    "\ufeb9\113\ufeb7\116\ufeb7\155\ufeb7\210\u0117\302\ufeb7\352\ufeb7" +
    "\u010f\ufeb9\001\002\000\012\021\ufeba\022\ufeba\047\ufeba\u010f" +
    "\ufeba\001\002\000\006\011\061\031\057\001\002\000\034" +
    "\021\ufeac\022\ufeac\032\u0140\047\ufeac\113\ufeac\116\ufeac\155" +
    "\ufeac\210\ufeac\255\ufeac\302\ufeac\352\ufeac\u010f\ufeac\u016b\ufeac" +
    "\001\002\000\032\021\ufeaa\022\ufeaa\047\ufeaa\113\ufeaa\116" +
    "\ufeaa\155\ufeaa\210\ufeaa\255\ufeaa\302\ufeaa\352\ufeaa\u010f\ufeaa" +
    "\u016b\u0142\001\002\000\030\021\ufee2\022\ufee2\047\ufee2\113" +
    "\ufee2\116\ufee2\155\ufee2\210\ufee2\255\u012e\302\ufee2\352\ufee2" +
    "\u010f\ufee2\001\002\000\026\021\ufeb4\022\ufeb4\047\ufeb4\113" +
    "\ufeb4\116\ufeb4\155\ufeb4\210\ufeb4\302\ufeb4\352\ufeb4\u010f\ufeb4" +
    "\001\002\000\012\021\ufed1\022\ufed1\047\ufed1\u010f\ufed1\001" +
    "\002\000\030\110\ufece\113\u018d\116\ufeae\153\u0180\154\u0187" +
    "\155\u018a\255\u018b\260\ufece\273\u0185\302\u0184\352\u018c\001" +
    "\002\000\012\021\ufed7\022\ufed7\047\ufed7\u010f\ufed7\001\002" +
    "\000\034\021\ufec5\022\ufec5\047\ufec5\113\ufec5\116\ufec5\153" +
    "\ufec5\154\ufec5\155\ufec5\210\ufec5\255\ufec5\302\ufec5\352\ufec5" +
    "\u010f\ufec5\001\002\000\034\021\ufec1\022\ufec1\047\ufec1\113" +
    "\ufec1\116\ufec1\153\u01a6\154\ufec1\155\ufec1\210\ufec1\255\ufec1" +
    "\302\ufec1\352\ufec1\u010f\ufec1\001\002\000\034\021\ufec3\022" +
    "\ufec3\047\ufec3\113\ufec3\116\ufec3\153\ufec3\154\ufec3\155\ufec3" +
    "\210\ufec3\255\ufec3\302\ufec3\352\ufec3\u010f\ufec3\001\002\000" +
    "\034\021\ufec4\022\ufec4\047\ufec4\113\ufec4\116\ufec4\153\ufec4" +
    "\154\ufec4\155\ufec4\210\ufec4\255\ufec4\302\ufec4\352\ufec4\u010f" +
    "\ufec4\001\002\000\034\021\ufec6\022\ufec6\047\ufec6\113\ufec6" +
    "\116\ufec6\153\ufec6\154\ufec6\155\ufec6\210\ufec6\255\ufec6\302" +
    "\ufec6\352\ufec6\u010f\ufec6\001\002\000\034\021\ufebf\022\ufebf" +
    "\032\u01ac\047\ufebf\113\ufebf\116\ufebf\154\ufebf\155\ufebf\210" +
    "\ufebf\255\ufebf\302\ufebf\352\ufebf\u010f\ufebf\001\002\000\032" +
    "\021\ufee2\022\ufee2\047\ufee2\113\ufee2\116\ufee2\154\ufee2\155" +
    "\ufee2\210\ufee2\255\u012e\302\ufee2\352\ufee2\u010f\ufee2\001\002" +
    "\000\030\021\ufebb\022\ufebb\047\ufebb\113\ufebb\116\ufebb\154" +
    "\u01a9\155\ufebb\210\ufebb\302\ufebb\352\ufebb\u010f\ufebb\001\002" +
    "\000\026\021\ufebc\022\ufebc\047\ufebc\113\ufebc\116\ufebc\155" +
    "\ufebc\210\ufebc\302\ufebc\352\ufebc\u010f\ufebc\001\002\000\026" +
    "\021\ufeb9\022\ufeb9\047\ufeb9\113\ufeb7\116\ufeb7\155\ufeb7\210" +
    "\u0117\302\ufeb7\352\ufeb7\u010f\ufeb9\001\002\000\012\021\ufed4" +
    "\022\ufed4\047\ufed4\u010f\ufed4\001\002\000\004\012\u01ae\001" +
    "\002\000\032\021\ufec2\022\ufec2\047\ufec2\113\ufec2\116\ufec2" +
    "\154\ufec2\155\ufec2\210\ufec2\255\ufec2\302\ufec2\352\ufec2\u010f" +
    "\ufec2\001\002\000\004\022\u01af\001\002\000\004\012\u01b0" +
    "\001\002\000\004\047\u01b1\001\002\000\032\021\ufec0\022" +
    "\ufec0\047\ufec0\113\ufec0\116\ufec0\154\ufec0\155\ufec0\210\ufec0" +
    "\255\ufec0\302\ufec0\352\ufec0\u010f\ufec0\001\002\000\026\021" +
    "\ufeb5\022\ufeb5\047\ufeb5\113\ufeb5\116\ufeb5\155\ufeb5\210\ufeb5" +
    "\302\ufeb5\352\ufeb5\u010f\ufeb5\001\002\000\004\121\u01b8\001" +
    "\002\000\030\021\ufecd\022\ufecd\047\ufecd\113\ufecd\116\ufecd" +
    "\154\ufecd\155\ufecd\210\ufecd\302\ufecd\352\ufecd\u010f\ufecd\001" +
    "\002\000\030\021\ufebb\022\ufebb\047\ufebb\113\ufebb\116\ufebb" +
    "\154\u01a9\155\ufebb\210\ufebb\302\ufebb\352\ufebb\u010f\ufebb\001" +
    "\002\000\026\021\ufeb9\022\ufeb9\047\ufeb9\113\ufeb7\116\ufeb7" +
    "\155\ufeb7\210\u0117\302\ufeb7\352\ufeb7\u010f\ufeb9\001\002\000" +
    "\012\021\ufed2\022\ufed2\047\ufed2\u010f\ufed2\001\002\000\034" +
    "\021\ufec9\022\ufec9\047\ufec9\113\ufec9\116\ufec9\154\ufec9\155" +
    "\ufec9\210\ufec9\255\u01ba\260\u01bb\302\ufec9\352\ufec9\u010f\ufec9" +
    "\001\002\000\030\021\ufecc\022\ufecc\047\ufecc\113\ufecc\116" +
    "\ufecc\154\ufecc\155\ufecc\210\ufecc\302\ufecc\352\ufecc\u010f\ufecc" +
    "\001\002\000\004\260\u01bc\001\002\000\030\021\ufeca\022" +
    "\ufeca\047\ufeca\113\ufeca\116\ufeca\154\ufeca\155\ufeca\210\ufeca" +
    "\302\ufeca\352\ufeca\u010f\ufeca\001\002\000\030\021\ufecb\022" +
    "\ufecb\047\ufecb\113\ufecb\116\ufecb\154\ufecb\155\ufecb\210\ufecb" +
    "\302\ufecb\352\ufecb\u010f\ufecb\001\002\000\032\021\ufee2\022" +
    "\ufee2\047\ufee2\113\ufee2\116\ufee2\154\ufee2\155\ufee2\210\ufee2" +
    "\255\u012e\302\ufee2\352\ufee2\u010f\ufee2\001\002\000\030\021" +
    "\ufebb\022\ufebb\047\ufebb\113\ufebb\116\ufebb\154\u01a9\155\ufebb" +
    "\210\ufebb\302\ufebb\352\ufebb\u010f\ufebb\001\002\000\026\021" +
    "\ufeb9\022\ufeb9\047\ufeb9\113\ufeb7\116\ufeb7\155\ufeb7\210\u0117" +
    "\302\ufeb7\352\ufeb7\u010f\ufeb9\001\002\000\012\021\ufed3\022" +
    "\ufed3\047\ufed3\u010f\ufed3\001\002\000\042\021\ufec8\022\ufec8" +
    "\047\ufec8\110\ufec8\113\ufec8\116\ufec8\153\ufec8\154\ufec8\155" +
    "\ufec8\210\ufec8\255\ufec8\260\ufec8\273\ufec8\302\ufec8\352\ufec8" +
    "\u010f\ufec8\001\002\000\004\012\u01c4\001\002\000\056\004" +
    "\uffdb\021\uffdb\022\uffdb\047\uffdb\110\uffdb\112\uffdb\113\uffdb" +
    "\116\uffdb\153\uffdb\154\uffdb\155\uffdb\174\uffdb\210\uffdb\255" +
    "\uffdb\260\uffdb\273\uffdb\302\uffdb\350\uffdb\352\uffdb\u010f\uffdb" +
    "\u0172\uffdb\u0175\uffdb\001\002\000\006\022\u01c5\047\uffb3\001" +
    "\002\000\004\012\u01c8\001\002\000\004\047\u01c7\001\002" +
    "\000\056\004\uffb6\021\uffb6\022\uffb6\047\uffb6\110\uffb6\112" +
    "\uffb6\113\uffb6\116\uffb6\153\uffb6\154\uffb6\155\uffb6\174\uffb6" +
    "\210\uffb6\255\uffb6\260\uffb6\273\uffb6\302\uffb6\350\uffb6\352" +
    "\uffb6\u010f\uffb6\u0172\uffb6\u0175\uffb6\001\002\000\004\047\uffb4" +
    "\001\002\000\004\046\u01ca\001\002\000\060\004\uffd9\021" +
    "\uffd9\022\uffd9\032\uffd9\047\uffd9\110\uffd9\112\uffd9\113\uffd9" +
    "\116\uffd9\153\uffd9\154\uffd9\155\uffd9\174\uffd9\210\uffd9\255" +
    "\uffd9\260\uffd9\273\uffd9\302\uffd9\350\uffd9\352\uffd9\u010f\uffd9" +
    "\u0172\uffd9\u0175\uffd9\001\002\000\014\113\ufeb8\116\ufeb8\155" +
    "\ufeb8\302\ufeb8\352\ufeb8\001\002\000\022\011\061\031\057" +
    "\113\ufeb7\155\ufeb7\172\u0113\210\u0117\302\ufeb7\352\ufeb7\001" +
    "\002\000\004\047\u01ce\001\002\000\010\021\ufee4\u010f\ufee4" +
    "\u016b\u01d0\001\002\000\006\021\ufee6\u010f\ufee6\001\002\000" +
    "\004\352\u01d1\001\002\000\006\021\ufee5\u010f\ufee5\001\002" +
    "\000\012\021\ufed9\022\u01cc\047\ufed9\u010f\ufed9\001\002\000" +
    "\010\021\ufeda\047\ufeda\u010f\ufeda\001\002\000\010\032\ufeb0" +
    "\166\216\252\215\001\002\000\004\032\u0121\001\002\000" +
    "\012\021\ufe98\022\ufe98\047\ufe98\u010f\ufe98\001\002\000\004" +
    "\112\u01d8\001\002\000\004\173\021\001\002\000\006\021" +
    "\ufef2\u010f\ufef2\001\002\000\006\021\uff12\u010f\uff12\001\002" +
    "\000\012\021\uff0e\174\uff0e\u010f\uff0e\u016b\u01dc\001\002\000" +
    "\006\032\uff0c\352\u01e2\001\002\000\010\021\uff07\174\u01df" +
    "\u010f\uff07\001\002\000\006\021\uff11\u010f\uff11\001\002\000" +
    "\006\011\061\031\057\001\002\000\006\021\uff10\u010f\uff10" +
    "\001\002\000\006\021\uff08\u010f\uff08\001\002\000\004\032" +
    "\uff0d\001\002\000\004\032\u01e4\001\002\000\004\u018a\u01e9" +
    "\001\002\000\010\021\uff0f\174\uff0f\u010f\uff0f\001\002\000" +
    "\012\021\uff0a\022\u01e7\174\uff0a\u010f\uff0a\001\002\000\004" +
    "\032\u01e4\001\002\000\010\021\uff0b\174\uff0b\u010f\uff0b\001" +
    "\002\000\004\004\u01ea\001\002\000\004\043\u01eb\001\002" +
    "\000\004\022\u01ec\001\002\000\004\u018b\u01ed\001\002\000" +
    "\004\004\u01ee\001\002\000\004\043\u01ef\001\002\000\006" +
    "\022\u01f1\047\uff05\001\002\000\004\047\u020d\001\002\000" +
    "\010\u0124\u01fa\u0190\u01f9\u0192\u01f8\001\002\000\006\022\uff00" +
    "\047\uff00\001\002\000\006\022\uff03\047\uff03\001\002\000" +
    "\006\022\uff04\047\uff04\001\002\000\006\022\u01f1\047\uff05" +
    "\001\002\000\006\022\uff02\047\uff02\001\002\000\006\022" +
    "\uff01\047\uff01\001\002\000\004\004\u0207\001\002\000\004" +
    "\004\u0202\001\002\000\004\004\u01fb\001\002\000\004\012" +
    "\u01fc\001\002\000\016\022\ufefe\047\ufefe\u018c\u01ff\u018d\u0200" +
    "\u018e\u01fe\u018f\u0201\001\002\000\006\022\ufeff\047\ufeff\001" +
    "\002\000\006\022\ufefa\047\ufefa\001\002\000\006\022\ufefd" +
    "\047\ufefd\001\002\000\006\022\ufefb\047\ufefb\001\002\000" +
    "\006\022\ufefc\047\ufefc\001\002\000\006\012\u0204\u0191\u0205" +
    "\001\002\000\006\022\ufef9\047\ufef9\001\002\000\012\u018c" +
    "\u01ff\u018d\u0200\u018e\u01fe\u018f\u0201\001\002\000\006\022\ufef7" +
    "\047\ufef7\001\002\000\006\022\ufef8\047\ufef8\001\002\000" +
    "\004\012\u0208\001\002\000\020\022\ufef3\047\ufef3\u018c\u01ff" +
    "\u018d\u0200\u018e\u01fe\u018f\u0201\u0193\u020a\001\002\000\006\022" +
    "\ufef5\047\ufef5\001\002\000\006\022\ufef4\047\ufef4\001\002" +
    "\000\006\022\ufef6\047\ufef6\001\002\000\004\047\uff06\001" +
    "\002\000\012\021\uff09\022\uff09\174\uff09\u010f\uff09\001\002" +
    "\000\006\011\ufe5d\031\ufe5d\001\002\000\006\011\061\031" +
    "\057\001\002\000\006\011\ufe5e\031\ufe5e\001\002\000\006" +
    "\011\061\031\057\001\002\000\004\032\u0213\001\002\000" +
    "\006\024\060\047\ufe1e\001\002\000\004\047\ufe1f\001\002" +
    "\000\006\022\u0256\047\ufe18\001\002\000\110\050\ufe16\051" +
    "\ufe16\052\ufe16\053\ufe16\054\ufe16\055\ufe16\056\ufe16\057\ufe16" +
    "\060\ufe16\061\ufe16\062\ufe16\063\ufe16\064\ufe16\065\ufe16\066" +
    "\ufe16\067\ufe16\070\ufe16\071\ufe16\072\ufe16\112\u0221\254\ufe16" +
    "\317\ufe16\u0100\ufe16\u010a\ufe16\u0110\ufe16\u011d\ufe16\u0126\ufe16\u0129" +
    "\ufe16\u012c\ufe16\u013f\ufe16\u014b\ufe16\u0155\ufe16\u0158\ufe16\u0165\ufe16" +
    "\u0166\ufe16\001\002\000\004\047\u0218\001\002\000\004\u0178" +
    "\u0219\001\002\000\110\050\u016c\051\u0178\052\u015a\053\u017d" +
    "\054\u0170\055\u0162\056\u015e\057\u0179\060\u016f\061\u016e\062" +
    "\u017c\063\u0166\064\u016a\065\u0164\066\u017b\067\u0161\070\u0167" +
    "\071\u0176\072\u017a\234\u021d\254\u0173\317\u015b\u0100\u0175\u010a" +
    "\u0172\u0110\u0171\u011d\u0158\u0126\u0177\u0129\u015f\u012c\u015c\u013f\u015d" +
    "\u014b\u0160\u0155\u016d\u0158\u0174\u0165\u0163\u0166\u016b\001\002\000" +
    "\006\021\ufe20\u010f\ufe20\001\002\000\006\021\ufe12\u010f\ufe12" +
    "\001\002\000\004\350\u021f\001\002\000\004\350\u021f\001" +
    "\002\000\006\021\ufe13\u010f\ufe13\001\002\000\020\346\044" +
    "\351\012\u0177\u0231\u0178\u0229\u0179\u022e\u017a\u022c\u017b\u022f\001" +
    "\002\000\006\112\u0221\132\ufe16\001\002\000\112\050\ufe17" +
    "\051\ufe17\052\ufe17\053\ufe17\054\ufe17\055\ufe17\056\ufe17\057" +
    "\ufe17\060\ufe17\061\ufe17\062\ufe17\063\ufe17\064\ufe17\065\ufe17" +
    "\066\ufe17\067\ufe17\070\ufe17\071\ufe17\072\ufe17\125\ufe17\132" +
    "\ufe17\254\ufe17\317\ufe17\u0100\ufe17\u010a\ufe17\u0110\ufe17\u011d\ufe17" +
    "\u0126\ufe17\u0129\ufe17\u012c\ufe17\u013f\ufe17\u014b\ufe17\u0155\ufe17\u0158" +
    "\ufe17\u0165\ufe17\u0166\ufe17\001\002\000\004\132\u0223\001\002" +
    "\000\006\032\u0224\173\021\001\002\000\004\173\021\001" +
    "\002\000\006\021\ufe10\u010f\ufe10\001\002\000\006\021\ufe0e" +
    "\u010f\ufe0e\001\002\000\004\047\u0228\001\002\000\006\021" +
    "\ufe0f\u010f\ufe0f\001\002\000\004\260\u0242\001\002\000\010" +
    "\112\ufe09\125\ufe09\132\ufe09\001\002\000\004\112\u023c\001" +
    "\002\000\004\u016b\u0239\001\002\000\012\022\u0236\112\ufe00" +
    "\125\ufe00\132\ufe00\001\002\000\012\022\ufe06\112\ufe06\125" +
    "\ufe06\132\ufe06\001\002\000\004\004\u0232\001\002\000\012" +
    "\022\ufe03\112\ufe03\125\ufe03\132\ufe03\001\002\000\012\022" +
    "\ufe07\112\ufe07\125\ufe07\132\ufe07\001\002\000\006\271\u0235" +
    "\u016b\u0233\001\002\000\012\022\ufdff\112\ufdff\125\ufdff\132" +
    "\ufdff\001\002\000\012\022\ufe02\112\ufe02\125\ufe02\132\ufe02" +
    "\001\002\000\012\022\ufdfe\112\ufdfe\125\ufdfe\132\ufdfe\001" +
    "\002\000\020\346\044\351\012\u0177\u0231\u0178\u0229\u0179\u022e" +
    "\u017a\u022c\u017b\u022f\001\002\000\010\112\ufe08\125\ufe08\132" +
    "\ufe08\001\002\000\010\112\ufe01\125\ufe01\132\ufe01\001\002" +
    "\000\004\260\u023a\001\002\000\004\u0125\u023b\001\002\000" +
    "\012\022\ufe04\112\ufe04\125\ufe04\132\ufe04\001\002\000\014" +
    "\011\061\031\057\u017c\u023e\u017d\u0241\u017e\u023d\001\002\000" +
    "\014\022\ufe40\110\ufe40\112\ufe40\125\ufe40\132\ufe40\001\002" +
    "\000\014\022\ufe42\110\ufe42\112\ufe42\125\ufe42\132\ufe42\001" +
    "\002\000\014\022\ufe3f\110\ufe3f\112\ufe3f\125\ufe3f\132\ufe3f" +
    "\001\002\000\012\022\ufdfd\112\ufdfd\125\ufdfd\132\ufdfd\001" +
    "\002\000\014\022\ufe41\110\ufe41\112\ufe41\125\ufe41\132\ufe41" +
    "\001\002\000\004\u016b\u0243\001\002\000\004\260\u0244\001" +
    "\002\000\004\u0125\u0245\001\002\000\012\022\ufe05\112\ufe05" +
    "\125\ufe05\132\ufe05\001\002\000\006\112\u0221\125\ufe16\001" +
    "\002\000\004\125\u0248\001\002\000\012\173\021\200\034" +
    "\276\014\310\013\001\002\000\004\132\u024a\001\002\000" +
    "\012\012\u024e\024\060\037\u024b\043\u024f\001\002\000\004" +
    "\332\ufe0b\001\002\000\004\332\u0250\001\002\000\004\332" +
    "\ufe0d\001\002\000\004\332\ufe0c\001\002\000\004\332\ufe0a" +
    "\001\002\000\006\021\ufe11\u010f\ufe11\001\002\000\106\050" +
    "\u016c\051\u0178\052\u015a\053\u017d\054\u0170\055\u0162\056\u015e" +
    "\057\u0179\060\u016f\061\u016e\062\u017c\063\u0166\064\u016a\065" +
    "\u0164\066\u017b\067\u0161\070\u0167\071\u0176\072\u017a\254\u0173" +
    "\317\u015b\u0100\u0175\u010a\u0172\u0110\u0171\u011d\u0158\u0126\u0177\u0129" +
    "\u015f\u012c\u015c\u013f\u015d\u014b\u0160\u0155\u016d\u0158\u0174\u0165\u0163" +
    "\u0166\u016b\001\002\000\010\022\ufe14\047\ufe14\u0176\u0254\001" +
    "\002\000\006\022\ufe1b\047\ufe1b\001\002\000\006\022\ufe15" +
    "\047\ufe15\001\002\000\004\047\ufe1a\001\002\000\004\024" +
    "\060\001\002\000\004\047\ufe19\001\002\000\014\021\u0259" +
    "\024\ufe5b\110\ufe5b\112\ufe5b\350\ufe5b\001\002\000\004\012" +
    "\u0289\001\002\000\012\024\060\110\ufe59\112\ufe59\350\ufe59" +
    "\001\002\000\010\110\ufe4b\112\ufe4b\350\u0270\001\002\000" +
    "\112\011\061\031\u025e\050\u016c\051\u0178\052\u015a\053\u017d" +
    "\054\u0170\055\u0162\056\u015e\057\u0179\060\u016f\061\u016e\062" +
    "\u017c\063\u0166\064\u016a\065\u0164\066\u017b\067\u0161\070\u0167" +
    "\071\u0176\072\u017a\254\u0262\317\u015b\u0100\u0175\u010a\u0172\u0110" +
    "\u0171\u011d\u0158\u0126\u0177\u0129\u015f\u012c\u015c\u013f\u015d\u014b\u0160" +
    "\u0155\u016d\u0158\u0174\u0165\u0163\u0166\u016b\001\002\000\010\110" +
    "\ufe5a\112\ufe5a\350\ufe5a\001\002\000\110\011\064\050\u016c" +
    "\051\u0178\052\u015a\053\u017d\054\u0170\055\u0162\056\u015e\057" +
    "\u0179\060\u016f\061\u016e\062\u017c\063\u0166\064\u016a\065\u0164" +
    "\066\u017b\067\u0161\070\u0167\071\u0176\072\u017a\254\u0173\317" +
    "\u015b\u0100\u0175\u010a\u0172\u0110\u0171\u011d\u0158\u0126\u0177\u0129\u015f" +
    "\u012c\u015c\u013f\u015d\u014b\u0160\u0155\u016d\u0158\u0174\u0165\u0163\u0166" +
    "\u016b\001\002\000\012\022\u026e\110\ufe56\112\ufe56\350\ufe56" +
    "\001\002\000\020\004\u0269\022\ufe51\110\ufe51\112\ufe51\350" +
    "\ufe51\u0172\ufe51\u0175\ufe51\001\002\000\004\u0176\u0267\001\002" +
    "\000\024\004\uffd1\022\uffd1\032\uffd1\110\uffd1\112\uffd1\350" +
    "\uffd1\u0169\u0263\u0172\uffd1\u0175\uffd1\001\002\000\006\u0172\u0265" +
    "\u0175\u0264\001\002\000\012\022\ufe4e\110\ufe4e\112\ufe4e\350" +
    "\ufe4e\001\002\000\012\022\ufe4d\110\ufe4d\112\ufe4d\350\ufe4d" +
    "\001\002\000\012\022\ufe54\110\ufe54\112\ufe54\350\ufe54\001" +
    "\002\000\012\022\ufe53\110\ufe53\112\ufe53\350\ufe53\001\002" +
    "\000\016\022\ufe4f\110\ufe4f\112\ufe4f\350\ufe4f\u0172\u0265\u0175" +
    "\u0264\001\002\000\004\273\u026a\001\002\000\016\022\ufe52" +
    "\110\ufe52\112\ufe52\350\ufe52\u0172\ufe52\u0175\ufe52\001\002\000" +
    "\012\022\ufe55\110\ufe55\112\ufe55\350\ufe55\001\002\000\012" +
    "\022\ufe50\110\ufe50\112\ufe50\350\ufe50\001\002\000\010\110" +
    "\ufe58\112\ufe58\350\ufe58\001\002\000\004\024\060\001\002" +
    "\000\010\110\ufe57\112\ufe57\350\ufe57\001\002\000\012\346" +
    "\044\351\012\u0177\u0281\u017f\u0283\001\002\000\006\110\u0273" +
    "\112\ufe3d\001\002\000\004\112\u0275\001\002\000\004\121" +
    "\u0274\001\002\000\004\112\ufe3e\001\002\000\004\125\u0277" +
    "\001\002\000\006\021\ufe5f\u010f\ufe5f\001\002\000\012\173" +
    "\021\200\034\276\014\310\013\001\002\000\014\173\021" +
    "\200\034\276\014\310\013\332\ufe39\001\002\000\004\332" +
    "\u027a\001\002\000\006\021\ufe3c\u010f\ufe3c\001\002\000\014" +
    "\173\021\200\034\276\014\310\013\332\ufe37\001\002\000" +
    "\004\332\ufe3b\001\002\000\004\332\ufe38\001\002\000\004" +
    "\332\ufe3a\001\002\000\010\022\u0287\110\ufe43\112\ufe43\001" +
    "\002\000\006\110\ufe4c\112\ufe4c\001\002\000\010\022\ufe49" +
    "\110\ufe49\112\ufe49\001\002\000\004\112\u0284\001\002\000" +
    "\010\022\ufe48\110\ufe48\112\ufe48\001\002\000\014\011\061" +
    "\031\057\u017c\u023e\u017d\u0241\u017e\u023d\001\002\000\010\022" +
    "\ufe47\110\ufe47\112\ufe47\001\002\000\006\110\ufe4a\112\ufe4a" +
    "\001\002\000\012\346\044\351\012\u0177\u0281\u017f\u0283\001" +
    "\002\000\006\110\ufe44\112\ufe44\001\002\000\012\024\ufe5c" +
    "\110\ufe5c\112\ufe5c\350\ufe5c\001\002\000\010\011\uff47\031" +
    "\uff47\206\u0292\001\002\000\004\032\u028c\001\002\000\004" +
    "\012\u028d\001\002\000\004\047\u028e\001\002\000\046\007" +
    "\uff7b\011\uff7b\012\uff7b\024\uff7b\031\uff7b\032\uff7b\037\uff7b" +
    "\043\uff7b\123\uff7b\206\uff7b\260\uff7b\307\uff7b\336\u0290\u010b" +
    "\uff7b\u0138\uff7b\u013d\uff7b\u0148\uff7b\u0149\uff7b\001\002\000\044" +
    "\007\uff7e\011\uff7e\012\uff7e\024\uff7e\031\uff7e\032\uff7e\037" +
    "\uff7e\043\uff7e\123\uff7e\206\uff7e\260\uff7e\307\uff7e\u010b\uff7e" +
    "\u0138\uff7e\u013d\uff7e\u0148\uff7e\u0149\uff7e\001\002\000\044\007" +
    "\uff7c\011\uff7c\012\uff7c\024\uff7c\031\uff7c\032\uff7c\037\uff7c" +
    "\043\uff7c\123\uff7c\206\uff7c\260\uff7c\307\uff7c\u010b\uff7c\u0138" +
    "\uff7c\u013d\uff7c\u0148\uff7c\u0149\uff7c\001\002\000\006\011\061" +
    "\031\057\001\002\000\006\011\uff48\031\uff48\001\002\000" +
    "\030\021\uff45\032\376\132\uff45\173\uff45\200\uff45\273\uff45" +
    "\276\uff45\310\uff45\323\uff45\332\uff45\u010f\uff45\001\002\000" +
    "\026\021\uff46\132\uff46\173\uff46\200\uff46\273\uff46\276\uff46" +
    "\310\uff46\323\uff46\332\uff46\u010f\uff46\001\002\000\026\021" +
    "\uff3b\132\uff3b\173\uff3b\200\uff3b\273\u0296\276\uff3b\310\uff3b" +
    "\323\u0297\332\uff3b\u010f\uff3b\001\002\000\004\323\u02ab\001" +
    "\002\000\004\032\u0299\001\002\000\022\021\uff49\132\uff49" +
    "\173\uff49\200\uff49\276\uff49\310\uff49\332\uff49\u010f\uff49\001" +
    "\002\000\012\012\u029f\037\u029b\043\u029e\273\u029a\001\002" +
    "\000\006\022\uff43\047\uff43\001\002\000\006\022\uff41\047" +
    "\uff41\001\002\000\004\047\u02a4\001\002\000\006\022\u02a0" +
    "\047\uff3e\001\002\000\006\022\uff40\047\uff40\001\002\000" +
    "\006\022\uff42\047\uff42\001\002\000\012\012\u029f\037\u029b" +
    "\043\u029e\273\u029a\001\002\000\004\047\uff44\001\002\000" +
    "\006\022\u02a0\047\uff3e\001\002\000\004\047\uff3f\001\002" +
    "\000\024\021\uff39\022\u02a6\132\uff39\173\uff39\200\uff39\276" +
    "\uff39\310\uff39\332\uff39\u010f\uff39\001\002\000\022\021\uff3d" +
    "\132\uff3d\173\uff3d\200\uff3d\276\uff3d\310\uff3d\332\uff3d\u010f" +
    "\uff3d\001\002\000\004\032\u02a7\001\002\000\012\012\u029f" +
    "\037\u029b\043\u029e\273\u029a\001\002\000\004\047\u02a9\001" +
    "\002\000\024\021\uff39\022\u02a6\132\uff39\173\uff39\200\uff39" +
    "\276\uff39\310\uff39\332\uff39\u010f\uff39\001\002\000\022\021" +
    "\uff3a\132\uff3a\173\uff3a\200\uff3a\276\uff3a\310\uff3a\332\uff3a" +
    "\u010f\uff3a\001\002\000\022\021\uff3c\132\uff3c\173\uff3c\200" +
    "\uff3c\276\uff3c\310\uff3c\332\uff3c\u010f\uff3c\001\002\000\010" +
    "\011\061\024\060\031\057\001\002\000\006\021\ufe6d\u010f" +
    "\ufe6d\001\002\000\010\021\ufe6c\350\ufe6c\u010f\ufe6c\001\002" +
    "\000\010\021\ufe6b\350\ufe6b\u010f\ufe6b\001\002\000\004\254" +
    "\u02b1\001\002\000\034\110\ufe33\u010d\u02b2\u0116\ufe33\u0143\u02b3" +
    "\u0181\ufe33\u0182\ufe33\u0183\ufe33\u0184\ufe33\u0185\ufe33\u0186\ufe33\u0187" +
    "\ufe33\u0188\ufe33\u0189\ufe33\001\002\000\030\110\ufe34\u0116\ufe34" +
    "\u0181\ufe34\u0182\ufe34\u0183\ufe34\u0184\ufe34\u0185\ufe34\u0186\ufe34\u0187" +
    "\ufe34\u0188\ufe34\u0189\ufe34\001\002\000\030\110\ufe35\u0116\ufe35" +
    "\u0181\ufe35\u0182\ufe35\u0183\ufe35\u0184\ufe35\u0185\ufe35\u0186\ufe35\u0187" +
    "\ufe35\u0188\ufe35\u0189\ufe35\001\002\000\030\110\ufe30\u0116\u02b7" +
    "\u0181\u02b5\u0182\ufe30\u0183\ufe30\u0184\ufe30\u0185\ufe30\u0186\ufe30\u0187" +
    "\ufe30\u0188\ufe30\u0189\ufe30\001\002\000\024\110\ufe31\u0182\ufe31" +
    "\u0183\ufe31\u0184\ufe31\u0185\ufe31\u0186\ufe31\u0187\ufe31\u0188\ufe31\u0189" +
    "\ufe31\001\002\000\024\110\ufe2b\u0182\u02b8\u0183\u02b9\u0184\u02ba" +
    "\u0185\u02bc\u0186\ufe2b\u0187\ufe2b\u0188\ufe2b\u0189\ufe2b\001\002\000" +
    "\024\110\ufe32\u0182\ufe32\u0183\ufe32\u0184\ufe32\u0185\ufe32\u0186\ufe32" +
    "\u0187\ufe32\u0188\ufe32\u0189\ufe32\001\002\000\014\110\ufe2f\u0186" +
    "\ufe2f\u0187\ufe2f\u0188\ufe2f\u0189\ufe2f\001\002\000\014\110\ufe2e" +
    "\u0186\ufe2e\u0187\ufe2e\u0188\ufe2e\u0189\ufe2e\001\002\000\014\110" +
    "\ufe2d\u0186\ufe2d\u0187\ufe2d\u0188\ufe2d\u0189\ufe2d\001\002\000\014" +
    "\110\ufe27\u0186\u02c0\u0187\u02bf\u0188\u02be\u0189\ufe27\001\002\000" +
    "\014\110\ufe2c\u0186\ufe2c\u0187\ufe2c\u0188\ufe2c\u0189\ufe2c\001\002" +
    "\000\006\110\ufe25\u0189\u02c2\001\002\000\006\110\ufe28\u0189" +
    "\ufe28\001\002\000\006\110\ufe29\u0189\ufe29\001\002\000\006" +
    "\110\ufe2a\u0189\ufe2a\001\002\000\004\110\u02c3\001\002\000" +
    "\004\110\ufe26\001\002\000\004\173\021\001\002\000\010" +
    "\021\ufe23\110\u02c6\u010f\ufe23\001\002\000\006\021\ufe36\u010f" +
    "\ufe36\001\002\000\004\310\u02c7\001\002\000\010\021\ufe21" +
    "\266\u02c9\u010f\ufe21\001\002\000\006\021\ufe24\u010f\ufe24\001" +
    "\002\000\006\011\061\031\057\001\002\000\006\021\ufe22" +
    "\u010f\ufe22\001\002\000\044\002\ufffe\003\023\102\015\125" +
    "\020\146\047\162\033\173\021\200\034\202\045\227\035" +
    "\267\007\270\026\276\014\310\013\322\037\346\044\351" +
    "\012\001\002\000\044\002\uffea\003\uffea\102\uffea\125\uffea" +
    "\146\uffea\162\uffea\173\uffea\200\uffea\202\uffea\227\uffea\267" +
    "\uffea\270\uffea\276\uffea\310\uffea\322\uffea\346\uffea\351\uffea" +
    "\001\002\000\044\002\uffeb\003\uffeb\102\uffeb\125\uffeb\146" +
    "\uffeb\162\uffeb\173\uffeb\200\uffeb\202\uffeb\227\uffeb\267\uffeb" +
    "\270\uffeb\276\uffeb\310\uffeb\322\uffeb\346\uffeb\351\uffeb\001" +
    "\002\000\004\002\uffff\001\002\000\040\007\uff5a\011\uff5a" +
    "\012\uff5a\024\uff5a\031\uff5a\032\uff5a\037\uff5a\043\uff5a\253" +
    "\uff5a\260\uff5a\u010b\uff5a\u0138\uff5a\u013d\uff5a\u0148\uff5a\u0149\uff5a" +
    "\001\002\000\040\007\uff5b\011\uff5b\012\uff5b\024\uff5b\031" +
    "\uff5b\032\uff5b\037\uff5b\043\uff5b\253\uff5b\260\uff5b\u010b\uff5b" +
    "\u0138\uff5b\u013d\uff5b\u0148\uff5b\u0149\uff5b\001\002\000\040\007" +
    "\uff7d\011\uff7d\012\uff7d\024\uff7d\031\uff7d\032\uff7d\037\uff7d" +
    "\043\uff7d\253\u028b\260\uff7d\u010b\uff7d\u0138\uff7d\u013d\uff7d\u0148" +
    "\uff7d\u0149\uff7d\001\002\000\036\007\u02d5\011\061\012\245" +
    "\024\060\031\057\032\261\037\250\043\255\260\263\u010b" +
    "\256\u0138\244\u013d\264\u0148\262\u0149\260\001\002\000\052" +
    "\011\061\021\uff9b\022\uff9b\031\057\043\u02dd\047\uff9b\110" +
    "\uff9b\112\u02db\123\uff9b\132\uff9b\142\uff9b\145\uff9b\173\uff9b" +
    "\200\uff9b\276\uff9b\310\uff9b\325\uff9b\332\uff9b\342\uff9b\u010f" +
    "\uff9b\001\002\000\040\021\uff26\047\uff26\110\uff26\123\u02e1" +
    "\132\uff26\142\uff26\145\uff26\173\uff26\200\uff26\276\uff26\310" +
    "\uff26\325\uff26\332\uff26\342\uff26\u010f\uff26\001\002\000\042" +
    "\021\uff61\022\u02d6\047\uff61\110\uff61\123\uff61\132\uff61\142" +
    "\uff61\145\uff61\173\uff61\200\uff61\276\uff61\310\uff61\325\uff61" +
    "\332\uff61\342\uff61\u010f\uff61\001\002\000\034\011\061\012" +
    "\245\024\060\031\057\032\261\037\250\043\255\260\263" +
    "\u010b\256\u0138\244\u013d\264\u0148\262\u0149\260\001\002\000" +
    "\040\021\uff63\047\uff63\110\uff63\123\uff63\132\uff63\142\uff63" +
    "\145\uff63\173\uff63\200\uff63\276\uff63\310\uff63\325\uff63\332" +
    "\uff63\342\uff63\u010f\uff63\001\002\000\052\011\061\021\uff9b" +
    "\022\uff9b\031\057\043\u02dd\047\uff9b\110\uff9b\112\u02db\123" +
    "\uff9b\132\uff9b\142\uff9b\145\uff9b\173\uff9b\200\uff9b\276\uff9b" +
    "\310\uff9b\325\uff9b\332\uff9b\342\uff9b\u010f\uff9b\001\002\000" +
    "\056\021\uff9a\022\uff9a\047\uff9a\110\uff9a\123\uff9a\126\uff9a" +
    "\132\uff9a\142\uff9a\143\uff9a\145\uff9a\173\uff9a\175\uff9a\200" +
    "\uff9a\214\uff9a\225\uff9a\276\uff9a\310\uff9a\325\uff9a\332\uff9a" +
    "\342\uff9a\u010f\uff9a\u016b\uff9a\001\002\000\056\021\uff9c\022" +
    "\uff9c\047\uff9c\110\uff9c\123\uff9c\126\uff9c\132\uff9c\142\uff9c" +
    "\143\uff9c\145\uff9c\173\uff9c\175\uff9c\200\uff9c\214\uff9c\225" +
    "\uff9c\276\uff9c\310\uff9c\325\uff9c\332\uff9c\342\uff9c\u010f\uff9c" +
    "\u016b\uff9c\001\002\000\010\011\061\031\057\043\u02dd\001" +
    "\002\000\042\021\uff61\022\u02d6\047\uff61\110\uff61\123\uff61" +
    "\132\uff61\142\uff61\145\uff61\173\uff61\200\uff61\276\uff61\310" +
    "\uff61\325\uff61\332\uff61\342\uff61\u010f\uff61\001\002\000\056" +
    "\021\uff99\022\uff99\047\uff99\110\uff99\123\uff99\126\uff99\132" +
    "\uff99\142\uff99\143\uff99\145\uff99\173\uff99\175\uff99\200\uff99" +
    "\214\uff99\225\uff99\276\uff99\310\uff99\325\uff99\332\uff99\342" +
    "\uff99\u010f\uff99\u016b\uff99\001\002\000\040\021\uff62\047\uff62" +
    "\110\uff62\123\uff62\132\uff62\142\uff62\145\uff62\173\uff62\200" +
    "\uff62\276\uff62\310\uff62\325\uff62\332\uff62\342\uff62\u010f\uff62" +
    "\001\002\000\056\021\uff9d\022\uff9d\047\uff9d\110\uff9d\123" +
    "\uff9d\126\uff9d\132\uff9d\142\uff9d\143\uff9d\145\uff9d\173\uff9d" +
    "\175\uff9d\200\uff9d\214\uff9d\225\uff9d\276\uff9d\310\uff9d\325" +
    "\uff9d\332\uff9d\342\uff9d\u010f\uff9d\u016b\uff9d\001\002\000\036" +
    "\021\uff65\047\uff65\110\uff65\132\uff65\142\uff65\145\uff65\173" +
    "\uff65\200\uff65\276\uff65\310\uff65\325\uff65\332\uff65\342\230" +
    "\u010f\uff65\001\002\000\006\011\061\031\057\001\002\000" +
    "\062\011\061\021\uff9b\022\uff9b\031\057\043\u02dd\047\uff9b" +
    "\110\uff9b\112\u02db\126\uff9b\132\uff9b\142\uff9b\143\uff9b\145" +
    "\uff9b\173\uff9b\175\uff9b\200\uff9b\214\uff9b\225\uff9b\276\uff9b" +
    "\310\uff9b\325\uff9b\332\uff9b\342\uff9b\u010f\uff9b\001\002\000" +
    "\052\021\uff22\022\uff22\047\uff22\110\uff22\126\u02e9\132\uff22" +
    "\142\uff22\143\u02e7\145\uff22\173\uff22\175\u02e5\200\uff22\214" +
    "\uff1d\225\u02e4\276\uff22\310\uff22\325\uff22\332\uff22\342\uff22" +
    "\u010f\uff22\001\002\000\006\214\uff1b\330\u02ea\001\002\000" +
    "\004\214\uff21\001\002\000\004\214\u02f2\001\002\000\006" +
    "\214\uff1b\330\u02ea\001\002\000\040\021\uff24\022\u02ec\047" +
    "\uff24\110\uff24\132\uff24\142\uff24\145\uff24\173\uff24\200\uff24" +
    "\276\uff24\310\uff24\325\uff24\332\uff24\342\uff24\u010f\uff24\001" +
    "\002\000\006\214\uff1b\330\u02ea\001\002\000\004\214\uff1c" +
    "\001\002\000\004\214\uff1e\001\002\000\006\011\061\031" +
    "\057\001\002\000\036\021\uff27\047\uff27\110\uff27\132\uff27" +
    "\142\uff27\145\uff27\173\uff27\200\uff27\276\uff27\310\uff27\325" +
    "\uff27\332\uff27\342\uff27\u010f\uff27\001\002\000\060\011\061" +
    "\021\uff9b\031\057\043\u02dd\047\uff9b\110\uff9b\112\u02db\126" +
    "\uff9b\132\uff9b\142\uff9b\143\uff9b\145\uff9b\173\uff9b\175\uff9b" +
    "\200\uff9b\214\uff9b\225\uff9b\276\uff9b\310\uff9b\325\uff9b\332" +
    "\uff9b\342\uff9b\u010f\uff9b\001\002\000\050\021\uff22\047\uff22" +
    "\110\uff22\126\u02e9\132\uff22\142\uff22\143\u02e7\145\uff22\173" +
    "\uff22\175\u02e5\200\uff22\214\uff1d\225\u02e4\276\uff22\310\uff22" +
    "\325\uff22\332\uff22\342\uff22\u010f\uff22\001\002\000\036\021" +
    "\uff25\047\uff25\110\uff25\132\uff25\142\uff25\145\uff25\173\uff25" +
    "\200\uff25\276\uff25\310\uff25\325\uff25\332\uff25\342\uff25\u010f" +
    "\uff25\001\002\000\004\214\uff20\001\002\000\006\011\061" +
    "\031\057\001\002\000\014\011\061\031\057\043\u02dd\112" +
    "\u02db\u016b\uff9b\001\002\000\004\u016b\u02f5\001\002\000\036" +
    "\011\uff7f\012\uff7f\024\uff7f\031\uff7f\032\240\037\uff7f\043" +
    "\uff7f\255\243\260\uff7f\u010b\uff7f\u0138\uff7f\u013d\uff7f\u0148\uff7f" +
    "\u0149\uff7f\001\002\000\052\021\uff22\022\uff22\047\uff22\110" +
    "\uff22\126\u02e9\132\uff22\142\uff22\143\u02e7\145\uff22\173\uff22" +
    "\175\u02e5\200\uff22\214\uff1d\225\u02e4\276\uff22\310\uff22\325" +
    "\uff22\332\uff22\342\uff22\u010f\uff22\001\002\000\040\021\uff23" +
    "\022\uff23\047\uff23\110\uff23\132\uff23\142\uff23\145\uff23\173" +
    "\uff23\200\uff23\276\uff23\310\uff23\325\uff23\332\uff23\342\uff23" +
    "\u010f\uff23\001\002\000\004\214\uff1f\001\002\000\034\021" +
    "\uff4c\047\uff4c\110\uff4c\132\uff4c\142\u02fb\145\uff4c\173\uff4c" +
    "\200\uff4c\276\uff4c\310\uff4c\325\uff4c\332\uff4c\u010f\uff4c\001" +
    "\002\000\032\021\uff57\047\uff57\110\uff57\132\uff57\145\u0302" +
    "\173\uff57\200\uff57\276\uff57\310\uff57\325\uff57\332\uff57\u010f" +
    "\uff57\001\002\000\004\144\u02fc\001\002\000\034\011\061" +
    "\012\245\024\060\031\057\032\261\037\250\043\255\260" +
    "\263\u010b\256\u0138\244\u013d\264\u0148\262\u0149\260\001\002" +
    "\000\034\021\uff4a\022\u02fe\047\uff4a\110\uff4a\132\uff4a\145" +
    "\uff4a\173\uff4a\200\uff4a\276\uff4a\310\uff4a\325\uff4a\332\uff4a" +
    "\u010f\uff4a\001\002\000\034\011\061\012\245\024\060\031" +
    "\057\032\261\037\250\043\255\260\263\u010b\256\u0138\244" +
    "\u013d\264\u0148\262\u0149\260\001\002\000\032\021\uff4d\047" +
    "\uff4d\110\uff4d\132\uff4d\145\uff4d\173\uff4d\200\uff4d\276\uff4d" +
    "\310\uff4d\325\uff4d\332\uff4d\u010f\uff4d\001\002\000\034\021" +
    "\uff4a\022\u02fe\047\uff4a\110\uff4a\132\uff4a\145\uff4a\173\uff4a" +
    "\200\uff4a\276\uff4a\310\uff4a\325\uff4a\332\uff4a\u010f\uff4a\001" +
    "\002\000\032\021\uff4b\047\uff4b\110\uff4b\132\uff4b\145\uff4b" +
    "\173\uff4b\200\uff4b\276\uff4b\310\uff4b\325\uff4b\332\uff4b\u010f" +
    "\uff4b\001\002\000\036\011\uff7f\012\uff7f\024\uff7f\031\uff7f" +
    "\032\240\037\uff7f\043\uff7f\255\243\260\uff7f\u010b\uff7f\u0138" +
    "\uff7f\u013d\uff7f\u0148\uff7f\u0149\uff7f\001\002\000\030\021\uff55" +
    "\047\uff55\110\uff55\132\uff55\173\uff55\200\uff55\276\uff55\310" +
    "\uff55\325\u0304\332\uff55\u010f\uff55\001\002\000\004\144\u0306" +
    "\001\002\000\026\021\uff5c\047\uff5c\110\uff5c\132\uff5c\173" +
    "\uff5c\200\uff5c\276\uff5c\310\uff5c\332\uff5c\u010f\uff5c\001\002" +
    "\000\034\011\061\012\245\024\060\031\057\032\261\037" +
    "\250\043\255\260\263\u010b\256\u0138\244\u013d\264\u0148\262" +
    "\u0149\260\001\002\000\066\011\uff53\012\uff53\021\uff53\024" +
    "\uff53\031\uff53\032\uff53\037\uff53\043\uff53\047\uff53\110\uff53" +
    "\132\uff53\173\uff53\174\u0308\200\uff53\260\uff53\276\uff53\303" +
    "\uff53\310\uff53\332\uff53\u0104\uff53\u010b\uff53\u010f\uff53\u0138\uff53" +
    "\u013d\uff53\u0148\uff53\u0149\uff53\001\002\000\006\011\061\031" +
    "\057\001\002\000\064\011\uff50\012\uff50\021\uff50\024\uff50" +
    "\031\uff50\032\uff50\037\uff50\043\uff50\047\uff50\110\uff50\132" +
    "\uff50\173\uff50\200\uff50\260\uff50\276\uff50\303\u0109\310\uff50" +
    "\332\uff50\u0104\u010a\u010b\uff50\u010f\uff50\u0138\uff50\u013d\uff50\u0148" +
    "\uff50\u0149\uff50\001\002\000\060\011\061\012\245\021\uff4e" +
    "\024\060\031\057\032\261\037\250\043\255\047\uff4e\110" +
    "\uff4e\132\uff4e\173\uff4e\200\uff4e\260\263\276\uff4e\310\uff4e" +
    "\332\uff4e\u010b\256\u010f\uff4e\u0138\244\u013d\264\u0148\262\u0149" +
    "\260\001\002\000\026\021\uff56\047\uff56\110\uff56\132\uff56" +
    "\173\uff56\200\uff56\276\uff56\310\uff56\332\uff56\u010f\uff56\001" +
    "\002\000\034\021\uff53\047\uff53\110\uff53\132\uff53\173\uff53" +
    "\174\u0308\200\uff53\276\uff53\303\uff53\310\uff53\332\uff53\u0104" +
    "\uff53\u010f\uff53\001\002\000\032\021\uff50\047\uff50\110\uff50" +
    "\132\uff50\173\uff50\200\uff50\276\uff50\303\u0109\310\uff50\332" +
    "\uff50\u0104\u010a\u010f\uff50\001\002\000\026\021\uff4f\047\uff4f" +
    "\110\uff4f\132\uff4f\173\uff4f\200\uff4f\276\uff4f\310\uff4f\332" +
    "\uff4f\u010f\uff4f\001\002\000\064\011\uff54\012\uff54\021\uff54" +
    "\024\uff54\031\uff54\032\uff54\037\uff54\043\uff54\047\uff54\110" +
    "\uff54\132\uff54\173\uff54\200\uff54\260\uff54\276\uff54\303\uff54" +
    "\310\uff54\332\uff54\u0104\uff54\u010b\uff54\u010f\uff54\u0138\uff54\u013d" +
    "\uff54\u0148\uff54\u0149\uff54\001\002\000\030\021\uff58\047\uff58" +
    "\110\uff58\132\uff58\173\uff58\200\uff58\276\uff58\310\uff58\325" +
    "\uff58\332\uff58\u010f\uff58\001\002\000\042\021\uff61\022\u02d6" +
    "\047\uff61\110\uff61\123\uff61\132\uff61\142\uff61\145\uff61\173" +
    "\uff61\200\uff61\276\uff61\310\uff61\325\uff61\332\uff61\342\uff61" +
    "\u010f\uff61\001\002\000\040\021\uff64\047\uff64\110\uff64\123" +
    "\uff64\132\uff64\142\uff64\145\uff64\173\uff64\200\uff64\276\uff64" +
    "\310\uff64\325\uff64\332\uff64\342\uff64\u010f\uff64\001\002\000" +
    "\014\011\061\021\ufe72\024\060\031\057\u010f\ufe72\001\002" +
    "\000\010\021\ufe70\350\u0316\u010f\ufe70\001\002\000\006\021" +
    "\ufe74\u010f\ufe74\001\002\000\004\u0180\u0318\001\002\000\006" +
    "\021\ufe73\u010f\ufe73\001\002\000\010\021\ufe6e\043\u031a\u010f" +
    "\ufe6e\001\002\000\006\021\ufe71\u010f\ufe71\001\002\000\006" +
    "\021\ufe6f\u010f\ufe6f\001\002\000\006\021\ufe96\u010f\ufe96\001" +
    "\002\000\006\021\ufe91\u010f\ufe91\001\002\000\006\021\ufe92" +
    "\u010f\ufe92\001\002\000\010\011\061\031\057\235\u0351\001" +
    "\002\000\006\011\061\031\057\001\002\000\006\021\ufe95" +
    "\u010f\ufe95\001\002\000\006\021\ufe94\u010f\ufe94\001\002\000" +
    "\006\021\ufe97\u010f\ufe97\001\002\000\006\011\061\031\057" +
    "\001\002\000\006\011\061\031\057\001\002\000\006\021" +
    "\ufe93\u010f\ufe93\001\002\000\006\032\376\112\ufe88\001\002" +
    "\000\004\112\ufe89\001\002\000\004\112\u0329\001\002\000" +
    "\004\173\021\001\002\000\006\021\ufe8a\u010f\ufe8a\001\002" +
    "\000\010\074\u032e\102\u032d\322\u0331\001\002\000\006\021" +
    "\ufe87\u010f\ufe87\001\002\000\004\177\u0340\001\002\000\022" +
    "\011\061\031\057\113\ufeb7\155\ufeb7\172\u0113\210\u0117\302" +
    "\ufeb7\352\ufeb7\001\002\000\006\021\ufe84\u010f\ufe84\001\002" +
    "\000\006\021\ufe86\u010f\ufe86\001\002\000\014\011\ufe77\031" +
    "\ufe77\164\ufe77\177\u0333\210\u0334\001\002\000\010\021\ufe75" +
    "\022\u033a\u010f\ufe75\001\002\000\010\011\uffdd\031\uffdd\164" +
    "\132\001\002\000\010\011\ufe78\031\ufe78\164\ufe78\001\002" +
    "\000\010\011\uffdd\031\uffdd\164\132\001\002\000\006\011" +
    "\061\031\057\001\002\000\010\021\ufe7a\022\ufe7a\u010f\ufe7a" +
    "\001\002\000\006\011\061\031\057\001\002\000\010\021" +
    "\ufe79\022\ufe79\u010f\ufe79\001\002\000\014\011\ufe77\031\ufe77" +
    "\164\ufe77\177\u0333\210\u0334\001\002\000\006\021\ufe7b\u010f" +
    "\ufe7b\001\002\000\010\021\ufe75\022\u033a\u010f\ufe75\001\002" +
    "\000\006\021\ufe76\u010f\ufe76\001\002\000\010\021\ufed9\022" +
    "\u01cc\u010f\ufed9\001\002\000\006\021\ufe85\u010f\ufe85\001\002" +
    "\000\006\011\061\031\057\001\002\000\114\031\u0159\050" +
    "\u016c\051\u0178\052\u015a\053\u017d\054\u0170\055\u0162\056\u015e" +
    "\057\u0179\060\u016f\061\u016e\062\u017c\063\u0166\064\u016a\065" +
    "\u0164\066\u017b\067\u0161\070\u0167\071\u0176\072\u017a\074\u0343" +
    "\254\u0173\317\u015b\322\u0344\u0100\u0175\u010a\u0172\u0110\u0171\u011d" +
    "\u0158\u0126\u0177\u0129\u015f\u012c\u015c\u013f\u015d\u014b\u0160\u0155\u016d" +
    "\u0158\u0174\u0165\u0163\u0166\u016b\001\002\000\012\021\ufec7\174" +
    "\u017e\260\ufec7\u010f\ufec7\001\002\000\006\154\ufe7f\255\ufe7f" +
    "\001\002\000\006\154\ufe7e\255\ufe7e\001\002\000\006\154" +
    "\u0348\255\u0349\001\002\000\006\021\ufe83\u010f\ufe83\001\002" +
    "\000\006\021\ufe82\u010f\ufe82\001\002\000\006\021\ufe7d\u010f" +
    "\ufe7d\001\002\000\004\110\u034b\001\002\000\006\021\ufe81" +
    "\u010f\ufe81\001\002\000\004\121\u034c\001\002\000\006\021" +
    "\ufe7c\u010f\ufe7c\001\002\000\010\021\ufebd\260\u013a\u010f\ufebd" +
    "\001\002\000\006\021\ufe80\u010f\ufe80\001\002\000\006\021" +
    "\ufe8b\u010f\ufe8b\001\002\000\006\174\ufe8f\212\ufe8f\001\002" +
    "\000\006\174\ufe8e\212\ufe8e\001\002\000\006\174\u0353\212" +
    "\u0355\001\002\000\006\011\061\031\057\001\002\000\006" +
    "\021\ufe90\u010f\ufe90\001\002\000\004\146\u0356\001\002\000" +
    "\004\u0117\u0357\001\002\000\006\021\ufe8c\u010f\ufe8c\001\002" +
    "\000\006\021\ufe8d\u010f\ufe8d\001\002\000\012\011\uff36\031" +
    "\uff36\123\u035a\307\uff36\001\002\000\010\011\uff37\031\uff37" +
    "\307\uff37\001\002\000\010\011\061\031\057\307\u035e\001" +
    "\002\000\022\021\uff38\132\uff38\173\uff38\200\uff38\276\uff38" +
    "\310\uff38\332\uff38\u010f\uff38\001\002\000\004\123\u0365\001" +
    "\002\000\004\032\u035f\001\002\000\006\011\061\031\057" +
    "\001\002\000\022\021\uff35\132\uff35\173\uff35\200\uff35\276" +
    "\uff35\310\uff35\332\uff35\u010f\uff35\001\002\000\004\022\u0362" +
    "\001\002\000\004\012\u0363\001\002\000\004\047\u0364\001" +
    "\002\000\022\021\uff30\132\uff30\173\uff30\200\uff30\276\uff30" +
    "\310\uff30\332\uff30\u010f\uff30\001\002\000\006\011\061\031" +
    "\057\001\002\000\024\021\uff65\132\uff65\173\uff65\200\uff65" +
    "\276\uff65\310\uff65\332\uff65\342\230\u010f\uff65\001\002\000" +
    "\022\021\uff34\132\uff34\173\uff34\200\uff34\276\uff34\310\uff34" +
    "\332\uff34\u010f\uff34\001\002\000\026\021\uff31\022\u0369\132" +
    "\uff31\173\uff31\200\uff31\276\uff31\310\uff31\332\uff31\342\uff31" +
    "\u010f\uff31\001\002\000\006\011\061\031\057\001\002\000" +
    "\024\021\uff33\132\uff33\173\uff33\200\uff33\276\uff33\310\uff33" +
    "\332\uff33\342\uff33\u010f\uff33\001\002\000\026\021\uff31\022" +
    "\u0369\132\uff31\173\uff31\200\uff31\276\uff31\310\uff31\332\uff31" +
    "\342\uff31\u010f\uff31\001\002\000\024\021\uff32\132\uff32\173" +
    "\uff32\200\uff32\276\uff32\310\uff32\332\uff32\342\uff32\u010f\uff32" +
    "\001\002\000\006\011\061\031\057\001\002\000\004\212" +
    "\u036f\001\002\000\006\011\061\031\057\001\002\000\004" +
    "\004\u0377\001\002\000\026\021\uff28\123\u0373\132\uff28\173" +
    "\uff28\200\uff28\276\uff28\310\uff28\332\uff28\342\uff28\u010f\uff28" +
    "\001\002\000\024\021\uff65\132\uff65\173\uff65\200\uff65\276" +
    "\uff65\310\uff65\332\uff65\342\230\u010f\uff65\001\002\000\006" +
    "\011\061\031\057\001\002\000\026\021\uff31\022\u0369\132" +
    "\uff31\173\uff31\200\uff31\276\uff31\310\uff31\332\uff31\342\uff31" +
    "\u010f\uff31\001\002\000\024\021\uff29\132\uff29\173\uff29\200" +
    "\uff29\276\uff29\310\uff29\332\uff29\342\uff29\u010f\uff29\001\002" +
    "\000\022\021\uff2f\132\uff2f\173\uff2f\200\uff2f\276\uff2f\310" +
    "\uff2f\332\uff2f\u010f\uff2f\001\002\000\036\011\061\012\245" +
    "\024\060\031\057\032\261\037\250\043\255\260\263\273" +
    "\u037a\u010b\256\u0138\244\u013d\264\u0148\262\u0149\260\001\002" +
    "\000\030\021\uff2a\022\u037b\123\uff2a\132\uff2a\173\uff2a\200" +
    "\uff2a\276\uff2a\310\uff2a\332\uff2a\342\uff2a\u010f\uff2a\001\002" +
    "\000\030\021\uff2c\022\uff2c\123\uff2c\132\uff2c\173\uff2c\200" +
    "\uff2c\276\uff2c\310\uff2c\332\uff2c\342\uff2c\u010f\uff2c\001\002" +
    "\000\030\021\uff2d\022\uff2d\123\uff2d\132\uff2d\173\uff2d\200" +
    "\uff2d\276\uff2d\310\uff2d\332\uff2d\342\uff2d\u010f\uff2d\001\002" +
    "\000\006\011\061\031\057\001\002\000\026\021\uff2e\123" +
    "\uff2e\132\uff2e\173\uff2e\200\uff2e\276\uff2e\310\uff2e\332\uff2e" +
    "\342\uff2e\u010f\uff2e\001\002\000\026\021\uff2b\123\uff2b\132" +
    "\uff2b\173\uff2b\200\uff2b\276\uff2b\310\uff2b\332\uff2b\342\uff2b" +
    "\u010f\uff2b\001\002\000\006\011\061\031\057\001\002\000" +
    "\006\021\uff9e\u010f\uff9e\001\002\000\044\002\ufffe\003\023" +
    "\102\015\125\020\146\047\162\033\173\021\200\034\202" +
    "\045\227\035\267\007\270\026\276\014\310\013\322\037" +
    "\346\044\351\012\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u037f\000\054\003\041\004\003\005\010\006\005\007" +
    "\023\010\026\030\015\044\024\075\016\106\030\116\007" +
    "\124\004\136\031\227\047\253\040\257\035\263\037\265" +
    "\021\304\045\340\042\362\027\001\001\000\004\011\u037f" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\057\u036c\001\001\000\004\057\u0358\001\001\000" +
    "\022\230\u0321\231\u0320\234\u031f\235\u0324\237\u031a\267\u031c" +
    "\314\u031b\316\176\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\262\u0312\001\001\000\004\076\u02d0\001\001" +
    "\000\002\001\001\000\004\011\u02ca\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\u02af\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\262\u02ab\001\001\000\004\057\u0289\001\001" +
    "\000\026\137\204\140\210\141\203\162\175\163\207\164" +
    "\211\172\174\267\177\314\173\316\176\001\001\000\002" +
    "\001\001\000\016\031\125\032\115\034\122\035\116\037" +
    "\127\041\126\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\262\112\264\111\001\001\000\006\012\065\013\066" +
    "\001\001\000\006\262\052\266\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\054" +
    "\022\055\261\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\106\001\001" +
    "\000\010\022\071\363\073\365\072\001\001\000\010\022" +
    "\071\363\104\365\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\364\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\022\071\363\100" +
    "\365\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\365\102\001\001\000\004\364\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\054\022\055\261\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\162\001\001\000\004\021\154\001" +
    "\001\000\004\021\152\001\001\000\002\001\001\000\004" +
    "\021\144\001\001\000\004\021\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\133" +
    "\015\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\141\001\001\000\004\033\136\001\001\000\006" +
    "\012\133\015\137\001\001\000\002\001\001\000\004\033" +
    "\140\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\065\013\143\001\001\000\002\001\001\000\006\012" +
    "\065\013\145\001\001\000\004\040\147\001\001\000\006" +
    "\012\065\013\150\001\001\000\002\001\001\000\004\040" +
    "\151\001\001\000\002\001\001\000\004\012\153\001\001" +
    "\000\002\001\001\000\004\012\155\001\001\000\004\036" +
    "\157\001\001\000\004\012\160\001\001\000\002\001\001" +
    "\000\004\036\161\001\001\000\002\001\001\000\006\012" +
    "\163\042\164\001\001\000\002\001\001\000\004\043\165" +
    "\001\001\000\002\001\001\000\006\012\163\042\167\001" +
    "\001\000\004\043\170\001\001\000\002\001\001\000\006" +
    "\012\133\015\172\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\270\u020e" +
    "\001\001\000\002\001\001\000\004\012\u01da\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\065\013\u01d6\001\001\000\006\012" +
    "\133\015\u0110\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\211\216\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\220\001\001\000\002\001\001\000\006\012" +
    "\133\015\222\001\001\000\004\165\224\001\001\000\006" +
    "\012\u0105\166\u0106\001\001\000\004\170\226\001\001\000" +
    "\004\072\374\001\001\000\004\067\230\001\001\000\006" +
    "\056\241\062\240\001\001\000\004\171\232\001\001\000" +
    "\004\012\233\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\235\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\056\241\062\371\001\001\000\002\001\001" +
    "\000\022\012\252\017\264\022\256\047\246\051\251\053" +
    "\250\054\245\064\253\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\002" +
    "\337\056\335\065\343\001\001\000\002\001\001\000\004" +
    "\052\325\001\001\000\004\050\317\001\001\000\004\020" +
    "\312\001\001\000\004\063\307\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\012\252\017\264\022\256\047\277\051\251\053\250" +
    "\054\245\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\252\017\266" +
    "\055\267\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\012\252\017\266\055" +
    "\276\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\252\017\266\055\302\001\001\000" +
    "\002\001\001\000\010\012\252\017\266\055\304\001\001" +
    "\000\002\001\001\000\006\056\241\062\311\001\001\000" +
    "\006\056\241\062\310\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\133\015\314\001\001\000\002\001\001\000\016\012\252" +
    "\017\264\022\256\051\322\053\250\054\245\001\001\000" +
    "\016\012\252\017\264\022\256\051\320\053\250\054\245" +
    "\001\001\000\002\001\001\000\004\050\321\001\001\000" +
    "\002\001\001\000\004\050\323\001\001\000\002\001\001" +
    "\000\014\012\252\017\264\022\256\053\331\054\245\001" +
    "\001\000\002\001\001\000\014\012\252\017\264\022\256" +
    "\053\327\054\245\001\001\000\004\052\330\001\001\000" +
    "\002\001\001\000\004\052\332\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\066\353\001" +
    "\001\000\002\001\001\000\020\012\252\017\264\022\256" +
    "\047\347\051\251\053\250\054\245\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\056\345\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\012\252\017\264\022\256" +
    "\047\366\051\251\053\250\054\245\001\001\000\002\001" +
    "\001\000\020\012\252\017\264\022\256\047\354\051\251" +
    "\053\250\054\245\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\012\252\017\264\022\256\047\356\051\251" +
    "\053\250\054\245\001\001\000\002\001\001\000\020\012" +
    "\252\017\264\022\256\047\360\051\251\053\250\054\245" +
    "\001\001\000\004\061\362\001\001\000\020\012\252\017" +
    "\264\022\256\047\364\051\251\053\250\054\245\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\061\365\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\252" +
    "\017\266\055\370\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\063\373\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\376\073\377\001\001\000\004\074" +
    "\u0101\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\u0103\001\001\000\004\074\u0104\001" +
    "\001\000\002\001\001\000\004\102\u010a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\167\u010b\001\001\000\002\001\001\000\004" +
    "\012\u010d\001\001\000\004\102\u010e\001\001\000\004\167" +
    "\u010f\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\012\u0117\175\u0115\177\u0114\207\u0118\220\u0113\226\u0119\001" +
    "\001\000\004\012\u01d3\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\176\u01cc\001\001\000\004\012\u01ca\001" +
    "\001\000\010\023\u0168\024\u0164\025\u0167\001\001\000\004" +
    "\221\u011d\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\174\u012e\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\211\u011f\001\001\000\004\222\u0121\001\001\000" +
    "\004\012\u0122\001\001\000\002\001\001\000\004\102\u0123" +
    "\001\001\000\004\223\u0124\001\001\000\002\001\001\000" +
    "\004\012\u0126\001\001\000\004\102\u0127\001\001\000\004" +
    "\223\u0128\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\211\u012b\001\001\000\004\222\u012c\001\001\000\002" +
    "\001\001\000\004\351\u0133\001\001\000\002\001\001\000" +
    "\006\056\241\062\u0130\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\352\u0137\001\001\000\004\204\u0138\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\224\u013c\001\001\000\004\012\u0151\001\001\000\002" +
    "\001\001\000\006\012\065\013\u013e\001\001\000\004\213" +
    "\u0140\001\001\000\004\012\u014f\001\001\000\004\214\u0142" +
    "\001\001\000\004\215\u0144\001\001\000\004\174\u0143\001" +
    "\001\000\002\001\001\000\004\214\u014e\001\001\000\004" +
    "\217\u014d\001\001\000\004\217\u0147\001\001\000\002\001" +
    "\001\000\004\216\u014b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\225\u0152\001\001\000\002\001\001\000\004\012" +
    "\u0154\001\001\000\004\225\u0155\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\u01c8\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\u01c2\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\200\u017e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\u01c0\001\001\000" +
    "\014\210\u0188\212\u0187\354\u0182\356\u0180\357\u0181\001\001" +
    "\000\004\203\u01bc\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\355\u01b4\001\001\000\004\211\u01b1\001\001" +
    "\000\004\201\u01a1\001\001\000\004\012\u019e\001\001\000" +
    "\006\206\u019d\207\u0195\001\001\000\002\001\001\000\006" +
    "\206\u0194\207\u0195\001\001\000\004\174\u0190\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\211\u018f\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\056\241\062\u0192\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\210" +
    "\u0196\212\u0187\001\001\000\006\206\u0197\207\u0195\001\001" +
    "\000\002\001\001\000\006\012\065\013\u0199\001\001\000" +
    "\004\213\u019a\001\001\000\004\214\u019b\001\001\000\004" +
    "\174\u019c\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\210\u0188\212\u0187\354\u0182\357\u019f\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\202\u01a6\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\203\u01ac\001\001\000\004\174\u01a7\001\001\000\004\205" +
    "\u01a9\001\001\000\002\001\001\000\006\206\u01aa\207\u0195" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\205\u01b5\001\001\000\006\206\u01b6" +
    "\207\u0195\001\001\000\002\001\001\000\004\353\u01b8\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\174\u01bd\001\001\000\004\205" +
    "\u01be\001\001\000\006\206\u01bf\207\u0195\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\u01c5\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\012\u0117" +
    "\175\u01d1\177\u0114\207\u0118\220\u0113\226\u0119\001\001\000" +
    "\002\001\001\000\004\173\u01ce\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\176\u01d2\001" +
    "\001\000\002\001\001\000\004\211\u01d4\001\001\000\004" +
    "\222\u01d5\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\075\u01d8\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\142\u01dd\143\u01dc\001\001\000\004\144\u01e2\001" +
    "\001\000\004\147\u01df\001\001\000\002\001\001\000\004" +
    "\012\u01e0\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\145\u01e4\146\u01e5\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\145" +
    "\u01e7\146\u01e5\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\151\u01ef\001\001" +
    "\000\002\001\001\000\016\153\u01f4\154\u01f3\156\u01f2\160" +
    "\u01f5\360\u01f6\361\u01f1\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\151\u020b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\155" +
    "\u01fc\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\157" +
    "\u0202\001\001\000\002\001\001\000\004\155\u0205\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\155\u0208\161\u020a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\065\013\u0257\001\001" +
    "\000\002\001\001\000\006\012\065\013\u0211\001\001\000" +
    "\002\001\001\000\012\022\u0215\315\u0216\317\u0214\320\u0213" +
    "\001\001\000\002\001\001\000\004\321\u0254\001\001\000" +
    "\004\322\u0250\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\025\u021b\324\u0219\325\u021d\326\u021a\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\331\u0245\001\001" +
    "\000\004\331\u021f\001\001\000\002\001\001\000\012\304" +
    "\u022a\332\u0229\333\u022c\366\u022f\001\001\000\004\322\u0221" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\075" +
    "\u0225\327\u0224\001\001\000\004\075\u0226\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\334\u0236\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\335\u0233\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\304\u022a\332\u0237\333\u022c" +
    "\366\u022f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\u023e\306\u023f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\322\u0246\001\001\000\002\001\001" +
    "\000\014\005\u0248\075\016\106\030\116\007\124\004\001" +
    "\001\000\002\001\001\000\006\022\u024c\330\u024b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\u0251\001\001\000\004\323\u0252\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\022\u0215" +
    "\317\u0214\320\u0256\001\001\000\002\001\001\000\004\271" +
    "\u0259\001\001\000\002\001\001\000\010\022\u025b\272\u025a" +
    "\273\u025c\001\001\000\004\301\u0270\001\001\000\014\012" +
    "\u0260\023\u025f\024\u0164\025\u0167\275\u025e\001\001\000\002" +
    "\001\001\000\004\025\u01c8\001\001\000\004\274\u026c\001" +
    "\001\000\004\276\u0267\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\300\u0265\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\277\u026a\300\u026b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\022\u025b\273\u026e\001\001\000\002\001\001\000" +
    "\010\302\u027f\303\u027e\304\u0281\001\001\000\004\307\u0271" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\310\u0275\001\001\000\002\001\001\000\016" +
    "\005\u0277\075\016\106\030\116\007\124\004\311\u0278\001" +
    "\001\000\016\005\u027a\075\016\106\030\116\007\124\004" +
    "\312\u027b\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\005\u027c\075\016\106\030\116\007\124\004\313\u027d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\305\u0285\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\u023e\306\u0284\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\302\u0287\303\u027e\304\u0281\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\107\u0290\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\060" +
    "\u028e\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\133\015\u0292\001\001\000\002\001\001\000\006\072" +
    "\u0293\110\u0294\001\001\000\002\001\001\000\004\114\u0297" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\111\u029b\112\u029c\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\113\u02a0\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\112\u02a1" +
    "\001\001\000\002\001\001\000\004\113\u02a2\001\001\000" +
    "\002\001\001\000\004\115\u02a4\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\111\u02a7\112\u029c\001\001\000" +
    "\002\001\001\000\004\115\u02a9\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\u02ad\022\u02ae\260\u02ac\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\341\u02b3\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\342\u02b5\001\001\000\002" +
    "\001\001\000\004\343\u02ba\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\344\u02bc\001\001\000\002\001\001\000\004\345\u02c0\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\075\u02c3\001" +
    "\001\000\004\346\u02c4\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\347\u02c7\001\001\000\002\001\001\000" +
    "\006\012\376\073\u02c9\001\001\000\002\001\001\000\054" +
    "\003\u02cd\004\003\005\010\006\005\007\023\010\026\030" +
    "\015\044\024\075\016\106\030\116\007\124\004\136\031" +
    "\227\047\253\040\257\035\263\037\265\021\304\045\340" +
    "\042\362\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\057\u02d1\001\001\000\022\012\252\017\264\022\256" +
    "\047\u02d2\051\251\053\250\054\245\070\u02d3\001\001\000" +
    "\010\012\u02d8\045\u0310\046\u02d9\001\001\000\004\131\u02df" +
    "\001\001\000\004\071\u02d6\001\001\000\020\012\252\017" +
    "\264\022\256\047\u02d7\051\251\053\250\054\245\001\001" +
    "\000\002\001\001\000\010\012\u02d8\045\u02db\046\u02d9\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\u02d8" +
    "\046\u02de\001\001\000\004\071\u02dd\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\067\u02f8" +
    "\001\001\000\006\012\133\015\u02e1\001\001\000\010\012" +
    "\u02d8\045\u02e2\046\u02d9\001\001\000\006\133\u02e7\134\u02e5" +
    "\001\001\000\004\135\u02f7\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\135\u02f0\001\001\000\004\132\u02ec" +
    "\001\001\000\004\135\u02ea\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\133\015\u02ed\001\001\000\002" +
    "\001\001\000\010\012\u02d8\045\u02ee\046\u02d9\001\001\000" +
    "\006\133\u02ef\134\u02e5\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\133\015\u02f2\001\001\000\010\012" +
    "\u02d8\045\u02f3\046\u02d9\001\001\000\002\001\001\000\006" +
    "\056\241\062\u02f5\001\001\000\006\133\u02f6\134\u02e5\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\104\u02f9" +
    "\001\001\000\004\077\u0302\001\001\000\002\001\001\000" +
    "\020\012\252\017\264\022\256\047\u02fc\051\251\053\250" +
    "\054\245\001\001\000\004\105\u02fe\001\001\000\020\012" +
    "\252\017\264\022\256\047\u02ff\051\251\053\250\054\245" +
    "\001\001\000\002\001\001\000\004\105\u0300\001\001\000" +
    "\002\001\001\000\006\056\241\062\u030f\001\001\000\004" +
    "\100\u0304\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\012\252\017\264\022\256\047\u0306\051\251\053\250" +
    "\054\245\001\001\000\004\101\u0308\001\001\000\004\012" +
    "\u030e\001\001\000\004\102\u0309\001\001\000\022\012\252" +
    "\017\264\022\256\047\u030b\051\251\053\250\054\245\103" +
    "\u030a\001\001\000\002\001\001\000\004\101\u030c\001\001" +
    "\000\004\102\u030d\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\071\u0311\001\001\000\002" +
    "\001\001\000\012\012\u02ad\022\u02ae\254\u0314\260\u0313\001" +
    "\001\000\004\255\u0316\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\256\u0318\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\u034f\232\u0351\001" +
    "\001\000\004\012\u034e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\133\015\u032a\001" +
    "\001\000\006\012\065\013\u0325\001\001\000\002\001\001" +
    "\000\006\072\u0326\236\u0327\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\075\u0329\001\001\000\002\001\001" +
    "\000\010\240\u032b\241\u032f\246\u032e\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\012\u0117\175\u033d\177\u0114" +
    "\207\u0118\220\u0113\226\u0119\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\247\u0331\250\u0334\001\001\000\004" +
    "\251\u033a\001\001\000\004\021\u0337\001\001\000\002\001" +
    "\001\000\004\021\u0335\001\001\000\004\012\u0336\001\001" +
    "\000\002\001\001\000\004\012\u0338\001\001\000\002\001" +
    "\001\000\006\247\u033b\250\u0334\001\001\000\002\001\001" +
    "\000\004\251\u033c\001\001\000\002\001\001\000\004\176" +
    "\u033e\001\001\000\002\001\001\000\004\012\u0340\001\001" +
    "\000\016\023\u0341\024\u0164\025\u0167\242\u0345\243\u0346\244" +
    "\u0344\001\001\000\004\200\u034c\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\245\u0349\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\204\u034d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\233\u0353\001" +
    "\001\000\004\012\u0357\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\117\u035a\001\001\000\002\001\001\000\010" +
    "\012\133\015\u035c\120\u035b\001\001\000\002\001\001\000" +
    "\004\121\u0365\001\001\000\004\123\u035f\001\001\000\004" +
    "\012\u0360\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\133\015\u0367\001\001\000\004\067\u0366\001\001\000" +
    "\002\001\001\000\004\122\u0369\001\001\000\006\012\133" +
    "\015\u036a\001\001\000\002\001\001\000\004\122\u036b\001" +
    "\001\000\002\001\001\000\006\012\133\015\u036d\001\001" +
    "\000\002\001\001\000\006\012\u036f\125\u0370\001\001\000" +
    "\002\001\001\000\004\130\u0371\001\001\000\004\067\u0375" +
    "\001\001\000\006\012\133\015\u0373\001\001\000\004\122" +
    "\u0374\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\012\252\017\264\022\256\047\u0378\051\251\053\250\054" +
    "\245\126\u0377\001\001\000\004\127\u037b\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\u036f\125\u037c\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\133" +
    "\015\u037e\001\001\000\002\001\001\000\054\003\u0380\004" +
    "\003\005\010\006\005\007\023\010\026\030\015\044\024" +
    "\075\016\106\030\116\007\124\004\136\031\227\047\253" +
    "\040\257\035\263\037\265\021\304\045\340\042\362\027" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
    public List<String> SynErr = new ArrayList();
    public List<CupError> Errs = new ArrayList();
    private Symbol s;

    public final Class getSymbolContainer() {
        return sym.class;
    }

    public void syntax_error(Symbol cur_token){
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) cur_token);
        List<Integer> ids = expected_token_ids();
        CupError cupError = new CupError(s.right + 1, s.left + 1, s.value);
        for (Integer expected : ids) {
                String aux = symbl_name_from_id(expected);
                cupError.addExpected(aux);
        }
        Errs.add(cupError);
    }

    public void unrecovered_syntax_error(Symbol cur_token){
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) cur_token);
        List<Integer> ids = expected_token_ids();
        CupError cupError = new CupError(s.right + 1, s.left + 1, s.value);
        for (Integer expected : ids) {
                String aux = symbl_name_from_id(expected);
                cupError.addExpected(aux);
        }
        Errs.add(cupError);
    }

    public String symbl_name_from_id(int id) {
        Field[] fields = getSymbolContainer().getFields();
        for(Field f : fields){
            try {
                  if (f.getInt(null)==id) return f.getName();
            } catch (IllegalArgumentException e) {
            } catch (IllegalAccessException e) {
            }
        }
        return "Simbolo Invalido id";
    }

    public List<Integer> expected_token_ids() {
        List<Integer> ret = new ArrayList();
        int parse_state = ((Symbol)stack.peek()).parse_state ;
        short[] row = action_tab[parse_state];
        for (int i = 0; i<row.length; i+=2){
                if (row[i]==-1) continue;
                if (!validate_expected_symbol(row[i])) continue;
                ret.add(new Integer(row[i]));
        }
        return ret;
    }

    protected static final int _error_sync_size(){
        return 1;
    }

    private boolean validate_expected_symbol(int id){
        short lhs,rhs_size;
        int act;
        try {
            virtual_parse_stack vstack = new virtual_parse_stack(stack);
            for (;;)
            {
                act = get_action(vstack.top(), id);
                if (act == 0) return false;
                if (act > 0)
                {
                        vstack.push(act-1);
                        if (!advance_lookahead()) return true;
                }
                else
                {
                        if ((-act)-1 == start_production())  return true;
                        lhs = production_tab[(-act)-1][0];
                        rhs_size = production_tab[(-act)-1][1];
                        for (int i = 0; i < rhs_size; i++) vstack.pop();
                        vstack.push(get_reduce(vstack.top(), lhs));
                }
            }
        } catch (Exception e) {
                e.printStackTrace();
        }
        return true;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 526: // Data_Type ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Data_Type",243, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 525: // Data_Type ::= Flotante 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Data_Type",243, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 524: // Data_Type ::= Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Data_Type",243, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 523: // RepeatProcedureA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RepeatProcedureA",242, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 522: // RepeatProcedureA ::= Coma RepeatProcedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RepeatProcedureA",242, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 521: // RepeatProcedure ::= Data_Type RepeatProcedureA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RepeatProcedure",241, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 520: // RepeatProcedure ::= Variable Igual Data_Type RepeatProcedureA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RepeatProcedure",241, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 519: // ExecProcedure ::= ClauseExec Object2 RepeatProcedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExecProcedure",240, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 518: // ExecProcedure ::= ClauseExec Object2 AbreParentesis RepeatProcedure CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExecProcedure",240, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 517: // ExecProcedure ::= ClauseExec Object2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExecProcedure",240, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 516: // EXECUTE_AS_CLAUSE ::= ClauseExec AS Clause 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXECUTE_AS_CLAUSE",244, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 515: // FuncOpcC ::= OFF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcC",219, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 514: // FuncOpcC ::= ON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcC",219, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 513: // FuncOpcB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcB",218, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 512: // FuncOpcB ::= Coma FuncOpc 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcB",218, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 511: // FuncOpcA ::= INLINE Igual FuncOpcC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 510: // FuncOpcA ::= EXECUTE_AS_CLAUSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 509: // FuncOpcA ::= CALLED ON NULL INPUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 508: // FuncOpcA ::= RETURNS NULL ON NULL INPUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 507: // FuncOpcA ::= SCHEMABINDING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 506: // FuncOpcA ::= ENCRYPTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 505: // FuncOpc ::= FuncOpcA FuncOpcB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpc",216, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 504: // With ::= WITH FuncOpc 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("With",215, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 503: // DType ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DType",214, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 502: // DType ::= Flotante 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DType",214, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 501: // DType ::= Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DType",214, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 500: // DType ::= Variable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DType",214, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 499: // SCT ::= Select 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SCT",213, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 498: // SCT ::= AbreParentesis Select CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SCT",213, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 497: // Table ::= TABLE With As RETURN SCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Table",212, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 496: // Data ::= Tipo_datoA With As BEGIN DML RETURN DType END 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Data",211, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 495: // Type_Return ::= Table 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type_Return",210, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 494: // Type_Return ::= Data 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type_Return",210, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 493: // ReadOnly ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReadOnly",209, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 492: // ReadOnly ::= READONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReadOnly",209, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 491: // As ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("As",208, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 490: // As ::= AS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("As",208, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 489: // Param_B ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Param_B",207, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 488: // Param_B ::= Coma Param_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Param_B",207, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 487: // Param_A ::= Param Param_B 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Param_A",206, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 486: // Param ::= Variable As Tipo_datoA ReadOnly 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Param",205, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 485: // OrAlter ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrAlter",204, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 484: // OrAlter ::= OR ALTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrAlter",204, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 483: // Params ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Params",203, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 482: // Params ::= Param_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Params",203, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 481: // Function ::= OrAlter FUNCTION Object2 AbreParentesis Params CierraParentesis RETURNS Type_Return 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Function",202, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 480: // CursorDeclareg ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareg",229, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 479: // CursorDeclareg ::= OF ColumnListA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareg",229, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 478: // CursorDeclaref ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaref",228, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 477: // CursorDeclaref ::= FOR UPDATE CursorDeclareg 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaref",228, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 476: // CursorDeclaree ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaree",227, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 475: // CursorDeclaree ::= TYPE_WARNING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaree",227, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 474: // CursorDeclared ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",226, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 473: // CursorDeclared ::= OPTIMISTIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",226, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 472: // CursorDeclared ::= SCROLL_LOCKS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",226, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 471: // CursorDeclared ::= READ_ONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",226, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 470: // CursorDeclarec ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 469: // CursorDeclarec ::= FAST_FORWARD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 468: // CursorDeclarec ::= DYNAMIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 467: // CursorDeclarec ::= KEYSET 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 466: // CursorDeclarec ::= STATIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 465: // CursorDeclareb ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareb",224, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 464: // CursorDeclareb ::= FORWARD_ONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareb",224, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 463: // CursorDeclareb ::= SCROLL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareb",224, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 462: // CursorDeclarea ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarea",223, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 461: // CursorDeclarea ::= GLOBAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarea",223, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 460: // CursorDeclarea ::= LOCAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarea",223, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 459: // CursorDeclare ::= DECLARE ID CURSOR CursorDeclarea CursorDeclareb CursorDeclarec CursorDeclared CursorDeclaree FOR Select CursorDeclaref 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclare",222, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // StmtSP2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP2",201, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // StmtSP2 ::= DML 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP2",201, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // StmtSP1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP1",200, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // StmtSP1 ::= DML StmtSP2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP1",200, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // StmtSP ::= DML StmtSP1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP",199, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // StartSP ::= BEGIN StmtSP END 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StartSP",198, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // ReplicationSP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReplicationSP",197, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // ReplicationSP ::= FOR REPLICATION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReplicationSP",197, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // Clause ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clause",196, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // Clause ::= OWNER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clause",196, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // Clause ::= SELF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clause",196, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // Clause ::= CALLER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clause",196, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // ProcOptionRec ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOptionRec",195, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // ProcOptionRec ::= Coma ProcOption1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOptionRec",195, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // ClauseExec ::= EXEC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ClauseExec",194, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // ClauseExec ::= EXECUTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ClauseExec",194, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // ProcOption2 ::= ClauseExec AS Clause 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption2",193, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // ProcOption2 ::= RECOMPILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption2",193, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // ProcOption2 ::= ENCRYPTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption2",193, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // ProcOption1 ::= ProcOption2 ProcOptionRec 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption1",192, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // ProcOption ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption",191, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // ProcOption ::= WITH ProcOption1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption",191, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // TipoD_SP3 ::= OUTPUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP3",190, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // TipoD_SP3 ::= OUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP3",190, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // TipoD_SP2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP2",189, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // TipoD_SP2 ::= TipoD_SP3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP2",189, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // TipoD_SP1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP1",188, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // TipoD_SP1 ::= Igual DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP1",188, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // TipoD_SP ::= ID READONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP",187, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // TipoD_SP ::= CURSOR VARYING TipoD_SP3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP",187, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // TipoD_SP ::= Tipo_dato TipoD_SP1 TipoD_SP2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP",187, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // ParamsB_SP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsB_SP",186, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // ParamsB_SP ::= Coma ParamsA_SP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsB_SP",186, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // ParamsA_SP ::= Variable TipoD_SP ParamsB_SP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsA_SP",185, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // ParamsSP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsSP",184, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // ParamsSP ::= ParamsA_SP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsSP",184, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // NumSP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NumSP",183, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // NumSP ::= PyC Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NumSP",183, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // SP_Reservada ::= PROCEDURE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SP_Reservada",182, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // SP_Reservada ::= PROC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SP_Reservada",182, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // Procedure ::= OrAlter SP_Reservada Object2 NumSP ParamsSP ProcOption ReplicationSP AS StartSP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Procedure",181, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // RollbackA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RollbackA",180, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // RollbackA ::= TranName NameA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RollbackA",180, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // Rollback ::= ROLLBACK RollbackA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Rollback",179, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // CommitA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CommitA",178, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // CommitA ::= TranName NameA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CommitA",178, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // Commit ::= COMMIT CommitA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Commit",177, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // TranName ::= TRANSACTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TranName",176, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // TranName ::= TRAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TranName",176, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // NameA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NameA",175, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // NameA ::= Variable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NameA",175, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // NameA ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NameA",175, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // Name ::= Variable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Name",174, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // Name ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Name",174, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // SavePoint ::= SAVE TranName Name 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SavePoint",173, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // BeginTranC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranC",172, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // BeginTranC ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranC",172, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // BeginTranB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranB",171, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // BeginTranB ::= WITH MARK BeginTranC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranB",171, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // BeginTranA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranA",170, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // BeginTranA ::= Name BeginTranB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranA",170, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // BeginTran ::= BEGIN TranName BeginTranA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTran",169, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // AlterTableDropC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropC",167, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // AlterTableDropC ::= Coma AlterTableDropA AlterTableDropC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropC",167, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // AlterTableDropB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropB",166, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // AlterTableDropB ::= CONSTRAINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropB",166, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // AlterTableDropA ::= COLUMN IFE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropA",165, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // AlterTableDropA ::= AlterTableDropB IFE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropA",165, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // AlterTableDrop ::= DROP AlterTableDropA AlterTableDropC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDrop",164, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // AlterColumnE ::= NOT FOR REPLICATION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnE",163, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // AlterColumnE ::= ROWGUIDCOL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnE",163, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // AlterColumnD ::= DROP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnD",162, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // AlterColumnD ::= ADD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnD",162, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // AlterColumnA ::= Tipo_dato ColumnDefA ColumnDefG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnA",161, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // AlterColumnC ::= AlterColumnD AlterColumnE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnC",160, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // AlterColumnC ::= AlterColumnA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnC",160, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // AlterColumn ::= ALTER COLUMN ID AlterColumnC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumn",159, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // AlterTableA ::= AlterTableDrop 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableA",158, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // AlterTableA ::= ADD CNC CNCA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableA",158, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // AlterTableA ::= AlterColumn 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableA",158, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // AlterTable ::= TABLE Object3 AlterTableA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTable",157, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // AlterViewA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterViewA",156, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // AlterViewA ::= ColumnList 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterViewA",156, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // AlterView ::= VIEW Object2 AlterViewA AS Select 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterView",155, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // AlterUser ::= USER ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterUser",154, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // AlterDBB ::= SET ROLLBACK IMMEDIATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDBB",153, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // AlterDBB ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDBB",153, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // AlterDBA ::= CURRENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDBA",152, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // AlterDBA ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDBA",152, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // AlterDatabase ::= DATABASE AlterDBA AlterDBB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDatabase",151, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // AlterA ::= Function 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // AlterA ::= Procedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // AlterA ::= AlterView 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // AlterA ::= AlterDatabase 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // AlterA ::= AlterUser 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // AlterA ::= AlterTable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // Alter ::= ALTER AlterA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alter",149, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // TableIndex ::= INDEX ID ColumnConstrC TableConstrB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableIndex",148, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // TableConstrE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrE",147, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // TableConstrE ::= Coma ID TableConstrE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrE",147, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // TableConstrD ::= AbreParentesis ID TableConstrE CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrD",146, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // TableConstrC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrC",145, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // TableConstrC ::= Coma ID OrderB TableConstrC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrC",145, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // TableConstrB ::= AbreParentesis ID OrderB TableConstrC CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrB",144, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // TableConstrA ::= CHECK NFR AbreParentesis SearchCondition CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // TableConstrA ::= FOREIGN KEY TableConstrD REFERENCES Object2 ColumnConstrE ColumnConstrF NFR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // TableConstrA ::= UNIQUE ColumnConstrC TableConstrB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // TableConstrA ::= PRIMARY KEY ColumnConstrC TableConstrB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // TableConstr ::= ColumnConstrA TableConstrA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstr",142, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // ColumnConstrI ::= SET ColumnConstrH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrI",141, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // ColumnConstrI ::= CASCADE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrI",141, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // ColumnConstrH ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrH",140, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // ColumnConstrH ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrH",140, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // ColumnConstrG ::= UPDATE ColumnConstrI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrG",139, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // ColumnConstrG ::= DELETE ColumnConstrI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrG",139, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // ColumnConstrF ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrF",138, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // ColumnConstrF ::= ON ColumnConstrG ColumnConstrF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrF",138, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // ColumnConstrE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrE",137, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // ColumnConstrE ::= AbreParentesis ID CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrE",137, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // ColumnConstrD ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrD",136, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // ColumnConstrD ::= FOREIGN KEY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrD",136, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // ColumnConstrC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrC",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // ColumnConstrC ::= NONCLUSTERED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrC",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // ColumnConstrC ::= CLUSTERED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrC",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // ColumnConstrB ::= CHECK NFR AbreParentesis SearchCondition CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // ColumnConstrB ::= ColumnConstrD REFERENCES Object2 ColumnConstrE ColumnConstrF NFR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // ColumnConstrB ::= UNIQUE ColumnConstrC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // ColumnConstrB ::= PRIMARY KEY ColumnConstrC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // ColumnConstrA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrA",133, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // ColumnConstrA ::= CONSTRAINT ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrA",133, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // ColumnConstr ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstr",132, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // ColumnConstr ::= ColumnConstrA ColumnConstrB ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstr",132, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // ColumnDefH ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefH",131, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // ColumnDefH ::= ROWGUIDCOL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefH",131, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // ColumnDefG ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefG",130, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // ColumnDefG ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefG",130, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // ColumnDefF ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefF",129, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // ColumnDefF ::= AbreParentesis Entero Coma Entero CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefF",129, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // ColumnDefE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefE",128, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // ColumnDefE ::= IDENTITY ColumnDefF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefE",128, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // ColumnDefD ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // ColumnDefD ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // ColumnDefD ::= Flotante 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // ColumnDefD ::= Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // ColumnDefA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefA",126, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // ColumnDefA ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefA",126, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // ColumnDefV ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefV",233, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // ColumnDefV ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefV",233, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // ColumnDefV ::= NOT NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefV",233, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // ColumnDefW ::= FOR REPLICATION ColumnDefV 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefW",235, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // ColumnDefW ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefW",235, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // ColumnDefX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefX",234, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // ColumnDefX ::= NOT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefX",234, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // ColumnDefY ::= ColumnConstrB ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // ColumnDefY ::= ROWGUIDCOL ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // ColumnDefY ::= ColumnDefX ColumnDefW ColumnDefH ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // ColumnDefY ::= IDENTITY ColumnDefF NFR ColumnDefH ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // ColumnDefY ::= DEFAULT ColumnDefD ColumnDefE NFR ColumnDefH ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // ColumnDefZ ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefZ",236, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // ColumnDefZ ::= ColumnDefY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefZ",236, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // ColumnDefZ ::= CONSTRAINT ID ColumnDefY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefZ",236, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // ColumnDef ::= ID Tipo_dato ColumnDefA ColumnDefZ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDef",125, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // CNCA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNCA",124, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // CNCA ::= Coma CNC CNCA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNCA",124, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // CNC ::= TableIndex 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNC",123, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // CNC ::= TableConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNC",123, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // CNC ::= ColumnDef 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNC",123, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // NFR2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR2",232, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // NFR2 ::= NOT ColumnDefG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR2",232, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // NFR1 ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR1",231, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // NFR1 ::= FOR REPLICATION NFR2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR1",231, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // NFR ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR",122, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // NFR ::= NOT NFR1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR",122, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // FileGroup ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileGroup",121, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // FileGroup ::= ON PRIMARY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileGroup",121, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // CreateTable ::= TABLE Object3 AbreParentesis CNC CNCA CierraParentesis FileGroup 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateTable",120, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // OptionalOn ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OptionalOn",119, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // OptionalOn ::= ON ID AbreParentesis ID CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OptionalOn",119, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // IncludeIndex ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IncludeIndex",118, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // IncludeIndex ::= INCLUDE ColumnList 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IncludeIndex",118, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // ColumnIndexB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndexB",117, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // ColumnIndexB ::= Coma ID OrderB ColumnIndexB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndexB",117, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // ColumnIndexA ::= ID OrderB ColumnIndexB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndexA",116, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // ColumnIndex ::= AbreParentesis ColumnIndexA CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndex",115, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // CreateIndexA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateIndexA",114, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // CreateIndexA ::= UNIQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateIndexA",114, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // CreateIndex ::= CreateIndexA ColumnConstrC INDEX ID ON Object3 ColumnIndex IncludeIndex Where OptionalOn 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateIndex",113, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // CreateView ::= VIEW Object2 AS Select 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateView",112, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // Filegrowth_A ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth_A",111, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // Filegrowth_A ::= MODULAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth_A",111, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // Filegrowth_A ::= Size_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth_A",111, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // Filegrowth ::= FILEGROWTH Igual Entero Filegrowth_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth",110, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // Maxsize_A ::= UNLIMITED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Maxsize_A",109, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // Maxsize_A ::= Entero Size_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Maxsize_A",109, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // Maxsize ::= MAXSIZE Igual Maxsize_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Maxsize",108, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // Size_A ::= TB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size_A",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // Size_A ::= GB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size_A",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // Size_A ::= MB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size_A",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // Size_A ::= KB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size_A",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // Sizenw ::= SIZE Igual Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sizenw",239, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // Sizew ::= SIZE Igual Entero Size_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sizew",238, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // Size ::= Sizenw 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size",106, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // Size ::= Sizew 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size",106, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // Optional ::= Filegrowth 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optional",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // Optional ::= Maxsize 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optional",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // Optional ::= Size 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optional",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // Optionals ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optionals",103, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // Optionals ::= Coma Optional Optionals 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optionals",103, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // COLLATEDB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLLATEDB",101, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // COLLATEDB ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLLATEDB",101, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // FileSpec ::= AbreParentesis NAME Igual Cadena Coma FILENAME Igual Cadena Optionals CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileSpec",100, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // FileSpecs ::= FileSpec 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileSpecs",99, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // FileSpecs ::= FileSpec Coma FileSpecs 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileSpecs",99, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // Primary ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Primary",98, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // Primary ::= PRIMARY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Primary",98, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // CreateDBB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDBB",97, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // CreateDBB ::= ON Primary FileSpecs 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDBB",97, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // CreateDBA ::= CreateDBB COLLATEDB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDBA",96, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // CreateDB ::= DATABASE ID CreateDBA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDB",95, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // CreateUser ::= USER Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateUser",94, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // CreateA ::= Function 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // CreateA ::= Procedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // CreateA ::= CreateView 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // CreateA ::= CreateUser 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // CreateA ::= CreateIndex 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // CreateA ::= CreateDB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // CreateA ::= CreateTable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // Create ::= CREATE CreateA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Create",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // Outer ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Outer",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // Outer ::= OUTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Outer",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // Type ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // Type ::= FULL Outer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // Type ::= LEFT Outer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // Type ::= RIGHT Outer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // Type ::= INNER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // Join ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Join",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // Join ::= Type JOIN Object3 Alias ON SearchCondition Join 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Join",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // FromSelectA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromSelectA",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // FromSelectA ::= Coma Object3 Alias Join 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromSelectA",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // FromSelect ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromSelect",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // FromSelect ::= FROM Object3 Alias Join FromSelectA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromSelect",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // FromUpdate ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromUpdate",86, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // FromUpdate ::= FROM Object3 DeleteC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromUpdate",86, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // UpdateC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateC",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // UpdateC ::= Coma UpdateA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateC",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // UpdateB ::= Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateB",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // UpdateB ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateB",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // UpdateA ::= ID Igual UpdateB UpdateC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateA",83, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // Update ::= UPDATE Top Object3 SET UpdateA FromUpdate Where 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Update",82, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // Server ::= AbreParentesis ID Coma Entero CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Server",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // DeleteC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteC",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // DeleteC ::= Coma Object3 DeleteC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteC",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // DeleteB ::= FROM Object3 DeleteC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteB",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // DeleteA ::= Object3 DeleteB Where 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteA",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // DeleteA ::= OPENQUERY Server 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteA",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // FromDelete ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromDelete",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // FromDelete ::= FROM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromDelete",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // Delete ::= DELETE Top FromDelete DeleteA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Delete",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // InsertValoresA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValoresA",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // InsertValoresA ::= Coma AbreParentesis InsertExpresion CierraParentesis InsertValoresA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValoresA",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // InsertValores ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValores",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // InsertValores ::= DEFAULT VALUES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValores",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // InsertValores ::= VALUES AbreParentesis InsertExpresion CierraParentesis InsertValoresA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValores",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // InsertExpresionB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionB",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // InsertExpresionB ::= Coma InsertExpresionA InsertExpresionB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionB",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // InsertExpresionA ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // InsertExpresionA ::= Flotante 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // InsertExpresionA ::= Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // InsertExpresionA ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // InsertExpresion ::= InsertExpresionA InsertExpresionB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresion",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // InsertColumnList ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertColumnList",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // InsertColumnList ::= ColumnList 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertColumnList",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // InsertInto ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertInto",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // InsertInto ::= INTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertInto",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // Insert ::= INSERT Top InsertInto Object3 InsertColumnList InsertValores 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Insert",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // GroupA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GroupA",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // GroupA ::= Coma Expresion GroupA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GroupA",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // Group ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Group",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // Group ::= GROUP BY Expresion GroupA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Group",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // OrderC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderC",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // OrderC ::= Expresion OrderA OrderB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderC",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // OrderB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderB",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // OrderB ::= DESC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderB",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // OrderB ::= ASC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderB",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // OrderA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderA",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // OrderA ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderA",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // Order ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Order",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // Order ::= ORDER BY Expresion OrderA OrderB OrderC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Order",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // Having ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Having",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // Having ::= HAVING SearchCondition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Having",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // SelectA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectA",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // SelectA ::= DISTINCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectA",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // SelectA ::= ALL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectA",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // Select ::= SELECT SelectA Top SelectColumns FromSelect Where Group Having Order 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Select",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // ColumnListB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnListB",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // ColumnListB ::= Coma ID ColumnListB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnListB",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // ColumnListA ::= ID ColumnListB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnListA",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // ColumnList ::= AbreParentesis ColumnListA CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnList",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // SelectColumnsA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectColumnsA",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // SelectColumnsA ::= Coma Expresion Alias SelectColumnsA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectColumnsA",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // SelectColumns ::= Multiplicacion SelectColumnsA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectColumns",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // SelectColumns ::= Expresion Alias SelectColumnsA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectColumns",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Where ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Where",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Where ::= WHERE SearchCondition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Where",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // PredicadoC ::= LIKE Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoC",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // PredicadoC ::= BETWEEN Expresion AND Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoC",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // PredicadoC ::= IN AbreParentesis Expresion Expresiones CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoC",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // PredicadoA ::= Not PredicadoC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoA",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // PredicadoA ::= IS Not NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoA",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // PredicadoA ::= OperadoresBooleanos Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoA",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // OperadoresBooleanos ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // OperadoresBooleanos ::= Menor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // OperadoresBooleanos ::= MayorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // OperadoresBooleanos ::= Mayor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // OperadoresBooleanos ::= NoIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // OperadoresBooleanos ::= Igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Predicado ::= Expresion PredicadoA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Predicado",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // SearchConditionA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchConditionA",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // SearchConditionA ::= OR SearchCondition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchConditionA",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // SearchConditionA ::= AND SearchCondition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchConditionA",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // SearchCondition ::= AbreParentesis SearchCondition CierraParentesis SearchConditionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchCondition",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // SearchCondition ::= Not Predicado SearchConditionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchCondition",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Expresiones ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Expresiones",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Expresiones ::= Coma Expresion Expresiones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Expresiones",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // TopA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TopA",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // TopA ::= PERCENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TopA",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Top ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Top",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Top ::= TOP AbreParentesis Entero CierraParentesis TopA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Top",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Not ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Not",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Not ::= NOT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Not",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ExpresionF ::= Multiplicacion CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionF",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ExpresionF ::= Entero CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionF",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ExpresionF ::= Object4 CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionF",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ExpresionE ::= COUNT AbreParentesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ExpresionE ::= MAX AbreParentesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ExpresionE ::= MIN AbreParentesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ExpresionE ::= AVG AbreParentesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ExpresionE ::= SUM AbreParentesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ExpresionE ::= Variable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ExpresionE ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ExpresionE ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ExpresionE ::= Flotante 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ExpresionE ::= Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ExpresionE ::= Object4 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ExpresionD ::= ExpresionE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionD",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ExpresionD ::= AbreParentesis Expresion CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionD",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ExpresionC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionC",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ExpresionC ::= Division ExpresionD ExpresionC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionC",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ExpresionC ::= Multiplicacion ExpresionD ExpresionC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionC",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ExpresionB ::= ExpresionD ExpresionC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionB",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ExpresionA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ExpresionA ::= Resta ExpresionB ExpresionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ExpresionA ::= Suma ExpresionB ExpresionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Expresion ::= ExpresionB ExpresionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Expresion",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // AliasA ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AliasA",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // AliasA ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AliasA",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Alias ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alias",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Alias ::= AliasA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alias",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Alias ::= AS AliasA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alias",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Truncate ::= TRUNCATE TABLE Object3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Truncate",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DropIndexB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndexB",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DropIndexB ::= Coma DropIndexA DropIndexB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndexB",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DropIndexA ::= ID ON Object3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndexA",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DropIndex ::= INDEX IFE DropIndexA DropIndexB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndex",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DropViewA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropViewA",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DropViewA ::= Coma Object2 DropViewA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropViewA",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DropView ::= VIEW IFE Object2 DropViewA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropView",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DropDatabaseA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropDatabaseA",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DropDatabaseA ::= Coma ID DropDatabaseA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropDatabaseA",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DropDatabase ::= DATABASE IFE ID DropDatabaseA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropDatabase",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DropUser ::= USER IFE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropUser",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DropTableA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropTableA",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DropTableA ::= Coma Object3 DropTableA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropTableA",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DropTable ::= TABLE IFE Object3 DropTableA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropTable",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DropA ::= DropIndex 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DropA ::= DropView 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DropA ::= DropDatabase 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DropA ::= DropUser 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DropA ::= DropTable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Drop ::= DROP DropA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Drop",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Tipo_datoC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoC",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Tipo_datoC ::= Coma Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoC",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Tipo_datoB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoB",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Tipo_datoB ::= AbreParentesis Entero Tipo_datoC CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoB",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Tipo_datoA ::= XML 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Tipo_datoA ::= VARBINARY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Tipo_datoA ::= UNIQUEIDENTIFIER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Tipo_datoA ::= TINYINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Tipo_datoA ::= TEXT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Tipo_datoA ::= SQL_VARIANT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Tipo_datoA ::= SMALLMONEY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Tipo_datoA ::= SMALLDATETIME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Tipo_datoA ::= ROWVERSION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Tipo_datoA ::= NVARCHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Tipo_datoA ::= NTEXT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Tipo_datoA ::= MONEY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Tipo_datoA ::= IMAGE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Tipo_datoA ::= HIERARCHYID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Tipo_datoA ::= DATETIMEOFFSET 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Tipo_datoA ::= DATETIME2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Tipo_datoA ::= DATETIME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Tipo_datoA ::= BINARY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Tipo_datoA ::= BIGINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Tipo_datoA ::= NUMERIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Tipo_datoA ::= SMALLINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Tipo_datoA ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Tipo_datoA ::= INT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Tipo_datoA ::= TIME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Tipo_datoA ::= REAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Tipo_datoA ::= NCHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Tipo_datoA ::= CURSOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Tipo_datoA ::= CHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Tipo_datoA ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Tipo_datoA ::= BIT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Tipo_datoA ::= DATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Tipo_datoA ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Tipo_datoA ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Tipo_datoA ::= VARCHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Tipo_datoD ::= AbreCorchetes Tipo_datoA CierraCorchetes 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoD",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Tipo_datoD ::= Tipo_datoA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoD",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Tipo_dato ::= Tipo_datoD Tipo_datoB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_dato",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Variable ::= Arroba Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variable",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IFE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IFE ::= IF EXISTS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Object4A ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object4A",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Object4A ::= Punto Object3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object4A",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Object4 ::= ID Object4A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object4",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Object3A ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object3A",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Object3A ::= Punto Object2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object3A",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Object3 ::= ID Object3A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object3",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Object2A ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object2A",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Object2A ::= Punto ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object2A",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Object2 ::= ID Object2A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object2",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ID ::= AbreCorchetes Identificador CierraCorchetes 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ID",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ID ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ID",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Final ::= GO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Final",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Final ::= PyC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Final",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TSQL ::= ExecProcedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TSQL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TSQL ::= CursorDeclare 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TSQL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TCL ::= SavePoint 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TCL ::= Commit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TCL ::= Rollback 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TCL ::= BeginTran 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DDL ::= Truncate 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DDL ::= Drop 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DDL ::= Alter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DDL ::= Create 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DML ::= Update 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DML ::= Delete 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DML ::= Insert 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DML ::= Select 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // InicialA ::= TSQL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // InicialA ::= TCL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // InicialA ::= DDL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // InicialA ::= DML 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Inicial ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicial",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Inicial ::= error Final Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicial",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicial ::= InicialA Final Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicial",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

