package code;

import java_cup.runtime.Symbol;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.virtual_parse_stack;
import java.lang.reflect.Field;

parser code
{:
    
    public List<CupError> SnxErrors = new ArrayList();
    
    private Symbol s;
    public Symbol getS(){
        return this.s;
    }
    
    public String symbl_name_from_id(int id){
        Field[] fields = getSymbolContainer().getFields();
        for(Field f : fields){
            try {
                  if (f.getInt(null)==id)
                    return f.getName();
            } catch (IllegalArgumentException e) {
            } catch (IllegalAccessException e) {
            }
        }
        return "invalid symbol id";
    }

    public void syntax_error(Symbol s){
        this.s=s; 
        List<Integer> ids = expected_token_ids();
        List<String> expVals = new ArrayList();
        for (Integer expected : ids){
            expVals.add(symbl_name_from_id(expected));
        }
        SnxErrors.add(new CupError(s.left,s.right,s.value,expVals);
    }

    public List<Integer> expected_token_ids() {
        List<Integer> ret = new LinkedList<Integer>();
        int parse_state = ((Symbol)stack.peek()).parse_state ;
        short[] row = action_tab[parse_state];
        for (int i = 0; i<row.length; i+=2){
            if (row[i]==-1) continue;
            if (!validate_expected_symbol(row[i])) continue;
            ret.add(new Integer(row[i]));
        }
        return ret;
    }

    protected static final int _error_sync_size(){
        return 1;
    }

    private boolean validate_expected_symbol(int id){
        short lhs,rhs_size;
        int act;
        try {
            virtual_parse_stack vstack = new virtual_parse_stack(stack);
            /* parse until we fail or get past the lookahead input */
            for (;;)
            {
                /* look up the action from the current state (on top of stack) */
                act = get_action(vstack.top(), id);
                /* if its an error, we fail */
                if (act == 0) return false;
                /* > 0 encodes a shift */
                if (act > 0)
                {
                        /* push the new state on the stack */
                        vstack.push(act-1);
                        /* advance simulated input, if we run off the end, we are done */
                        if (!advance_lookahead()) return true;
                }
                /* < 0 encodes a reduce */
                else
                {
                        /* if this is a reduce with the start production we are done */
                        if ((-act)-1 == start_production())  return true;
                        /* get the lhs Symbol and the rhs size */
                        lhs = production_tab[(-act)-1][0];
                        rhs_size = production_tab[(-act)-1][1];
                        /* pop handle off the stack */
                        for (int i = 0; i < rhs_size; i++) vstack.pop();
                        vstack.push(get_reduce(vstack.top(), lhs));
                }
            }
        }catch (Exception e) {
            e.printStackTrace();
        }
        return true;
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        List<Integer> ids = expected_token_ids();
        LinkedList<String> expVals = new LinkedList<String>();
        for (Integer expected : ids){
            expVals.add(symbl_name_from_id(expected));
        }
        SnxErrors.add(new CupError(s.left,s.right,s.value,expVals));
    }
:};

terminal
    KB, MB, GB, TB, OUT, READONLY, ENCRYPTION, RETURNS, SCHEMABINDING, CALLED,
    INLINE,CALLER, SELF, OWNER, RECOMPILE, MARK, FORWARD_ONLY, STATIC, KEYSET,
    DYNAMIC, FAST_FORWARD, READ_ONLY, SCROLL_LOCKS, OPTIMISTIC, TYPE_WARNING,
    VARCHAR, WHENEVER, WORK, WRITE, YEAR, ZONE, RESERVADA, SUMA, RESTA,
    MULTIPLICACION, DIVISION, MODULAR, LT, ELT, GT, EGT, ASIGNACION, COMPARACION,
    DIFERENCIA, AMPERSAND, PIPE, ADMIRACION, PYC, COMA, PUNTO, CORCHETE_APERTURA,
    CORCHETE_CIERRE, PARENTESIS_APERTURA, PARENTESIS_CIERRE, LLAVE_APERTURA,
    LLAVE_CIERRE, CORCHETES, PARENTESIS, LLAVES, ARROBA, NUMERAL, NUMERALES,
    IDENTIFICADOR, ERROR, CONSTANTE_BOOLEANA, CONSTANTE_ENTERA, CONSTANTE_FLOTANTE,
    CONSTANTE_CADENA, OPERADOR, ERROR_COMENTARIO, ERROR_CADENA, ADD, ALL, ALTER,
    AND, ANY, AS, ASC, AUTHORIZATION, BACKUP, BEGIN, BETWEEN, BREAK, BROWSE, BULK,
    BY, CASCADE, CASE, CHECK, CHECKPOINT, CLOSE, CLUSTERED, COALESCE, COLLATE,
    COLUMN, COMMIT, COMPUTE, CONSTRAINT, CONTAINS, CONTAINSTABLE, CONTINUE, CONVERT,
    CREATE, CROSS, CURRENT, CURRENT_DATE, CURRENT_TIME, CURRENT_TIMESTAMP,
    CURRENT_USER, CURSOR, DATABASE, DBCC, DEALLOCATE, DECLARE, DEFAULT, DELETE,
    DENY, DESC, DISK, DISTINCT, DISTRIBUTED, DOUBLE, DROP, DUMP, ELSE, END, ERRLVL,
    ESCAPE, EXCEPT, EXEC, EXECUTE, EXISTS, EXIT, EXTERNAL, FETCH, FILE, FILLFACTOR,
    FOR, FOREIGN, FREETEXT, FREETEXTTABLE, FROM, FULL, FUNCTION, GOTO, GRANT, GROUP,
    HAVING, HOLDLOCK, IDENTITY, IDENTITY_INSERT, IDENTITYCOL, IF, IN, INDEX, INNER,
    INSERT, INTERSECT, INTO, IS, JOIN, KEY, KILL, LEFT, LIKE, LINENO, LOAD, MERGE,
    NATIONAL, NOCHECK, NONCLUSTERED, NOT, NULL, NULLIF, OF, OFF, OFFSETS, ON, OPEN,
    OPENDATASOURCE, OPENQUERY, OPENROWSET, OPENXML, OPTION, OR, ORDER, OUTER, OVER,
    PERCENT, PIVOT, PLAN, PRECISION, PRIMARY, PRINT, PROC, PROCEDURE, PUBLIC,
    RAISERROR, READ, READTEXT, RECONFIGURE, REFERENCES, REPLICATION, RESTORE,
    RESTRICT, RETURN, REVERT, REVOKE, RIGHT, ROLLBACK, ROWCOUNT, ROWGUIDCOL, RULE,
    SAVE, SCHEMA, SECURITYAUDIT, SELECT, SEMANTICKEYPHRASETABLE,
    SEMANTICSIMILARITYDETAILSTABLE, SEMANTICSIMILARITYTABLE, SESSION_USER, SET,
    SETUSER, SHUTDOWN, SOME, STATISTICS, SYSTEM_USER, TABLE, TABLESAMPLE, TEXTSIZE,
    THEN, TO, TOP, TRAN, TRANSACTION, TRIGGER, TRUNCATE, TRY_CONVERT, TSEQUAL,
    UNION, UNIQUE, UNPIVOT, UPDATE, UPDATETEXT, USE, USER, VALUES, VARYING, VIEW,
    WAITFOR, WHEN, WHERE, WHILE, WITH, WITHIN_GROUP, WRITETEXT, ABSOLUTE, ACTION,
    ADA, ALLOCATE, ARE, ASSERTION, AT, AVG, BIT, BIT_LENGTH, BOTH, CASCADED, CAST,
    CATALOG, CHAR, CHAR_LENGTH, CHARACTER, CHARACTER_LENGTH, COLLATION, CONNECT,
    CONNECTION, CONSTRAINTS, CORRESPONDING, COUNT, DATE, DAY, DEC, DECIMAL,
    DEFERRABLE, DEFERRED, DESCRIBE, DESCRIPTOR, DIAGNOSTICS, DISCONNECT, DOMAIN,
    END_EXEC, EXCEPTION, EXTRACT, FALSE, FIRST, FLOAT, FORTRAN, FOUND, GET, GLOBAL,
    GO, HOUR, IMMEDIATE, INCLUDE, INDICATOR, INITIALLY, INPUT, INSENSITIVE, INT,
    INTEGER, INTERVAL, ISOLATION, LANGUAGE, LAST, LEADING, LEVEL, LOCAL, LOWER,
    MATCH, MAX, MIN, MINUTE, MODULE, MONTH, NAMES, NAME,NATURAL, NCHAR, NEXT, NO,
    NONE, NUMERIC, OCTET_LENGTH, ONLY, OUTPUT, OVERLAPS, PAD, PARTIAL,  PASCAL,
    POSITION, PREPARE, PRESERVE, PRIOR, PRIVILEGES,  REAL, RELATIVE, ROWS, SCROLL,
    SECOND, SECTION, SESSION, SIZE, SMALLINT, SPACE, SQL, SQLCA, SQLCODE, SQLERROR,
    SQLSTATE, SQLWARNING, SUBSTRING, SUM, TEMPORARY, TIME, TIMESTAMP, TIMEZONE_HOUR,
    TIMEZONE_MINUTE, TRAILING, TRANSLATE, TRANSLATION, TRIM, TRUE, UNKNOWN, UPPER,
    USAGE, USING, VALUE, FILENAME, MAXSIZE, UNLIMITED, FILEGROWTH;

non terminal
    OperadoresBooleanos, Inicial, InicialA, DML, DDL, TCL, TSQL, Final, ID, Object2,
    Object2A, Object3, Object3A, Object4, Object4A, IFE, Variable, Tipo_dato, 
    Tipo_datoD, Tipo_datoA, Tipo_datoB, Tipo_datoC, Drop, DropA, DropTable, DropTableA,
    DropUser, DropDatabase, DropDatabaseA, DropView, DropViewA, DropIndex, DropIndexA,
    DropIndexB, Truncate, Alias, AliasA, Expresion, ExpresionA, ExpresionB, ExpresionC,
    ExpresionD, ExpresionE, ExpresionF, Not, Top, TopA, Expresiones, SearchCondition,
    SearchConditionA, Predicado, PredicadoA, PredicadoC, Where, SelectColumns,
    SelectColumnsA, ColumnList, ColumnListA, ColumnListB, Select, SelectA, Having,
    Order, OrderA, OrderB, OrderC, Group, GroupA, Insert, InsertInto , InsertColumnList,
    InsertExpresion, InsertExpresionA, InsertExpresionB , InsertValores , InsertValoresA,
    Delete, FromDelete, DeleteA, DeleteB, DeleteC, Server, Update, UpdateA, UpdateB,
    UpdateC, FromUpdate, FromSelect, FromSelectA, Join, Type, Outer, Create, CreateA,
    CreateUser, CreateDB, CreateDBA, CreateDBB, Primary, FileSpecs, FileSpec, COLLATEDB,
    Filename, Optionals, Optionals_A, Optional, Size, Size_A, Maxsize, Maxsize_A,
    Filegrowth, Filegrowth_A, CreateView, CreateIndex, CreateIndexA, ColumnIndex,
    ColumnIndexA, ColumnIndexB, IncludeIndex, OptionalOn, CreateTable, FileGroup,
    NFR, CNC, CNCA, ColumnDef, ColumnDefA, ColumnDefB, ColumnDefC, ColumnDefD,
    ColumnDefE, ColumnDefF, ColumnDefG, ColumnDefH, ColumnConstr, ColumnConstrA,
    ColumnConstrB, ColumnConstrC, ColumnConstrD, ColumnConstrE, ColumnConstrF,
    ColumnConstrG, ColumnConstrH, ColumnConstrI, TableConstr, TableConstrA,
    TableConstrB, TableConstrC, TableConstrD, TableConstrE, TableIndex, Alter,
    AlterA, AlterDatabase, AlterDBA, AlterDBB, AlterUser, AlterView, AlterViewA,
    AlterTable, AlterTableA, AlterColumn, AlterColumnC, AlterColumnA, AlterColumnD,
    AlterColumnE, AlterTableDrop , AlterTableDropA , AlterTableDropB, AlterTableDropC,
    AlterTableDropD, BeginTran, BeginTranA, BeginTranB, BeginTranC, SavePoint, Name,
    NameA, TranName, Commit, CommitA, Rollback, RollbackA, Procedure, SP_Reservada,
    NumSP, ParamsSP, ParamsA_SP, ParamsB_SP, TipoD_SP, TipoD_SP1, TipoD_SP2, TipoD_SP3,
    ProcOption, ProcOption1, ProcOption2, ClauseExec, ProcOptionRec, Clause, ReplicationSP,
    StartSP, StmtSP, StmtSP1, StmtSP2, Function, Params, OrAlter, Param, Param_A,
    Param_B, As, ReadOnly, Type_Return, Data, Table, SCT, DType, With, FuncOpc,
    FuncOpcA, FuncOpcB, FuncOpcC, Cursores , VariableList, VariableLista, CursorDeclare,
    CursorDeclarea, CursorDeclareb, CursorDeclarec, CursorDeclared, CursorDeclaree,
    CursorDeclaref, CursorDeclareg, CursorOpen, CursorClosea, CursorFetch, CursorFetcha, 
    CursorFetchb, CursorFetchc, CursorFetchd, CursorFetche, CursorClose, CursorDealloc,
    InicialB, FinalA;

start with Inicial;
     
Inicial ::=     InicialA Final;
InicialA ::=    DML
                | DDL
                | TCL
                | TSQL;
Final ::=       PYC
                | GO;

DML ::=         Select
                | Insert
                | Delete
                | Update;
DDL ::=         Create
                | Alter
                | Drop
                | Truncate;
TCL ::=         BeginTran
                | Rollback
                | Commit
                | SavePoint;
//TSQL ::= Cursor;

ID ::=          IDENTIFICADOR
                | CORCHETE_APERTURA IDENTIFICADOR CORCHETE_CIERRE;
Object2 ::=     ID Object2A;
Object2A ::=    PUNTO ID
                |;
Object3 ::=     ID Object3A;
Object3A ::=    PUNTO Object2
                |;
Object4	 ::=    ID Object4A;
Object4A ::=    PUNTO Object3
                |;

IFE ::=         IF EXISTS
                |;

Variable ::=    ARROBA IDENTIFICADOR;

Tipo_dato ::=   Tipo_datoD Tipo_datoB;
Tipo_datoD ::=  Tipo_datoA
                | CORCHETE_APERTURA Tipo_datoA CORCHETE_CIERRE;
Tipo_datoA ::=  VARCHAR
                | INTEGER
                | FLOAT
                | DATE
                | BIT
                | DOUBLE
                | CHAR
                | CURSOR
                | NCHAR
                | REAL
                | TIME
                | INT
                | DECIMAL
                | SMALLINT
                | NUMERIC;
Tipo_datoB ::=	PARENTESIS_APERTURA CONSTANTE_ENTERA Tipo_datoC PARENTESIS_CIERRE
                |;
Tipo_datoC ::=	COMA CONSTANTE_ENTERA
                |;

Drop ::=        DROP DropA;
DropA ::=       DropTable
                | DropUser
                | DropDatabase
                | DropView
                | DropIndex;
DropTable ::=   TABLE IFE Object3 DropTableA;
DropTableA ::= 	COMA Object3 DropTableA
                |;
DropUser ::=    USER IFE ID;
DropDatabase ::= DATABASE IFE ID DropDatabaseA;
DropDatabaseA ::= COMA ID DropDatabaseA
                |;
DropView ::=    VIEW IFE Object2 DropViewA;
DropViewA ::=   COMA Object2 DropViewA
                |;
DropIndex ::=   INDEX IFE DropIndexA DropIndexB;
DropIndexA ::= 	ID ON Object3;
DropIndexB ::= 	COMA DropIndexA DropIndexB
                |;

Truncate ::=    TRUNCATE TABLE Object3;
Alias ::=       AS AliasA
                | AliasA
                |;
AliasA ::=      ID
                | CONSTANTE_CADENA;
Expresion ::=   ExpresionB ExpresionA;
ExpresionA ::= 	SUMA ExpresionB ExpresionA
                | RESTA ExpresionB ExpresionA
                |;
ExpresionB ::=  ExpresionD ExpresionC;
ExpresionC ::=  MULTIPLICACION ExpresionD ExpresionC
                | DIVISION ExpresionD ExpresionC
                |;
ExpresionD ::= 	PARENTESIS_APERTURA Expresion PredicadoC PARENTESIS_CIERRE
                | ExpresionE;
ExpresionE ::=  Object4
                | CONSTANTE_ENTERA
                | CONSTANTE_FLOTANTE
                | CONSTANTE_CADENA
                | CONSTANTE_BOOLEANA
                | NULL 
                | SUM PARENTESIS_APERTURA ExpresionF
                | AVG PARENTESIS_APERTURA ExpresionF
                | MIN PARENTESIS_APERTURA ExpresionF
                | MAX PARENTESIS_APERTURA ExpresionF
                | COUNT PARENTESIS_APERTURA ExpresionF;                
ExpresionF ::=  Object4 PARENTESIS_CIERRE
                | CONSTANTE_ENTERA PARENTESIS_CIERRE
                | MULTIPLICACION PARENTESIS_CIERRE;

Not ::= NOT
        |;

Top ::= TOP PARENTESIS_APERTURA CONSTANTE_ENTERA PARENTESIS_CIERRE TopA
        |;
TopA ::=    PERCENT
            |;

Expresiones ::= COMA Expresion Expresiones
                |;
SearchCondition ::= Not Predicado SearchConditionA
                    | PARENTESIS_APERTURA SearchCondition PARENTESIS_CIERRE SearchConditionA;
SearchConditionA ::=    AND SearchCondition SearchConditionA
                        | OR SearchCondition SearchConditionA
                        |;
Predicado ::=   Expresion PredicadoA;
OperadoresBooleanos ::= ASIGNACION
                        | DIFERENCIA
                        | GT
                        | EGT
                        | LT
                        | ELT;
PredicadoA ::=  OperadoresBooleanos Expresion
                | IS Not NULL
                | Not PredicadoC;
PredicadoC ::=  IN PARENTESIS_APERTURA Expresion Expresiones PARENTESIS_CIERRE
                | BETWEEN Expresion AND Expresion
                | LIKE Expresion;
Where ::=   WHERE SearchCondition
            |;

SelectColumns ::=   Expresion Alias SelectColumnsA
                    | MULTIPLICACION SelectColumnsA;
SelectColumnsA ::=  COMA Expresion Alias SelectColumnsA
                    |;
ColumnList ::=  PARENTESIS_APERTURA ColumnListA PARENTESIS_CIERRE;
ColumnListA ::= ID ColumnListB;
ColumnListB ::= COMA ID ColumnListB
                |;

Select ::=  SELECT SelectA Top SelectColumns FromSelect Where Group Having Order;
SelectA ::= ALL
            | DISTINCT
            |;

Having ::=  HAVING SearchCondition
            |;

Order ::=   ORDER BY Expresion OrderA OrderB OrderC
            |;
OrderA ::=  COLLATE ID
            |;
OrderB ::=  ASC
            | DESC
            |;
OrderC ::=  Expresion OrderA OrderB
            |;

Group ::=   GROUP BY Expresion GroupA
            |;
GroupA ::=  COMA Expresion GroupA
            |;

Insert ::=  INSERT Top InsertInto Object3 InsertColumnList InsertValores;
InsertInto ::=  INTO
                |;
InsertColumnList ::=    ColumnList
                        |;
InsertExpresion ::= InsertExpresionA InsertExpresionB;
InsertExpresionA ::=    DEFAULT
                        | CONSTANTE_ENTERA
                        | CONSTANTE_FLOTANTE
                        | CONSTANTE_CADENA
                        | CONSTANTE_BOOLEANA;
InsertExpresionB ::=    COMA InsertExpresionA InsertExpresionB
                        |;
InsertValores ::=   VALUES PARENTESIS_APERTURA InsertExpresion PARENTESIS_CIERRE InsertValoresA
                    | DEFAULT VALUES;
InsertValoresA ::= COMA PARENTESIS_APERTURA InsertExpresion PARENTESIS_CIERRE InsertValoresA
                    |;
Delete ::= DELETE Top FromDelete DeleteA;
FromDelete ::=  FROM
                |;

DeleteA ::= OPENQUERY Server
            | Object3 DeleteB Where;

DeleteB ::= FROM Object3 DeleteC;

DeleteC ::= COMA Object3 DeleteC
            |;

Server ::= PARENTESIS_APERTURA ID COMA CONSTANTE_ENTERA PARENTESIS_CIERRE;

Update ::= UPDATE Top Object3 SET UpdateA FromUpdate Where;
UpdateA ::= ID ASIGNACION UpdateB UpdateC;
UpdateB ::= DEFAULT
            | Expresion;
UpdateC ::= COMA UpdateA UpdateC
            |;
FromUpdate ::= 	FROM Object3 DeleteC
                |;
FromSelect ::=  FROM Object3 Alias Join FromSelectA
                |;
FromSelectA ::= COMA Object3 Alias Join
                |;

Join ::=    Type JOIN Object3 Alias ON SearchCondition Join
            |;
Type ::=    INNER
            | RIGHT Outer
            | LEFT Outer
            | FULL Outer
            |;
Outer ::=   OUTER
            |;

Create ::= CREATE CreateA;
CreateA ::= CreateTable
            | CreateDB
            | CreateIndex
            | CreateUser
            | CreateView
            | Procedure
            | Function;

CreateUser ::=  USER IDENTIFICADOR;

CreateDB ::=    DATABASE ID CreateDBA;

CreateDBA ::=   CreateDBB COLLATEDB;

CreateDBB ::=   ON Primary FileSpecs
                |;
Primary ::= PRIMARY
            |;
FileSpecs ::=   FileSpec COMA FileSpecs
                | FileSpec;
FileSpec ::=    PARENTESIS_APERTURA NAME ASIGNACION CONSTANTE_CADENA COMA FILENAME ASIGNACION CONSTANTE_CADENA Optionals PARENTESIS_CIERRE;
COLLATEDB ::=   COLLATE ID
                |;
Optionals ::=   COMA Optional Optionals_A
                |;
Optionals_A ::= Optionals
                |;

Optional ::=    Size
                | Maxsize
                | Filegrowth;

Size ::=    SIZE ASIGNACION CONSTANTE_ENTERA Size_A;
Size_A ::=  KB
            | MB
            | GB
            | TB
            |;
Maxsize ::= MAXSIZE ASIGNACION Maxsize_A;
Maxsize_A ::=   CONSTANTE_ENTERA Size_A
                | UNLIMITED;
Filegrowth ::=  FILEGROWTH ASIGNACION CONSTANTE_ENTERA Filegrowth_A;
Filegrowth_A ::=    Size_A
                    | MODULAR
                    |;

CreateView ::=  VIEW Object2 AS Select;
CreateIndex ::= CreateIndexA ColumnConstrC INDEX ID ON Object3 ColumnIndex IncludeIndex Where OptionalOn;
CreateIndexA ::=    UNIQUE
                    |;
ColumnIndex ::= PARENTESIS_APERTURA ColumnIndexA PARENTESIS_CIERRE;
ColumnIndexA ::=    ID OrderB ColumnIndexB;
ColumnIndexB ::=    COMA ID OrderB ColumnIndexB
                    |;
IncludeIndex ::=    INCLUDE ColumnList
                    |;

OptionalOn ::=  ON ID PARENTESIS_APERTURA ID PARENTESIS_CIERRE
                |;
CreateTable ::= TABLE Object3 PARENTESIS_APERTURA CNC CNCA PARENTESIS_CIERRE FileGroup;
FileGroup ::=   ON PRIMARY
                |;
NFR ::= NOT FOR REPLICATION
        |;
CNC ::=	ColumnDef
        | TableConstr
        | TableIndex;
CNCA ::=    COMA CNC CNCA
            |;

ColumnDef ::=   ID Tipo_dato ColumnDefA ColumnDefB ColumnDefE NFR ColumnDefG ColumnDefH ColumnConstr;
ColumnDefA ::=  COLLATE ID
                |;
ColumnDefB ::=  CONSTRAINT ID ColumnDefC
                |;
ColumnDefC ::=  DEFAULT ColumnDefD
                |;
ColumnDefD ::= 	CONSTANTE_ENTERA
                | CONSTANTE_FLOTANTE
                | CONSTANTE_CADENA
                | CONSTANTE_BOOLEANA
                | NULL;
ColumnDefE ::=  IDENTITY ColumnDefF
                |;
ColumnDefF ::=  PARENTESIS_APERTURA CONSTANTE_ENTERA COMA CONSTANTE_ENTERA PARENTESIS_CIERRE
                |;
ColumnDefG ::= 	NULL
                | NOT NULL
                |;
ColumnDefH ::=  ROWGUIDCOL
                |;
ColumnConstr ::=    ColumnConstrA ColumnConstrB ColumnConstr
                    |;
ColumnConstrA ::=   CONSTRAINT ID
                    |;
ColumnConstrB ::=   PRIMARY KEY ColumnConstrC 
                    | UNIQUE ColumnConstrC
                    | ColumnConstrD REFERENCES Object2 ColumnConstrE ColumnConstrF ColumnConstrG NFR
                    | CHECK NFR PARENTESIS_APERTURA SearchCondition PARENTESIS_CIERRE;
ColumnConstrC ::=   CLUSTERED
                    | NONCLUSTERED
                    |;
ColumnConstrD ::=   FOREIGN KEY
                    |;
ColumnConstrE ::=   PARENTESIS_APERTURA ID PARENTESIS_CIERRE
                    |;
ColumnConstrF ::=   ON DELETE ColumnConstrI
                    |;
ColumnConstrG ::=   ON UPDATE ColumnConstrI
                    |;
ColumnConstrH ::=   NULL
                    | DEFAULT;
ColumnConstrI ::=   CASCADE
                    | SET ColumnConstrH;
TableConstr ::= ColumnConstrA TableConstrA;
TableConstrA ::=    PRIMARY KEY ColumnConstrC TableConstrB
                    | UNIQUE ColumnConstrC TableConstrB
                    | FOREIGN KEY TableConstrD REFERENCES Object2 ColumnConstrE ColumnConstrF ColumnConstrG NFR
                    | CHECK NFR PARENTESIS_APERTURA SearchCondition PARENTESIS_CIERRE;
TableConstrB ::=    PARENTESIS_APERTURA ID OrderB TableConstrC PARENTESIS_CIERRE;
TableConstrC ::=    COMA ID OrderB TableConstrC
                    |;
TableConstrD ::=    PARENTESIS_APERTURA ID TableConstrE PARENTESIS_CIERRE;
TableConstrE ::=    COMA ID TableConstrE
                    |;
TableIndex ::=  INDEX ID ColumnConstrC TableConstrB;
Alter ::=   ALTER AlterA;
AlterA ::=  AlterTable
            | AlterUser
            | AlterDatabase
            | AlterView
            | Procedure
            | Function;

AlterDatabase ::=   DATABASE AlterDBA AlterDBB;
AlterDBA ::=    ID
                | CURRENT;
AlterDBB ::=    COLLATE ID
                | SET ROLLBACK IMMEDIATE;
AlterUser ::=   USER ID;
AlterView  ::=  VIEW Object2 AlterViewA AS Select;
AlterViewA ::=  ColumnList
                |;
AlterTable ::=  TABLE Object3 AlterTableA;
AlterTableA ::= AlterColumn
                | ADD CNC CNCA
                | AlterTableDrop;
AlterColumn ::= ALTER COLUMN ID AlterColumnC;
AlterColumnC ::=    AlterColumnA
                    | AlterColumnD AlterColumnE;
AlterColumnA ::=    Tipo_dato ColumnDefA ColumnDefG;
AlterColumnD ::=    ADD
                    | DROP;
AlterColumnE ::=    ROWGUIDCOL
                    | NOT FOR REPLICATION;
AlterTableDrop ::=  DROP AlterTableDropA AlterTableDropC;
AlterTableDropA ::= AlterTableDropB IFE ID
                    | COLUMN IFE ID;
AlterTableDropB ::= CONSTRAINT
                    |;
AlterTableDropC ::= COMA AlterTableDropD AlterTableDropC
                    |;

AlterTableDropD ::= ID
                    | AlterTableDropA;

BeginTran ::= BEGIN TranName BeginTranA;
BeginTranA ::=	Name BeginTranB
                |;
BeginTranB ::= 	WITH MARK BeginTranC
                |;
BeginTranC ::=	CONSTANTE_CADENA
                |;
SavePoint ::=   SAVE TranName Name;
Name ::=    ID
            | Variable;
NameA ::=   Name
            |;
TranName ::=    TRAN
                | TRANSACTION;
Commit ::=  COMMIT CommitA;
CommitA ::= TranName NameA
            |;
Rollback ::=    ROLLBACK CommitA;
Procedure ::=   OrAlter SP_Reservada Object2 NumSP ParamsSP ProcOption ReplicationSP AS StmtSP;
SP_Reservada ::=    PROC
                    | PROCEDURE;
NumSP ::=   PYC CONSTANTE_ENTERA
            |;
ParamsSP ::=    ParamsA_SP
                |;
ParamsA_SP ::=  Variable TipoD_SP ParamsB_SP;
ParamsB_SP ::=  COMA ParamsA_SP
                |;
TipoD_SP ::=    Tipo_datoA TipoD_SP1 TipoD_SP2
                | CURSOR VARYING TipoD_SP3
                | ID READONLY;
TipoD_SP1 ::=   ASIGNACION DEFAULT
                |;
TipoD_SP2 ::=   TipoD_SP3
                |;
TipoD_SP3 ::=   OUT
                | OUTPUT;
ProcOption ::=  WITH ProcOption1
                |;
ProcOption1 ::= ProcOption2 ProcOptionRec;
ProcOption2 ::= ENCRYPTION
                | RECOMPILE
                | ClauseExec AS Clause;
ClauseExec ::=  EXECUTE
                | EXEC;
ProcOptionRec ::=   COMA ProcOption1
                    |;
Clause ::=  CALLER
            | SELF
            | OWNER
            | ID;
ReplicationSP ::=   FOR REPLICATION
                    |;
StartSP ::= BEGIN StmtSP END
            | StmtSP;
StmtSP ::=  DML Final StmtSP1;
StmtSP1 ::= DML Final StmtSP2
            |;
StmtSP2 ::= DML Final
            |;