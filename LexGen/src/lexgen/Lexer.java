/* The following code was generated by JFlex 1.7.0 */

package lexgen;
import static lexgen.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/Users/jmoll/Documents/URL/201902/Compis/ProyectoCompiladores/LexGen/src/lexgen/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\73\1\3\1\1\22\0\1\3\1\56\1\0"+
    "\1\52\1\0\1\62\1\57\1\72\1\45\1\46\1\5\1\61\1\64"+
    "\1\6\1\63\1\4\2\70\1\36\7\70\1\0\1\65\1\53\1\54"+
    "\1\55\1\0\1\51\1\17\1\34\1\7\1\21\1\16\1\31\1\35"+
    "\1\14\1\15\1\42\1\40\1\26\1\33\1\24\1\13\1\41\1\25"+
    "\1\11\1\12\1\30\1\10\1\23\1\22\1\32\1\20\1\37\1\43"+
    "\1\0\1\44\1\0\1\27\1\0\4\66\1\71\25\66\1\47\1\60"+
    "\1\50\7\0\1\73\44\0\1\66\12\0\1\66\4\0\1\66\5\0"+
    "\27\66\1\0\37\66\1\0\u01ca\66\4\0\14\66\16\0\5\66\7\0"+
    "\1\66\1\0\1\66\201\0\5\66\1\0\2\66\2\0\4\66\1\0"+
    "\1\66\6\0\1\66\1\0\3\66\1\0\1\66\1\0\24\66\1\0"+
    "\123\66\1\0\213\66\10\0\246\66\1\0\46\66\2\0\1\66\7\0"+
    "\47\66\110\0\33\66\5\0\3\66\55\0\53\66\25\0\12\67\4\0"+
    "\2\66\1\0\143\66\1\0\1\66\17\0\2\66\7\0\2\66\12\67"+
    "\3\66\2\0\1\66\20\0\1\66\1\0\36\66\35\0\131\66\13\0"+
    "\1\66\16\0\12\67\41\66\11\0\2\66\4\0\1\66\5\0\26\66"+
    "\4\0\1\66\11\0\1\66\3\0\1\66\27\0\31\66\107\0\25\66"+
    "\1\0\10\66\106\0\66\66\3\0\1\66\22\0\1\66\7\0\12\66"+
    "\4\0\12\67\1\0\20\66\4\0\10\66\2\0\2\66\2\0\26\66"+
    "\1\0\7\66\1\0\1\66\3\0\4\66\3\0\1\66\20\0\1\66"+
    "\15\0\2\66\1\0\3\66\4\0\12\67\2\66\23\0\6\66\4\0"+
    "\2\66\2\0\26\66\1\0\7\66\1\0\2\66\1\0\2\66\1\0"+
    "\2\66\37\0\4\66\1\0\1\66\7\0\12\67\2\0\3\66\20\0"+
    "\11\66\1\0\3\66\1\0\26\66\1\0\7\66\1\0\2\66\1\0"+
    "\5\66\3\0\1\66\22\0\1\66\17\0\2\66\4\0\12\67\11\0"+
    "\1\66\13\0\10\66\2\0\2\66\2\0\26\66\1\0\7\66\1\0"+
    "\2\66\1\0\5\66\3\0\1\66\36\0\2\66\1\0\3\66\4\0"+
    "\12\67\1\0\1\66\21\0\1\66\1\0\6\66\3\0\3\66\1\0"+
    "\4\66\3\0\2\66\1\0\1\66\1\0\2\66\3\0\2\66\3\0"+
    "\3\66\3\0\14\66\26\0\1\66\25\0\12\67\25\0\10\66\1\0"+
    "\3\66\1\0\27\66\1\0\20\66\3\0\1\66\32\0\3\66\5\0"+
    "\2\66\4\0\12\67\20\0\1\66\4\0\10\66\1\0\3\66\1\0"+
    "\27\66\1\0\12\66\1\0\5\66\3\0\1\66\40\0\1\66\1\0"+
    "\2\66\4\0\12\67\1\0\2\66\22\0\10\66\1\0\3\66\1\0"+
    "\51\66\2\0\1\66\20\0\1\66\5\0\3\66\10\0\3\66\4\0"+
    "\12\67\12\0\6\66\5\0\22\66\3\0\30\66\1\0\11\66\1\0"+
    "\1\66\2\0\7\66\37\0\12\67\21\0\60\66\1\0\2\66\14\0"+
    "\7\66\11\0\12\67\47\0\2\66\1\0\1\66\2\0\2\66\1\0"+
    "\1\66\2\0\1\66\6\0\4\66\1\0\7\66\1\0\3\66\1\0"+
    "\1\66\1\0\1\66\2\0\2\66\1\0\4\66\1\0\2\66\11\0"+
    "\1\66\2\0\5\66\1\0\1\66\11\0\12\67\2\0\4\66\40\0"+
    "\1\66\37\0\12\67\26\0\10\66\1\0\44\66\33\0\5\66\163\0"+
    "\53\66\24\0\1\66\12\67\6\0\6\66\4\0\4\66\3\0\1\66"+
    "\3\0\2\66\7\0\3\66\4\0\15\66\14\0\1\66\1\0\12\67"+
    "\6\0\46\66\1\0\1\66\5\0\1\66\2\0\53\66\1\0\u014d\66"+
    "\1\0\4\66\2\0\7\66\1\0\1\66\1\0\4\66\2\0\51\66"+
    "\1\0\4\66\2\0\41\66\1\0\4\66\2\0\7\66\1\0\1\66"+
    "\1\0\4\66\2\0\17\66\1\0\71\66\1\0\4\66\2\0\103\66"+
    "\45\0\20\66\20\0\126\66\2\0\6\66\3\0\u026c\66\2\0\21\66"+
    "\1\0\32\66\5\0\113\66\6\0\10\66\7\0\15\66\1\0\4\66"+
    "\16\0\22\66\16\0\22\66\16\0\15\66\1\0\3\66\17\0\64\66"+
    "\43\0\1\66\4\0\1\66\3\0\12\67\46\0\12\67\6\0\130\66"+
    "\10\0\5\66\2\0\42\66\1\0\1\66\5\0\106\66\12\0\37\66"+
    "\47\0\12\67\36\66\2\0\5\66\13\0\54\66\4\0\32\66\6\0"+
    "\12\67\46\0\27\66\11\0\65\66\53\0\12\67\6\0\12\67\15\0"+
    "\1\66\135\0\57\66\21\0\7\66\4\0\12\67\51\0\36\66\15\0"+
    "\2\66\12\67\54\66\32\0\44\66\34\0\12\67\3\0\3\66\12\67"+
    "\44\66\2\0\11\66\140\0\4\66\1\0\4\66\3\0\2\66\11\0"+
    "\300\66\100\0\u0116\66\2\0\6\66\2\0\46\66\2\0\6\66\2\0"+
    "\10\66\1\0\1\66\1\0\1\66\1\0\1\66\1\0\37\66\2\0"+
    "\65\66\1\0\7\66\1\0\1\66\3\0\3\66\1\0\7\66\3\0"+
    "\4\66\2\0\6\66\4\0\15\66\5\0\3\66\1\0\7\66\53\0"+
    "\1\73\1\73\107\0\1\66\15\0\1\66\20\0\15\66\145\0\1\66"+
    "\4\0\1\66\2\0\12\66\1\0\1\66\3\0\5\66\6\0\1\66"+
    "\1\0\1\66\1\0\1\66\1\0\4\66\1\0\13\66\2\0\4\66"+
    "\5\0\5\66\4\0\1\66\64\0\2\66\u0a7b\0\57\66\1\0\57\66"+
    "\1\0\205\66\6\0\4\66\3\0\2\66\14\0\46\66\1\0\1\66"+
    "\5\0\1\66\2\0\70\66\7\0\1\66\20\0\27\66\11\0\7\66"+
    "\1\0\7\66\1\0\7\66\1\0\7\66\1\0\7\66\1\0\7\66"+
    "\1\0\7\66\1\0\7\66\120\0\1\66\u01d5\0\2\66\52\0\5\66"+
    "\5\0\2\66\4\0\126\66\6\0\3\66\1\0\132\66\1\0\4\66"+
    "\5\0\51\66\3\0\136\66\21\0\33\66\65\0\20\66\u0200\0\u19b6\66"+
    "\112\0\u51d6\66\52\0\u048d\66\103\0\56\66\2\0\u010d\66\3\0\20\66"+
    "\12\67\2\66\24\0\57\66\20\0\37\66\2\0\106\66\61\0\11\66"+
    "\2\0\147\66\2\0\44\66\1\0\10\66\77\0\13\66\1\0\3\66"+
    "\1\0\4\66\1\0\27\66\35\0\64\66\16\0\62\66\34\0\12\67"+
    "\30\0\6\66\3\0\1\66\1\0\1\66\2\0\12\67\34\66\12\0"+
    "\27\66\31\0\35\66\7\0\57\66\34\0\1\66\12\67\6\0\5\66"+
    "\1\0\12\66\12\67\5\66\1\0\51\66\27\0\3\66\1\0\10\66"+
    "\4\0\12\67\6\0\27\66\3\0\1\66\3\0\62\66\1\0\1\66"+
    "\3\0\2\66\2\0\5\66\2\0\1\66\1\0\1\66\30\0\3\66"+
    "\2\0\13\66\7\0\3\66\14\0\6\66\2\0\6\66\2\0\6\66"+
    "\11\0\7\66\1\0\7\66\1\0\53\66\1\0\12\66\12\0\163\66"+
    "\15\0\12\67\6\0\u2ba4\66\14\0\27\66\4\0\61\66\u2104\0\u016e\66"+
    "\2\0\152\66\46\0\7\66\14\0\5\66\5\0\1\66\1\0\12\66"+
    "\1\0\15\66\1\0\5\66\1\0\1\66\1\0\2\66\1\0\2\66"+
    "\1\0\154\66\41\0\u016b\66\22\0\100\66\2\0\66\66\50\0\14\66"+
    "\164\0\5\66\1\0\207\66\23\0\12\67\7\0\32\66\6\0\32\66"+
    "\13\0\131\66\3\0\6\66\2\0\6\66\2\0\6\66\2\0\3\66"+
    "\43\0\14\66\1\0\32\66\1\0\23\66\1\0\2\66\1\0\17\66"+
    "\2\0\16\66\42\0\173\66\u0185\0\35\66\3\0\61\66\57\0\40\66"+
    "\20\0\21\66\1\0\10\66\6\0\46\66\12\0\36\66\2\0\44\66"+
    "\4\0\10\66\60\0\236\66\2\0\12\67\6\0\44\66\4\0\44\66"+
    "\4\0\50\66\10\0\64\66\234\0\u0137\66\11\0\26\66\12\0\10\66"+
    "\230\0\6\66\2\0\1\66\1\0\54\66\1\0\2\66\3\0\1\66"+
    "\2\0\27\66\12\0\27\66\11\0\37\66\101\0\23\66\1\0\2\66"+
    "\12\0\26\66\12\0\32\66\106\0\70\66\6\0\2\66\100\0\1\66"+
    "\17\0\4\66\1\0\3\66\1\0\33\66\54\0\35\66\3\0\35\66"+
    "\43\0\10\66\1\0\34\66\33\0\66\66\12\0\26\66\12\0\23\66"+
    "\15\0\22\66\156\0\111\66\67\0\63\66\15\0\63\66\u0310\0\65\66"+
    "\56\0\12\67\23\0\55\66\40\0\31\66\7\0\12\67\11\0\44\66"+
    "\17\0\12\67\20\0\43\66\3\0\1\66\14\0\60\66\16\0\4\66"+
    "\13\0\12\67\1\66\1\0\1\66\43\0\22\66\1\0\31\66\124\0"+
    "\7\66\1\0\1\66\1\0\4\66\1\0\17\66\1\0\12\66\7\0"+
    "\57\66\21\0\12\67\13\0\10\66\2\0\2\66\2\0\26\66\1\0"+
    "\7\66\1\0\2\66\1\0\5\66\3\0\1\66\22\0\1\66\14\0"+
    "\5\66\236\0\65\66\22\0\4\66\5\0\12\67\46\0\60\66\24\0"+
    "\2\66\1\0\1\66\10\0\12\67\246\0\57\66\51\0\4\66\44\0"+
    "\60\66\24\0\1\66\13\0\12\67\46\0\53\66\25\0\12\67\66\0"+
    "\32\66\26\0\12\67\u0166\0\100\66\12\67\25\0\1\66\u01c0\0\71\66"+
    "\u0107\0\11\66\1\0\45\66\21\0\1\66\17\0\12\67\30\0\36\66"+
    "\u0370\0\u039a\66\346\0\304\66\u0abc\0\u042f\66\u0fd1\0\u0247\66\u21b9\0\u0239\66"+
    "\7\0\37\66\1\0\12\67\146\0\36\66\22\0\60\66\20\0\4\66"+
    "\14\0\12\67\11\0\25\66\5\0\23\66\u0370\0\105\66\13\0\1\66"+
    "\102\0\15\66\100\0\1\66\37\0\u17ed\66\23\0\u02f3\66\u250d\0\2\66"+
    "\u0bfe\0\153\66\5\0\15\66\3\0\11\66\7\0\12\66\u1766\0\125\66"+
    "\1\0\107\66\1\0\2\66\2\0\1\66\2\0\2\66\2\0\4\66"+
    "\1\0\14\66\1\0\1\66\1\0\7\66\1\0\101\66\1\0\4\66"+
    "\2\0\10\66\1\0\7\66\1\0\34\66\1\0\4\66\1\0\5\66"+
    "\1\0\1\66\3\0\7\66\1\0\u0154\66\2\0\31\66\1\0\31\66"+
    "\1\0\37\66\1\0\31\66\1\0\37\66\1\0\31\66\1\0\37\66"+
    "\1\0\31\66\1\0\37\66\1\0\31\66\1\0\10\66\2\0\62\67"+
    "\u1000\0\305\66\73\0\104\66\14\0\12\67\u04a6\0\4\66\1\0\33\66"+
    "\1\0\2\66\1\0\1\66\2\0\1\66\1\0\12\66\1\0\4\66"+
    "\1\0\1\66\1\0\1\66\6\0\1\66\4\0\1\66\1\0\1\66"+
    "\1\0\1\66\1\0\3\66\1\0\2\66\1\0\1\66\2\0\1\66"+
    "\1\0\1\66\1\0\1\66\1\0\1\66\1\0\1\66\1\0\2\66"+
    "\1\0\1\66\2\0\4\66\1\0\7\66\1\0\4\66\1\0\4\66"+
    "\1\0\1\66\1\0\12\66\1\0\21\66\5\0\3\66\1\0\5\66"+
    "\1\0\21\66\u1144\0\ua6d7\66\51\0\u1035\66\13\0\336\66\2\0\u1682\66"+
    "\u295e\0\u021e\66\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05f0\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\20\6\1\7"+
    "\6\6\1\10\4\6\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\3\1\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\2\37\6"+
    "\1\33\1\34\4\6\1\35\1\6\1\36\1\37\11\6"+
    "\1\40\4\6\1\41\23\6\1\42\12\6\1\43\27\6"+
    "\1\44\1\6\1\45\2\6\1\46\13\6\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\0\1\32\21\6\1\62\25\6\1\63\7\6"+
    "\1\64\3\6\1\65\4\6\1\66\4\6\1\67\16\6"+
    "\1\70\6\6\1\71\7\6\1\72\1\73\1\6\1\74"+
    "\1\75\1\76\1\77\1\100\11\6\1\101\5\6\1\102"+
    "\21\6\1\103\24\6\1\104\14\6\1\105\6\6\1\106"+
    "\2\6\1\107\3\6\1\110\5\6\1\111\7\6\1\112"+
    "\1\6\2\113\1\46\2\6\1\114\11\6\1\115\2\6"+
    "\1\0\1\2\20\6\1\116\1\6\1\117\1\120\5\6"+
    "\1\121\7\6\1\122\1\6\1\123\6\6\1\124\1\125"+
    "\12\6\1\126\1\6\1\127\5\6\1\130\2\6\1\131"+
    "\16\6\1\132\1\133\1\6\1\134\1\6\1\135\14\6"+
    "\1\136\7\6\1\0\1\137\2\6\1\140\1\141\10\6"+
    "\1\142\1\143\1\144\4\6\1\145\3\6\1\146\1\6"+
    "\1\147\3\6\1\150\2\6\1\151\1\6\1\152\2\6"+
    "\1\153\1\154\1\6\1\155\5\6\1\156\3\6\1\157"+
    "\1\160\6\6\1\161\2\6\1\162\2\6\1\163\1\164"+
    "\1\6\1\165\1\6\1\166\2\6\1\167\2\6\1\170"+
    "\1\6\1\171\1\172\4\6\1\173\1\174\6\6\1\175"+
    "\12\6\1\176\1\6\1\177\2\6\1\200\10\6\1\201"+
    "\1\6\1\0\1\46\1\0\1\202\1\203\2\6\1\204"+
    "\14\6\1\205\1\206\1\32\2\6\1\207\1\6\1\210"+
    "\13\6\1\211\6\6\1\212\1\213\1\214\1\215\4\6"+
    "\1\216\4\6\1\217\33\6\1\220\6\6\1\221\1\6"+
    "\1\222\1\6\1\223\1\224\22\6\1\225\1\226\3\6"+
    "\1\227\1\230\4\6\1\0\11\6\1\231\21\6\1\232"+
    "\1\233\1\234\6\6\1\235\1\236\6\6\1\237\1\6"+
    "\1\240\1\241\1\242\2\6\1\243\14\6\1\244\3\6"+
    "\1\245\3\6\1\246\1\6\1\247\1\6\1\250\1\251"+
    "\1\6\1\252\1\253\1\6\1\254\1\255\1\6\1\256"+
    "\4\6\1\257\1\6\1\260\1\261\1\6\1\46\3\6"+
    "\1\262\1\6\1\263\5\6\1\264\4\6\1\265\1\266"+
    "\7\6\1\267\1\6\1\270\5\6\1\271\1\272\2\6"+
    "\1\273\2\6\1\274\13\6\1\275\1\276\1\6\1\277"+
    "\3\6\1\300\1\301\3\6\1\302\2\6\1\303\10\6"+
    "\1\304\5\6\1\305\6\6\1\306\3\6\1\307\3\6"+
    "\1\310\3\6\1\311\4\6\1\312\1\313\1\6\1\0"+
    "\1\314\1\315\3\6\1\316\4\6\1\317\1\320\10\6"+
    "\1\321\14\6\1\322\1\323\6\6\1\324\27\6\1\325"+
    "\1\326\1\327\1\330\1\6\1\331\1\6\1\332\1\333"+
    "\1\334\1\335\11\6\1\336\1\337\3\6\1\340\1\341"+
    "\3\6\1\342\1\343\3\6\1\344\1\345\2\6\1\346"+
    "\1\347\10\6\1\350\4\6\1\351\10\6\1\352\1\353"+
    "\1\354\2\6\1\355\12\6\1\356\3\6\1\357\5\6"+
    "\1\360\5\6\1\361\2\6\1\0\1\362\1\363\11\6"+
    "\1\364\1\365\5\6\1\366\2\6\1\367\3\6\1\370"+
    "\1\371\1\372\1\6\1\373\1\374\1\6\1\375\2\6"+
    "\1\376\2\6\1\377\4\6\1\u0100\1\u0101\10\6\1\u0102"+
    "\1\6\1\u0103\3\6\1\u0104\2\6\1\u0105\2\6\1\u0106"+
    "\1\6\1\u0107\1\u0108\2\6\1\u0109\2\6\1\u010a\1\u010b"+
    "\4\6\1\u010c\3\6\1\u010d\2\6\1\u010e\2\6\1\u010f"+
    "\1\u0110\1\6\1\u0111\1\u0112\6\6\1\u0113\4\6\1\u0114"+
    "\1\u0115\3\6\1\u0116\3\6\1\u0117\4\6\1\u0118\2\6"+
    "\1\u0119\4\6\1\u011a\2\6\1\u011b\1\u011c\2\6\1\u011d"+
    "\1\u011e\2\6\1\u011f\1\6\1\u0120\2\6\1\u0121\1\6"+
    "\1\u0122\1\u0123\1\6\1\u0124\3\6\1\u0125\1\u0126\1\u0127"+
    "\1\u0128\1\u0129\5\6\1\u012a\3\6\1\u012b\1\u012c\7\6"+
    "\1\u012d\1\u012e\7\6\1\u012f\1\6\1\u0130\1\6\1\u0131"+
    "\5\6\1\u0132\1\u0133\2\6\1\u0134\2\6\1\u0135\15\6"+
    "\1\u0136\2\6\1\u0137\3\6\1\u0138\1\u0139\1\u013a\1\u013b"+
    "\2\6\1\u013c\7\6\1\u013d\1\u013e\1\6\1\u013f\3\6"+
    "\1\u0140\1\6\1\u0141\1\6\1\u0142\7\6\1\u0143\1\6"+
    "\1\u0144\4\6\1\u0145\1\u0146\1\6\1\u0147\3\6\1\u0148"+
    "\1\u0149\1\u014a\1\6\1\u014b\10\6\1\u014c\1\6\1\u014d"+
    "\1\6\1\u014e\1\6\1\u014f\1\6\1\u0150\4\6\1\u0151"+
    "\1\6\1\u0152\2\6\1\u0153\1\u0154\1\u0155\14\6\1\u0156"+
    "\1\6\1\u0157\1\u0158\4\6\1\u0159\2\6\1\u015a\1\6"+
    "\1\u015b\1\u015c\6\6\1\u015d\1\u015e\3\6\1\u015f\1\u0160"+
    "\1\6\1\u0161\1\6\1\u0162\1\u0163\3\6\1\u0164\1\u0165"+
    "\1\u0166\2\6\1\u0167\4\6\1\u0168\1\u0169\1\u016a\4\6"+
    "\1\u016b\2\6\1\u016c\3\6\1\u016d\4\6\1\u016e\1\u016f"+
    "\2\6\1\u0170\1\6\1\u0171\1\u0172\1\6\1\u0173\1\u0174"+
    "\2\6\1\u0175\1\u0176\2\6\1\u0177\2\6\1\u0178\1\6"+
    "\1\u0179\1\6\1\u017a\5\6\1\u017b\1\6\1\u017c\6\6"+
    "\1\u017d\1\u017e\1\6\1\u017f\1\u0180\2\6\1\u0181\17\6"+
    "\1\u0182\1\6\1\u0183\6\6\1\u0184";

  private static int [] zzUnpackAction() {
    int [] result = new int[1592];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\74\0\264\0\74\0\360\0\u012c"+
    "\0\u0168\0\u01a4\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c"+
    "\0\u0348\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec"+
    "\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690\0\u06cc"+
    "\0\u0708\0\u0744\0\u0780\0\u07bc\0\74\0\u07f8\0\74\0\u0834"+
    "\0\74\0\74\0\u0870\0\u08ac\0\u08e8\0\u0924\0\u0960\0\u099c"+
    "\0\u09d8\0\74\0\74\0\74\0\74\0\74\0\u0a14\0\u0a50"+
    "\0\u0a8c\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30"+
    "\0\u0c6c\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10"+
    "\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4\0\u0ff0"+
    "\0\u102c\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194\0\u11d0"+
    "\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u1338\0\u1374\0\u13b0"+
    "\0\u13ec\0\u0474\0\u1428\0\u1464\0\u14a0\0\u14dc\0\u1518\0\u1554"+
    "\0\u1590\0\u15cc\0\u1608\0\u1644\0\u1680\0\u16bc\0\u16f8\0\u1734"+
    "\0\u0474\0\u1770\0\u17ac\0\u17e8\0\u1824\0\u1860\0\u189c\0\u18d8"+
    "\0\u1914\0\u1950\0\u198c\0\u19c8\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8"+
    "\0\u1af4\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c\0\u1c98"+
    "\0\u1cd4\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4\0\u1e00\0\u1e3c\0\u1e78"+
    "\0\u1eb4\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4\0\u1fe0\0\u201c\0\u2058"+
    "\0\u2094\0\u20d0\0\u210c\0\u2148\0\u2184\0\u21c0\0\u21fc\0\u2238"+
    "\0\u2274\0\u22b0\0\u22ec\0\u2328\0\u2364\0\u23a0\0\u23dc\0\u0474"+
    "\0\u2418\0\u2454\0\u2490\0\u24cc\0\u2508\0\u2544\0\u2580\0\u25bc"+
    "\0\u25f8\0\u2634\0\u2670\0\u26ac\0\u26e8\0\u2724\0\u2760\0\u279c"+
    "\0\74\0\74\0\74\0\74\0\74\0\74\0\74\0\74"+
    "\0\74\0\74\0\74\0\u27d8\0\u2814\0\u2850\0\u288c\0\u28c8"+
    "\0\u2904\0\u2940\0\u297c\0\u29b8\0\u29f4\0\u2a30\0\u2a6c\0\u2aa8"+
    "\0\u2ae4\0\u2b20\0\u2b5c\0\u2b98\0\u2bd4\0\u2c10\0\u2c4c\0\u2c88"+
    "\0\u2cc4\0\u2d00\0\u2d3c\0\u2d78\0\u2db4\0\u2df0\0\u2e2c\0\u2e68"+
    "\0\u2ea4\0\u2ee0\0\u2f1c\0\u2f58\0\u2f94\0\u2fd0\0\u300c\0\u3048"+
    "\0\u3084\0\u30c0\0\u30fc\0\u3138\0\u0474\0\u3174\0\u31b0\0\u31ec"+
    "\0\u3228\0\u3264\0\u32a0\0\u32dc\0\u3318\0\u3354\0\u3390\0\u33cc"+
    "\0\u3408\0\u3444\0\u3480\0\u34bc\0\u34f8\0\u3534\0\u3570\0\u35ac"+
    "\0\u35e8\0\u3624\0\u3660\0\u369c\0\u36d8\0\u3714\0\u3750\0\u378c"+
    "\0\u37c8\0\u3804\0\u3840\0\u387c\0\u38b8\0\u38f4\0\u3930\0\u396c"+
    "\0\u39a8\0\u39e4\0\u3a20\0\u3a5c\0\u3a98\0\u3ad4\0\u3b10\0\u3b4c"+
    "\0\u3b88\0\u3bc4\0\u3c00\0\u3c3c\0\u3c78\0\u3cb4\0\u3cf0\0\u3d2c"+
    "\0\u0474\0\u0474\0\u3d68\0\u0474\0\u0474\0\u0474\0\u0474\0\u3da4"+
    "\0\u3de0\0\u3e1c\0\u3e58\0\u3e94\0\u3ed0\0\u3f0c\0\u3f48\0\u3f84"+
    "\0\u3fc0\0\u3ffc\0\u4038\0\u4074\0\u40b0\0\u40ec\0\u4128\0\u0474"+
    "\0\u4164\0\u41a0\0\u41dc\0\u4218\0\u4254\0\u4290\0\u42cc\0\u4308"+
    "\0\u4344\0\u4380\0\u43bc\0\u43f8\0\u4434\0\u4470\0\u44ac\0\u44e8"+
    "\0\u4524\0\u0474\0\u4560\0\u459c\0\u45d8\0\u4614\0\u4650\0\u468c"+
    "\0\u46c8\0\u4704\0\u4740\0\u477c\0\u47b8\0\u47f4\0\u4830\0\u486c"+
    "\0\u48a8\0\u48e4\0\u4920\0\u495c\0\u4998\0\u49d4\0\u0474\0\u4a10"+
    "\0\u4a4c\0\u4a88\0\u4ac4\0\u4b00\0\u4b3c\0\u4b78\0\u4bb4\0\u4bf0"+
    "\0\u4c2c\0\u4c68\0\u4ca4\0\u4ce0\0\u4d1c\0\u4d58\0\u4d94\0\u4dd0"+
    "\0\u4e0c\0\u4e48\0\u0474\0\u4e84\0\u4ec0\0\u4efc\0\u4f38\0\u4f74"+
    "\0\u4fb0\0\u0474\0\u4fec\0\u5028\0\u5064\0\u50a0\0\u50dc\0\u5118"+
    "\0\u5154\0\u5190\0\u51cc\0\u5208\0\u5244\0\u5280\0\u52bc\0\u0474"+
    "\0\u52f8\0\u5334\0\u5370\0\u53ac\0\u53e8\0\u5424\0\u5460\0\u549c"+
    "\0\u54d8\0\u5514\0\u5550\0\u558c\0\u55c8\0\u5604\0\u5640\0\u567c"+
    "\0\u0474\0\u56b8\0\u56f4\0\u5730\0\u576c\0\u57a8\0\u57e4\0\u5820"+
    "\0\u585c\0\u5898\0\u58d4\0\u5910\0\u594c\0\u5988\0\u59c4\0\u5a00"+
    "\0\u5a3c\0\u5a78\0\u5ab4\0\u5af0\0\u5b2c\0\u5b68\0\u5ba4\0\u0474"+
    "\0\u0474\0\u5be0\0\u5c1c\0\u5c58\0\u5c94\0\u5cd0\0\u0474\0\u5d0c"+
    "\0\u5d48\0\u5d84\0\u5dc0\0\u5dfc\0\u5e38\0\u5e74\0\u0474\0\u5eb0"+
    "\0\u0474\0\u5eec\0\u5f28\0\u5f64\0\u5fa0\0\u5fdc\0\u6018\0\u6054"+
    "\0\u0474\0\u6090\0\u60cc\0\u6108\0\u6144\0\u6180\0\u61bc\0\u61f8"+
    "\0\u6234\0\u6270\0\u62ac\0\u0474\0\u62e8\0\u0474\0\u6324\0\u6360"+
    "\0\u639c\0\u63d8\0\u6414\0\u0474\0\u6450\0\u648c\0\u0474\0\u64c8"+
    "\0\u6504\0\u6540\0\u657c\0\u65b8\0\u65f4\0\u6630\0\u666c\0\u66a8"+
    "\0\u66e4\0\u6720\0\u675c\0\u6798\0\u67d4\0\u6810\0\u0474\0\u684c"+
    "\0\u6888\0\u68c4\0\u0474\0\u6900\0\u693c\0\u6978\0\u69b4\0\u69f0"+
    "\0\u6a2c\0\u6a68\0\u6aa4\0\u6ae0\0\u6b1c\0\u6b58\0\u6b94\0\u0474"+
    "\0\u6bd0\0\u6c0c\0\u6c48\0\u6c84\0\u6cc0\0\u6cfc\0\u6d38\0\u6d74"+
    "\0\u0474\0\u6db0\0\u6dec\0\u0474\0\u6e28\0\u6e64\0\u6ea0\0\u6edc"+
    "\0\u6f18\0\u6f54\0\u6f90\0\u6fcc\0\u7008\0\u0474\0\u0474\0\u0474"+
    "\0\u7044\0\u7080\0\u70bc\0\u70f8\0\u0474\0\u7134\0\u7170\0\u71ac"+
    "\0\u71e8\0\u7224\0\u0474\0\u7260\0\u729c\0\u72d8\0\u7314\0\u7350"+
    "\0\u738c\0\u0474\0\u73c8\0\u0474\0\u7404\0\u7440\0\u747c\0\u74b8"+
    "\0\u74f4\0\u0474\0\u7530\0\u756c\0\u75a8\0\u75e4\0\u7620\0\u765c"+
    "\0\u7698\0\u76d4\0\u7710\0\u0474\0\u0474\0\u774c\0\u7788\0\u77c4"+
    "\0\u7800\0\u783c\0\u7878\0\u0474\0\u78b4\0\u78f0\0\u0474\0\u792c"+
    "\0\u7968\0\u0474\0\u0474\0\u79a4\0\u0474\0\u79e0\0\u0474\0\u7a1c"+
    "\0\u7a58\0\u7a94\0\u7ad0\0\u7b0c\0\u0474\0\u7b48\0\u7b84\0\u7bc0"+
    "\0\u7bfc\0\u7c38\0\u7c74\0\u7cb0\0\u0474\0\u0474\0\u7cec\0\u7d28"+
    "\0\u7d64\0\u7da0\0\u7ddc\0\u7e18\0\u0474\0\u7e54\0\u7e90\0\u7ecc"+
    "\0\u7f08\0\u7f44\0\u7f80\0\u7fbc\0\u7ff8\0\u8034\0\u8070\0\u0474"+
    "\0\u80ac\0\u0474\0\u80e8\0\u8124\0\u0474\0\u8160\0\u819c\0\u81d8"+
    "\0\u8214\0\u8250\0\u828c\0\u82c8\0\u8304\0\u0474\0\u8340\0\u837c"+
    "\0\u83b8\0\u83f4\0\u0474\0\u0474\0\u8430\0\u846c\0\u84a8\0\u84e4"+
    "\0\u8520\0\u855c\0\u8598\0\u85d4\0\u8610\0\u864c\0\u8688\0\u86c4"+
    "\0\u8700\0\u873c\0\u8778\0\u0474\0\u0474\0\u576c\0\u87b4\0\u87f0"+
    "\0\u0474\0\u882c\0\u0474\0\u8868\0\u88a4\0\u88e0\0\u891c\0\u8958"+
    "\0\u8994\0\u89d0\0\u8a0c\0\u8a48\0\u8a84\0\u8ac0\0\u8afc\0\u8b38"+
    "\0\u8b74\0\u8bb0\0\u8bec\0\u8c28\0\u8c64\0\u0474\0\u0474\0\u0474"+
    "\0\u0474\0\u8ca0\0\u8cdc\0\u8d18\0\u8d54\0\u0474\0\u8d90\0\u8dcc"+
    "\0\u8e08\0\u8e44\0\u0474\0\u8e80\0\u8ebc\0\u8ef8\0\u8f34\0\u8f70"+
    "\0\u8fac\0\u8fe8\0\u9024\0\u9060\0\u909c\0\u90d8\0\u9114\0\u9150"+
    "\0\u918c\0\u91c8\0\u9204\0\u9240\0\u927c\0\u92b8\0\u92f4\0\u9330"+
    "\0\u936c\0\u93a8\0\u93e4\0\u9420\0\u945c\0\u9498\0\u0474\0\u94d4"+
    "\0\u9510\0\u954c\0\u9588\0\u95c4\0\u9600\0\u0474\0\u963c\0\u0474"+
    "\0\u9678\0\u0474\0\u0474\0\u96b4\0\u96f0\0\u972c\0\u9768\0\u97a4"+
    "\0\u97e0\0\u981c\0\u9858\0\u9894\0\u98d0\0\u990c\0\u9948\0\u9984"+
    "\0\u99c0\0\u99fc\0\u9a38\0\u9a74\0\u9ab0\0\u0474\0\u0474\0\u9aec"+
    "\0\u9b28\0\u9b64\0\u0474\0\u0474\0\u9ba0\0\u9bdc\0\u9c18\0\u9c54"+
    "\0\u9c90\0\u9ccc\0\u9d08\0\u9d44\0\u9d80\0\u9dbc\0\u9df8\0\u9e34"+
    "\0\u9e70\0\u9eac\0\u0474\0\u9ee8\0\u9f24\0\u9f60\0\u9f9c\0\u9fd8"+
    "\0\ua014\0\ua050\0\ua08c\0\ua0c8\0\ua104\0\ua140\0\ua17c\0\ua1b8"+
    "\0\ua1f4\0\ua230\0\ua26c\0\ua2a8\0\ua2e4\0\u0474\0\u0474\0\ua320"+
    "\0\ua35c\0\ua398\0\ua3d4\0\ua410\0\ua44c\0\ua488\0\u0474\0\ua4c4"+
    "\0\ua500\0\ua53c\0\ua578\0\ua5b4\0\ua5f0\0\u0474\0\ua62c\0\u0474"+
    "\0\u0474\0\u0474\0\ua668\0\ua6a4\0\u0474\0\ua6e0\0\ua71c\0\ua758"+
    "\0\ua794\0\ua7d0\0\ua80c\0\ua848\0\ua884\0\ua8c0\0\ua8fc\0\ua938"+
    "\0\ua974\0\ua9b0\0\ua9ec\0\uaa28\0\uaa64\0\u0474\0\uaaa0\0\uaadc"+
    "\0\uab18\0\u0474\0\uab54\0\u0474\0\uab90\0\u0474\0\u0474\0\uabcc"+
    "\0\u0474\0\u0474\0\uac08\0\u0474\0\u0474\0\uac44\0\u0474\0\uac80"+
    "\0\uacbc\0\uacf8\0\uad34\0\u0474\0\uad70\0\u0474\0\u0474\0\uadac"+
    "\0\u837c\0\uade8\0\uae24\0\uae60\0\u0474\0\uae9c\0\u0474\0\uaed8"+
    "\0\uaf14\0\uaf50\0\uaf8c\0\uafc8\0\u0474\0\ub004\0\ub040\0\ub07c"+
    "\0\ub0b8\0\u0474\0\u0474\0\ub0f4\0\ub130\0\ub16c\0\ub1a8\0\ub1e4"+
    "\0\ub220\0\ub25c\0\u0474\0\ub298\0\u0474\0\ub2d4\0\ub310\0\ub34c"+
    "\0\ub388\0\ub3c4\0\u0474\0\u0474\0\ub400\0\ub43c\0\ub478\0\ub4b4"+
    "\0\ub4f0\0\ub52c\0\ub568\0\ub5a4\0\ub5e0\0\ub61c\0\ub658\0\ub694"+
    "\0\ub6d0\0\ub70c\0\ub748\0\ub784\0\ub7c0\0\u0474\0\u0474\0\ub7fc"+
    "\0\ub838\0\ub874\0\ub8b0\0\ub8ec\0\ub928\0\ub964\0\ub9a0\0\ub9dc"+
    "\0\uba18\0\u0474\0\uba54\0\uba90\0\u0474\0\ubacc\0\ubb08\0\ubb44"+
    "\0\ubb80\0\ubbbc\0\ubbf8\0\ubc34\0\ubc70\0\u0474\0\ubcac\0\ubce8"+
    "\0\ubd24\0\ubd60\0\ubd9c\0\u0474\0\ubdd8\0\ube14\0\ube50\0\ube8c"+
    "\0\ubec8\0\ubf04\0\u0474\0\ubf40\0\ubf7c\0\ubfb8\0\u0474\0\ubff4"+
    "\0\uc030\0\uc06c\0\u0474\0\uc0a8\0\uc0e4\0\uc120\0\u0474\0\uc15c"+
    "\0\uc198\0\uc1d4\0\uc210\0\u0474\0\u0474\0\uc24c\0\uc288\0\u0474"+
    "\0\u0474\0\uc2c4\0\uc300\0\uc33c\0\u0474\0\uc378\0\uc3b4\0\uc3f0"+
    "\0\uc42c\0\u0474\0\u0474\0\uc468\0\uc4a4\0\uc4e0\0\uc51c\0\uc558"+
    "\0\uc594\0\uc5d0\0\uc60c\0\u0474\0\uc648\0\uc684\0\uc6c0\0\uc6fc"+
    "\0\uc738\0\uc774\0\uc7b0\0\uc7ec\0\uc828\0\uc864\0\uc8a0\0\uc8dc"+
    "\0\u0474\0\u0474\0\uc918\0\uc954\0\uc990\0\uc9cc\0\uca08\0\uca44"+
    "\0\u0474\0\uca80\0\ucabc\0\ucaf8\0\ucb34\0\ucb70\0\ucbac\0\ucbe8"+
    "\0\ucc24\0\ucc60\0\ucc9c\0\uccd8\0\ucd14\0\ucd50\0\ucd8c\0\ucdc8"+
    "\0\uce04\0\uce40\0\uce7c\0\uceb8\0\ucef4\0\ucf30\0\ucf6c\0\ucfa8"+
    "\0\u0474\0\u0474\0\u0474\0\u0474\0\ucfe4\0\u0474\0\ud020\0\u0474"+
    "\0\u0474\0\u0474\0\u0474\0\ud05c\0\ud098\0\ud0d4\0\ud110\0\ud14c"+
    "\0\ud188\0\ud1c4\0\ud200\0\ud23c\0\u0474\0\ud278\0\ud2b4\0\ud2f0"+
    "\0\ud32c\0\u0474\0\ud368\0\ud3a4\0\ud3e0\0\ud41c\0\u0474\0\u0474"+
    "\0\ud458\0\ud494\0\ud4d0\0\ud50c\0\u0474\0\ud548\0\ud584\0\u0474"+
    "\0\u0474\0\ud5c0\0\ud5fc\0\ud638\0\ud674\0\ud6b0\0\ud6ec\0\ud728"+
    "\0\ud764\0\u0474\0\ud7a0\0\ud7dc\0\ud818\0\ud854\0\u0474\0\ud890"+
    "\0\ud8cc\0\ud908\0\ud944\0\ud980\0\ud9bc\0\ud9f8\0\uda34\0\u0474"+
    "\0\uda70\0\u0474\0\udaac\0\udae8\0\u0474\0\udb24\0\udb60\0\udb9c"+
    "\0\udbd8\0\udc14\0\udc50\0\udc8c\0\udcc8\0\udd04\0\udd40\0\u0474"+
    "\0\udd7c\0\uddb8\0\uddf4\0\u0474\0\ude30\0\ude6c\0\udea8\0\udee4"+
    "\0\udf20\0\u0474\0\udf5c\0\udf98\0\udfd4\0\ue010\0\ue04c\0\u0474"+
    "\0\ue088\0\ue0c4\0\ue100\0\u0474\0\u0474\0\ue13c\0\ue178\0\ue1b4"+
    "\0\ue1f0\0\ue22c\0\ue268\0\ue2a4\0\ue2e0\0\ue31c\0\u0474\0\u0474"+
    "\0\ue358\0\ue394\0\ue3d0\0\ue40c\0\ue448\0\u0474\0\ue484\0\ue4c0"+
    "\0\u0474\0\ue4fc\0\ue538\0\ue574\0\u0474\0\u0474\0\u0474\0\ue5b0"+
    "\0\u0474\0\u0474\0\ue5ec\0\u0474\0\ue628\0\ue664\0\u0474\0\ue6a0"+
    "\0\ue6dc\0\u0474\0\ue718\0\ue754\0\ue790\0\ue7cc\0\u0474\0\u0474"+
    "\0\ue808\0\ue844\0\ue880\0\ue8bc\0\ue8f8\0\ue934\0\ue970\0\ue9ac"+
    "\0\u0474\0\ue9e8\0\u0474\0\uea24\0\uea60\0\uea9c\0\u0474\0\uead8"+
    "\0\ueb14\0\u0474\0\ueb50\0\ueb8c\0\u0474\0\uebc8\0\u0474\0\u0474"+
    "\0\uec04\0\uec40\0\u0474\0\uec7c\0\uecb8\0\u0474\0\uecf4\0\ued30"+
    "\0\ued6c\0\ueda8\0\uede4\0\u0474\0\uee20\0\uee5c\0\uee98\0\u0474"+
    "\0\ueed4\0\uef10\0\u0474\0\uef4c\0\uef88\0\u0474\0\u0474\0\uefc4"+
    "\0\u0474\0\u0474\0\uf000\0\uf03c\0\uf078\0\uf0b4\0\uf0f0\0\uf12c"+
    "\0\u0474\0\uf168\0\uf1a4\0\uf1e0\0\uf21c\0\u0474\0\u0474\0\uf258"+
    "\0\uf294\0\uf2d0\0\u0474\0\uf30c\0\uf348\0\uf384\0\u0474\0\uf3c0"+
    "\0\uf3fc\0\uf438\0\uf474\0\u0474\0\uf4b0\0\uf4ec\0\uf528\0\uf564"+
    "\0\uf5a0\0\uf5dc\0\uf618\0\u0474\0\uf654\0\uf690\0\74\0\u0474"+
    "\0\uf6cc\0\uf708\0\u0474\0\u0474\0\uf744\0\uf780\0\u0474\0\uf7bc"+
    "\0\u0474\0\uf7f8\0\uf834\0\u0474\0\uf870\0\uf8ac\0\u0474\0\uf8e8"+
    "\0\u0474\0\uf924\0\uf960\0\uf99c\0\u0474\0\u0474\0\u0474\0\u0474"+
    "\0\u0474\0\uf9d8\0\ufa14\0\ufa50\0\ufa8c\0\ufac8\0\u0474\0\ufb04"+
    "\0\ufb40\0\ufb7c\0\u0474\0\ufbb8\0\ufbf4\0\ufc30\0\ufc6c\0\ufca8"+
    "\0\ufce4\0\ufd20\0\ufd5c\0\u0474\0\u0474\0\ufd98\0\ufdd4\0\ufe10"+
    "\0\ufe4c\0\ufe88\0\ufec4\0\uff00\0\u0474\0\uff3c\0\uff78\0\uffb4"+
    "\0\u0474\0\ufff0\1\54\1\150\1\244\1\340\0\u0474\0\u0474"+
    "\1\u011c\1\u0158\0\u0474\1\u0194\1\u01d0\0\u0474\1\u020c\1\u0248"+
    "\1\u0284\1\u02c0\1\u02fc\1\u0338\1\u0374\1\u03b0\1\u03ec\1\u0428"+
    "\1\u0464\1\u04a0\1\u04dc\0\u0474\1\u0518\1\u0554\0\u0474\1\u0590"+
    "\1\u05cc\1\u0608\0\u0474\0\u0474\0\u0474\0\u0474\1\u0644\1\u0680"+
    "\0\u0474\1\u06bc\1\u06f8\1\u0734\1\u0770\1\u07ac\1\u07e8\1\u0824"+
    "\0\u0474\0\u0474\1\u0860\0\u0474\1\u089c\1\u08d8\1\u0914\0\u0474"+
    "\1\u0950\0\u0474\1\u098c\0\u0474\1\u09c8\1\u0a04\1\u0a40\1\u0a7c"+
    "\1\u0ab8\1\u0af4\1\u0b30\0\u0474\1\u0b6c\0\u0474\1\u0ba8\1\u0be4"+
    "\1\u0c20\1\u0c5c\1\u0c98\0\u0474\1\u0cd4\0\u0474\1\u0d10\1\u0d4c"+
    "\1\u0d88\0\u0474\0\u0474\0\u0474\1\u0dc4\0\u0474\1\u0e00\1\u0e3c"+
    "\1\u0e78\1\u0eb4\1\u0ef0\1\u0f2c\1\u0f68\1\u0fa4\0\u0474\1\u0fe0"+
    "\0\u0474\1\u101c\0\u0474\1\u1058\0\u0474\1\u1094\0\u0474\1\u10d0"+
    "\1\u110c\1\u1148\1\u1184\0\u0474\1\u11c0\0\u0474\1\u11fc\1\u1238"+
    "\0\u0474\0\u0474\0\u0474\1\u1274\1\u12b0\1\u12ec\1\u1328\1\u1364"+
    "\1\u13a0\1\u13dc\1\u1418\1\u1454\1\u1490\1\u14cc\1\u1508\0\u0474"+
    "\1\u1544\0\u0474\0\u0474\1\u1580\1\u15bc\1\u15f8\1\u1634\0\u0474"+
    "\1\u1670\1\u16ac\0\u0474\1\u16e8\0\u0474\0\u0474\1\u1724\1\u1760"+
    "\1\u179c\1\u17d8\1\u1814\1\u1850\0\u0474\0\u0474\1\u188c\1\u18c8"+
    "\1\u1904\0\u0474\0\u0474\1\u1940\0\u0474\1\u197c\0\u0474\0\u0474"+
    "\1\u19b8\1\u19f4\1\u1a30\0\u0474\0\u0474\0\u0474\1\u1a6c\1\u1aa8"+
    "\0\u0474\1\u1ae4\1\u1b20\1\u1b5c\1\u1b98\0\u0474\0\u0474\1\u1bd4"+
    "\1\u1c10\1\u1c4c\1\u1c88\1\u1cc4\0\u0474\1\u1d00\1\u1d3c\0\u0474"+
    "\1\u1d78\1\u1db4\1\u1df0\0\u0474\1\u1e2c\1\u1e68\1\u1ea4\1\u1ee0"+
    "\0\u0474\0\u0474\1\u1f1c\1\u1f58\0\u0474\1\u1f94\0\u0474\0\u0474"+
    "\1\u1fd0\0\u0474\0\u0474\1\u200c\1\u2048\0\u0474\0\u0474\1\u2084"+
    "\1\u20c0\0\u0474\1\u20fc\1\u2138\0\u0474\1\u2174\0\u0474\1\u21b0"+
    "\0\u0474\1\u21ec\1\u2228\1\u2264\1\u22a0\1\u22dc\0\u0474\1\u2318"+
    "\0\u0474\1\u2354\1\u2390\1\u23cc\1\u2408\1\u2444\1\u2480\0\u0474"+
    "\0\u0474\1\u24bc\0\u0474\0\u0474\1\u24f8\1\u2534\0\u0474\1\u2570"+
    "\1\u25ac\1\u25e8\1\u2624\1\u2660\1\u269c\1\u26d8\1\u2714\1\u2750"+
    "\1\u278c\1\u27c8\1\u2804\1\u2840\1\u287c\1\u28b8\0\u0474\1\u28f4"+
    "\0\u0474\1\u2930\1\u296c\1\u29a8\1\u29e4\1\u2a20\1\u2a5c\0\u0474";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1592];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\26\1\30\1\37"+
    "\1\26\1\67\77\0\1\4\76\0\1\70\74\0\1\71"+
    "\74\0\1\26\1\72\1\73\1\26\1\74\1\75\2\26"+
    "\1\76\6\26\1\77\14\26\23\0\4\26\11\0\3\26"+
    "\1\100\11\26\1\101\14\26\1\102\1\26\23\0\4\26"+
    "\11\0\1\26\1\103\2\26\1\104\1\26\1\105\1\106"+
    "\1\107\23\26\23\0\4\26\11\0\1\110\1\111\2\26"+
    "\1\112\1\113\1\114\1\115\1\116\1\117\4\26\1\120"+
    "\2\26\1\121\2\26\1\122\5\26\1\123\1\26\23\0"+
    "\4\26\11\0\1\124\1\125\1\126\10\26\1\127\1\130"+
    "\1\131\4\26\1\132\7\26\1\133\1\26\23\0\4\26"+
    "\11\0\4\26\1\134\1\26\1\135\1\26\1\136\23\26"+
    "\23\0\4\26\11\0\3\26\1\137\6\26\1\140\2\26"+
    "\1\141\4\26\1\142\1\26\1\143\7\26\23\0\4\26"+
    "\11\0\2\26\1\144\1\145\11\26\1\146\1\26\1\147"+
    "\3\26\1\150\10\26\23\0\4\26\11\0\1\151\1\152"+
    "\1\153\1\154\6\26\1\155\1\26\1\156\1\157\1\26"+
    "\1\160\1\26\1\161\3\26\1\162\6\26\23\0\4\26"+
    "\11\0\7\26\1\163\24\26\23\0\4\26\11\0\1\26"+
    "\1\164\1\165\1\26\1\166\1\26\1\167\1\170\1\171"+
    "\1\172\13\26\1\173\6\26\23\0\4\26\11\0\2\26"+
    "\1\174\1\26\1\175\1\176\1\177\1\26\1\200\23\26"+
    "\23\0\4\26\11\0\6\26\1\201\1\26\1\202\23\26"+
    "\23\0\4\26\11\0\1\203\1\204\2\26\1\205\2\26"+
    "\1\206\1\207\3\26\1\210\4\26\1\211\12\26\23\0"+
    "\4\26\11\0\34\26\23\0\4\26\11\0\4\26\1\212"+
    "\1\26\1\213\1\214\1\215\23\26\23\0\4\26\11\0"+
    "\34\30\23\0\4\30\11\0\2\26\1\216\1\217\1\220"+
    "\1\221\1\222\1\223\1\224\1\225\22\26\23\0\4\26"+
    "\11\0\1\26\1\226\1\227\1\26\1\230\1\26\1\231"+
    "\1\232\1\233\6\26\1\234\14\26\23\0\4\26\11\0"+
    "\24\26\1\235\7\26\23\0\4\26\11\0\4\26\1\236"+
    "\1\26\1\237\1\240\1\241\23\26\23\0\4\26\11\0"+
    "\1\26\1\242\1\243\1\26\1\244\1\26\1\245\1\246"+
    "\1\247\1\250\22\26\23\0\4\26\11\0\2\26\1\251"+
    "\1\26\1\252\2\26\1\253\7\26\1\254\14\26\23\0"+
    "\4\26\11\0\27\30\1\37\4\30\20\0\1\255\2\0"+
    "\2\30\1\37\1\30\11\0\4\26\1\256\27\26\23\0"+
    "\4\26\11\0\6\26\1\257\1\260\24\26\23\0\4\26"+
    "\11\0\1\26\1\261\1\262\1\26\1\263\1\26\1\264"+
    "\1\265\1\266\6\26\1\267\14\26\23\0\4\26\11\0"+
    "\4\26\1\270\27\26\23\0\4\26\46\0\1\271\75\0"+
    "\1\272\75\0\1\273\75\0\1\274\75\0\1\275\73\0"+
    "\1\276\73\0\1\277\73\0\1\300\76\0\1\301\74\0"+
    "\1\302\13\0\1\67\2\0\67\67\1\303\1\67\1\70"+
    "\2\304\2\70\1\305\66\70\1\71\1\3\1\4\71\71"+
    "\7\0\2\26\1\306\31\26\23\0\4\26\11\0\4\26"+
    "\1\307\2\26\1\310\24\26\23\0\4\26\11\0\1\26"+
    "\1\311\1\312\5\26\1\313\4\26\1\314\1\26\1\315"+
    "\4\26\1\316\7\26\23\0\4\26\11\0\7\26\1\317"+
    "\1\320\23\26\23\0\4\26\11\0\3\26\1\321\13\26"+
    "\1\322\1\26\1\323\12\26\23\0\4\26\11\0\1\26"+
    "\1\324\2\26\1\325\27\26\23\0\4\26\11\0\6\26"+
    "\1\326\1\327\1\330\23\26\23\0\4\26\11\0\6\26"+
    "\1\331\22\26\1\332\1\333\1\26\23\0\4\26\11\0"+
    "\12\26\1\334\17\26\1\335\1\26\23\0\4\26\11\0"+
    "\17\26\1\336\14\26\23\0\4\26\11\0\13\26\1\337"+
    "\3\26\1\340\14\26\23\0\4\26\11\0\26\26\1\341"+
    "\5\26\23\0\4\26\11\0\1\342\2\26\1\343\4\26"+
    "\1\344\3\26\1\345\2\26\1\346\1\26\1\347\1\350"+
    "\7\26\1\351\1\26\23\0\4\26\11\0\6\26\1\352"+
    "\25\26\23\0\4\26\11\0\2\26\1\353\2\26\1\354"+
    "\26\26\23\0\4\26\11\0\24\26\1\355\1\356\6\26"+
    "\23\0\4\26\11\0\24\26\1\357\7\26\23\0\4\26"+
    "\11\0\1\26\1\360\32\26\23\0\4\26\11\0\30\26"+
    "\1\361\3\26\23\0\4\26\11\0\1\362\2\26\1\363"+
    "\13\26\1\364\1\26\1\365\2\26\1\366\7\26\23\0"+
    "\4\26\11\0\14\26\1\367\17\26\23\0\4\26\11\0"+
    "\3\26\1\370\30\26\23\0\4\26\11\0\17\26\1\371"+
    "\14\26\23\0\4\26\11\0\10\26\1\372\23\26\23\0"+
    "\4\26\11\0\10\26\1\373\23\26\23\0\4\26\11\0"+
    "\10\26\1\374\23\26\23\0\4\26\11\0\21\26\1\375"+
    "\12\26\23\0\4\26\11\0\21\26\1\376\12\26\23\0"+
    "\4\26\11\0\12\26\1\377\21\26\23\0\4\26\11\0"+
    "\15\26\1\u0100\16\26\23\0\4\26\11\0\7\26\1\u0101"+
    "\24\26\23\0\4\26\11\0\17\26\1\u0102\14\26\23\0"+
    "\4\26\11\0\22\26\1\u0103\11\26\23\0\4\26\11\0"+
    "\7\26\1\u0104\11\26\1\u0105\12\26\23\0\4\26\11\0"+
    "\1\26\1\u0106\15\26\1\u0107\14\26\23\0\4\26\11\0"+
    "\7\26\1\u0108\24\26\23\0\4\26\11\0\14\26\1\u0109"+
    "\17\26\23\0\4\26\11\0\4\26\1\u010a\27\26\23\0"+
    "\4\26\11\0\7\26\1\u010b\24\26\23\0\4\26\11\0"+
    "\1\u010c\2\26\1\u010d\2\26\1\u010e\3\26\1\u010f\2\26"+
    "\1\u0110\1\26\1\u0111\1\26\1\u0112\10\26\1\u0113\1\26"+
    "\23\0\4\26\11\0\10\26\1\u0114\13\26\1\u0115\7\26"+
    "\23\0\4\26\11\0\2\26\1\u0116\31\26\23\0\4\26"+
    "\11\0\1\u0117\33\26\23\0\4\26\11\0\1\u0118\11\26"+
    "\1\u0119\21\26\23\0\4\26\11\0\3\26\1\u011a\30\26"+
    "\23\0\4\26\11\0\1\u011b\5\26\1\u011c\1\u011d\11\26"+
    "\1\u011e\12\26\23\0\4\26\11\0\21\26\1\u011f\12\26"+
    "\23\0\4\26\11\0\21\26\1\u0120\12\26\23\0\4\26"+
    "\11\0\7\26\1\u0121\24\26\23\0\4\26\11\0\1\u0122"+
    "\2\26\1\u0123\30\26\23\0\4\26\11\0\10\26\1\u0124"+
    "\1\26\1\u0125\21\26\23\0\4\26\11\0\26\26\1\u0126"+
    "\5\26\23\0\4\26\11\0\11\26\1\u0127\22\26\23\0"+
    "\4\26\11\0\17\26\1\u0128\1\26\1\u0129\12\26\23\0"+
    "\4\26\11\0\3\26\1\u012a\30\26\23\0\4\26\11\0"+
    "\10\26\1\u012b\23\26\23\0\4\26\11\0\24\26\1\u012c"+
    "\7\26\23\0\4\26\11\0\4\26\1\u012d\27\26\23\0"+
    "\4\26\11\0\1\26\1\u012e\22\26\1\u012f\7\26\23\0"+
    "\4\26\11\0\3\26\1\u0130\4\26\1\u0131\23\26\23\0"+
    "\4\26\11\0\1\u0132\2\26\1\u0133\4\26\1\u0134\4\26"+
    "\1\u0135\1\26\1\u0136\2\26\1\u0137\11\26\23\0\4\26"+
    "\11\0\11\26\1\u0138\7\26\1\u0139\12\26\23\0\4\26"+
    "\11\0\15\26\1\u013a\16\26\23\0\4\26\11\0\1\u013b"+
    "\33\26\23\0\4\26\11\0\6\26\1\u013c\25\26\23\0"+
    "\4\26\11\0\2\26\1\u013d\31\26\23\0\4\26\11\0"+
    "\6\26\1\u013e\1\u013f\24\26\23\0\4\26\11\0\21\26"+
    "\1\u0140\12\26\23\0\4\26\11\0\6\26\1\u0141\25\26"+
    "\23\0\4\26\11\0\7\26\1\u0142\24\26\23\0\4\26"+
    "\11\0\2\26\1\u0143\14\26\1\u0144\14\26\23\0\4\26"+
    "\11\0\5\26\1\u0145\26\26\23\0\4\26\11\0\17\26"+
    "\1\u0146\4\26\1\u0147\7\26\23\0\4\26\11\0\1\u0148"+
    "\14\26\1\u0149\3\26\1\u014a\12\26\23\0\4\26\11\0"+
    "\23\26\1\u014b\10\26\23\0\4\26\11\0\21\26\1\u014c"+
    "\2\26\1\u014d\7\26\23\0\4\26\11\0\10\26\1\u014e"+
    "\23\26\23\0\4\26\11\0\7\26\1\u014f\24\26\23\0"+
    "\4\26\11\0\1\u0150\7\26\1\u0151\2\26\1\u0152\20\26"+
    "\23\0\4\26\11\0\15\26\1\u0153\13\26\1\u0154\2\26"+
    "\23\0\4\26\11\0\10\26\1\u0155\3\26\1\u0156\5\26"+
    "\1\u0157\11\26\23\0\4\26\11\0\3\26\1\u0158\11\26"+
    "\1\u0159\16\26\23\0\4\26\11\0\1\26\1\u015a\4\26"+
    "\1\u015b\1\26\1\u015c\1\u015d\22\26\23\0\4\26\11\0"+
    "\7\26\1\u015e\24\26\23\0\4\26\11\0\32\26\1\u015f"+
    "\1\26\23\0\4\26\11\0\7\26\1\u0160\24\26\23\0"+
    "\4\26\11\0\15\26\1\u0161\6\26\1\u0162\7\26\23\0"+
    "\4\26\11\0\23\26\1\u0163\1\u0164\7\26\23\0\4\26"+
    "\11\0\25\26\1\u0165\6\26\23\0\4\26\11\0\32\26"+
    "\1\u0166\1\26\23\0\4\26\11\0\15\26\1\u0167\1\26"+
    "\1\u0168\14\26\23\0\4\26\11\0\4\26\1\u0169\2\26"+
    "\1\u016a\24\26\23\0\4\26\11\0\1\26\1\u016b\1\u016c"+
    "\31\26\23\0\4\26\11\0\2\26\1\u016d\14\26\1\u016e"+
    "\14\26\23\0\4\26\11\0\21\26\1\u016f\12\26\23\0"+
    "\4\26\11\0\3\26\1\u0170\13\26\1\u0171\14\26\23\0"+
    "\4\26\11\0\4\26\1\u0172\27\26\23\0\4\26\11\0"+
    "\17\26\1\u0173\14\26\23\0\4\26\11\0\12\26\1\u0174"+
    "\2\26\1\u0175\16\26\23\0\4\26\11\0\15\26\1\u0176"+
    "\16\26\23\0\4\26\11\0\2\26\1\u0177\31\26\23\0"+
    "\4\26\11\0\2\26\1\u0178\16\26\1\u0179\1\26\1\u017a"+
    "\10\26\23\0\4\26\11\0\17\26\1\u017b\14\26\23\0"+
    "\4\26\11\0\4\26\1\u017c\2\26\1\u017d\24\26\23\0"+
    "\4\26\11\0\21\26\1\u017e\12\26\23\0\4\26\11\0"+
    "\15\26\1\u017f\3\26\1\u0180\4\26\1\u0181\5\26\23\0"+
    "\4\26\11\0\21\26\1\u0182\4\26\1\u0183\5\26\23\0"+
    "\4\26\11\0\1\u0184\33\26\23\0\4\26\11\0\4\26"+
    "\1\u0185\3\26\1\u0186\23\26\23\0\4\26\11\0\21\26"+
    "\1\u0187\12\26\23\0\4\26\11\0\21\26\1\u0188\12\26"+
    "\23\0\4\26\11\0\4\26\1\u0189\27\26\23\0\4\26"+
    "\11\0\7\u018a\1\u018b\10\u018a\1\0\6\u018a\1\u018c\4\u018a"+
    "\23\0\1\u018a\1\0\1\u018c\1\u018b\11\0\15\26\1\u018d"+
    "\16\26\23\0\4\26\11\0\17\26\1\u018e\14\26\23\0"+
    "\4\26\11\0\11\26\1\u018f\22\26\23\0\4\26\11\0"+
    "\25\26\1\u0190\6\26\23\0\4\26\11\0\4\26\1\u0191"+
    "\1\26\1\u0192\1\u0193\24\26\23\0\4\26\11\0\3\26"+
    "\1\u0194\30\26\23\0\4\26\11\0\14\26\1\u0195\17\26"+
    "\23\0\4\26\11\0\2\26\1\u0196\31\26\23\0\4\26"+
    "\11\0\2\26\1\u0197\1\u0198\6\26\1\u0199\21\26\23\0"+
    "\4\26\11\0\10\26\1\u019a\23\26\23\0\4\26\11\0"+
    "\6\26\1\u019b\25\26\23\0\4\26\2\0\5\304\1\u019c"+
    "\66\304\1\70\2\304\1\70\1\u019d\1\305\66\70\7\0"+
    "\2\26\1\u019e\1\u019f\30\26\23\0\4\26\11\0\3\26"+
    "\1\u01a0\30\26\23\0\4\26\11\0\10\26\1\u01a1\23\26"+
    "\23\0\4\26\11\0\15\26\1\u01a2\16\26\23\0\4\26"+
    "\11\0\2\26\1\u01a3\31\26\23\0\4\26\11\0\17\26"+
    "\1\u01a4\14\26\23\0\4\26\11\0\3\26\1\u01a5\10\26"+
    "\1\u01a6\1\u01a7\3\26\1\u01a8\12\26\23\0\4\26\11\0"+
    "\1\26\1\u01a9\15\26\1\u01aa\14\26\23\0\4\26\11\0"+
    "\24\26\1\u01ab\5\26\1\u01ac\1\26\23\0\4\26\11\0"+
    "\1\u01ad\33\26\23\0\4\26\11\0\2\26\1\u01ae\31\26"+
    "\23\0\4\26\11\0\1\u01af\6\26\1\u01b0\11\26\1\u01b1"+
    "\12\26\23\0\4\26\11\0\17\26\1\u01b2\14\26\23\0"+
    "\4\26\11\0\10\26\1\u01b3\23\26\23\0\4\26\11\0"+
    "\3\26\1\u01b4\30\26\23\0\4\26\11\0\3\26\1\u01b5"+
    "\30\26\23\0\4\26\11\0\15\26\1\u01b6\16\26\23\0"+
    "\4\26\11\0\2\26\1\u01b7\31\26\23\0\4\26\11\0"+
    "\26\26\1\u01b8\5\26\23\0\4\26\11\0\4\26\1\u01b9"+
    "\11\26\1\u01ba\15\26\23\0\4\26\11\0\15\26\1\u01bb"+
    "\16\26\23\0\4\26\11\0\6\26\1\u01bc\25\26\23\0"+
    "\4\26\11\0\10\26\1\u01bd\23\26\23\0\4\26\11\0"+
    "\7\26\1\u01be\24\26\23\0\4\26\11\0\7\26\1\u01bf"+
    "\24\26\23\0\4\26\11\0\1\u01c0\2\26\1\u01c1\10\26"+
    "\1\u01c2\11\26\1\u01c3\5\26\23\0\4\26\11\0\17\26"+
    "\1\u01c4\14\26\23\0\4\26\11\0\5\26\1\u01c5\26\26"+
    "\23\0\4\26\11\0\4\26\1\u01c6\27\26\23\0\4\26"+
    "\11\0\21\26\1\u01c7\12\26\23\0\4\26\11\0\12\26"+
    "\1\u01c8\4\26\1\u01c9\14\26\23\0\4\26\11\0\4\26"+
    "\1\u01ca\2\26\1\u01cb\24\26\23\0\4\26\11\0\10\26"+
    "\1\u01cc\23\26\23\0\4\26\11\0\1\26\1\u01cd\32\26"+
    "\23\0\4\26\11\0\7\26\1\u01ce\24\26\23\0\4\26"+
    "\11\0\17\26\1\u01cf\14\26\23\0\4\26\11\0\3\26"+
    "\1\u01d0\30\26\23\0\4\26\11\0\4\26\1\u01d1\27\26"+
    "\23\0\4\26\11\0\7\26\1\u01d2\24\26\23\0\4\26"+
    "\11\0\3\26\1\u01d3\30\26\23\0\4\26\11\0\7\26"+
    "\1\u01d4\24\26\23\0\4\26\11\0\21\26\1\u01d5\12\26"+
    "\23\0\4\26\11\0\7\26\1\u01d6\24\26\23\0\4\26"+
    "\11\0\1\26\1\u01d7\2\26\1\u01d8\14\26\1\u01d9\12\26"+
    "\23\0\4\26\11\0\3\26\1\u01da\30\26\23\0\4\26"+
    "\11\0\7\26\1\u01db\12\26\1\u01dc\11\26\23\0\4\26"+
    "\11\0\1\26\1\u01dd\32\26\23\0\4\26\11\0\10\26"+
    "\1\u01de\23\26\23\0\4\26\11\0\7\26\1\u01df\24\26"+
    "\23\0\4\26\11\0\21\26\1\u01e0\12\26\23\0\4\26"+
    "\11\0\1\u01e1\2\26\1\u01e2\3\26\1\u01e3\3\26\1\u01e4"+
    "\4\26\1\u01e5\13\26\23\0\4\26\11\0\21\26\1\u01e6"+
    "\12\26\23\0\4\26\11\0\17\26\1\u01e7\14\26\23\0"+
    "\4\26\11\0\1\u01e8\33\26\23\0\4\26\11\0\7\26"+
    "\1\u01e9\24\26\23\0\4\26\11\0\7\26\1\u01ea\22\26"+
    "\1\u01eb\1\26\23\0\4\26\11\0\7\26\1\u01ec\24\26"+
    "\23\0\4\26\11\0\7\26\1\u01ed\24\26\23\0\4\26"+
    "\11\0\2\26\1\u01ee\31\26\23\0\4\26\11\0\11\26"+
    "\1\u01ef\22\26\23\0\4\26\11\0\3\26\1\u01f0\30\26"+
    "\23\0\4\26\11\0\15\26\1\u01f1\16\26\23\0\4\26"+
    "\11\0\6\26\1\u01f2\25\26\23\0\4\26\11\0\2\26"+
    "\1\u01f3\31\26\23\0\4\26\11\0\12\26\1\u01f4\21\26"+
    "\23\0\4\26\11\0\2\26\1\u01f5\31\26\23\0\4\26"+
    "\11\0\6\26\1\u01f6\25\26\23\0\4\26\11\0\17\26"+
    "\1\u01f7\14\26\23\0\4\26\11\0\15\26\1\u01f8\16\26"+
    "\23\0\4\26\11\0\17\26\1\u01f9\14\26\23\0\4\26"+
    "\11\0\7\26\1\u01fa\24\26\23\0\4\26\11\0\21\26"+
    "\1\u01fb\12\26\23\0\4\26\11\0\6\26\1\u01fc\1\u01fd"+
    "\24\26\23\0\4\26\11\0\7\26\1\u01fe\24\26\23\0"+
    "\4\26\11\0\6\26\1\u01ff\25\26\23\0\4\26\11\0"+
    "\4\26\1\u0200\2\26\1\u0201\24\26\23\0\4\26\11\0"+
    "\1\26\1\u0202\32\26\23\0\4\26\11\0\26\26\1\u0203"+
    "\5\26\23\0\4\26\11\0\7\26\1\u0204\24\26\23\0"+
    "\4\26\11\0\17\26\1\u0205\14\26\23\0\4\26\11\0"+
    "\10\26\1\u0206\23\26\23\0\4\26\11\0\2\26\1\u0207"+
    "\31\26\23\0\4\26\10\0\1\u0208\34\26\23\0\4\26"+
    "\11\0\7\26\1\u0209\24\26\23\0\4\26\11\0\7\26"+
    "\1\u020a\24\26\23\0\4\26\11\0\3\26\1\u020b\15\26"+
    "\1\u020c\12\26\23\0\4\26\11\0\1\u020d\33\26\23\0"+
    "\4\26\11\0\2\26\1\u020e\4\26\1\u020f\24\26\23\0"+
    "\4\26\11\0\6\26\1\u0210\25\26\23\0\4\26\11\0"+
    "\5\26\1\u0211\26\26\23\0\4\26\11\0\7\26\1\u0212"+
    "\24\26\23\0\4\26\11\0\4\26\1\u0213\27\26\23\0"+
    "\4\26\11\0\7\26\1\u0214\24\26\23\0\4\26\11\0"+
    "\4\26\1\u0215\27\26\23\0\4\26\11\0\2\26\1\u0216"+
    "\31\26\23\0\4\26\11\0\32\26\1\u0217\1\26\23\0"+
    "\4\26\11\0\32\26\1\u0218\1\26\23\0\4\26\11\0"+
    "\25\26\1\u0219\6\26\23\0\4\26\11\0\10\26\1\u021a"+
    "\23\26\23\0\4\26\11\0\1\u021b\20\26\1\u021c\7\26"+
    "\1\u021d\2\26\23\0\4\26\11\0\26\26\1\u021e\5\26"+
    "\23\0\4\26\11\0\6\26\1\u021f\10\26\1\u0220\14\26"+
    "\23\0\4\26\11\0\1\u0221\33\26\23\0\4\26\11\0"+
    "\17\26\1\u0222\14\26\23\0\4\26\11\0\11\26\1\u0223"+
    "\22\26\23\0\4\26\11\0\7\26\1\u0224\24\26\23\0"+
    "\4\26\11\0\7\26\1\u0225\1\u0226\23\26\23\0\4\26"+
    "\11\0\7\26\1\u0227\1\u0228\23\26\23\0\4\26\11\0"+
    "\10\26\1\u0229\23\26\23\0\4\26\11\0\1\u022a\33\26"+
    "\23\0\4\26\11\0\21\26\1\u022b\12\26\23\0\4\26"+
    "\11\0\31\26\1\u022c\2\26\23\0\4\26\11\0\17\26"+
    "\1\u022d\14\26\23\0\4\26\11\0\2\26\1\u022e\12\26"+
    "\1\u022f\16\26\23\0\4\26\11\0\5\26\1\u0230\26\26"+
    "\23\0\4\26\11\0\21\26\1\u0231\12\26\23\0\4\26"+
    "\11\0\13\26\1\u0232\20\26\23\0\4\26\11\0\1\u0233"+
    "\10\26\1\u0234\13\26\1\u0235\6\26\23\0\4\26\11\0"+
    "\1\26\1\u0236\32\26\23\0\4\26\11\0\10\26\1\u0237"+
    "\23\26\23\0\4\26\11\0\17\26\1\u0238\14\26\23\0"+
    "\4\26\11\0\7\26\1\u0239\24\26\23\0\4\26\11\0"+
    "\5\26\1\u023a\26\26\23\0\4\26\11\0\1\u023b\6\26"+
    "\1\u023c\24\26\23\0\4\26\11\0\21\26\1\u023d\12\26"+
    "\23\0\4\26\11\0\1\26\1\u023e\4\26\1\u023f\25\26"+
    "\23\0\4\26\11\0\7\26\1\u0240\24\26\23\0\4\26"+
    "\11\0\2\26\1\u0241\31\26\23\0\4\26\11\0\23\26"+
    "\1\u0242\10\26\23\0\4\26\11\0\10\26\1\u0243\23\26"+
    "\23\0\4\26\11\0\12\26\1\u0244\21\26\23\0\4\26"+
    "\11\0\7\26\1\u0245\24\26\23\0\4\26\11\0\7\26"+
    "\1\u0246\24\26\23\0\4\26\11\0\7\26\1\u0247\24\26"+
    "\23\0\4\26\11\0\12\26\1\u0248\21\26\23\0\4\26"+
    "\11\0\7\26\1\u0249\24\26\23\0\4\26\11\0\21\26"+
    "\1\u024a\12\26\23\0\4\26\11\0\21\26\1\u024b\12\26"+
    "\23\0\4\26\11\0\26\26\1\u024c\5\26\23\0\4\26"+
    "\11\0\7\26\1\u024d\5\26\1\u024e\16\26\23\0\4\26"+
    "\11\0\24\26\1\u024f\1\26\1\u0250\5\26\23\0\4\26"+
    "\11\0\6\26\1\u0251\6\26\1\u0252\16\26\23\0\4\26"+
    "\11\0\20\26\1\u0253\13\26\23\0\4\26\11\0\16\26"+
    "\1\u0254\15\26\23\0\4\26\11\0\15\26\1\u0255\16\26"+
    "\23\0\4\26\11\0\11\26\1\u0256\22\26\23\0\4\26"+
    "\11\0\7\26\1\u0257\24\26\23\0\4\26\11\0\21\26"+
    "\1\u0258\12\26\23\0\4\26\11\0\32\26\1\u0259\1\26"+
    "\23\0\4\26\11\0\17\26\1\u025a\14\26\23\0\4\26"+
    "\11\0\7\26\1\u025b\24\26\23\0\4\26\11\0\1\u025c"+
    "\33\26\23\0\4\26\11\0\17\26\1\u025d\14\26\23\0"+
    "\4\26\11\0\24\26\1\u025e\7\26\23\0\4\26\11\0"+
    "\7\26\1\u025f\24\26\23\0\4\26\11\0\15\26\1\u0260"+
    "\16\26\23\0\4\26\11\0\7\26\1\u0261\3\26\1\u0262"+
    "\5\26\1\u0263\12\26\23\0\4\26\11\0\3\26\1\u0264"+
    "\30\26\23\0\4\26\11\0\7\26\1\u0265\7\26\1\u0266"+
    "\14\26\23\0\4\26\11\0\1\u0267\33\26\23\0\4\26"+
    "\11\0\21\26\1\u0268\12\26\23\0\4\26\11\0\3\26"+
    "\1\u0269\30\26\23\0\4\26\11\0\10\26\1\u026a\23\26"+
    "\23\0\4\26\11\0\1\26\1\u026b\32\26\23\0\4\26"+
    "\11\0\7\26\1\u026c\11\26\1\u026d\12\26\23\0\4\26"+
    "\11\0\1\26\1\u026e\32\26\23\0\4\26\11\0\26\26"+
    "\1\u026f\5\26\23\0\4\26\11\0\31\26\1\u0270\2\26"+
    "\23\0\4\26\11\0\1\u0271\33\26\23\0\4\26\11\0"+
    "\31\26\1\u0272\2\26\23\0\4\26\11\0\13\26\1\u0273"+
    "\20\26\23\0\4\26\11\0\10\26\1\u0274\23\26\23\0"+
    "\4\26\11\0\5\26\1\u0275\26\26\23\0\4\26\11\0"+
    "\10\26\1\u0276\23\26\23\0\4\26\11\0\20\26\1\u0277"+
    "\13\26\23\0\4\26\11\0\6\26\1\u0278\25\26\23\0"+
    "\4\26\11\0\13\26\1\u0279\20\26\23\0\4\26\11\0"+
    "\6\26\1\u027a\25\26\23\0\4\26\11\0\31\26\1\u027b"+
    "\2\26\23\0\4\26\11\0\1\26\1\u027c\32\26\23\0"+
    "\4\26\11\0\15\26\1\u027d\16\26\23\0\4\26\11\0"+
    "\4\26\1\u027e\27\26\23\0\4\26\11\0\25\26\1\u027f"+
    "\6\26\23\0\4\26\11\0\34\u018a\23\0\4\u018a\10\0"+
    "\1\u0280\27\u018a\1\u0281\4\u018a\16\0\1\u0280\4\0\2\u018a"+
    "\1\u0281\1\u018a\20\0\1\u0282\17\0\1\u018c\31\0\1\u018c"+
    "\1\u0282\11\0\7\26\1\u0283\24\26\23\0\4\26\11\0"+
    "\17\26\1\u0284\14\26\23\0\4\26\11\0\3\26\1\u0285"+
    "\30\26\23\0\4\26\11\0\17\26\1\u0286\14\26\23\0"+
    "\4\26\11\0\1\u0287\33\26\23\0\4\26\11\0\4\26"+
    "\1\u0288\7\26\1\u0289\1\u028a\6\26\1\u028b\7\26\23\0"+
    "\4\26\11\0\1\u028c\2\26\1\u028d\26\26\1\u028e\1\26"+
    "\23\0\4\26\11\0\6\26\1\u028f\25\26\23\0\4\26"+
    "\11\0\4\26\1\u0290\27\26\23\0\4\26\11\0\1\u0291"+
    "\33\26\23\0\4\26\11\0\21\26\1\u0292\12\26\23\0"+
    "\4\26\11\0\1\u0293\33\26\23\0\4\26\11\0\15\26"+
    "\1\u0294\16\26\23\0\4\26\11\0\15\26\1\u0295\16\26"+
    "\23\0\4\26\2\0\4\304\1\4\1\u019c\66\304\1\u0296"+
    "\2\0\71\u0296\7\0\7\26\1\u0297\24\26\23\0\4\26"+
    "\11\0\4\26\1\u0298\27\26\23\0\4\26\11\0\3\26"+
    "\1\u0299\30\26\23\0\4\26\11\0\21\26\1\u029a\12\26"+
    "\23\0\4\26\11\0\21\26\1\u029b\12\26\23\0\4\26"+
    "\11\0\7\26\1\u029c\24\26\23\0\4\26\11\0\7\26"+
    "\1\u029d\24\26\23\0\4\26\11\0\21\26\1\u029e\12\26"+
    "\23\0\4\26\11\0\7\26\1\u029f\24\26\23\0\4\26"+
    "\11\0\7\26\1\u02a0\24\26\23\0\4\26\11\0\6\26"+
    "\1\u02a1\1\26\1\u02a2\23\26\23\0\4\26\11\0\24\26"+
    "\1\u02a3\7\26\23\0\4\26\11\0\10\26\1\u02a4\23\26"+
    "\23\0\4\26\11\0\6\26\1\u02a5\25\26\23\0\4\26"+
    "\11\0\1\26\1\u02a6\32\26\23\0\4\26\11\0\31\26"+
    "\1\u02a7\2\26\23\0\4\26\11\0\10\26\1\u02a8\7\26"+
    "\1\u02a9\13\26\23\0\4\26\11\0\10\26\1\u02aa\23\26"+
    "\23\0\4\26\11\0\7\26\1\u02ab\24\26\23\0\4\26"+
    "\11\0\17\26\1\u02ac\14\26\23\0\4\26\11\0\21\26"+
    "\1\u02ad\12\26\23\0\4\26\11\0\7\26\1\u02ae\24\26"+
    "\23\0\4\26\11\0\26\26\1\u02af\5\26\23\0\4\26"+
    "\11\0\7\26\1\u02b0\24\26\23\0\4\26\11\0\15\26"+
    "\1\u02b1\16\26\23\0\4\26\11\0\1\26\1\u02b2\32\26"+
    "\23\0\4\26\11\0\4\26\1\u02b3\27\26\23\0\4\26"+
    "\11\0\14\26\1\u02b4\17\26\23\0\4\26\11\0\21\26"+
    "\1\u02b5\12\26\23\0\4\26\11\0\2\26\1\u02b6\31\26"+
    "\23\0\4\26\11\0\4\26\1\u02b7\27\26\23\0\4\26"+
    "\11\0\7\26\1\u02b8\24\26\23\0\4\26\11\0\1\26"+
    "\1\u02b9\32\26\23\0\4\26\11\0\25\26\1\u02ba\6\26"+
    "\23\0\4\26\11\0\21\26\1\u02bb\12\26\23\0\4\26"+
    "\11\0\15\26\1\u02bc\6\26\1\u02bd\7\26\23\0\4\26"+
    "\11\0\2\26\1\u02be\1\26\1\u02bf\27\26\23\0\4\26"+
    "\11\0\4\26\1\u02c0\13\26\1\u02c1\1\u02c2\12\26\23\0"+
    "\4\26\11\0\31\26\1\u02c3\2\26\23\0\4\26\11\0"+
    "\2\26\1\u02c4\31\26\23\0\4\26\11\0\21\26\1\u02c5"+
    "\12\26\23\0\4\26\11\0\2\26\1\u02c6\31\26\23\0"+
    "\4\26\11\0\2\26\1\u02c7\31\26\23\0\4\26\11\0"+
    "\6\26\1\u02c8\25\26\23\0\4\26\11\0\7\26\1\u02c9"+
    "\24\26\23\0\4\26\11\0\17\26\1\u02ca\14\26\23\0"+
    "\4\26\11\0\24\26\1\u02cb\7\26\23\0\4\26\11\0"+
    "\21\26\1\u02cc\12\26\23\0\4\26\11\0\12\26\1\u02cd"+
    "\21\26\23\0\4\26\11\0\2\26\1\u02ce\31\26\23\0"+
    "\4\26\11\0\15\26\1\u02cf\16\26\23\0\4\26\11\0"+
    "\6\26\1\u02d0\25\26\23\0\4\26\11\0\6\26\1\u02d1"+
    "\25\26\23\0\4\26\11\0\1\u02d2\33\26\23\0\4\26"+
    "\11\0\3\26\1\u02d3\30\26\23\0\4\26\11\0\15\26"+
    "\1\u02d4\16\26\23\0\4\26\11\0\7\26\1\u02d5\24\26"+
    "\23\0\4\26\11\0\4\26\1\u02d6\3\26\1\u02d7\23\26"+
    "\23\0\4\26\11\0\21\26\1\u02d8\12\26\23\0\4\26"+
    "\11\0\2\26\1\u02d9\31\26\23\0\4\26\11\0\10\26"+
    "\1\u02da\23\26\23\0\4\26\11\0\14\26\1\u02db\17\26"+
    "\23\0\4\26\11\0\6\26\1\u02dc\25\26\23\0\4\26"+
    "\11\0\17\26\1\u02dd\14\26\23\0\4\26\11\0\7\26"+
    "\1\u02de\24\26\23\0\4\26\11\0\21\26\1\u02df\12\26"+
    "\23\0\4\26\11\0\2\26\1\u02e0\31\26\23\0\4\26"+
    "\11\0\1\26\1\u02e1\32\26\23\0\4\26\11\0\2\26"+
    "\1\u02e2\31\26\23\0\4\26\11\0\2\26\1\u02e3\31\26"+
    "\23\0\4\26\11\0\17\26\1\u02e4\14\26\23\0\4\26"+
    "\11\0\7\26\1\u02e5\24\26\23\0\4\26\11\0\2\26"+
    "\1\u02e6\7\26\1\u02e7\3\26\1\u02e8\4\26\1\u02e9\10\26"+
    "\23\0\4\26\11\0\4\26\1\u02ea\17\26\1\u02eb\7\26"+
    "\23\0\4\26\11\0\17\26\1\u02ec\14\26\23\0\4\26"+
    "\11\0\10\26\1\u02ed\23\26\23\0\4\26\11\0\15\26"+
    "\1\u02ee\16\26\23\0\4\26\11\0\10\26\1\u02ef\23\26"+
    "\23\0\4\26\11\0\21\26\1\u02f0\12\26\23\0\4\26"+
    "\11\0\1\26\1\u02f1\32\26\23\0\4\26\11\0\2\26"+
    "\1\u02f2\12\26\1\u02f3\16\26\23\0\4\26\11\0\6\26"+
    "\1\u02f4\25\26\23\0\4\26\11\0\1\u02f5\33\26\23\0"+
    "\4\26\11\0\23\26\1\u02f6\10\26\23\0\4\26\11\0"+
    "\2\26\1\u02f7\31\26\23\0\4\26\11\0\15\26\1\u02f8"+
    "\16\26\23\0\4\26\11\0\2\26\1\u02f9\23\26\1\u02fa"+
    "\5\26\23\0\4\26\11\0\21\26\1\u02fb\12\26\23\0"+
    "\4\26\11\0\7\26\1\u02fc\24\26\23\0\4\26\11\0"+
    "\12\26\1\u02fd\21\26\23\0\4\26\11\0\14\26\1\u02fe"+
    "\17\26\23\0\4\26\11\0\32\26\1\u02ff\1\26\23\0"+
    "\4\26\11\0\11\26\1\u0300\22\26\23\0\4\26\20\0"+
    "\1\u0301\64\0\32\26\1\u0302\1\26\23\0\4\26\11\0"+
    "\21\26\1\u0303\12\26\23\0\4\26\11\0\1\26\1\u0304"+
    "\32\26\23\0\4\26\11\0\10\26\1\u0305\23\26\23\0"+
    "\4\26\11\0\2\26\1\u0306\31\26\23\0\4\26\11\0"+
    "\4\26\1\u0307\27\26\23\0\4\26\11\0\4\26\1\u0308"+
    "\27\26\23\0\4\26\11\0\2\26\1\u0309\31\26\23\0"+
    "\4\26\11\0\1\u030a\33\26\23\0\4\26\11\0\2\26"+
    "\1\u030b\31\26\23\0\4\26\11\0\17\26\1\u030c\14\26"+
    "\23\0\4\26\11\0\17\26\1\u030d\14\26\23\0\4\26"+
    "\11\0\6\26\1\u030e\25\26\23\0\4\26\11\0\4\26"+
    "\1\u030f\27\26\23\0\4\26\11\0\2\26\1\u0310\3\26"+
    "\1\u0311\25\26\23\0\4\26\11\0\15\26\1\u0312\16\26"+
    "\23\0\4\26\11\0\24\26\1\u0313\7\26\23\0\4\26"+
    "\11\0\10\26\1\u0314\23\26\23\0\4\26\11\0\2\26"+
    "\1\u0315\31\26\23\0\4\26\11\0\17\26\1\u0316\14\26"+
    "\23\0\4\26\11\0\21\26\1\u0317\12\26\23\0\4\26"+
    "\11\0\2\26\1\u0318\31\26\23\0\4\26\11\0\1\26"+
    "\1\u0319\32\26\23\0\4\26\11\0\21\26\1\u031a\12\26"+
    "\23\0\4\26\11\0\25\26\1\u031b\6\26\23\0\4\26"+
    "\11\0\24\26\1\u031c\7\26\23\0\4\26\11\0\7\26"+
    "\1\u031d\24\26\23\0\4\26\11\0\7\26\1\u031e\24\26"+
    "\23\0\4\26\11\0\7\26\1\u031f\24\26\23\0\4\26"+
    "\11\0\7\26\1\u0320\24\26\23\0\4\26\11\0\6\26"+
    "\1\u0321\25\26\23\0\4\26\11\0\22\26\1\u0322\11\26"+
    "\23\0\4\26\11\0\5\26\1\u0323\26\26\23\0\4\26"+
    "\11\0\6\26\1\u0324\25\26\23\0\4\26\11\0\6\26"+
    "\1\u0325\25\26\23\0\4\26\11\0\7\26\1\u0326\24\26"+
    "\23\0\4\26\11\0\2\26\1\u0327\31\26\23\0\4\26"+
    "\11\0\6\26\1\u0328\25\26\23\0\4\26\11\0\2\26"+
    "\1\u0329\31\26\23\0\4\26\11\0\7\26\1\u032a\24\26"+
    "\23\0\4\26\11\0\17\26\1\u032b\14\26\23\0\4\26"+
    "\11\0\2\26\1\u032c\31\26\23\0\4\26\11\0\4\26"+
    "\1\u032d\27\26\23\0\4\26\11\0\3\26\1\u032e\30\26"+
    "\23\0\4\26\11\0\1\u032f\33\26\23\0\4\26\11\0"+
    "\21\26\1\u0330\12\26\23\0\4\26\11\0\17\26\1\u0331"+
    "\14\26\23\0\4\26\11\0\2\26\1\u0332\31\26\23\0"+
    "\4\26\11\0\15\26\1\u0333\16\26\23\0\4\26\11\0"+
    "\6\26\1\u0334\25\26\23\0\4\26\11\0\17\26\1\u0335"+
    "\14\26\23\0\4\26\11\0\1\26\1\u0336\32\26\23\0"+
    "\4\26\11\0\1\u0337\33\26\23\0\4\26\11\0\26\26"+
    "\1\u0338\5\26\23\0\4\26\11\0\17\26\1\u0339\14\26"+
    "\23\0\4\26\11\0\3\26\1\u033a\30\26\23\0\4\26"+
    "\11\0\1\u033b\33\26\23\0\4\26\11\0\1\26\1\u033c"+
    "\32\26\23\0\4\26\11\0\6\26\1\u033d\25\26\23\0"+
    "\4\26\11\0\3\26\1\u033e\24\26\1\u033f\3\26\23\0"+
    "\4\26\11\0\3\26\1\u0340\30\26\23\0\4\26\11\0"+
    "\4\26\1\u0341\27\26\23\0\4\26\11\0\7\26\1\u0342"+
    "\24\26\23\0\4\26\11\0\20\26\1\u0343\13\26\23\0"+
    "\4\26\11\0\21\26\1\u0344\12\26\23\0\4\26\11\0"+
    "\21\26\1\u0345\12\26\23\0\4\26\11\0\12\26\1\u0346"+
    "\21\26\23\0\4\26\11\0\6\26\1\u0347\25\26\23\0"+
    "\4\26\11\0\10\26\1\u0348\23\26\23\0\4\26\11\0"+
    "\2\26\1\u0349\31\26\23\0\4\26\11\0\21\26\1\u034a"+
    "\12\26\23\0\4\26\11\0\22\26\1\u034b\11\26\23\0"+
    "\4\26\11\0\5\26\1\u034c\26\26\23\0\4\26\11\0"+
    "\20\26\1\u034d\13\26\23\0\4\26\11\0\7\26\1\u034e"+
    "\24\26\23\0\4\26\11\0\21\26\1\u034f\12\26\23\0"+
    "\4\26\11\0\17\26\1\u0350\14\26\23\0\4\26\11\0"+
    "\11\26\1\u0351\22\26\23\0\4\26\11\0\5\26\1\u0352"+
    "\26\26\23\0\4\26\11\0\21\26\1\u0353\12\26\23\0"+
    "\4\26\11\0\7\26\1\u0354\24\26\23\0\4\26\11\0"+
    "\5\26\1\u0355\26\26\23\0\4\26\11\0\3\26\1\u0356"+
    "\30\26\23\0\4\26\11\0\31\26\1\u0357\2\26\23\0"+
    "\4\26\11\0\2\26\1\u0358\31\26\23\0\4\26\11\0"+
    "\17\26\1\u0359\14\26\23\0\4\26\11\0\15\26\1\u035a"+
    "\16\26\23\0\4\26\11\0\7\26\1\u035b\24\26\23\0"+
    "\4\26\11\0\15\26\1\u035c\16\26\23\0\4\26\11\0"+
    "\1\26\1\u035d\32\26\23\0\4\26\11\0\32\26\1\u035e"+
    "\1\26\23\0\4\26\11\0\21\26\1\u035f\12\26\23\0"+
    "\4\26\11\0\10\26\1\u0360\23\26\23\0\4\26\40\0"+
    "\1\u0361\31\0\1\u0361\12\0\27\u018a\1\u0281\4\u018a\23\0"+
    "\2\u018a\1\u0281\1\u018a\10\0\1\u0280\27\0\1\u0361\22\0"+
    "\1\u0280\6\0\1\u0361\12\0\7\26\1\u0362\24\26\23\0"+
    "\4\26\11\0\6\26\1\u0363\25\26\23\0\4\26\11\0"+
    "\7\26\1\u0364\24\26\23\0\4\26\11\0\2\26\1\u0365"+
    "\31\26\23\0\4\26\11\0\6\26\1\u0366\25\26\23\0"+
    "\4\26\11\0\21\26\1\u0367\12\26\23\0\4\26\11\0"+
    "\10\26\1\u0368\23\26\23\0\4\26\11\0\6\26\1\u0369"+
    "\25\26\23\0\4\26\11\0\7\26\1\u036a\24\26\23\0"+
    "\4\26\11\0\10\26\1\u036b\23\26\23\0\4\26\11\0"+
    "\21\26\1\u036c\12\26\23\0\4\26\11\0\21\26\1\u036d"+
    "\12\26\23\0\4\26\11\0\7\26\1\u036e\24\26\23\0"+
    "\4\26\11\0\6\26\1\u036f\25\26\23\0\4\26\11\0"+
    "\10\26\1\u0370\23\26\23\0\4\26\11\0\15\26\1\u0371"+
    "\16\26\23\0\4\26\11\0\2\26\1\u0372\31\26\23\0"+
    "\4\26\11\0\7\26\1\u0373\24\26\23\0\4\26\11\0"+
    "\3\26\1\u0374\30\26\23\0\4\26\11\0\3\26\1\u0375"+
    "\30\26\23\0\4\26\11\0\2\26\1\u0376\31\26\23\0"+
    "\4\26\11\0\2\26\1\u0377\31\26\23\0\4\26\11\0"+
    "\1\u0378\33\26\23\0\4\26\11\0\15\26\1\u0379\16\26"+
    "\23\0\4\26\11\0\6\26\1\u037a\25\26\23\0\4\26"+
    "\11\0\15\26\1\u037b\16\26\23\0\4\26\11\0\21\26"+
    "\1\u037c\12\26\23\0\4\26\11\0\21\26\1\u037d\12\26"+
    "\23\0\4\26\11\0\21\26\1\u037e\12\26\23\0\4\26"+
    "\11\0\32\26\1\u037f\1\26\23\0\4\26\11\0\1\u0380"+
    "\33\26\23\0\4\26\11\0\17\26\1\u0381\14\26\23\0"+
    "\4\26\11\0\12\26\1\u0382\21\26\23\0\4\26\11\0"+
    "\2\26\1\u0383\7\26\1\u0384\21\26\23\0\4\26\11\0"+
    "\4\26\1\u0385\27\26\23\0\4\26\11\0\7\26\1\u0386"+
    "\24\26\23\0\4\26\11\0\7\26\1\u0387\24\26\23\0"+
    "\4\26\11\0\13\26\1\u0388\20\26\23\0\4\26\11\0"+
    "\4\26\1\u0389\27\26\23\0\4\26\11\0\7\26\1\u038a"+
    "\24\26\23\0\4\26\11\0\1\26\1\u038b\32\26\23\0"+
    "\4\26\11\0\2\26\1\u038c\31\26\23\0\4\26\11\0"+
    "\6\26\1\u038d\25\26\23\0\4\26\11\0\10\26\1\u038e"+
    "\23\26\23\0\4\26\11\0\22\26\1\u038f\11\26\23\0"+
    "\4\26\11\0\32\26\1\u0390\1\26\23\0\4\26\11\0"+
    "\6\26\1\u0391\25\26\23\0\4\26\11\0\2\26\1\u0392"+
    "\31\26\23\0\4\26\11\0\15\26\1\u0393\16\26\23\0"+
    "\4\26\11\0\4\26\1\u0394\27\26\23\0\4\26\11\0"+
    "\7\26\1\u0395\24\26\23\0\4\26\11\0\7\26\1\u0396"+
    "\24\26\23\0\4\26\11\0\21\26\1\u0397\12\26\23\0"+
    "\4\26\11\0\6\26\1\u0398\25\26\23\0\4\26\11\0"+
    "\15\26\1\u0399\16\26\23\0\4\26\11\0\7\26\1\u039a"+
    "\24\26\23\0\4\26\11\0\1\u039b\33\26\23\0\4\26"+
    "\11\0\2\26\1\u039c\31\26\23\0\4\26\11\0\17\26"+
    "\1\u039d\14\26\23\0\4\26\11\0\10\26\1\u039e\23\26"+
    "\23\0\4\26\11\0\2\26\1\u039f\31\26\23\0\4\26"+
    "\11\0\4\26\1\u03a0\27\26\23\0\4\26\11\0\6\26"+
    "\1\u03a1\25\26\23\0\4\26\11\0\12\26\1\u03a2\21\26"+
    "\23\0\4\26\11\0\4\26\1\u03a3\27\26\23\0\4\26"+
    "\11\0\4\26\1\u03a4\27\26\23\0\4\26\11\0\21\26"+
    "\1\u03a5\12\26\23\0\4\26\11\0\7\26\1\u03a6\24\26"+
    "\23\0\4\26\11\0\21\26\1\u03a7\12\26\23\0\4\26"+
    "\11\0\24\26\1\u03a8\7\26\23\0\4\26\11\0\12\26"+
    "\1\u03a9\21\26\23\0\4\26\11\0\10\26\1\u03aa\23\26"+
    "\23\0\4\26\11\0\2\26\1\u03ab\31\26\23\0\4\26"+
    "\11\0\2\26\1\u03ac\31\26\23\0\4\26\11\0\10\26"+
    "\1\u03ad\23\26\23\0\4\26\11\0\1\u03ae\2\26\1\u03af"+
    "\30\26\23\0\4\26\11\0\6\26\1\u03b0\3\26\1\u03b1"+
    "\11\26\1\u03b2\7\26\23\0\4\26\11\0\20\26\1\u03b3"+
    "\13\26\23\0\4\26\11\0\21\26\1\u03b4\12\26\23\0"+
    "\4\26\11\0\10\26\1\u03b5\23\26\23\0\4\26\11\0"+
    "\21\26\1\u03b6\12\26\23\0\4\26\11\0\4\26\1\u03b7"+
    "\27\26\23\0\4\26\11\0\10\26\1\u03b8\23\26\23\0"+
    "\4\26\11\0\1\26\1\u03b9\32\26\23\0\4\26\11\0"+
    "\24\26\1\u03ba\7\26\23\0\4\26\11\0\15\26\1\u03bb"+
    "\16\26\23\0\4\26\11\0\6\26\1\u03bc\25\26\23\0"+
    "\4\26\11\0\4\26\1\u03bd\27\26\23\0\4\26\11\0"+
    "\2\26\1\u03be\31\26\23\0\4\26\11\0\26\26\1\u03bf"+
    "\5\26\23\0\4\26\11\0\21\26\1\u03c0\12\26\23\0"+
    "\4\26\11\0\6\26\1\u03c1\25\26\23\0\4\26\11\0"+
    "\12\26\1\u03c2\21\26\23\0\4\26\11\0\21\26\1\u03c3"+
    "\12\26\23\0\4\26\11\0\3\26\1\u03c4\30\26\23\0"+
    "\4\26\11\0\10\26\1\u03c5\23\26\23\0\4\26\11\0"+
    "\10\26\1\u03c6\23\26\23\0\4\26\11\0\7\26\1\u03c7"+
    "\24\26\23\0\4\26\11\0\3\26\1\u03c8\10\26\1\u03c9"+
    "\17\26\23\0\4\26\11\0\7\26\1\u03ca\24\26\23\0"+
    "\4\26\11\0\6\26\1\u03cb\25\26\23\0\4\26\11\0"+
    "\17\26\1\u03cc\14\26\23\0\4\26\11\0\7\26\1\u03cd"+
    "\24\26\23\0\4\26\11\0\32\26\1\u03ce\1\26\23\0"+
    "\4\26\34\0\1\u03cf\50\0\21\26\1\u03d0\12\26\23\0"+
    "\4\26\11\0\3\26\1\u03d1\30\26\23\0\4\26\11\0"+
    "\21\26\1\u03d2\12\26\23\0\4\26\11\0\1\u03d3\33\26"+
    "\23\0\4\26\11\0\15\26\1\u03d4\16\26\23\0\4\26"+
    "\11\0\15\26\1\u03d5\16\26\23\0\4\26\11\0\2\26"+
    "\1\u03d6\31\26\23\0\4\26\11\0\21\26\1\u03d7\12\26"+
    "\23\0\4\26\11\0\10\26\1\u03d8\23\26\23\0\4\26"+
    "\11\0\1\26\1\u03d9\32\26\23\0\4\26\11\0\7\26"+
    "\1\u03da\24\26\23\0\4\26\11\0\15\26\1\u03db\16\26"+
    "\23\0\4\26\11\0\15\26\1\u03dc\16\26\23\0\4\26"+
    "\11\0\6\26\1\u03dd\25\26\23\0\4\26\11\0\15\26"+
    "\1\u03de\16\26\23\0\4\26\11\0\4\26\1\u03df\27\26"+
    "\23\0\4\26\11\0\10\26\1\u03e0\23\26\23\0\4\26"+
    "\11\0\2\26\1\u03e1\31\26\23\0\4\26\11\0\6\26"+
    "\1\u03e2\25\26\23\0\4\26\11\0\4\26\1\u03e3\27\26"+
    "\23\0\4\26\11\0\7\26\1\u03e4\24\26\23\0\4\26"+
    "\11\0\2\26\1\u03e5\31\26\23\0\4\26\11\0\17\26"+
    "\1\u03e6\14\26\23\0\4\26\11\0\6\26\1\u03e7\25\26"+
    "\23\0\4\26\11\0\10\26\1\u03e8\23\26\23\0\4\26"+
    "\11\0\6\26\1\u03e9\25\26\23\0\4\26\11\0\21\26"+
    "\1\u03ea\12\26\23\0\4\26\11\0\14\26\1\u03eb\17\26"+
    "\23\0\4\26\11\0\15\26\1\u03ec\16\26\23\0\4\26"+
    "\11\0\4\26\1\u03ed\27\26\23\0\4\26\11\0\10\26"+
    "\1\u03ee\23\26\23\0\4\26\11\0\15\26\1\u03ef\16\26"+
    "\23\0\4\26\11\0\15\26\1\u03f0\16\26\23\0\4\26"+
    "\11\0\3\26\1\u03f1\30\26\23\0\4\26\11\0\22\26"+
    "\1\u03f2\11\26\23\0\4\26\11\0\6\26\1\u03f3\25\26"+
    "\23\0\4\26\11\0\1\u03f4\33\26\23\0\4\26\11\0"+
    "\1\26\1\u03f5\32\26\23\0\4\26\11\0\10\26\1\u03f6"+
    "\23\26\23\0\4\26\11\0\15\26\1\u03f7\16\26\23\0"+
    "\4\26\11\0\5\26\1\u03f8\26\26\23\0\4\26\11\0"+
    "\4\26\1\u03f9\27\26\23\0\4\26\11\0\15\26\1\u03fa"+
    "\16\26\23\0\4\26\11\0\10\26\1\u03fb\23\26\23\0"+
    "\4\26\11\0\10\26\1\u03fc\23\26\23\0\4\26\11\0"+
    "\7\26\1\u03fd\24\26\23\0\4\26\11\0\6\26\1\u03fe"+
    "\25\26\23\0\4\26\11\0\10\26\1\u03ff\6\26\1\u0400"+
    "\14\26\23\0\4\26\11\0\4\26\1\u0401\27\26\23\0"+
    "\4\26\11\0\10\26\1\u0402\23\26\23\0\4\26\11\0"+
    "\15\26\1\u0403\16\26\23\0\4\26\11\0\21\26\1\u0404"+
    "\12\26\23\0\4\26\11\0\4\26\1\u0405\27\26\23\0"+
    "\4\26\11\0\6\26\1\u0406\25\26\23\0\4\26\11\0"+
    "\2\26\1\u0407\31\26\23\0\4\26\11\0\3\26\1\u0408"+
    "\30\26\23\0\4\26\11\0\13\26\1\u0409\20\26\23\0"+
    "\4\26\11\0\6\26\1\u040a\25\26\23\0\4\26\11\0"+
    "\7\26\1\u040b\24\26\23\0\4\26\11\0\26\26\1\u040c"+
    "\5\26\23\0\4\26\11\0\2\26\1\u040d\31\26\23\0"+
    "\4\26\11\0\10\26\1\u040e\23\26\23\0\4\26\11\0"+
    "\10\26\1\u040f\23\26\23\0\4\26\11\0\22\26\1\u0410"+
    "\11\26\23\0\4\26\11\0\7\26\1\u0411\24\26\23\0"+
    "\4\26\11\0\7\26\1\u0412\24\26\23\0\4\26\11\0"+
    "\7\26\1\u0413\24\26\23\0\4\26\11\0\11\26\1\u0414"+
    "\22\26\23\0\4\26\11\0\7\26\1\u0415\24\26\23\0"+
    "\4\26\11\0\21\26\1\u0416\12\26\23\0\4\26\11\0"+
    "\7\26\1\u0417\24\26\23\0\4\26\11\0\32\26\1\u0418"+
    "\1\26\23\0\4\26\11\0\17\26\1\u0419\14\26\23\0"+
    "\4\26\11\0\21\26\1\u041a\12\26\23\0\4\26\11\0"+
    "\1\u041b\33\26\23\0\4\26\11\0\12\26\1\u041c\21\26"+
    "\23\0\4\26\11\0\17\26\1\u041d\14\26\23\0\4\26"+
    "\11\0\2\26\1\u041e\31\26\23\0\4\26\11\0\3\26"+
    "\1\u041f\30\26\23\0\4\26\11\0\2\26\1\u0420\31\26"+
    "\23\0\4\26\11\0\2\26\1\u0421\31\26\23\0\4\26"+
    "\11\0\6\26\1\u0422\25\26\23\0\4\26\11\0\15\26"+
    "\1\u0423\16\26\23\0\4\26\11\0\10\26\1\u0424\23\26"+
    "\23\0\4\26\11\0\17\26\1\u0425\14\26\23\0\4\26"+
    "\11\0\21\26\1\u0426\12\26\23\0\4\26\11\0\32\26"+
    "\1\u0427\1\26\23\0\4\26\11\0\1\u0428\33\26\23\0"+
    "\4\26\11\0\10\26\1\u0429\23\26\23\0\4\26\11\0"+
    "\21\26\1\u042a\12\26\23\0\4\26\11\0\21\26\1\u042b"+
    "\12\26\23\0\4\26\11\0\1\26\1\u042c\32\26\23\0"+
    "\4\26\11\0\15\26\1\u042d\16\26\23\0\4\26\11\0"+
    "\6\26\1\u042e\1\u042f\24\26\23\0\4\26\11\0\7\26"+
    "\1\u0430\24\26\23\0\4\26\11\0\4\26\1\u0431\27\26"+
    "\23\0\4\26\11\0\21\26\1\u0432\12\26\23\0\4\26"+
    "\11\0\7\26\1\u0433\24\26\23\0\4\26\11\0\7\26"+
    "\1\u0434\24\26\23\0\4\26\11\0\26\26\1\u0435\5\26"+
    "\23\0\4\26\11\0\2\26\1\u0436\31\26\23\0\4\26"+
    "\11\0\6\26\1\u0437\25\26\23\0\4\26\11\0\15\26"+
    "\1\u0438\16\26\23\0\4\26\11\0\21\26\1\u0439\12\26"+
    "\23\0\4\26\11\0\21\26\1\u043a\12\26\23\0\4\26"+
    "\11\0\15\26\1\u043b\16\26\23\0\4\26\11\0\3\26"+
    "\1\u043c\30\26\23\0\4\26\11\0\12\26\1\u043d\21\26"+
    "\23\0\4\26\11\0\1\u043e\33\26\23\0\4\26\11\0"+
    "\6\26\1\u043f\25\26\23\0\4\26\11\0\6\26\1\u0440"+
    "\25\26\23\0\4\26\11\0\1\u0441\33\26\23\0\4\26"+
    "\11\0\7\26\1\u0442\24\26\23\0\4\26\11\0\17\26"+
    "\1\u0443\14\26\23\0\4\26\11\0\15\26\1\u0444\16\26"+
    "\23\0\4\26\11\0\23\26\1\u0445\10\26\23\0\4\26"+
    "\11\0\14\26\1\u0446\17\26\23\0\4\26\11\0\3\26"+
    "\1\u0447\30\26\23\0\4\26\11\0\15\26\1\u0448\16\26"+
    "\23\0\4\26\11\0\10\26\1\u0449\23\26\23\0\4\26"+
    "\11\0\2\26\1\u044a\31\26\23\0\4\26\11\0\20\26"+
    "\1\u044b\13\26\23\0\4\26\11\0\25\26\1\u044c\6\26"+
    "\23\0\4\26\11\0\6\26\1\u044d\25\26\23\0\4\26"+
    "\11\0\13\26\1\u044e\20\26\23\0\4\26\11\0\21\26"+
    "\1\u044f\12\26\23\0\4\26\11\0\15\26\1\u0450\16\26"+
    "\23\0\4\26\11\0\15\26\1\u0451\16\26\23\0\4\26"+
    "\11\0\2\26\1\u0452\31\26\23\0\4\26\11\0\6\26"+
    "\1\u0453\25\26\23\0\4\26\11\0\20\26\1\u0454\13\26"+
    "\23\0\4\26\11\0\7\26\1\u0455\24\26\23\0\4\26"+
    "\11\0\21\26\1\u0456\12\26\23\0\4\26\11\0\4\26"+
    "\1\u0457\27\26\23\0\4\26\11\0\15\26\1\u0458\16\26"+
    "\23\0\4\26\11\0\2\26\1\u0459\31\26\23\0\4\26"+
    "\11\0\21\26\1\u045a\12\26\23\0\4\26\11\0\15\26"+
    "\1\u045b\16\26\23\0\4\26\11\0\10\26\1\u045c\23\26"+
    "\23\0\4\26\11\0\4\26\1\u045d\27\26\23\0\4\26"+
    "\11\0\17\26\1\u045e\14\26\23\0\4\26\11\0\32\26"+
    "\1\u045f\1\26\23\0\4\26\11\0\3\26\1\u0460\30\26"+
    "\23\0\4\26\11\0\13\26\1\u0461\20\26\23\0\4\26"+
    "\11\0\21\26\1\u0462\12\26\23\0\4\26\11\0\7\26"+
    "\1\u0463\24\26\23\0\4\26\11\0\17\26\1\u0464\14\26"+
    "\23\0\4\26\11\0\3\26\1\u0465\30\26\23\0\4\26"+
    "\11\0\1\u0466\33\26\23\0\4\26\11\0\1\u0467\33\26"+
    "\23\0\4\26\11\0\6\26\1\u0468\25\26\23\0\4\26"+
    "\11\0\21\26\1\u0469\12\26\23\0\4\26\11\0\7\26"+
    "\1\u046a\24\26\23\0\4\26\11\0\6\26\1\u046b\25\26"+
    "\23\0\4\26\11\0\17\26\1\u046c\14\26\23\0\4\26"+
    "\11\0\21\26\1\u046d\12\26\23\0\4\26\11\0\7\26"+
    "\1\u046e\24\26\23\0\4\26\11\0\10\26\1\u046f\23\26"+
    "\23\0\4\26\11\0\2\26\1\u0470\31\26\23\0\4\26"+
    "\11\0\10\26\1\u0471\23\26\23\0\4\26\11\0\21\26"+
    "\1\u0472\12\26\23\0\4\26\20\0\1\u0473\64\0\7\26"+
    "\1\u0474\24\26\23\0\4\26\11\0\21\26\1\u0475\12\26"+
    "\23\0\4\26\11\0\10\26\1\u0476\23\26\23\0\4\26"+
    "\11\0\6\26\1\u0477\25\26\23\0\4\26\11\0\6\26"+
    "\1\u0478\25\26\23\0\4\26\11\0\21\26\1\u0479\12\26"+
    "\23\0\4\26\11\0\21\26\1\u047a\12\26\23\0\4\26"+
    "\11\0\15\26\1\u047b\16\26\23\0\4\26\11\0\25\26"+
    "\1\u047c\6\26\23\0\4\26\11\0\1\u047d\33\26\23\0"+
    "\4\26\11\0\3\26\1\u047e\30\26\23\0\4\26\11\0"+
    "\17\26\1\u047f\14\26\23\0\4\26\11\0\7\26\1\u0480"+
    "\24\26\23\0\4\26\11\0\25\26\1\u0481\4\26\1\u0482"+
    "\1\26\23\0\4\26\11\0\1\u0483\33\26\23\0\4\26"+
    "\11\0\7\26\1\u0484\1\u0485\23\26\23\0\4\26\11\0"+
    "\21\26\1\u0486\12\26\23\0\4\26\11\0\24\26\1\u0487"+
    "\7\26\23\0\4\26\11\0\3\26\1\u0488\30\26\23\0"+
    "\4\26\11\0\1\u0489\33\26\23\0\4\26\11\0\7\26"+
    "\1\u048a\24\26\23\0\4\26\11\0\7\26\1\u048b\24\26"+
    "\23\0\4\26\11\0\20\26\1\u048c\13\26\23\0\4\26"+
    "\11\0\2\26\1\u048d\31\26\23\0\4\26\11\0\2\26"+
    "\1\u048e\31\26\23\0\4\26\11\0\26\26\1\u048f\5\26"+
    "\23\0\4\26\11\0\10\26\1\u0490\23\26\23\0\4\26"+
    "\11\0\1\u0491\33\26\23\0\4\26\11\0\31\26\1\u0492"+
    "\2\26\23\0\4\26\11\0\3\26\1\u0493\30\26\23\0"+
    "\4\26\11\0\17\26\1\u0494\14\26\23\0\4\26\11\0"+
    "\10\26\1\u0495\23\26\23\0\4\26\11\0\10\26\1\u0496"+
    "\23\26\23\0\4\26\11\0\26\26\1\u0497\5\26\23\0"+
    "\4\26\11\0\26\26\1\u0498\5\26\23\0\4\26\11\0"+
    "\21\26\1\u0499\12\26\23\0\4\26\11\0\2\26\1\u049a"+
    "\31\26\23\0\4\26\11\0\15\26\1\u049b\16\26\23\0"+
    "\4\26\11\0\1\u049c\33\26\23\0\4\26\11\0\10\26"+
    "\1\u049d\23\26\23\0\4\26\11\0\15\26\1\u049e\16\26"+
    "\23\0\4\26\11\0\17\26\1\u049f\14\26\23\0\4\26"+
    "\11\0\21\26\1\u04a0\12\26\23\0\4\26\11\0\10\26"+
    "\1\u04a1\23\26\23\0\4\26\11\0\15\26\1\u04a2\16\26"+
    "\23\0\4\26\11\0\30\26\1\u04a3\3\26\23\0\4\26"+
    "\11\0\10\26\1\u04a4\23\26\23\0\4\26\11\0\10\26"+
    "\1\u04a5\23\26\23\0\4\26\11\0\10\26\1\u04a6\23\26"+
    "\23\0\4\26\11\0\4\26\1\u04a7\27\26\23\0\4\26"+
    "\11\0\23\26\1\u04a8\10\26\23\0\4\26\11\0\15\26"+
    "\1\u04a9\16\26\23\0\4\26\11\0\12\26\1\u04aa\21\26"+
    "\23\0\4\26\11\0\15\26\1\u04ab\16\26\23\0\4\26"+
    "\11\0\1\u04ac\33\26\23\0\4\26\11\0\4\26\1\u04ad"+
    "\27\26\23\0\4\26\11\0\15\26\1\u04ae\16\26\23\0"+
    "\4\26\11\0\15\26\1\u04af\16\26\23\0\4\26\11\0"+
    "\1\26\1\u04b0\32\26\23\0\4\26\11\0\7\26\1\u04b1"+
    "\24\26\23\0\4\26\11\0\11\26\1\u04b2\22\26\23\0"+
    "\4\26\11\0\6\26\1\u04b3\25\26\23\0\4\26\11\0"+
    "\14\26\1\u04b4\17\26\23\0\4\26\11\0\7\26\1\u04b5"+
    "\24\26\23\0\4\26\11\0\4\26\1\u04b6\27\26\23\0"+
    "\4\26\11\0\21\26\1\u04b7\12\26\23\0\4\26\11\0"+
    "\17\26\1\u04b8\14\26\23\0\4\26\11\0\20\26\1\u04b9"+
    "\13\26\23\0\4\26\11\0\4\26\1\u04ba\27\26\23\0"+
    "\4\26\11\0\7\26\1\u04bb\24\26\23\0\4\26\11\0"+
    "\6\26\1\u04bc\25\26\23\0\4\26\11\0\6\26\1\u04bd"+
    "\25\26\23\0\4\26\11\0\7\26\1\u04be\24\26\23\0"+
    "\4\26\11\0\3\26\1\u04bf\30\26\23\0\4\26\11\0"+
    "\4\26\1\u04c0\27\26\23\0\4\26\11\0\6\26\1\u04c1"+
    "\25\26\23\0\4\26\11\0\7\26\1\u04c2\24\26\23\0"+
    "\4\26\11\0\15\26\1\u04c3\16\26\23\0\4\26\11\0"+
    "\12\26\1\u04c4\21\26\23\0\4\26\11\0\7\26\1\u04c5"+
    "\24\26\23\0\4\26\11\0\12\26\1\u04c6\21\26\23\0"+
    "\4\26\11\0\7\26\1\u04c7\24\26\23\0\4\26\11\0"+
    "\21\26\1\u04c8\12\26\23\0\4\26\11\0\6\26\1\u04c9"+
    "\25\26\23\0\4\26\11\0\1\u04ca\33\26\23\0\4\26"+
    "\11\0\31\26\1\u04cb\2\26\23\0\4\26\11\0\26\26"+
    "\1\u04cc\5\26\23\0\4\26\11\0\17\26\1\u04cd\14\26"+
    "\23\0\4\26\11\0\21\26\1\u04ce\12\26\23\0\4\26"+
    "\11\0\11\26\1\u04cf\22\26\23\0\4\26\11\0\17\26"+
    "\1\u04d0\14\26\23\0\4\26\11\0\21\26\1\u04d1\12\26"+
    "\23\0\4\26\11\0\7\26\1\u04d2\24\26\23\0\4\26"+
    "\11\0\1\u04d3\33\26\23\0\4\26\11\0\21\26\1\u04d4"+
    "\12\26\23\0\4\26\11\0\4\26\1\u04d5\27\26\23\0"+
    "\4\26\11\0\17\26\1\u04d6\14\26\23\0\4\26\11\0"+
    "\6\26\1\u04d7\25\26\23\0\4\26\11\0\15\26\1\u04d8"+
    "\16\26\23\0\4\26\11\0\15\26\1\u04d9\16\26\23\0"+
    "\4\26\11\0\11\26\1\u04da\22\26\23\0\4\26\11\0"+
    "\20\26\1\u04db\13\26\23\0\4\26\11\0\1\u04dc\33\26"+
    "\23\0\4\26\11\0\1\26\1\u04dd\32\26\23\0\4\26"+
    "\11\0\7\26\1\u04de\24\26\23\0\4\26\11\0\2\26"+
    "\1\u04df\31\26\23\0\4\26\11\0\6\26\1\u04e0\25\26"+
    "\23\0\4\26\11\0\6\26\1\u04e1\25\26\23\0\4\26"+
    "\11\0\6\26\1\u04e2\25\26\23\0\4\26\11\0\21\26"+
    "\1\u04e3\12\26\23\0\4\26\11\0\21\26\1\u04e4\12\26"+
    "\23\0\4\26\11\0\15\26\1\u04e5\16\26\23\0\4\26"+
    "\11\0\7\26\1\u04e6\24\26\23\0\4\26\11\0\3\26"+
    "\1\u04e7\30\26\23\0\4\26\11\0\3\26\1\u04e8\30\26"+
    "\23\0\4\26\11\0\10\26\1\u04e9\23\26\23\0\4\26"+
    "\11\0\2\26\1\u04ea\31\26\23\0\4\26\11\0\21\26"+
    "\1\u04eb\12\26\23\0\4\26\11\0\31\26\1\u04ec\2\26"+
    "\23\0\4\26\11\0\5\26\1\u04ed\26\26\23\0\4\26"+
    "\11\0\4\26\1\u04ee\27\26\23\0\4\26\11\0\11\26"+
    "\1\u04ef\22\26\23\0\4\26\11\0\21\26\1\u04f0\12\26"+
    "\23\0\4\26\11\0\17\26\1\u04f1\14\26\23\0\4\26"+
    "\11\0\4\26\1\u04f2\27\26\23\0\4\26\11\0\1\u04f3"+
    "\33\26\23\0\4\26\11\0\17\26\1\u04f4\14\26\23\0"+
    "\4\26\11\0\21\26\1\u04f5\12\26\23\0\4\26\11\0"+
    "\6\26\1\u04f6\25\26\23\0\4\26\11\0\1\u04f7\73\0"+
    "\17\26\1\u04f8\14\26\23\0\4\26\11\0\30\26\1\u04f9"+
    "\3\26\23\0\4\26\11\0\4\26\1\u04fa\27\26\23\0"+
    "\4\26\11\0\7\26\1\u04fb\24\26\23\0\4\26\11\0"+
    "\7\26\1\u04fc\24\26\23\0\4\26\11\0\7\26\1\u04fd"+
    "\24\26\23\0\4\26\11\0\1\26\1\u04fe\32\26\23\0"+
    "\4\26\11\0\21\26\1\u04ff\12\26\23\0\4\26\11\0"+
    "\21\26\1\u0500\12\26\23\0\4\26\11\0\7\26\1\u0501"+
    "\24\26\23\0\4\26\11\0\21\26\1\u0502\12\26\23\0"+
    "\4\26\11\0\10\26\1\u0503\23\26\23\0\4\26\11\0"+
    "\12\26\1\u0504\21\26\23\0\4\26\11\0\25\26\1\u0505"+
    "\6\26\23\0\4\26\11\0\7\26\1\u0506\24\26\23\0"+
    "\4\26\11\0\7\26\1\u0507\24\26\23\0\4\26\11\0"+
    "\23\26\1\u0508\10\26\23\0\4\26\11\0\2\26\1\u0509"+
    "\31\26\23\0\4\26\11\0\26\26\1\u050a\5\26\23\0"+
    "\4\26\11\0\2\26\1\u050b\31\26\23\0\4\26\11\0"+
    "\21\26\1\u050c\12\26\23\0\4\26\11\0\17\26\1\u050d"+
    "\14\26\23\0\4\26\11\0\2\26\1\u050e\31\26\23\0"+
    "\4\26\11\0\7\26\1\u050f\24\26\23\0\4\26\11\0"+
    "\7\26\1\u0510\24\26\23\0\4\26\11\0\26\26\1\u0511"+
    "\5\26\23\0\4\26\11\0\21\26\1\u0512\12\26\23\0"+
    "\4\26\11\0\21\26\1\u0513\12\26\23\0\4\26\11\0"+
    "\14\26\1\u0514\17\26\23\0\4\26\11\0\24\26\1\u0515"+
    "\7\26\23\0\4\26\11\0\7\26\1\u0516\24\26\23\0"+
    "\4\26\11\0\7\26\1\u0517\24\26\23\0\4\26\11\0"+
    "\2\26\1\u0518\31\26\23\0\4\26\11\0\24\26\1\u0519"+
    "\7\26\23\0\4\26\11\0\2\26\1\u051a\31\26\23\0"+
    "\4\26\11\0\15\26\1\u051b\16\26\23\0\4\26\11\0"+
    "\21\26\1\u051c\12\26\23\0\4\26\11\0\20\26\1\u051d"+
    "\13\26\23\0\4\26\11\0\21\26\1\u051e\12\26\23\0"+
    "\4\26\11\0\2\26\1\u051f\31\26\23\0\4\26\11\0"+
    "\26\26\1\u0520\5\26\23\0\4\26\11\0\2\26\1\u0521"+
    "\31\26\23\0\4\26\11\0\26\26\1\u0522\5\26\23\0"+
    "\4\26\11\0\4\26\1\u0523\27\26\23\0\4\26\11\0"+
    "\7\26\1\u0524\24\26\23\0\4\26\11\0\15\26\1\u0525"+
    "\16\26\23\0\4\26\11\0\1\26\1\u0526\10\26\1\u0527"+
    "\6\26\1\u0528\12\26\23\0\4\26\11\0\15\26\1\u0529"+
    "\16\26\23\0\4\26\11\0\15\26\1\u052a\16\26\23\0"+
    "\4\26\11\0\4\26\1\u052b\27\26\23\0\4\26\11\0"+
    "\21\26\1\u052c\12\26\23\0\4\26\11\0\15\26\1\u052d"+
    "\16\26\23\0\4\26\11\0\15\26\1\u052e\16\26\23\0"+
    "\4\26\11\0\2\26\1\u052f\31\26\23\0\4\26\11\0"+
    "\26\26\1\u0530\5\26\23\0\4\26\11\0\12\26\1\u0531"+
    "\21\26\23\0\4\26\11\0\7\26\1\u0532\24\26\23\0"+
    "\4\26\11\0\23\26\1\u0533\10\26\23\0\4\26\11\0"+
    "\4\26\1\u0534\27\26\23\0\4\26\11\0\4\26\1\u0535"+
    "\27\26\23\0\4\26\11\0\1\26\1\u0536\32\26\23\0"+
    "\4\26\11\0\7\26\1\u0537\24\26\23\0\4\26\11\0"+
    "\11\26\1\u0538\22\26\23\0\4\26\11\0\7\26\1\u0539"+
    "\24\26\23\0\4\26\11\0\6\26\1\u053a\25\26\23\0"+
    "\4\26\11\0\2\26\1\u053b\31\26\23\0\4\26\11\0"+
    "\4\26\1\u053c\27\26\23\0\4\26\11\0\15\26\1\u053d"+
    "\16\26\23\0\4\26\11\0\26\26\1\u053e\5\26\23\0"+
    "\4\26\11\0\10\26\1\u053f\23\26\23\0\4\26\11\0"+
    "\1\26\1\u0540\32\26\23\0\4\26\11\0\3\26\1\u0541"+
    "\25\26\1\u0542\2\26\23\0\4\26\11\0\3\26\1\u0543"+
    "\30\26\23\0\4\26\11\0\15\26\1\u0544\16\26\23\0"+
    "\4\26\11\0\10\26\1\u0545\23\26\23\0\4\26\11\0"+
    "\1\u0546\33\26\23\0\4\26\11\0\7\26\1\u0547\24\26"+
    "\23\0\4\26\11\0\7\26\1\u0548\24\26\23\0\4\26"+
    "\11\0\15\26\1\u0549\16\26\23\0\4\26\11\0\7\26"+
    "\1\u054a\24\26\23\0\4\26\11\0\3\26\1\u054b\30\26"+
    "\23\0\4\26\11\0\11\26\1\u054c\22\26\23\0\4\26"+
    "\11\0\6\26\1\u054d\25\26\23\0\4\26\11\0\11\26"+
    "\1\u054e\22\26\23\0\4\26\11\0\15\26\1\u054f\16\26"+
    "\23\0\4\26\11\0\1\u0550\17\26\1\u0551\13\26\23\0"+
    "\4\26\11\0\6\26\1\u0552\25\26\23\0\4\26\11\0"+
    "\11\26\1\u0553\22\26\23\0\4\26\11\0\2\26\1\u0554"+
    "\31\26\23\0\4\26\11\0\21\26\1\u0555\12\26\23\0"+
    "\4\26\11\0\7\26\1\u0556\24\26\23\0\4\26\11\0"+
    "\4\26\1\u0557\27\26\23\0\4\26\11\0\10\26\1\u0558"+
    "\23\26\23\0\4\26\11\0\15\26\1\u0559\16\26\23\0"+
    "\4\26\11\0\1\u055a\33\26\23\0\4\26\11\0\21\26"+
    "\1\u055b\12\26\23\0\4\26\11\0\6\26\1\u055c\25\26"+
    "\23\0\4\26\11\0\4\26\1\u055d\27\26\23\0\4\26"+
    "\11\0\21\26\1\u055e\12\26\23\0\4\26\11\0\17\26"+
    "\1\u055f\14\26\23\0\4\26\11\0\4\26\1\u0560\22\26"+
    "\1\u0561\4\26\23\0\4\26\11\0\21\26\1\u0562\12\26"+
    "\23\0\4\26\11\0\2\26\1\u0563\31\26\23\0\4\26"+
    "\11\0\11\26\1\u0564\22\26\23\0\4\26\11\0\7\26"+
    "\1\u0565\24\26\23\0\4\26\11\0\6\26\1\u0566\25\26"+
    "\23\0\4\26\11\0\6\26\1\u0567\1\u0568\24\26\23\0"+
    "\4\26\11\0\7\26\1\u0569\24\26\23\0\4\26\11\0"+
    "\32\26\1\u056a\1\26\23\0\4\26\11\0\20\26\1\u056b"+
    "\13\26\23\0\4\26\11\0\11\26\1\u056c\22\26\23\0"+
    "\4\26\11\0\32\26\1\u056d\1\26\23\0\4\26\11\0"+
    "\15\26\1\u056e\16\26\23\0\4\26\11\0\21\26\1\u056f"+
    "\12\26\23\0\4\26\11\0\4\26\1\u0570\27\26\23\0"+
    "\4\26\11\0\4\26\1\u0571\27\26\23\0\4\26\11\0"+
    "\13\26\1\u0572\20\26\23\0\4\26\11\0\21\26\1\u0573"+
    "\12\26\23\0\4\26\11\0\7\26\1\u0574\24\26\23\0"+
    "\4\26\11\0\7\26\1\u0575\24\26\23\0\4\26\11\0"+
    "\15\26\1\u0576\16\26\23\0\4\26\11\0\3\26\1\u0577"+
    "\30\26\23\0\4\26\11\0\10\26\1\u0578\23\26\23\0"+
    "\4\26\11\0\6\26\1\u0579\25\26\23\0\4\26\11\0"+
    "\12\26\1\u057a\21\26\23\0\4\26\11\0\21\26\1\u057b"+
    "\12\26\23\0\4\26\11\0\15\26\1\u057c\16\26\23\0"+
    "\4\26\11\0\10\26\1\u057d\23\26\23\0\4\26\11\0"+
    "\21\26\1\u057e\12\26\23\0\4\26\11\0\20\26\1\u057f"+
    "\13\26\23\0\4\26\11\0\21\26\1\u0580\12\26\23\0"+
    "\4\26\11\0\15\26\1\u0581\16\26\23\0\4\26\11\0"+
    "\21\26\1\u0582\12\26\23\0\4\26\11\0\15\26\1\u0583"+
    "\16\26\23\0\4\26\11\0\17\26\1\u0584\14\26\23\0"+
    "\4\26\11\0\2\26\1\u0585\31\26\23\0\4\26\11\0"+
    "\3\26\1\u0586\30\26\23\0\4\26\11\0\4\26\1\u0587"+
    "\27\26\23\0\4\26\11\0\1\u0588\33\26\23\0\4\26"+
    "\11\0\12\26\1\u0589\21\26\23\0\4\26\11\0\1\26"+
    "\1\u058a\32\26\23\0\4\26\11\0\3\26\1\u058b\30\26"+
    "\23\0\4\26\11\0\6\26\1\u058c\25\26\23\0\4\26"+
    "\11\0\7\26\1\u058d\24\26\23\0\4\26\11\0\7\26"+
    "\1\u058e\24\26\23\0\4\26\11\0\26\26\1\u058f\5\26"+
    "\23\0\4\26\11\0\15\26\1\u0590\16\26\23\0\4\26"+
    "\11\0\3\26\1\u0591\30\26\23\0\4\26\11\0\21\26"+
    "\1\u0592\12\26\23\0\4\26\11\0\11\26\1\u0593\22\26"+
    "\23\0\4\26\11\0\26\26\1\u0594\5\26\23\0\4\26"+
    "\11\0\21\26\1\u0595\12\26\23\0\4\26\11\0\4\26"+
    "\1\u0596\27\26\23\0\4\26\11\0\1\u0597\33\26\23\0"+
    "\4\26\11\0\6\26\1\u0598\25\26\23\0\4\26\11\0"+
    "\4\26\1\u0599\27\26\23\0\4\26\11\0\6\26\1\u059a"+
    "\25\26\23\0\4\26\11\0\14\26\1\u059b\17\26\23\0"+
    "\4\26\11\0\15\26\1\u059c\16\26\23\0\4\26\11\0"+
    "\21\26\1\u059d\12\26\23\0\4\26\11\0\21\26\1\u059e"+
    "\12\26\23\0\4\26\11\0\7\26\1\u059f\24\26\23\0"+
    "\4\26\11\0\1\u05a0\33\26\23\0\4\26\11\0\2\26"+
    "\1\u05a1\31\26\23\0\4\26\11\0\7\26\1\u05a2\24\26"+
    "\23\0\4\26\11\0\7\26\1\u05a3\24\26\23\0\4\26"+
    "\11\0\22\26\1\u05a4\11\26\23\0\4\26\11\0\4\26"+
    "\1\u05a5\27\26\23\0\4\26\11\0\2\26\1\u05a6\31\26"+
    "\23\0\4\26\11\0\4\26\1\u05a7\27\26\23\0\4\26"+
    "\11\0\4\26\1\u05a8\27\26\23\0\4\26\11\0\2\26"+
    "\1\u05a9\31\26\23\0\4\26\11\0\5\26\1\u05aa\16\26"+
    "\1\u05ab\7\26\23\0\4\26\11\0\17\26\1\u05ac\14\26"+
    "\23\0\4\26\11\0\6\26\1\u05ad\25\26\23\0\4\26"+
    "\11\0\10\26\1\u05ae\23\26\23\0\4\26\11\0\15\26"+
    "\1\u05af\16\26\23\0\4\26\11\0\2\26\1\u05b0\31\26"+
    "\23\0\4\26\11\0\10\26\1\u05b1\23\26\23\0\4\26"+
    "\11\0\5\26\1\u05b2\26\26\23\0\4\26\11\0\3\26"+
    "\1\u05b3\30\26\23\0\4\26\11\0\7\26\1\u05b4\24\26"+
    "\23\0\4\26\11\0\21\26\1\u05b5\12\26\23\0\4\26"+
    "\11\0\24\26\1\u05b6\7\26\23\0\4\26\11\0\6\26"+
    "\1\u05b7\25\26\23\0\4\26\11\0\3\26\1\u05b8\30\26"+
    "\23\0\4\26\11\0\25\26\1\u05b9\6\26\23\0\4\26"+
    "\11\0\17\26\1\u05ba\14\26\23\0\4\26\11\0\5\26"+
    "\1\u05bb\26\26\23\0\4\26\11\0\21\26\1\u05bc\12\26"+
    "\23\0\4\26\11\0\7\26\1\u05bd\24\26\23\0\4\26"+
    "\11\0\15\26\1\u05be\16\26\23\0\4\26\11\0\31\26"+
    "\1\u05bf\2\26\23\0\4\26\11\0\6\26\1\u05c0\25\26"+
    "\23\0\4\26\11\0\12\26\1\u05c1\21\26\23\0\4\26"+
    "\11\0\7\26\1\u05c2\24\26\23\0\4\26\11\0\24\26"+
    "\1\u05c3\7\26\23\0\4\26\11\0\11\26\1\u05c4\22\26"+
    "\23\0\4\26\11\0\2\26\1\u05c5\31\26\23\0\4\26"+
    "\11\0\21\26\1\u05c6\12\26\23\0\4\26\11\0\6\26"+
    "\1\u05c7\25\26\23\0\4\26\11\0\21\26\1\u05c8\12\26"+
    "\23\0\4\26\11\0\1\26\1\u05c9\32\26\23\0\4\26"+
    "\11\0\12\26\1\u05ca\21\26\23\0\4\26\11\0\17\26"+
    "\1\u05cb\14\26\23\0\4\26\11\0\15\26\1\u05cc\16\26"+
    "\23\0\4\26\11\0\7\26\1\u05cd\24\26\23\0\4\26"+
    "\11\0\6\26\1\u05ce\25\26\23\0\4\26\11\0\12\26"+
    "\1\u05cf\21\26\23\0\4\26\11\0\3\26\1\u05d0\30\26"+
    "\23\0\4\26\11\0\22\26\1\u05d1\11\26\23\0\4\26"+
    "\11\0\1\26\1\u05d2\32\26\23\0\4\26\11\0\7\26"+
    "\1\u05d3\24\26\23\0\4\26\11\0\15\26\1\u05d4\16\26"+
    "\23\0\4\26\11\0\15\26\1\u05d5\16\26\23\0\4\26"+
    "\11\0\21\26\1\u05d6\12\26\23\0\4\26\11\0\4\26"+
    "\1\u05d7\27\26\23\0\4\26\11\0\6\26\1\u05d8\25\26"+
    "\23\0\4\26\11\0\7\26\1\u05d9\24\26\23\0\4\26"+
    "\11\0\15\26\1\u05da\16\26\23\0\4\26\11\0\25\26"+
    "\1\u05db\6\26\23\0\4\26\11\0\17\26\1\u05dc\14\26"+
    "\23\0\4\26\11\0\2\26\1\u05dd\31\26\23\0\4\26"+
    "\11\0\2\26\1\u05de\31\26\23\0\4\26\11\0\7\26"+
    "\1\u05df\24\26\23\0\4\26\11\0\7\26\1\u05e0\24\26"+
    "\23\0\4\26\11\0\15\26\1\u05e1\16\26\23\0\4\26"+
    "\11\0\17\26\1\u05e2\14\26\23\0\4\26\11\0\7\26"+
    "\1\u05e3\24\26\23\0\4\26\11\0\6\26\1\u05e4\25\26"+
    "\23\0\4\26\11\0\3\26\1\u05e5\30\26\23\0\4\26"+
    "\11\0\15\26\1\u05e6\16\26\23\0\4\26\11\0\6\26"+
    "\1\u05e7\25\26\23\0\4\26\11\0\2\26\1\u05e8\31\26"+
    "\23\0\4\26\11\0\6\26\1\u05e9\25\26\23\0\4\26"+
    "\11\0\32\26\1\u05ea\1\26\23\0\4\26\11\0\24\26"+
    "\1\u05eb\7\26\23\0\4\26\11\0\5\26\1\u05ec\26\26"+
    "\23\0\4\26\11\0\2\26\1\u05ed\31\26\23\0\4\26"+
    "\11\0\3\26\1\u05ee\30\26\23\0\4\26\11\0\4\26"+
    "\1\u05ef\27\26\23\0\4\26\11\0\3\26\1\u05f0\30\26"+
    "\23\0\4\26\11\0\32\26\1\u05f1\1\26\23\0\4\26"+
    "\11\0\12\26\1\u05f2\21\26\23\0\4\26\11\0\1\26"+
    "\1\u05f3\32\26\23\0\4\26\11\0\15\26\1\u05f4\16\26"+
    "\23\0\4\26\11\0\26\26\1\u05f5\5\26\23\0\4\26"+
    "\11\0\17\26\1\u05f6\14\26\23\0\4\26\11\0\11\26"+
    "\1\u05f7\22\26\23\0\4\26\11\0\12\26\1\u05f8\21\26"+
    "\23\0\4\26\11\0\3\26\1\u05f9\30\26\23\0\4\26"+
    "\11\0\26\26\1\u05fa\5\26\23\0\4\26\11\0\7\26"+
    "\1\u05fb\24\26\23\0\4\26\11\0\15\26\1\u05fc\16\26"+
    "\23\0\4\26\11\0\22\26\1\u05fd\11\26\23\0\4\26"+
    "\11\0\26\26\1\u05fe\5\26\23\0\4\26\11\0\21\26"+
    "\1\u05ff\12\26\23\0\4\26\11\0\17\26\1\u0600\14\26"+
    "\23\0\4\26\11\0\5\26\1\u0601\26\26\23\0\4\26"+
    "\11\0\7\26\1\u0602\24\26\23\0\4\26\11\0\1\u0603"+
    "\33\26\23\0\4\26\11\0\7\26\1\u0604\24\26\23\0"+
    "\4\26\11\0\15\26\1\u0605\16\26\23\0\4\26\11\0"+
    "\7\26\1\u0606\24\26\23\0\4\26\11\0\2\26\1\u0607"+
    "\31\26\23\0\4\26\11\0\1\26\1\u0608\32\26\23\0"+
    "\4\26\11\0\7\26\1\u0609\24\26\23\0\4\26\11\0"+
    "\21\26\1\u060a\12\26\23\0\4\26\11\0\26\26\1\u060b"+
    "\5\26\23\0\4\26\11\0\6\26\1\u060c\25\26\23\0"+
    "\4\26\11\0\10\26\1\u060d\23\26\23\0\4\26\11\0"+
    "\2\26\1\u060e\31\26\23\0\4\26\11\0\7\26\1\u060f"+
    "\24\26\23\0\4\26\11\0\2\26\1\u0610\31\26\23\0"+
    "\4\26\11\0\21\26\1\u0611\12\26\23\0\4\26\11\0"+
    "\21\26\1\u0612\12\26\23\0\4\26\11\0\10\26\1\u0613"+
    "\23\26\23\0\4\26\11\0\21\26\1\u0614\12\26\23\0"+
    "\4\26\11\0\7\26\1\u0615\24\26\23\0\4\26\11\0"+
    "\2\26\1\u0616\31\26\23\0\4\26\11\0\10\26\1\u0617"+
    "\23\26\23\0\4\26\11\0\21\26\1\u0618\12\26\23\0"+
    "\4\26\11\0\7\26\1\u0619\24\26\23\0\4\26\11\0"+
    "\24\26\1\u061a\7\26\23\0\4\26\11\0\5\26\1\u061b"+
    "\26\26\23\0\4\26\11\0\2\26\1\u061c\31\26\23\0"+
    "\4\26\11\0\6\26\1\u061d\25\26\23\0\4\26\11\0"+
    "\3\26\1\u061e\30\26\23\0\4\26\11\0\32\26\1\u061f"+
    "\1\26\23\0\4\26\11\0\21\26\1\u0620\12\26\23\0"+
    "\4\26\11\0\7\26\1\u0621\24\26\23\0\4\26\11\0"+
    "\11\26\1\u0622\22\26\23\0\4\26\11\0\21\26\1\u0623"+
    "\12\26\23\0\4\26\11\0\12\26\1\u0624\6\26\1\u0625"+
    "\12\26\23\0\4\26\11\0\10\26\1\u0626\23\26\23\0"+
    "\4\26\11\0\7\26\1\u0627\24\26\23\0\4\26\11\0"+
    "\10\26\1\u0628\23\26\23\0\4\26\11\0\25\26\1\u0629"+
    "\6\26\23\0\4\26\11\0\21\26\1\u062a\12\26\23\0"+
    "\4\26\11\0\25\26\1\u062b\6\26\23\0\4\26\11\0"+
    "\17\26\1\u062c\14\26\23\0\4\26\11\0\10\26\1\u062d"+
    "\23\26\23\0\4\26\11\0\17\26\1\u062e\14\26\23\0"+
    "\4\26\11\0\7\26\1\u062f\24\26\23\0\4\26\11\0"+
    "\6\26\1\u0630\25\26\23\0\4\26\11\0\7\26\1\u0631"+
    "\24\26\23\0\4\26\11\0\17\26\1\u0632\14\26\23\0"+
    "\4\26\11\0\3\26\1\u0633\30\26\23\0\4\26\11\0"+
    "\21\26\1\u0634\12\26\23\0\4\26\11\0\10\26\1\u0635"+
    "\23\26\23\0\4\26\11\0\25\26\1\u0636\6\26\23\0"+
    "\4\26\11\0\17\26\1\u0637\14\26\23\0\4\26\11\0"+
    "\7\26\1\u0638\24\26\23\0\4\26\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[76440];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\1\1\1\11\36\1\1\11"+
    "\1\1\1\11\1\1\2\11\7\1\5\11\202\1\13\11"+
    "\1\0\327\1\1\0\153\1\1\0\167\1\1\0\1\1"+
    "\1\0\176\1\1\0\315\1\1\0\243\1\1\0\203\1"+
    "\1\11\u0141\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1592];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;
    public int lin;
    public int col;
    public int len;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2634) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return ERROR;
            } 
            // fall through
          case 389: break;
          case 2: 
            { /*Ignore*/
            } 
            // fall through
          case 390: break;
          case 3: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return DIVIDIR;
            } 
            // fall through
          case 391: break;
          case 4: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return MULTIPLICAR;
            } 
            // fall through
          case 392: break;
          case 5: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return RESTAR;
            } 
            // fall through
          case 393: break;
          case 6: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return Identificador;
            } 
            // fall through
          case 394: break;
          case 7: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return IdentificadorError;
            } 
            // fall through
          case 395: break;
          case 8: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return Entero;
            } 
            // fall through
          case 396: break;
          case 9: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return CORCHETEABRIR;
            } 
            // fall through
          case 397: break;
          case 10: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return CORCHETECERRAR;
            } 
            // fall through
          case 398: break;
          case 11: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return PARENTESISABRIR;
            } 
            // fall through
          case 399: break;
          case 12: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return PARENTESISCERRAR;
            } 
            // fall through
          case 400: break;
          case 13: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return LLAVEABRIR;
            } 
            // fall through
          case 401: break;
          case 14: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return LLAVECERRAR;
            } 
            // fall through
          case 402: break;
          case 15: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return ARROBA;
            } 
            // fall through
          case 403: break;
          case 16: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return NUMERAL;
            } 
            // fall through
          case 404: break;
          case 17: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return MENOR;
            } 
            // fall through
          case 405: break;
          case 18: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return IGUAL;
            } 
            // fall through
          case 406: break;
          case 19: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return MAYOR;
            } 
            // fall through
          case 407: break;
          case 20: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return SUMAR;
            } 
            // fall through
          case 408: break;
          case 21: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return MODULO;
            } 
            // fall through
          case 409: break;
          case 22: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return Punto;
            } 
            // fall through
          case 410: break;
          case 23: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return Coma;
            } 
            // fall through
          case 411: break;
          case 24: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return PYC;
            } 
            // fall through
          case 412: break;
          case 25: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return CadenaError;
            } 
            // fall through
          case 413: break;
          case 26: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return MalComentario;
            } 
            // fall through
          case 414: break;
          case 27: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return ON;
            } 
            // fall through
          case 415: break;
          case 28: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return OF;
            } 
            // fall through
          case 416: break;
          case 29: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return IS;
            } 
            // fall through
          case 417: break;
          case 30: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return IN;
            } 
            // fall through
          case 418: break;
          case 31: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return IF;
            } 
            // fall through
          case 419: break;
          case 32: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return AS;
            } 
            // fall through
          case 420: break;
          case 33: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return AT;
            } 
            // fall through
          case 421: break;
          case 34: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return NO;
            } 
            // fall through
          case 422: break;
          case 35: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return TO;
            } 
            // fall through
          case 423: break;
          case 36: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return BY;
            } 
            // fall through
          case 424: break;
          case 37: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return GO;
            } 
            // fall through
          case 425: break;
          case 38: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return Flotante;
            } 
            // fall through
          case 426: break;
          case 39: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return CORCHETES;
            } 
            // fall through
          case 427: break;
          case 40: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return PARENTESIS;
            } 
            // fall through
          case 428: break;
          case 41: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return LLAVES;
            } 
            // fall through
          case 429: break;
          case 42: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return NUMERAL2;
            } 
            // fall through
          case 430: break;
          case 43: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return MENORIGUAL;
            } 
            // fall through
          case 431: break;
          case 44: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return IGUAL2;
            } 
            // fall through
          case 432: break;
          case 45: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return MAYORIGUAL;
            } 
            // fall through
          case 433: break;
          case 46: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return DIFERENTE;
            } 
            // fall through
          case 434: break;
          case 47: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return AND;
            } 
            // fall through
          case 435: break;
          case 48: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return OR;
            } 
            // fall through
          case 436: break;
          case 49: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return Cadena;
            } 
            // fall through
          case 437: break;
          case 50: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return USE;
            } 
            // fall through
          case 438: break;
          case 51: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return SUM;
            } 
            // fall through
          case 439: break;
          case 52: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return SET;
            } 
            // fall through
          case 440: break;
          case 53: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return SQL;
            } 
            // fall through
          case 441: break;
          case 54: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return OUT;
            } 
            // fall through
          case 442: break;
          case 55: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return OFF;
            } 
            // fall through
          case 443: break;
          case 56: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return INT;
            } 
            // fall through
          case 444: break;
          case 57: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return END;
            } 
            // fall through
          case 445: break;
          case 58: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return ARE;
            } 
            // fall through
          case 446: break;
          case 59: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return ASC;
            } 
            // fall through
          case 447: break;
          case 60: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return ADA;
            } 
            // fall through
          case 448: break;
          case 61: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return ADD;
            } 
            // fall through
          case 449: break;
          case 62: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return AVG;
            } 
            // fall through
          case 450: break;
          case 63: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return ANY;
            } 
            // fall through
          case 451: break;
          case 64: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return ALL;
            } 
            // fall through
          case 452: break;
          case 65: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return DEC;
            } 
            // fall through
          case 453: break;
          case 66: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return DAY;
            } 
            // fall through
          case 454: break;
          case 67: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return NOT;
            } 
            // fall through
          case 455: break;
          case 68: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return TOP;
            } 
            // fall through
          case 456: break;
          case 69: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return FOR;
            } 
            // fall through
          case 457: break;
          case 70: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return XML;
            } 
            // fall through
          case 458: break;
          case 71: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return MIN;
            } 
            // fall through
          case 459: break;
          case 72: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return MAX;
            } 
            // fall through
          case 460: break;
          case 73: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return BIT;
            } 
            // fall through
          case 461: break;
          case 74: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return GET;
            } 
            // fall through
          case 462: break;
          case 75: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return FlotanteError;
            } 
            // fall through
          case 463: break;
          case 76: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return KEY;
            } 
            // fall through
          case 464: break;
          case 77: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return PAD;
            } 
            // fall through
          case 465: break;
          case 78: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return CHAR;
            } 
            // fall through
          case 466: break;
          case 79: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return CASE;
            } 
            // fall through
          case 467: break;
          case 80: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return CAST;
            } 
            // fall through
          case 468: break;
          case 81: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return USER;
            } 
            // fall through
          case 469: break;
          case 82: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return RULE;
            } 
            // fall through
          case 470: break;
          case 83: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return ROWS;
            } 
            // fall through
          case 471: break;
          case 84: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return READ;
            } 
            // fall through
          case 472: break;
          case 85: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return REAL;
            } 
            // fall through
          case 473: break;
          case 86: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return SOME;
            } 
            // fall through
          case 474: break;
          case 87: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return SIZE;
            } 
            // fall through
          case 475: break;
          case 88: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return SELF;
            } 
            // fall through
          case 476: break;
          case 89: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return SAVE;
            } 
            // fall through
          case 477: break;
          case 90: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return OVER;
            } 
            // fall through
          case 478: break;
          case 91: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return ONLY;
            } 
            // fall through
          case 479: break;
          case 92: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return OPEN;
            } 
            // fall through
          case 480: break;
          case 93: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return HOUR;
            } 
            // fall through
          case 481: break;
          case 94: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return INTO;
            } 
            // fall through
          case 482: break;
          case 95: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return ELSE;
            } 
            // fall through
          case 483: break;
          case 96: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return EXIT;
            } 
            // fall through
          case 484: break;
          case 97: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return EXEC;
            } 
            // fall through
          case 485: break;
          case 98: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return YEAR;
            } 
            // fall through
          case 486: break;
          case 99: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return DUMP;
            } 
            // fall through
          case 487: break;
          case 100: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return DROP;
            } 
            // fall through
          case 488: break;
          case 101: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return DISK;
            } 
            // fall through
          case 489: break;
          case 102: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return DESC;
            } 
            // fall through
          case 490: break;
          case 103: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return DENY;
            } 
            // fall through
          case 491: break;
          case 104: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return DATE;
            } 
            // fall through
          case 492: break;
          case 105: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return DBCC;
            } 
            // fall through
          case 493: break;
          case 106: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return WORK;
            } 
            // fall through
          case 494: break;
          case 107: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return WHEN;
            } 
            // fall through
          case 495: break;
          case 108: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return WITH;
            } 
            // fall through
          case 496: break;
          case 109: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return VIEW;
            } 
            // fall through
          case 497: break;
          case 110: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return NULL;
            } 
            // fall through
          case 498: break;
          case 111: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return NONE;
            } 
            // fall through
          case 499: break;
          case 112: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return NEXT;
            } 
            // fall through
          case 500: break;
          case 113: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return LOAD;
            } 
            // fall through
          case 501: break;
          case 114: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return LIKE;
            } 
            // fall through
          case 502: break;
          case 115: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return LEFT;
            } 
            // fall through
          case 503: break;
          case 116: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return LAST;
            } 
            // fall through
          case 504: break;
          case 117: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return TRUE;
            } 
            // fall through
          case 505: break;
          case 118: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return TRIM;
            } 
            // fall through
          case 506: break;
          case 119: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return TRAN;
            } 
            // fall through
          case 507: break;
          case 120: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return THEN;
            } 
            // fall through
          case 508: break;
          case 121: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return TIME;
            } 
            // fall through
          case 509: break;
          case 122: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return TEXT;
            } 
            // fall through
          case 510: break;
          case 123: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return FULL;
            } 
            // fall through
          case 511: break;
          case 124: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return FROM;
            } 
            // fall through
          case 512: break;
          case 125: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return FILE;
            } 
            // fall through
          case 513: break;
          case 126: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return MARK;
            } 
            // fall through
          case 514: break;
          case 127: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return BULK;
            } 
            // fall through
          case 515: break;
          case 128: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return BOTH;
            } 
            // fall through
          case 516: break;
          case 129: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return GOTO;
            } 
            // fall through
          case 517: break;
          case 130: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return ZONE;
            } 
            // fall through
          case 518: break;
          case 131: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return KILL;
            } 
            // fall through
          case 519: break;
          case 132: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return PROC;
            } 
            // fall through
          case 520: break;
          case 133: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return PLAN;
            } 
            // fall through
          case 521: break;
          case 134: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return JOIN;
            } 
            // fall through
          case 522: break;
          case 135: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return CROSS;
            } 
            // fall through
          case 523: break;
          case 136: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return COUNT;
            } 
            // fall through
          case 524: break;
          case 137: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return CHECK;
            } 
            // fall through
          case 525: break;
          case 138: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return CLOSE;
            } 
            // fall through
          case 526: break;
          case 139: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return USING;
            } 
            // fall through
          case 527: break;
          case 140: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return USAGE;
            } 
            // fall through
          case 528: break;
          case 141: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return UNION;
            } 
            // fall through
          case 529: break;
          case 142: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return UPPER;
            } 
            // fall through
          case 530: break;
          case 143: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return RIGHT;
            } 
            // fall through
          case 531: break;
          case 144: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return SQLCA;
            } 
            // fall through
          case 532: break;
          case 145: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return SPACE;
            } 
            // fall through
          case 533: break;
          case 146: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return OUTER;
            } 
            // fall through
          case 534: break;
          case 147: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return ORDER;
            } 
            // fall through
          case 535: break;
          case 148: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return OWNER;
            } 
            // fall through
          case 536: break;
          case 149: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return INDEX;
            } 
            // fall through
          case 537: break;
          case 150: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return INNER;
            } 
            // fall through
          case 538: break;
          case 151: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return INPUT;
            } 
            // fall through
          case 539: break;
          case 152: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return IMAGE;
            } 
            // fall through
          case 540: break;
          case 153: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return ALTER;
            } 
            // fall through
          case 541: break;
          case 154: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return WRITE;
            } 
            // fall through
          case 542: break;
          case 155: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return WHILE;
            } 
            // fall through
          case 543: break;
          case 156: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return WHERE;
            } 
            // fall through
          case 544: break;
          case 157: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return VALUE;
            } 
            // fall through
          case 545: break;
          case 158: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return NCHAR;
            } 
            // fall through
          case 546: break;
          case 159: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return NAMES;
            } 
            // fall through
          case 547: break;
          case 160: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return NTEXT;
            } 
            // fall through
          case 548: break;
          case 161: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return LOCAL;
            } 
            // fall through
          case 549: break;
          case 162: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return LOWER;
            } 
            // fall through
          case 550: break;
          case 163: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return LEVEL;
            } 
            // fall through
          case 551: break;
          case 164: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return TABLE;
            } 
            // fall through
          case 552: break;
          case 165: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return FOUND;
            } 
            // fall through
          case 553: break;
          case 166: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return FIRST;
            } 
            // fall through
          case 554: break;
          case 167: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return FETCH;
            } 
            // fall through
          case 555: break;
          case 168: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return FALSE;
            } 
            // fall through
          case 556: break;
          case 169: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return FLOAT;
            } 
            // fall through
          case 557: break;
          case 170: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return MONEY;
            } 
            // fall through
          case 558: break;
          case 171: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return MONTH;
            } 
            // fall through
          case 559: break;
          case 172: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return MERGE;
            } 
            // fall through
          case 560: break;
          case 173: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return MATCH;
            } 
            // fall through
          case 561: break;
          case 174: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return BREAK;
            } 
            // fall through
          case 562: break;
          case 175: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return BEGIN;
            } 
            // fall through
          case 563: break;
          case 176: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return GROUP;
            } 
            // fall through
          case 564: break;
          case 177: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return GRANT;
            } 
            // fall through
          case 565: break;
          case 178: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return PRIOR;
            } 
            // fall through
          case 566: break;
          case 179: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return PRINT;
            } 
            // fall through
          case 567: break;
          case 180: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return PIVOT;
            } 
            // fall through
          case 568: break;
          case 181: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return CURSOR;
            } 
            // fall through
          case 569: break;
          case 182: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return CREATE;
            } 
            // fall through
          case 570: break;
          case 183: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return COLUMN;
            } 
            // fall through
          case 571: break;
          case 184: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return COMMIT;
            } 
            // fall through
          case 572: break;
          case 185: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return CALLER;
            } 
            // fall through
          case 573: break;
          case 186: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return CALLED;
            } 
            // fall through
          case 574: break;
          case 187: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return UNIQUE;
            } 
            // fall through
          case 575: break;
          case 188: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return UPDATE;
            } 
            // fall through
          case 576: break;
          case 189: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return REVOKE;
            } 
            // fall through
          case 577: break;
          case 190: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return REVERT;
            } 
            // fall through
          case 578: break;
          case 191: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return RETURN;
            } 
            // fall through
          case 579: break;
          case 192: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return SCROLL;
            } 
            // fall through
          case 580: break;
          case 193: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return SCHEMA;
            } 
            // fall through
          case 581: break;
          case 194: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return SECOND;
            } 
            // fall through
          case 582: break;
          case 195: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return SELECT;
            } 
            // fall through
          case 583: break;
          case 196: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return STATIC;
            } 
            // fall through
          case 584: break;
          case 197: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return OUTPUT;
            } 
            // fall through
          case 585: break;
          case 198: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return OPTION;
            } 
            // fall through
          case 586: break;
          case 199: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return HAVING;
            } 
            // fall through
          case 587: break;
          case 200: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return INSERT;
            } 
            // fall through
          case 588: break;
          case 201: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return INLINE;
            } 
            // fall through
          case 589: break;
          case 202: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return ERRLVL;
            } 
            // fall through
          case 590: break;
          case 203: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return ESCAPE;
            } 
            // fall through
          case 591: break;
          case 204: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return EXCEPT;
            } 
            // fall through
          case 592: break;
          case 205: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return EXISTS;
            } 
            // fall through
          case 593: break;
          case 206: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return ACTION;
            } 
            // fall through
          case 594: break;
          case 207: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return DOUBLE;
            } 
            // fall through
          case 595: break;
          case 208: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return DOMAIN;
            } 
            // fall through
          case 596: break;
          case 209: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return DELETE;
            } 
            // fall through
          case 597: break;
          case 210: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return VALUES;
            } 
            // fall through
          case 598: break;
          case 211: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return NULLIF;
            } 
            // fall through
          case 599: break;
          case 212: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return LINENO;
            } 
            // fall through
          case 600: break;
          case 213: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return MODULE;
            } 
            // fall through
          case 601: break;
          case 214: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return MINUTE;
            } 
            // fall through
          case 602: break;
          case 215: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return BROWSE;
            } 
            // fall through
          case 603: break;
          case 216: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return BINARY;
            } 
            // fall through
          case 604: break;
          case 217: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return BIGINT;
            } 
            // fall through
          case 605: break;
          case 218: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return BACKUP;
            } 
            // fall through
          case 606: break;
          case 219: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return GLOBAL;
            } 
            // fall through
          case 607: break;
          case 220: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return KEYSET;
            } 
            // fall through
          case 608: break;
          case 221: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return PUBLIC;
            } 
            // fall through
          case 609: break;
          case 222: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return PASCAL;
            } 
            // fall through
          case 610: break;
          case 223: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return CURRENT;
            } 
            // fall through
          case 611: break;
          case 224: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return CONVERT;
            } 
            // fall through
          case 612: break;
          case 225: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return CONNECT;
            } 
            // fall through
          case 613: break;
          case 226: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return COLLATE;
            } 
            // fall through
          case 614: break;
          case 227: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return COMPUTE;
            } 
            // fall through
          case 615: break;
          case 228: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return CASCADE;
            } 
            // fall through
          case 616: break;
          case 229: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return CATALOG;
            } 
            // fall through
          case 617: break;
          case 230: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return UNKNOWN;
            } 
            // fall through
          case 618: break;
          case 231: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return UNPIVOT;
            } 
            // fall through
          case 619: break;
          case 232: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return RESTORE;
            } 
            // fall through
          case 620: break;
          case 233: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return RETURNS;
            } 
            // fall through
          case 621: break;
          case 234: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return SECTION;
            } 
            // fall through
          case 622: break;
          case 235: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return SESSION;
            } 
            // fall through
          case 623: break;
          case 236: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return SETUSER;
            } 
            // fall through
          case 624: break;
          case 237: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return SQLCODE;
            } 
            // fall through
          case 625: break;
          case 238: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return OFFSETS;
            } 
            // fall through
          case 626: break;
          case 239: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return OPENXML;
            } 
            // fall through
          case 627: break;
          case 240: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return INCLUDE;
            } 
            // fall through
          case 628: break;
          case 241: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return INTEGER;
            } 
            // fall through
          case 629: break;
          case 242: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return EXECUTE;
            } 
            // fall through
          case 630: break;
          case 243: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return EXTRACT;
            } 
            // fall through
          case 631: break;
          case 244: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return DECIMAL;
            } 
            // fall through
          case 632: break;
          case 245: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return DECLARE;
            } 
            // fall through
          case 633: break;
          case 246: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return DEFAULT;
            } 
            // fall through
          case 634: break;
          case 247: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return DYNAMIC;
            } 
            // fall through
          case 635: break;
          case 248: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return WAITFOR;
            } 
            // fall through
          case 636: break;
          case 249: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return VARCHAR;
            } 
            // fall through
          case 637: break;
          case 250: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return VARYING;
            } 
            // fall through
          case 638: break;
          case 251: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return NUMERIC;
            } 
            // fall through
          case 639: break;
          case 252: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return NOCHECK;
            } 
            // fall through
          case 640: break;
          case 253: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return NATURAL;
            } 
            // fall through
          case 641: break;
          case 254: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return LEADING;
            } 
            // fall through
          case 642: break;
          case 255: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return TRIGGER;
            } 
            // fall through
          case 643: break;
          case 256: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return TSEQUAL;
            } 
            // fall through
          case 644: break;
          case 257: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return TINYINT;
            } 
            // fall through
          case 645: break;
          case 258: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return FOREIGN;
            } 
            // fall through
          case 646: break;
          case 259: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return FORTRAN;
            } 
            // fall through
          case 647: break;
          case 260: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return BETWEEN;
            } 
            // fall through
          case 648: break;
          case 261: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return PRIMARY;
            } 
            // fall through
          case 649: break;
          case 262: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return PREPARE;
            } 
            // fall through
          case 650: break;
          case 263: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return PERCENT;
            } 
            // fall through
          case 651: break;
          case 264: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return PARTIAL;
            } 
            // fall through
          case 652: break;
          case 265: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return COALESCE;
            } 
            // fall through
          case 653: break;
          case 266: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return CONTINUE;
            } 
            // fall through
          case 654: break;
          case 267: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return CONTAINS;
            } 
            // fall through
          case 655: break;
          case 268: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return CASCADED;
            } 
            // fall through
          case 656: break;
          case 269: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return ROWCOUNT;
            } 
            // fall through
          case 657: break;
          case 270: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return ROLLBACK;
            } 
            // fall through
          case 658: break;
          case 271: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return RESTRICT;
            } 
            // fall through
          case 659: break;
          case 272: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return READONLY;
            } 
            // fall through
          case 660: break;
          case 273: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return READTEXT;
            } 
            // fall through
          case 661: break;
          case 274: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return RELATIVE;
            } 
            // fall through
          case 662: break;
          case 275: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return SHUTDOWN;
            } 
            // fall through
          case 663: break;
          case 276: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return SQLSTATE;
            } 
            // fall through
          case 664: break;
          case 277: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return SQLERROR;
            } 
            // fall through
          case 665: break;
          case 278: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return SMALLINT;
            } 
            // fall through
          case 666: break;
          case 279: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return OVERLAPS;
            } 
            // fall through
          case 667: break;
          case 280: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return HOLDLOCK;
            } 
            // fall through
          case 668: break;
          case 281: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return IDENTITY;
            } 
            // fall through
          case 669: break;
          case 282: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return INTERVAL;
            } 
            // fall through
          case 670: break;
          case 283: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return END_EXEC;
            } 
            // fall through
          case 671: break;
          case 284: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return EXTERNAL;
            } 
            // fall through
          case 672: break;
          case 285: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return ALLOCATE;
            } 
            // fall through
          case 673: break;
          case 286: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return ABSOLUTE;
            } 
            // fall through
          case 674: break;
          case 287: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return DISTINCT;
            } 
            // fall through
          case 675: break;
          case 288: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return DESCRIBE;
            } 
            // fall through
          case 676: break;
          case 289: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return DEFERRED;
            } 
            // fall through
          case 677: break;
          case 290: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return DATETIME;
            } 
            // fall through
          case 678: break;
          case 291: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return DATABASE;
            } 
            // fall through
          case 679: break;
          case 292: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return WHENEVER;
            } 
            // fall through
          case 680: break;
          case 293: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return NATIONAL;
            } 
            // fall through
          case 681: break;
          case 294: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return NVARCHAR;
            } 
            // fall through
          case 682: break;
          case 295: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return LANGUAGE;
            } 
            // fall through
          case 683: break;
          case 296: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return TRUNCATE;
            } 
            // fall through
          case 684: break;
          case 297: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return TRAILING;
            } 
            // fall through
          case 685: break;
          case 298: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return TEXTSIZE;
            } 
            // fall through
          case 686: break;
          case 299: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return FUNCTION;
            } 
            // fall through
          case 687: break;
          case 300: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return FREETEXT;
            } 
            // fall through
          case 688: break;
          case 301: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return PRESERVE;
            } 
            // fall through
          case 689: break;
          case 302: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return POSITION;
            } 
            // fall through
          case 690: break;
          case 303: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return COLLATION;
            } 
            // fall through
          case 691: break;
          case 304: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return CHARACTER;
            } 
            // fall through
          case 692: break;
          case 305: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return CLUSTERED;
            } 
            // fall through
          case 693: break;
          case 306: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return RECOMPILE;
            } 
            // fall through
          case 694: break;
          case 307: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return READ_ONLY;
            } 
            // fall through
          case 695: break;
          case 308: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return RAISERROR;
            } 
            // fall through
          case 696: break;
          case 309: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return SUBSTRING;
            } 
            // fall through
          case 697: break;
          case 310: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return OPENQUERY;
            } 
            // fall through
          case 698: break;
          case 311: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return ISOLATION;
            } 
            // fall through
          case 699: break;
          case 312: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return INITIALLY;
            } 
            // fall through
          case 700: break;
          case 313: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return INDICATOR;
            } 
            // fall through
          case 701: break;
          case 314: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return INTERSECT;
            } 
            // fall through
          case 702: break;
          case 315: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return IMMEDIATE;
            } 
            // fall through
          case 703: break;
          case 316: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return ASSERTION;
            } 
            // fall through
          case 704: break;
          case 317: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return DATETIME2;
            } 
            // fall through
          case 705: break;
          case 318: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return WRITETEXT;
            } 
            // fall through
          case 706: break;
          case 319: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return VARBINARY;
            } 
            // fall through
          case 707: break;
          case 320: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return TRANSLATE;
            } 
            // fall through
          case 708: break;
          case 321: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return TIMESTAMP;
            } 
            // fall through
          case 709: break;
          case 322: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return TEMPORARY;
            } 
            // fall through
          case 710: break;
          case 323: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return PROCEDURE;
            } 
            // fall through
          case 711: break;
          case 324: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return PRECISION;
            } 
            // fall through
          case 712: break;
          case 325: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return CONSTRAINT;
            } 
            // fall through
          case 713: break;
          case 326: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return CONNECTION;
            } 
            // fall through
          case 714: break;
          case 327: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return CHECKPOINT;
            } 
            // fall through
          case 715: break;
          case 328: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return UPDATETEXT;
            } 
            // fall through
          case 716: break;
          case 329: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return ROWVERSION;
            } 
            // fall through
          case 717: break;
          case 330: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return ROWGUIDCOL;
            } 
            // fall through
          case 718: break;
          case 331: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return REFERENCES;
            } 
            // fall through
          case 719: break;
          case 332: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return SQLWARNING;
            } 
            // fall through
          case 720: break;
          case 333: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return STATISTICS;
            } 
            // fall through
          case 721: break;
          case 334: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return SMALLMONEY;
            } 
            // fall through
          case 722: break;
          case 335: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return OPENROWSET;
            } 
            // fall through
          case 723: break;
          case 336: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return OPTIMISTIC;
            } 
            // fall through
          case 724: break;
          case 337: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return ENCRYPTION;
            } 
            // fall through
          case 725: break;
          case 338: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return DISCONNECT;
            } 
            // fall through
          case 726: break;
          case 339: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return DESCRIPTOR;
            } 
            // fall through
          case 727: break;
          case 340: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return DEALLOCATE;
            } 
            // fall through
          case 728: break;
          case 341: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return DEFERRABLE;
            } 
            // fall through
          case 729: break;
          case 342: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return FILLFACTOR;
            } 
            // fall through
          case 730: break;
          case 343: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return BIT_LENGTH;
            } 
            // fall through
          case 731: break;
          case 344: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return PRIVILEGES;
            } 
            // fall through
          case 732: break;
          case 345: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return CONSTRAINTS;
            } 
            // fall through
          case 733: break;
          case 346: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return CHAR_LENGTH;
            } 
            // fall through
          case 734: break;
          case 347: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return RECONFIGURE;
            } 
            // fall through
          case 735: break;
          case 348: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return REPLICATION;
            } 
            // fall through
          case 736: break;
          case 349: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return SYSTEM_USER;
            } 
            // fall through
          case 737: break;
          case 350: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return SQL_VARIANT;
            } 
            // fall through
          case 738: break;
          case 351: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return HIERARCHYID;
            } 
            // fall through
          case 739: break;
          case 352: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return IDENTITYCOL;
            } 
            // fall through
          case 740: break;
          case 353: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return INSENSITIVE;
            } 
            // fall through
          case 741: break;
          case 354: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return DISTRIBUTED;
            } 
            // fall through
          case 742: break;
          case 355: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return DIAGNOSTICS;
            } 
            // fall through
          case 743: break;
          case 356: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return TRANSACTION;
            } 
            // fall through
          case 744: break;
          case 357: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return TRANSLATION;
            } 
            // fall through
          case 745: break;
          case 358: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return TRY_CONVERT;
            } 
            // fall through
          case 746: break;
          case 359: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return TABLESAMPLE;
            } 
            // fall through
          case 747: break;
          case 360: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return CURRENT_USER;
            } 
            // fall through
          case 748: break;
          case 361: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return CURRENT_DATE;
            } 
            // fall through
          case 749: break;
          case 362: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return CURRENT_TIME;
            } 
            // fall through
          case 750: break;
          case 363: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return SCROLL_LOCKS;
            } 
            // fall through
          case 751: break;
          case 364: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return SESSION_USER;
            } 
            // fall through
          case 752: break;
          case 365: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return OCTET_LENGTH;
            } 
            // fall through
          case 753: break;
          case 366: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return WITHIN_GROUP;
            } 
            // fall through
          case 754: break;
          case 367: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return NONCLUSTERED;
            } 
            // fall through
          case 755: break;
          case 368: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return TYPE_WARNING;
            } 
            // fall through
          case 756: break;
          case 369: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return FORWARD_ONLY;
            } 
            // fall through
          case 757: break;
          case 370: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return FAST_FORWARD;
            } 
            // fall through
          case 758: break;
          case 371: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return CORRESPONDING;
            } 
            // fall through
          case 759: break;
          case 372: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return CONTAINSTABLE;
            } 
            // fall through
          case 760: break;
          case 373: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return SCHEMABINDING;
            } 
            // fall through
          case 761: break;
          case 374: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return SECURITYAUDIT;
            } 
            // fall through
          case 762: break;
          case 375: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return SMALLDATETIME;
            } 
            // fall through
          case 763: break;
          case 376: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return AUTHORIZATION;
            } 
            // fall through
          case 764: break;
          case 377: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return TIMEZONE_HOUR;
            } 
            // fall through
          case 765: break;
          case 378: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return FREETEXTTABLE;
            } 
            // fall through
          case 766: break;
          case 379: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return OPENDATASOURCE;
            } 
            // fall through
          case 767: break;
          case 380: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return DATETIMEOFFSET;
            } 
            // fall through
          case 768: break;
          case 381: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return IDENTITY_INSERT;
            } 
            // fall through
          case 769: break;
          case 382: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return TIMEZONE_MINUTE;
            } 
            // fall through
          case 770: break;
          case 383: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return CHARACTER_LENGTH;
            } 
            // fall through
          case 771: break;
          case 384: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return UNIQUEIDENTIFIER;
            } 
            // fall through
          case 772: break;
          case 385: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return CURRENT_TIMESTAMP;
            } 
            // fall through
          case 773: break;
          case 386: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return SEMANTICKEYPHRASETABLE;
            } 
            // fall through
          case 774: break;
          case 387: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return SEMANTICSIMILARITYTABLE;
            } 
            // fall through
          case 775: break;
          case 388: 
            { lin=yyline; col=yycolumn; len=yylength(); lexeme=yytext(); return SEMANTICSIMILARITYDETAILSTABLE;
            } 
            // fall through
          case 776: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
