
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Oct 29 04:25:08 CST 2019
//----------------------------------------------------

package lexgen;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.virtual_parse_stack;
import java.lang.reflect.Field;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Oct 29 04:25:08 CST 2019
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u01c8\000\002\002\004\000\002\003\005\000\002\003" +
    "\005\000\002\003\002\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\010\003\000\002\011\003\000" +
    "\002\011\003\000\002\012\003\000\002\012\005\000\002" +
    "\013\004\000\002\014\004\000\002\014\002\000\002\015" +
    "\004\000\002\016\004\000\002\016\002\000\002\017\004" +
    "\000\002\020\004\000\002\020\002\000\002\021\004\000" +
    "\002\021\002\000\002\022\004\000\002\023\004\000\002" +
    "\024\003\000\002\024\005\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\026\006\000\002\026\002\000\002\027\004" +
    "\000\002\027\002\000\002\030\004\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\032\006\000\002\033\005\000\002\033" +
    "\002\000\002\034\005\000\002\035\006\000\002\036\005" +
    "\000\002\036\002\000\002\037\006\000\002\040\005\000" +
    "\002\040\002\000\002\041\006\000\002\042\005\000\002" +
    "\043\005\000\002\043\002\000\002\044\005\000\002\045" +
    "\004\000\002\045\003\000\002\045\002\000\002\046\003" +
    "\000\002\046\003\000\002\047\004\000\002\050\005\000" +
    "\002\050\005\000\002\050\002\000\002\051\004\000\002" +
    "\052\005\000\002\052\005\000\002\052\002\000\002\053" +
    "\006\000\002\053\003\000\002\054\003\000\002\054\003" +
    "\000\002\054\003\000\002\054\003\000\002\054\003\000" +
    "\002\054\005\000\002\054\005\000\002\054\005\000\002" +
    "\054\005\000\002\054\005\000\002\055\004\000\002\055" +
    "\004\000\002\055\004\000\002\056\003\000\002\056\002" +
    "\000\002\057\007\000\002\057\002\000\002\060\003\000" +
    "\002\060\002\000\002\061\005\000\002\061\002\000\002" +
    "\062\005\000\002\063\004\000\002\063\004\000\002\063" +
    "\002\000\002\064\004\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\065\004\000\002\065\005\000\002" +
    "\065\004\000\002\066\007\000\002\066\006\000\002\066" +
    "\004\000\002\067\004\000\002\067\002\000\002\070\005" +
    "\000\002\070\004\000\002\071\006\000\002\071\002\000" +
    "\002\072\005\000\002\073\004\000\002\074\005\000\002" +
    "\074\002\000\002\075\013\000\002\076\003\000\002\076" +
    "\003\000\002\076\002\000\002\077\004\000\002\077\002" +
    "\000\002\100\010\000\002\100\002\000\002\101\004\000" +
    "\002\101\002\000\002\102\003\000\002\102\003\000\002" +
    "\102\002\000\002\103\005\000\002\103\002\000\002\104" +
    "\006\000\002\104\002\000\002\105\005\000\002\105\002" +
    "\000\002\106\010\000\002\107\003\000\002\107\002\000" +
    "\002\110\003\000\002\110\002\000\002\111\004\000\002" +
    "\112\003\000\002\112\003\000\002\112\003\000\002\112" +
    "\003\000\002\113\005\000\002\113\002\000\002\114\007" +
    "\000\002\114\004\000\002\115\007\000\002\115\002\000" +
    "\002\116\006\000\002\117\003\000\002\117\002\000\002" +
    "\120\004\000\002\120\005\000\002\121\005\000\002\122" +
    "\005\000\002\122\002\000\002\123\007\000\002\124\011" +
    "\000\002\125\006\000\002\126\003\000\002\126\003\000" +
    "\002\127\004\000\002\127\002\000\002\130\005\000\002" +
    "\130\002\000\002\131\007\000\002\131\002\000\002\132" +
    "\006\000\002\132\002\000\002\133\011\000\002\133\002" +
    "\000\002\134\003\000\002\134\004\000\002\134\004\000" +
    "\002\134\004\000\002\134\002\000\002\135\003\000\002" +
    "\135\002\000\002\136\004\000\002\137\003\000\002\137" +
    "\003\000\002\137\003\000\002\137\003\000\002\137\003" +
    "\000\002\137\003\000\002\137\003\000\002\140\004\000" +
    "\002\141\005\000\002\142\004\000\002\143\005\000\002" +
    "\143\002\000\002\144\003\000\002\144\002\000\002\145" +
    "\005\000\002\145\003\000\002\146\014\000\002\147\004" +
    "\000\002\147\002\000\002\151\005\000\002\151\002\000" +
    "\002\153\003\000\002\153\003\000\002\153\003\000\002" +
    "\154\006\000\002\155\003\000\002\155\003\000\002\155" +
    "\003\000\002\155\003\000\002\156\005\000\002\157\004" +
    "\000\002\157\003\000\002\160\006\000\002\161\003\000" +
    "\002\161\003\000\002\161\002\000\002\162\006\000\002" +
    "\163\014\000\002\164\003\000\002\164\002\000\002\165" +
    "\005\000\002\166\005\000\002\167\006\000\002\167\002" +
    "\000\002\170\004\000\002\170\002\000\002\171\007\000" +
    "\002\171\002\000\002\172\011\000\002\173\004\000\002" +
    "\173\002\000\002\174\004\000\002\174\002\000\002\351" +
    "\005\000\002\351\003\000\002\352\004\000\002\352\002" +
    "\000\002\175\003\000\002\175\003\000\002\175\003\000" +
    "\002\176\005\000\002\176\002\000\002\177\006\000\002" +
    "\356\005\000\002\356\003\000\002\356\002\000\002\357" +
    "\010\000\002\357\007\000\002\357\006\000\002\357\004" +
    "\000\002\357\004\000\002\354\003\000\002\354\002\000" +
    "\002\355\003\000\002\355\005\000\002\353\004\000\002" +
    "\353\003\000\002\353\002\000\002\200\004\000\002\200" +
    "\002\000\002\201\003\000\002\201\003\000\002\201\003" +
    "\000\002\201\003\000\002\202\004\000\002\202\002\000" +
    "\002\203\007\000\002\203\002\000\002\204\003\000\002" +
    "\204\002\000\002\205\003\000\002\205\002\000\002\206" +
    "\005\000\002\206\002\000\002\207\004\000\002\207\002" +
    "\000\002\210\005\000\002\210\004\000\002\210\010\000" +
    "\002\210\007\000\002\211\003\000\002\211\003\000\002" +
    "\211\002\000\002\212\004\000\002\212\002\000\002\213" +
    "\005\000\002\213\002\000\002\214\005\000\002\214\002" +
    "\000\002\215\004\000\002\215\004\000\002\216\003\000" +
    "\002\216\003\000\002\217\003\000\002\217\004\000\002" +
    "\220\004\000\002\221\006\000\002\221\005\000\002\221" +
    "\012\000\002\221\007\000\002\222\007\000\002\223\006" +
    "\000\002\223\002\000\002\224\006\000\002\225\005\000" +
    "\002\225\002\000\002\226\006\000\002\227\004\000\002" +
    "\230\003\000\002\230\003\000\002\230\003\000\002\230" +
    "\003\000\002\230\003\000\002\230\003\000\002\231\005" +
    "\000\002\232\003\000\002\232\003\000\002\233\004\000" +
    "\002\233\005\000\002\234\004\000\002\235\007\000\002" +
    "\236\003\000\002\236\002\000\002\237\005\000\002\240" +
    "\003\000\002\240\005\000\002\240\003\000\002\241\006" +
    "\000\002\242\003\000\002\242\004\000\002\243\005\000" +
    "\002\244\003\000\002\244\003\000\002\245\003\000\002" +
    "\245\005\000\002\246\005\000\002\247\005\000\002\247" +
    "\005\000\002\250\003\000\002\250\002\000\002\251\005" +
    "\000\002\251\002\000\002\253\005\000\002\254\004\000" +
    "\002\254\002\000\002\255\005\000\002\255\002\000\002" +
    "\256\003\000\002\256\002\000\002\257\005\000\002\260" +
    "\003\000\002\260\003\000\002\261\003\000\002\261\003" +
    "\000\002\261\002\000\002\262\003\000\002\262\003\000" +
    "\002\263\004\000\002\264\004\000\002\264\002\000\002" +
    "\265\004\000\002\266\004\000\002\266\002\000\002\267" +
    "\013\000\002\270\003\000\002\270\003\000\002\271\004" +
    "\000\002\271\002\000\002\272\003\000\002\272\002\000" +
    "\002\273\005\000\002\274\004\000\002\274\002\000\002" +
    "\275\005\000\002\275\005\000\002\275\004\000\002\276" +
    "\004\000\002\276\002\000\002\277\003\000\002\277\002" +
    "\000\002\300\003\000\002\300\003\000\002\301\004\000" +
    "\002\301\002\000\002\302\004\000\002\303\003\000\002" +
    "\303\003\000\002\303\005\000\002\304\003\000\002\304" +
    "\003\000\002\305\004\000\002\305\002\000\002\306\003" +
    "\000\002\306\003\000\002\306\003\000\002\306\003\000" +
    "\002\307\004\000\002\307\002\000\002\310\005\000\002" +
    "\310\003\000\002\311\005\000\002\312\005\000\002\312" +
    "\002\000\002\313\004\000\002\313\002\000\002\340\015" +
    "\000\002\341\003\000\002\341\003\000\002\341\002\000" +
    "\002\342\003\000\002\342\003\000\002\342\002\000\002" +
    "\343\003\000\002\343\003\000\002\343\003\000\002\343" +
    "\003\000\002\343\002\000\002\344\003\000\002\344\003" +
    "\000\002\344\003\000\002\344\002\000\002\345\003\000" +
    "\002\345\002\000\002\346\005\000\002\346\002\000\002" +
    "\347\004\000\002\347\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0312\000\040\002\ufffe\003\035\061\032\104\024\125" +
    "\022\141\011\152\010\157\027\161\023\206\026\246\012" +
    "\247\042\255\037\267\040\301\034\001\002\000\006\022" +
    "\uffee\376\uffee\001\002\000\006\022\uffed\376\uffed\001\002" +
    "\000\006\022\ufff2\376\ufff2\001\002\000\004\002\u0314\001" +
    "\002\000\042\007\uff6f\011\uff6f\012\uff6f\013\uff6f\032\uff6f" +
    "\033\uff6f\044\uff6f\232\uff6f\237\uff6f\270\u02d0\347\u02d1\372" +
    "\uff6f\u0127\uff6f\u012c\uff6f\u0137\uff6f\u0138\uff6f\001\002\000\006" +
    "\235\u02ba\240\u02b8\001\002\000\004\213\u02cc\001\002\000" +
    "\006\022\ufffc\376\ufffc\001\002\000\006\022\ufffd\376\ufffd" +
    "\001\002\000\006\022\ufff7\376\ufff7\001\002\000\006\022" +
    "\ufff6\376\ufff6\001\002\000\006\022\ufff4\376\ufff4\001\002" +
    "\000\006\022\ufff0\376\ufff0\001\002\000\006\022\ufffa\376" +
    "\ufffa\001\002\000\012\022\ufe7a\235\u02ba\240\u02b8\376\ufe7a" +
    "\001\002\000\012\022\ufe7d\235\u02ba\240\u02b8\376\ufe7d\001" +
    "\002\000\006\235\u02ba\240\u02b8\001\002\000\006\022\ufff1" +
    "\376\ufff1\001\002\000\022\145\uff09\151\uff09\213\u025d\231" +
    "\uff09\236\u0257\261\u0259\300\u0258\310\u025c\001\002\000\012" +
    "\011\uff92\032\uff92\165\uff92\232\116\001\002\000\006\022" +
    "\ufff9\376\ufff9\001\002\000\006\022\ufff3\376\ufff3\001\002" +
    "\000\012\213\u010f\236\u0109\300\u010b\310\u0110\001\002\000" +
    "\006\022\ufffb\376\ufffb\001\002\000\014\151\337\213\343" +
    "\236\336\300\340\310\342\001\002\000\006\022\047\376" +
    "\046\001\002\000\006\022\uffef\376\uffef\001\002\000\014" +
    "\011\uff92\032\uff92\102\uff92\232\116\266\uff92\001\002\000" +
    "\010\011\uff92\032\uff92\232\116\001\002\000\006\022\ufff5" +
    "\376\ufff5\001\002\000\006\011\052\032\053\001\002\000" +
    "\006\022\047\376\046\001\002\000\006\022\ufff8\376\ufff8" +
    "\001\002\000\040\002\ufffe\003\035\061\032\104\024\125" +
    "\022\141\011\152\010\157\027\161\023\206\026\246\012" +
    "\247\042\255\037\267\040\301\034\001\002\000\046\002" +
    "\uffeb\003\uffeb\022\uffeb\061\uffeb\104\uffeb\125\uffeb\141\uffeb" +
    "\152\uffeb\157\uffeb\161\uffeb\206\uffeb\246\uffeb\247\uffeb\255" +
    "\uffeb\267\uffeb\301\uffeb\311\uffeb\376\uffeb\001\002\000\046" +
    "\002\uffec\003\uffec\022\uffec\061\uffec\104\uffec\125\uffec\141" +
    "\uffec\152\uffec\157\uffec\161\uffec\206\uffec\246\uffec\247\uffec" +
    "\255\uffec\267\uffec\301\uffec\311\uffec\376\uffec\001\002\000" +
    "\004\002\000\001\002\000\004\233\056\001\002\000\252" +
    "\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea\012" +
    "\uffea\013\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea" +
    "\022\uffea\023\uffea\024\uffea\025\uffea\032\uffea\033\uffea\044" +
    "\uffea\051\uffea\053\uffea\054\uffea\055\uffea\061\uffea\067\uffea" +
    "\071\uffea\072\uffea\075\uffea\102\uffea\105\uffea\107\uffea\121" +
    "\uffea\122\uffea\124\uffea\132\uffea\133\uffea\134\uffea\145\uffea" +
    "\146\uffea\153\uffea\154\uffea\167\uffea\170\uffea\171\uffea\173" +
    "\uffea\204\uffea\207\uffea\231\uffea\233\uffea\234\uffea\237\uffea" +
    "\252\uffea\261\uffea\262\uffea\276\uffea\301\uffea\302\uffea\304" +
    "\uffea\321\uffea\327\uffea\331\uffea\357\uffea\363\uffea\371\uffea" +
    "\372\uffea\376\uffea\377\uffea\u010c\uffea\u0115\uffea\u0118\uffea\u011b" +
    "\uffea\u0127\uffea\u012c\uffea\u012e\uffea\u0137\uffea\u0138\uffea\u013a\uffea" +
    "\u0144\uffea\u0147\uffea\u0154\uffea\u0155\uffea\u015a\uffea\u0165\uffea\001" +
    "\002\000\004\011\054\001\002\000\004\050\055\001\002" +
    "\000\252\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011" +
    "\uffe9\012\uffe9\013\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9" +
    "\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\032\uffe9\033" +
    "\uffe9\044\uffe9\051\uffe9\053\uffe9\054\uffe9\055\uffe9\061\uffe9" +
    "\067\uffe9\071\uffe9\072\uffe9\075\uffe9\102\uffe9\105\uffe9\107" +
    "\uffe9\121\uffe9\122\uffe9\124\uffe9\132\uffe9\133\uffe9\134\uffe9" +
    "\145\uffe9\146\uffe9\153\uffe9\154\uffe9\167\uffe9\170\uffe9\171" +
    "\uffe9\173\uffe9\204\uffe9\207\uffe9\231\uffe9\233\uffe9\234\uffe9" +
    "\237\uffe9\252\uffe9\261\uffe9\262\uffe9\276\uffe9\301\uffe9\302" +
    "\uffe9\304\uffe9\321\uffe9\327\uffe9\331\uffe9\357\uffe9\363\uffe9" +
    "\371\uffe9\372\uffe9\376\uffe9\377\uffe9\u010c\uffe9\u0115\uffe9\u0118" +
    "\uffe9\u011b\uffe9\u0127\uffe9\u012c\uffe9\u012e\uffe9\u0137\uffe9\u0138\uffe9" +
    "\u013a\uffe9\u0144\uffe9\u0147\uffe9\u0154\uffe9\u0155\uffe9\u015a\uffe9\u0165" +
    "\uffe9\001\002\000\034\067\ufe4c\374\057\u0105\ufe4c\u0132\060" +
    "\u0170\ufe4c\u0171\ufe4c\u0172\ufe4c\u0173\ufe4c\u0174\ufe4c\u0175\ufe4c\u0176" +
    "\ufe4c\u0177\ufe4c\u0178\ufe4c\001\002\000\030\067\ufe4d\u0105\ufe4d" +
    "\u0170\ufe4d\u0171\ufe4d\u0172\ufe4d\u0173\ufe4d\u0174\ufe4d\u0175\ufe4d\u0176" +
    "\ufe4d\u0177\ufe4d\u0178\ufe4d\001\002\000\030\067\ufe4e\u0105\ufe4e" +
    "\u0170\ufe4e\u0171\ufe4e\u0172\ufe4e\u0173\ufe4e\u0174\ufe4e\u0175\ufe4e\u0176" +
    "\ufe4e\u0177\ufe4e\u0178\ufe4e\001\002\000\030\067\ufe49\u0105\064" +
    "\u0170\062\u0171\ufe49\u0172\ufe49\u0173\ufe49\u0174\ufe49\u0175\ufe49\u0176" +
    "\ufe49\u0177\ufe49\u0178\ufe49\001\002\000\024\067\ufe4a\u0171\ufe4a" +
    "\u0172\ufe4a\u0173\ufe4a\u0174\ufe4a\u0175\ufe4a\u0176\ufe4a\u0177\ufe4a\u0178" +
    "\ufe4a\001\002\000\024\067\ufe44\u0171\065\u0172\066\u0173\067" +
    "\u0174\071\u0175\ufe44\u0176\ufe44\u0177\ufe44\u0178\ufe44\001\002\000" +
    "\024\067\ufe4b\u0171\ufe4b\u0172\ufe4b\u0173\ufe4b\u0174\ufe4b\u0175\ufe4b" +
    "\u0176\ufe4b\u0177\ufe4b\u0178\ufe4b\001\002\000\014\067\ufe48\u0175" +
    "\ufe48\u0176\ufe48\u0177\ufe48\u0178\ufe48\001\002\000\014\067\ufe47" +
    "\u0175\ufe47\u0176\ufe47\u0177\ufe47\u0178\ufe47\001\002\000\014\067" +
    "\ufe46\u0175\ufe46\u0176\ufe46\u0177\ufe46\u0178\ufe46\001\002\000\014" +
    "\067\ufe40\u0175\075\u0176\073\u0177\074\u0178\ufe40\001\002\000" +
    "\014\067\ufe45\u0175\ufe45\u0176\ufe45\u0177\ufe45\u0178\ufe45\001\002" +
    "\000\006\067\ufe3e\u0178\077\001\002\000\006\067\ufe42\u0178" +
    "\ufe42\001\002\000\006\067\ufe41\u0178\ufe41\001\002\000\006" +
    "\067\ufe43\u0178\ufe43\001\002\000\004\067\100\001\002\000" +
    "\004\067\ufe3f\001\002\000\004\152\010\001\002\000\010" +
    "\022\ufe3c\067\103\376\ufe3c\001\002\000\006\022\ufe4f\376" +
    "\ufe4f\001\002\000\004\267\104\001\002\000\010\022\ufe3a" +
    "\245\106\376\ufe3a\001\002\000\006\022\ufe3d\376\ufe3d\001" +
    "\002\000\006\011\052\032\053\001\002\000\012\022\uff73" +
    "\023\112\051\uff73\376\uff73\001\002\000\006\022\ufe3b\376" +
    "\ufe3b\001\002\000\010\022\uff75\051\uff75\376\uff75\001\002" +
    "\000\006\011\052\032\053\001\002\000\012\022\uff73\023" +
    "\112\051\uff73\376\uff73\001\002\000\010\022\uff74\051\uff74" +
    "\376\uff74\001\002\000\006\011\052\032\053\001\002\000" +
    "\004\033\117\001\002\000\004\012\120\001\002\000\004" +
    "\051\121\001\002\000\044\007\uff90\011\uff90\012\uff90\013" +
    "\uff90\032\uff90\033\uff90\044\uff90\102\uff90\165\uff90\237\uff90" +
    "\266\uff90\315\123\372\uff90\u0127\uff90\u012c\uff90\u0137\uff90\u0138" +
    "\uff90\001\002\000\042\007\uff93\011\uff93\012\uff93\013\uff93" +
    "\032\uff93\033\uff93\044\uff93\102\uff93\165\uff93\237\uff93\266" +
    "\uff93\372\uff93\u0127\uff93\u012c\uff93\u0137\uff93\u0138\uff93\001\002" +
    "\000\042\007\uff91\011\uff91\012\uff91\013\uff91\032\uff91\033" +
    "\uff91\044\uff91\102\uff91\165\uff91\237\uff91\266\uff91\372\uff91" +
    "\u0127\uff91\u012c\uff91\u0137\uff91\u0138\uff91\001\002\000\162\004" +
    "\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3" +
    "\013\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022" +
    "\uffe3\023\uffe3\024\303\032\uffe3\033\uffe3\044\uffe3\051\uffe3" +
    "\053\uffe3\054\uffe3\055\uffe3\061\uffe3\067\uffe3\071\uffe3\102" +
    "\uffe3\105\uffe3\107\uffe3\121\uffe3\122\uffe3\124\uffe3\146\uffe3" +
    "\153\uffe3\154\uffe3\170\uffe3\171\uffe3\173\uffe3\204\uffe3\207" +
    "\uffe3\234\uffe3\237\uffe3\252\uffe3\262\uffe3\301\uffe3\302\uffe3" +
    "\304\uffe3\321\uffe3\363\uffe3\372\uffe3\376\uffe3\u0127\uffe3\u012c" +
    "\uffe3\u0137\uffe3\u0138\uffe3\u015a\uffe3\001\002\000\004\171\126" +
    "\001\002\000\006\011\052\032\053\001\002\000\004\004" +
    "\273\001\002\000\012\022\uff3f\102\132\321\uff3f\376\uff3f" +
    "\001\002\000\010\022\uff7b\321\140\376\uff7b\001\002\000" +
    "\006\011\052\032\053\001\002\000\012\022\uff48\023\134" +
    "\321\uff48\376\uff48\001\002\000\006\011\052\032\053\001" +
    "\002\000\010\022\uff40\321\uff40\376\uff40\001\002\000\012" +
    "\022\uff48\023\134\321\uff48\376\uff48\001\002\000\010\022" +
    "\uff49\321\uff49\376\uff49\001\002\000\034\011\uff94\012\uff94" +
    "\013\uff94\032\uff94\033\uff94\044\uff94\234\144\237\uff94\372" +
    "\uff94\u0127\uff94\u012c\uff94\u0137\uff94\u0138\uff94\001\002\000\006" +
    "\022\uff46\376\uff46\001\002\000\032\011\052\012\146\013" +
    "\165\032\053\033\160\044\155\237\162\372\156\u0127\145" +
    "\u012c\163\u0137\161\u0138\157\001\002\000\020\022\uff7c\067" +
    "\uff7c\121\uff7c\124\uff7c\304\uff7c\376\uff7c\u015a\uff7c\001\002" +
    "\000\040\011\uff95\012\uff95\013\uff95\032\uff95\033\uff95\044" +
    "\uff95\107\uff95\146\uff95\207\uff95\237\uff95\372\uff95\u0127\uff95" +
    "\u012c\uff95\u0137\uff95\u0138\uff95\001\002\000\004\033\271\001" +
    "\002\000\144\004\uffa1\005\uffa1\006\uffa1\007\uffa1\010\uffa1" +
    "\011\uffa1\012\uffa1\013\uffa1\015\uffa1\016\uffa1\017\uffa1\020" +
    "\uffa1\021\uffa1\022\uffa1\023\uffa1\032\uffa1\033\uffa1\044\uffa1" +
    "\051\uffa1\054\uffa1\055\uffa1\067\uffa1\071\uffa1\102\uffa1\105" +
    "\uffa1\107\uffa1\121\uffa1\122\uffa1\124\uffa1\146\uffa1\153\uffa1" +
    "\154\uffa1\170\uffa1\173\uffa1\204\uffa1\207\uffa1\234\uffa1\237" +
    "\uffa1\262\uffa1\304\uffa1\321\uffa1\363\uffa1\372\uffa1\376\uffa1" +
    "\u0127\uffa1\u012c\uffa1\u0137\uffa1\u0138\uffa1\u015a\uffa1\001\002\000" +
    "\144\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3" +
    "\012\uffa3\013\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021" +
    "\uffa3\022\uffa3\023\uffa3\032\uffa3\033\uffa3\044\uffa3\051\uffa3" +
    "\054\uffa3\055\uffa3\067\uffa3\071\uffa3\102\uffa3\105\uffa3\107" +
    "\uffa3\121\uffa3\122\uffa3\124\uffa3\146\uffa3\153\uffa3\154\uffa3" +
    "\170\uffa3\173\uffa3\204\uffa3\207\uffa3\234\uffa3\237\uffa3\262" +
    "\uffa3\304\uffa3\321\uffa3\363\uffa3\372\uffa3\376\uffa3\u0127\uffa3" +
    "\u012c\uffa3\u0137\uffa3\u0138\uffa3\u015a\uffa3\001\002\000\144\004" +
    "\uffa5\005\uffa5\006\uffa5\007\264\010\262\011\uffa5\012\uffa5" +
    "\013\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022" +
    "\uffa5\023\uffa5\032\uffa5\033\uffa5\044\uffa5\051\uffa5\054\uffa5" +
    "\055\uffa5\067\uffa5\071\uffa5\102\uffa5\105\uffa5\107\uffa5\121" +
    "\uffa5\122\uffa5\124\uffa5\146\uffa5\153\uffa5\154\uffa5\170\uffa5" +
    "\173\uffa5\204\uffa5\207\uffa5\234\uffa5\237\uffa5\262\uffa5\304" +
    "\uffa5\321\uffa5\363\uffa5\372\uffa5\376\uffa5\u0127\uffa5\u012c\uffa5" +
    "\u0137\uffa5\u0138\uffa5\u015a\uffa5\001\002\000\030\004\253\015" +
    "\246\016\247\017\252\020\251\021\244\107\uff94\146\uff94" +
    "\170\255\207\uff94\234\144\001\002\000\140\004\uffa9\005" +
    "\236\006\235\011\uffa9\012\uffa9\013\uffa9\015\uffa9\016\uffa9" +
    "\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\032\uffa9\033" +
    "\uffa9\044\uffa9\051\uffa9\054\uffa9\055\uffa9\067\uffa9\071\uffa9" +
    "\102\uffa9\105\uffa9\107\uffa9\121\uffa9\122\uffa9\124\uffa9\146" +
    "\uffa9\153\uffa9\154\uffa9\170\uffa9\173\uffa9\204\uffa9\207\uffa9" +
    "\234\uffa9\237\uffa9\262\uffa9\304\uffa9\321\uffa9\363\uffa9\372" +
    "\uffa9\376\uffa9\u0127\uffa9\u012c\uffa9\u0137\uffa9\u0138\uffa9\u015a\uffa9" +
    "\001\002\000\146\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010" +
    "\uffe0\011\uffe0\012\uffe0\013\uffe0\015\uffe0\016\uffe0\017\uffe0" +
    "\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\233\032\uffe0\033" +
    "\uffe0\044\uffe0\051\uffe0\054\uffe0\055\uffe0\067\uffe0\071\uffe0" +
    "\102\uffe0\105\uffe0\107\uffe0\121\uffe0\122\uffe0\124\uffe0\146" +
    "\uffe0\153\uffe0\154\uffe0\170\uffe0\173\uffe0\204\uffe0\207\uffe0" +
    "\234\uffe0\237\uffe0\262\uffe0\304\uffe0\321\uffe0\363\uffe0\372" +
    "\uffe0\376\uffe0\u0127\uffe0\u012c\uffe0\u0137\uffe0\u0138\uffe0\u015a\uffe0" +
    "\001\002\000\044\022\uff8a\023\uff8a\051\uff8a\054\225\055" +
    "\226\067\uff8a\105\uff8a\121\uff8a\122\uff8a\124\uff8a\154\uff8a" +
    "\173\uff8a\204\uff8a\304\uff8a\321\uff8a\376\uff8a\u015a\uff8a\001" +
    "\002\000\144\004\uff9f\005\uff9f\006\uff9f\007\uff9f\010\uff9f" +
    "\011\uff9f\012\uff9f\013\uff9f\015\uff9f\016\uff9f\017\uff9f\020" +
    "\uff9f\021\uff9f\022\uff9f\023\uff9f\032\uff9f\033\uff9f\044\uff9f" +
    "\051\uff9f\054\uff9f\055\uff9f\067\uff9f\071\uff9f\102\uff9f\105" +
    "\uff9f\107\uff9f\121\uff9f\122\uff9f\124\uff9f\146\uff9f\153\uff9f" +
    "\154\uff9f\170\uff9f\173\uff9f\204\uff9f\207\uff9f\234\uff9f\237" +
    "\uff9f\262\uff9f\304\uff9f\321\uff9f\363\uff9f\372\uff9f\376\uff9f" +
    "\u0127\uff9f\u012c\uff9f\u0137\uff9f\u0138\uff9f\u015a\uff9f\001\002\000" +
    "\004\033\223\001\002\000\004\033\221\001\002\000\032" +
    "\011\052\012\146\013\165\032\053\033\160\044\155\237" +
    "\162\372\156\u0127\145\u012c\163\u0137\161\u0138\157\001\002" +
    "\000\004\033\176\001\002\000\144\004\uff9e\005\uff9e\006" +
    "\uff9e\007\uff9e\010\uff9e\011\uff9e\012\uff9e\013\uff9e\015\uff9e" +
    "\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\032" +
    "\uff9e\033\uff9e\044\uff9e\051\uff9e\054\uff9e\055\uff9e\067\uff9e" +
    "\071\uff9e\102\uff9e\105\uff9e\107\uff9e\121\uff9e\122\uff9e\124" +
    "\uff9e\146\uff9e\153\uff9e\154\uff9e\170\uff9e\173\uff9e\204\uff9e" +
    "\207\uff9e\234\uff9e\237\uff9e\262\uff9e\304\uff9e\321\uff9e\363" +
    "\uff9e\372\uff9e\376\uff9e\u0127\uff9e\u012c\uff9e\u0137\uff9e\u0138\uff9e" +
    "\u015a\uff9e\001\002\000\004\033\166\001\002\000\144\004" +
    "\uffa2\005\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2\012\uffa2" +
    "\013\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022" +
    "\uffa2\023\uffa2\032\uffa2\033\uffa2\044\uffa2\051\uffa2\054\uffa2" +
    "\055\uffa2\067\uffa2\071\uffa2\102\uffa2\105\uffa2\107\uffa2\121" +
    "\uffa2\122\uffa2\124\uffa2\146\uffa2\153\uffa2\154\uffa2\170\uffa2" +
    "\173\uffa2\204\uffa2\207\uffa2\234\uffa2\237\uffa2\262\uffa2\304" +
    "\uffa2\321\uffa2\363\uffa2\372\uffa2\376\uffa2\u0127\uffa2\u012c\uffa2" +
    "\u0137\uffa2\u0138\uffa2\u015a\uffa2\001\002\000\144\004\uffa0\005" +
    "\uffa0\006\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0" +
    "\015\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0\023" +
    "\uffa0\032\uffa0\033\uffa0\044\uffa0\051\uffa0\054\uffa0\055\uffa0" +
    "\067\uffa0\071\uffa0\102\uffa0\105\uffa0\107\uffa0\121\uffa0\122" +
    "\uffa0\124\uffa0\146\uffa0\153\uffa0\154\uffa0\170\uffa0\173\uffa0" +
    "\204\uffa0\207\uffa0\234\uffa0\237\uffa0\262\uffa0\304\uffa0\321" +
    "\uffa0\363\uffa0\372\uffa0\376\uffa0\u0127\uffa0\u012c\uffa0\u0137\uffa0" +
    "\u0138\uffa0\u015a\uffa0\001\002\000\012\007\171\011\052\012" +
    "\172\032\053\001\002\000\004\051\175\001\002\000\144" +
    "\004\uff99\005\uff99\006\uff99\007\uff99\010\uff99\011\uff99\012" +
    "\uff99\013\uff99\015\uff99\016\uff99\017\uff99\020\uff99\021\uff99" +
    "\022\uff99\023\uff99\032\uff99\033\uff99\044\uff99\051\uff99\054" +
    "\uff99\055\uff99\067\uff99\071\uff99\102\uff99\105\uff99\107\uff99" +
    "\121\uff99\122\uff99\124\uff99\146\uff99\153\uff99\154\uff99\170" +
    "\uff99\173\uff99\204\uff99\207\uff99\234\uff99\237\uff99\262\uff99" +
    "\304\uff99\321\uff99\363\uff99\372\uff99\376\uff99\u0127\uff99\u012c" +
    "\uff99\u0137\uff99\u0138\uff99\u015a\uff99\001\002\000\004\051\174" +
    "\001\002\000\004\051\173\001\002\000\144\004\uff97\005" +
    "\uff97\006\uff97\007\uff97\010\uff97\011\uff97\012\uff97\013\uff97" +
    "\015\uff97\016\uff97\017\uff97\020\uff97\021\uff97\022\uff97\023" +
    "\uff97\032\uff97\033\uff97\044\uff97\051\uff97\054\uff97\055\uff97" +
    "\067\uff97\071\uff97\102\uff97\105\uff97\107\uff97\121\uff97\122" +
    "\uff97\124\uff97\146\uff97\153\uff97\154\uff97\170\uff97\173\uff97" +
    "\204\uff97\207\uff97\234\uff97\237\uff97\262\uff97\304\uff97\321" +
    "\uff97\363\uff97\372\uff97\376\uff97\u0127\uff97\u012c\uff97\u0137\uff97" +
    "\u0138\uff97\u015a\uff97\001\002\000\144\004\uff96\005\uff96\006" +
    "\uff96\007\uff96\010\uff96\011\uff96\012\uff96\013\uff96\015\uff96" +
    "\016\uff96\017\uff96\020\uff96\021\uff96\022\uff96\023\uff96\032" +
    "\uff96\033\uff96\044\uff96\051\uff96\054\uff96\055\uff96\067\uff96" +
    "\071\uff96\102\uff96\105\uff96\107\uff96\121\uff96\122\uff96\124" +
    "\uff96\146\uff96\153\uff96\154\uff96\170\uff96\173\uff96\204\uff96" +
    "\207\uff96\234\uff96\237\uff96\262\uff96\304\uff96\321\uff96\363" +
    "\uff96\372\uff96\376\uff96\u0127\uff96\u012c\uff96\u0137\uff96\u0138\uff96" +
    "\u015a\uff96\001\002\000\144\004\uff98\005\uff98\006\uff98\007" +
    "\uff98\010\uff98\011\uff98\012\uff98\013\uff98\015\uff98\016\uff98" +
    "\017\uff98\020\uff98\021\uff98\022\uff98\023\uff98\032\uff98\033" +
    "\uff98\044\uff98\051\uff98\054\uff98\055\uff98\067\uff98\071\uff98" +
    "\102\uff98\105\uff98\107\uff98\121\uff98\122\uff98\124\uff98\146" +
    "\uff98\153\uff98\154\uff98\170\uff98\173\uff98\204\uff98\207\uff98" +
    "\234\uff98\237\uff98\262\uff98\304\uff98\321\uff98\363\uff98\372" +
    "\uff98\376\uff98\u0127\uff98\u012c\uff98\u0137\uff98\u0138\uff98\u015a\uff98" +
    "\001\002\000\012\007\171\011\052\012\172\032\053\001" +
    "\002\000\144\004\uff9a\005\uff9a\006\uff9a\007\uff9a\010\uff9a" +
    "\011\uff9a\012\uff9a\013\uff9a\015\uff9a\016\uff9a\017\uff9a\020" +
    "\uff9a\021\uff9a\022\uff9a\023\uff9a\032\uff9a\033\uff9a\044\uff9a" +
    "\051\uff9a\054\uff9a\055\uff9a\067\uff9a\071\uff9a\102\uff9a\105" +
    "\uff9a\107\uff9a\121\uff9a\122\uff9a\124\uff9a\146\uff9a\153\uff9a" +
    "\154\uff9a\170\uff9a\173\uff9a\204\uff9a\207\uff9a\234\uff9a\237" +
    "\uff9a\262\uff9a\304\uff9a\321\uff9a\363\uff9a\372\uff9a\376\uff9a" +
    "\u0127\uff9a\u012c\uff9a\u0137\uff9a\u0138\uff9a\u015a\uff9a\001\002\000" +
    "\010\107\203\146\202\207\201\001\002\000\032\011\052" +
    "\012\146\013\165\032\053\033\160\044\155\237\162\372" +
    "\156\u0127\145\u012c\163\u0137\161\u0138\157\001\002\000\004" +
    "\033\211\001\002\000\032\011\052\012\146\013\165\032" +
    "\053\033\160\044\155\237\162\372\156\u0127\145\u012c\163" +
    "\u0137\161\u0138\157\001\002\000\004\051\205\001\002\000" +
    "\144\004\uffa4\005\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4" +
    "\012\uffa4\013\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021" +
    "\uffa4\022\uffa4\023\uffa4\032\uffa4\033\uffa4\044\uffa4\051\uffa4" +
    "\054\uffa4\055\uffa4\067\uffa4\071\uffa4\102\uffa4\105\uffa4\107" +
    "\uffa4\121\uffa4\122\uffa4\124\uffa4\146\uffa4\153\uffa4\154\uffa4" +
    "\170\uffa4\173\uffa4\204\uffa4\207\uffa4\234\uffa4\237\uffa4\262" +
    "\uffa4\304\uffa4\321\uffa4\363\uffa4\372\uffa4\376\uffa4\u0127\uffa4" +
    "\u012c\uffa4\u0137\uffa4\u0138\uffa4\u015a\uffa4\001\002\000\004\054" +
    "\207\001\002\000\032\011\052\012\146\013\165\032\053" +
    "\033\160\044\155\237\162\372\156\u0127\145\u012c\163\u0137" +
    "\161\u0138\157\001\002\000\044\022\uff7e\023\uff7e\051\uff7e" +
    "\054\uff7e\055\uff7e\067\uff7e\105\uff7e\121\uff7e\122\uff7e\124" +
    "\uff7e\154\uff7e\173\uff7e\204\uff7e\304\uff7e\321\uff7e\376\uff7e" +
    "\u015a\uff7e\001\002\000\032\011\052\012\146\013\165\032" +
    "\053\033\160\044\155\237\162\372\156\u0127\145\u012c\163" +
    "\u0137\161\u0138\157\001\002\000\006\023\213\051\uff8e\001" +
    "\002\000\032\011\052\012\146\013\165\032\053\033\160" +
    "\044\155\237\162\372\156\u0127\145\u012c\163\u0137\161\u0138" +
    "\157\001\002\000\004\051\215\001\002\000\044\022\uff7f" +
    "\023\uff7f\051\uff7f\054\uff7f\055\uff7f\067\uff7f\105\uff7f\121" +
    "\uff7f\122\uff7f\124\uff7f\154\uff7f\173\uff7f\204\uff7f\304\uff7f" +
    "\321\uff7f\376\uff7f\u015a\uff7f\001\002\000\006\023\213\051" +
    "\uff8e\001\002\000\004\051\uff8f\001\002\000\044\022\uff7d" +
    "\023\uff7d\051\uff7d\054\uff7d\055\uff7d\067\uff7d\105\uff7d\121" +
    "\uff7d\122\uff7d\124\uff7d\154\uff7d\173\uff7d\204\uff7d\304\uff7d" +
    "\321\uff7d\376\uff7d\u015a\uff7d\001\002\000\012\007\171\011" +
    "\052\012\172\032\053\001\002\000\144\004\uff9b\005\uff9b" +
    "\006\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b\013\uff9b\015" +
    "\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b" +
    "\032\uff9b\033\uff9b\044\uff9b\051\uff9b\054\uff9b\055\uff9b\067" +
    "\uff9b\071\uff9b\102\uff9b\105\uff9b\107\uff9b\121\uff9b\122\uff9b" +
    "\124\uff9b\146\uff9b\153\uff9b\154\uff9b\170\uff9b\173\uff9b\204" +
    "\uff9b\207\uff9b\234\uff9b\237\uff9b\262\uff9b\304\uff9b\321\uff9b" +
    "\363\uff9b\372\uff9b\376\uff9b\u0127\uff9b\u012c\uff9b\u0137\uff9b\u0138" +
    "\uff9b\u015a\uff9b\001\002\000\012\007\171\011\052\012\172" +
    "\032\053\001\002\000\144\004\uff9c\005\uff9c\006\uff9c\007" +
    "\uff9c\010\uff9c\011\uff9c\012\uff9c\013\uff9c\015\uff9c\016\uff9c" +
    "\017\uff9c\020\uff9c\021\uff9c\022\uff9c\023\uff9c\032\uff9c\033" +
    "\uff9c\044\uff9c\051\uff9c\054\uff9c\055\uff9c\067\uff9c\071\uff9c" +
    "\102\uff9c\105\uff9c\107\uff9c\121\uff9c\122\uff9c\124\uff9c\146" +
    "\uff9c\153\uff9c\154\uff9c\170\uff9c\173\uff9c\204\uff9c\207\uff9c" +
    "\234\uff9c\237\uff9c\262\uff9c\304\uff9c\321\uff9c\363\uff9c\372" +
    "\uff9c\376\uff9c\u0127\uff9c\u012c\uff9c\u0137\uff9c\u0138\uff9c\u015a\uff9c" +
    "\001\002\000\034\011\uff94\012\uff94\013\uff94\032\uff94\033" +
    "\uff94\044\uff94\234\144\237\uff94\372\uff94\u0127\uff94\u012c\uff94" +
    "\u0137\uff94\u0138\uff94\001\002\000\034\011\uff94\012\uff94\013" +
    "\uff94\032\uff94\033\uff94\044\uff94\234\144\237\uff94\372\uff94" +
    "\u0127\uff94\u012c\uff94\u0137\uff94\u0138\uff94\001\002\000\040\022" +
    "\uff8d\023\uff8d\051\uff8d\067\uff8d\105\uff8d\121\uff8d\122\uff8d" +
    "\124\uff8d\154\uff8d\173\uff8d\204\uff8d\304\uff8d\321\uff8d\376" +
    "\uff8d\u015a\uff8d\001\002\000\040\022\uff8b\023\uff8b\051\uff8b" +
    "\067\uff8b\105\uff8b\121\uff8b\122\uff8b\124\uff8b\154\uff8b\173" +
    "\uff8b\204\uff8b\304\uff8b\321\uff8b\376\uff8b\u015a\uff8b\001\002" +
    "\000\040\022\uff8c\023\uff8c\051\uff8c\067\uff8c\105\uff8c\121" +
    "\uff8c\122\uff8c\124\uff8c\154\uff8c\173\uff8c\204\uff8c\304\uff8c" +
    "\321\uff8c\376\uff8c\u015a\uff8c\001\002\000\144\004\uffe2\005" +
    "\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2" +
    "\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023" +
    "\uffe2\032\uffe2\033\uffe2\044\uffe2\051\uffe2\054\uffe2\055\uffe2" +
    "\067\uffe2\071\uffe2\102\uffe2\105\uffe2\107\uffe2\121\uffe2\122" +
    "\uffe2\124\uffe2\146\uffe2\153\uffe2\154\uffe2\170\uffe2\173\uffe2" +
    "\204\uffe2\207\uffe2\234\uffe2\237\uffe2\262\uffe2\304\uffe2\321" +
    "\uffe2\363\uffe2\372\uffe2\376\uffe2\u0127\uffe2\u012c\uffe2\u0137\uffe2" +
    "\u0138\uffe2\u015a\uffe2\001\002\000\006\011\052\032\053\001" +
    "\002\000\144\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1" +
    "\011\uffe1\012\uffe1\013\uffe1\015\uffe1\016\uffe1\017\uffe1\020" +
    "\uffe1\021\uffe1\022\uffe1\023\uffe1\032\uffe1\033\uffe1\044\uffe1" +
    "\051\uffe1\054\uffe1\055\uffe1\067\uffe1\071\uffe1\102\uffe1\105" +
    "\uffe1\107\uffe1\121\uffe1\122\uffe1\124\uffe1\146\uffe1\153\uffe1" +
    "\154\uffe1\170\uffe1\173\uffe1\204\uffe1\207\uffe1\234\uffe1\237" +
    "\uffe1\262\uffe1\304\uffe1\321\uffe1\363\uffe1\372\uffe1\376\uffe1" +
    "\u0127\uffe1\u012c\uffe1\u0137\uffe1\u0138\uffe1\u015a\uffe1\001\002\000" +
    "\032\011\052\012\146\013\165\032\053\033\160\044\155" +
    "\237\162\372\156\u0127\145\u012c\163\u0137\161\u0138\157\001" +
    "\002\000\032\011\052\012\146\013\165\032\053\033\160" +
    "\044\155\237\162\372\156\u0127\145\u012c\163\u0137\161\u0138" +
    "\157\001\002\000\134\004\uffac\011\uffac\012\uffac\013\uffac" +
    "\015\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023" +
    "\uffac\032\uffac\033\uffac\044\uffac\051\uffac\054\uffac\055\uffac" +
    "\067\uffac\071\uffac\102\uffac\105\uffac\107\uffac\121\uffac\122" +
    "\uffac\124\uffac\146\uffac\153\uffac\154\uffac\170\uffac\173\uffac" +
    "\204\uffac\207\uffac\234\uffac\237\uffac\262\uffac\304\uffac\321" +
    "\uffac\363\uffac\372\uffac\376\uffac\u0127\uffac\u012c\uffac\u0137\uffac" +
    "\u0138\uffac\u015a\uffac\001\002\000\140\004\uffa9\005\236\006" +
    "\235\011\uffa9\012\uffa9\013\uffa9\015\uffa9\016\uffa9\017\uffa9" +
    "\020\uffa9\021\uffa9\022\uffa9\023\uffa9\032\uffa9\033\uffa9\044" +
    "\uffa9\051\uffa9\054\uffa9\055\uffa9\067\uffa9\071\uffa9\102\uffa9" +
    "\105\uffa9\107\uffa9\121\uffa9\122\uffa9\124\uffa9\146\uffa9\153" +
    "\uffa9\154\uffa9\170\uffa9\173\uffa9\204\uffa9\207\uffa9\234\uffa9" +
    "\237\uffa9\262\uffa9\304\uffa9\321\uffa9\363\uffa9\372\uffa9\376" +
    "\uffa9\u0127\uffa9\u012c\uffa9\u0137\uffa9\u0138\uffa9\u015a\uffa9\001\002" +
    "\000\134\004\uffab\011\uffab\012\uffab\013\uffab\015\uffab\016" +
    "\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab\032\uffab" +
    "\033\uffab\044\uffab\051\uffab\054\uffab\055\uffab\067\uffab\071" +
    "\uffab\102\uffab\105\uffab\107\uffab\121\uffab\122\uffab\124\uffab" +
    "\146\uffab\153\uffab\154\uffab\170\uffab\173\uffab\204\uffab\207" +
    "\uffab\234\uffab\237\uffab\262\uffab\304\uffab\321\uffab\363\uffab" +
    "\372\uffab\376\uffab\u0127\uffab\u012c\uffab\u0137\uffab\u0138\uffab\u015a" +
    "\uffab\001\002\000\140\004\uffa9\005\236\006\235\011\uffa9" +
    "\012\uffa9\013\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021" +
    "\uffa9\022\uffa9\023\uffa9\032\uffa9\033\uffa9\044\uffa9\051\uffa9" +
    "\054\uffa9\055\uffa9\067\uffa9\071\uffa9\102\uffa9\105\uffa9\107" +
    "\uffa9\121\uffa9\122\uffa9\124\uffa9\146\uffa9\153\uffa9\154\uffa9" +
    "\170\uffa9\173\uffa9\204\uffa9\207\uffa9\234\uffa9\237\uffa9\262" +
    "\uffa9\304\uffa9\321\uffa9\363\uffa9\372\uffa9\376\uffa9\u0127\uffa9" +
    "\u012c\uffa9\u0137\uffa9\u0138\uffa9\u015a\uffa9\001\002\000\134\004" +
    "\uffaa\011\uffaa\012\uffaa\013\uffaa\015\uffaa\016\uffaa\017\uffaa" +
    "\020\uffaa\021\uffaa\022\uffaa\023\uffaa\032\uffaa\033\uffaa\044" +
    "\uffaa\051\uffaa\054\uffaa\055\uffaa\067\uffaa\071\uffaa\102\uffaa" +
    "\105\uffaa\107\uffaa\121\uffaa\122\uffaa\124\uffaa\146\uffaa\153" +
    "\uffaa\154\uffaa\170\uffaa\173\uffaa\204\uffaa\207\uffaa\234\uffaa" +
    "\237\uffaa\262\uffaa\304\uffaa\321\uffaa\363\uffaa\372\uffaa\376" +
    "\uffaa\u0127\uffaa\u012c\uffaa\u0137\uffaa\u0138\uffaa\u015a\uffaa\001\002" +
    "\000\032\011\uff87\012\uff87\013\uff87\032\uff87\033\uff87\044" +
    "\uff87\237\uff87\372\uff87\u0127\uff87\u012c\uff87\u0137\uff87\u0138\uff87" +
    "\001\002\000\010\107\203\146\202\207\201\001\002\000" +
    "\032\011\uff84\012\uff84\013\uff84\032\uff84\033\uff84\044\uff84" +
    "\237\uff84\372\uff84\u0127\uff84\u012c\uff84\u0137\uff84\u0138\uff84\001" +
    "\002\000\032\011\uff83\012\uff83\013\uff83\032\uff83\033\uff83" +
    "\044\uff83\237\uff83\372\uff83\u0127\uff83\u012c\uff83\u0137\uff83\u0138" +
    "\uff83\001\002\000\032\011\052\012\146\013\165\032\053" +
    "\033\160\044\155\237\162\372\156\u0127\145\u012c\163\u0137" +
    "\161\u0138\157\001\002\000\032\011\uff85\012\uff85\013\uff85" +
    "\032\uff85\033\uff85\044\uff85\237\uff85\372\uff85\u0127\uff85\u012c" +
    "\uff85\u0137\uff85\u0138\uff85\001\002\000\032\011\uff86\012\uff86" +
    "\013\uff86\032\uff86\033\uff86\044\uff86\237\uff86\372\uff86\u0127" +
    "\uff86\u012c\uff86\u0137\uff86\u0138\uff86\001\002\000\032\011\uff88" +
    "\012\uff88\013\uff88\032\uff88\033\uff88\044\uff88\237\uff88\372" +
    "\uff88\u0127\uff88\u012c\uff88\u0137\uff88\u0138\uff88\001\002\000\044" +
    "\022\uff89\023\uff89\051\uff89\054\uff89\055\uff89\067\uff89\105" +
    "\uff89\121\uff89\122\uff89\124\uff89\154\uff89\173\uff89\204\uff89" +
    "\304\uff89\321\uff89\376\uff89\u015a\uff89\001\002\000\006\234" +
    "\144\237\uff94\001\002\000\004\237\257\001\002\000\044" +
    "\022\uff81\023\uff81\051\uff81\054\uff81\055\uff81\067\uff81\105" +
    "\uff81\121\uff81\122\uff81\124\uff81\154\uff81\173\uff81\204\uff81" +
    "\304\uff81\321\uff81\376\uff81\u015a\uff81\001\002\000\044\022" +
    "\uff82\023\uff82\051\uff82\054\uff82\055\uff82\067\uff82\105\uff82" +
    "\121\uff82\122\uff82\124\uff82\154\uff82\173\uff82\204\uff82\304" +
    "\uff82\321\uff82\376\uff82\u015a\uff82\001\002\000\044\022\uff80" +
    "\023\uff80\051\uff80\054\uff80\055\uff80\067\uff80\105\uff80\121" +
    "\uff80\122\uff80\124\uff80\154\uff80\173\uff80\204\uff80\304\uff80" +
    "\321\uff80\376\uff80\u015a\uff80\001\002\000\032\011\052\012" +
    "\146\013\165\032\053\033\160\044\155\237\162\372\156" +
    "\u0127\145\u012c\163\u0137\161\u0138\157\001\002\000\140\004" +
    "\uffa8\005\uffa8\006\uffa8\011\uffa8\012\uffa8\013\uffa8\015\uffa8" +
    "\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\032" +
    "\uffa8\033\uffa8\044\uffa8\051\uffa8\054\uffa8\055\uffa8\067\uffa8" +
    "\071\uffa8\102\uffa8\105\uffa8\107\uffa8\121\uffa8\122\uffa8\124" +
    "\uffa8\146\uffa8\153\uffa8\154\uffa8\170\uffa8\173\uffa8\204\uffa8" +
    "\207\uffa8\234\uffa8\237\uffa8\262\uffa8\304\uffa8\321\uffa8\363" +
    "\uffa8\372\uffa8\376\uffa8\u0127\uffa8\u012c\uffa8\u0137\uffa8\u0138\uffa8" +
    "\u015a\uffa8\001\002\000\032\011\052\012\146\013\165\032" +
    "\053\033\160\044\155\237\162\372\156\u0127\145\u012c\163" +
    "\u0137\161\u0138\157\001\002\000\144\004\uffa5\005\uffa5\006" +
    "\uffa5\007\264\010\262\011\uffa5\012\uffa5\013\uffa5\015\uffa5" +
    "\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\032" +
    "\uffa5\033\uffa5\044\uffa5\051\uffa5\054\uffa5\055\uffa5\067\uffa5" +
    "\071\uffa5\102\uffa5\105\uffa5\107\uffa5\121\uffa5\122\uffa5\124" +
    "\uffa5\146\uffa5\153\uffa5\154\uffa5\170\uffa5\173\uffa5\204\uffa5" +
    "\207\uffa5\234\uffa5\237\uffa5\262\uffa5\304\uffa5\321\uffa5\363" +
    "\uffa5\372\uffa5\376\uffa5\u0127\uffa5\u012c\uffa5\u0137\uffa5\u0138\uffa5" +
    "\u015a\uffa5\001\002\000\140\004\uffa7\005\uffa7\006\uffa7\011" +
    "\uffa7\012\uffa7\013\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7" +
    "\021\uffa7\022\uffa7\023\uffa7\032\uffa7\033\uffa7\044\uffa7\051" +
    "\uffa7\054\uffa7\055\uffa7\067\uffa7\071\uffa7\102\uffa7\105\uffa7" +
    "\107\uffa7\121\uffa7\122\uffa7\124\uffa7\146\uffa7\153\uffa7\154" +
    "\uffa7\170\uffa7\173\uffa7\204\uffa7\207\uffa7\234\uffa7\237\uffa7" +
    "\262\uffa7\304\uffa7\321\uffa7\363\uffa7\372\uffa7\376\uffa7\u0127" +
    "\uffa7\u012c\uffa7\u0137\uffa7\u0138\uffa7\u015a\uffa7\001\002\000\144" +
    "\004\uffa5\005\uffa5\006\uffa5\007\264\010\262\011\uffa5\012" +
    "\uffa5\013\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5" +
    "\022\uffa5\023\uffa5\032\uffa5\033\uffa5\044\uffa5\051\uffa5\054" +
    "\uffa5\055\uffa5\067\uffa5\071\uffa5\102\uffa5\105\uffa5\107\uffa5" +
    "\121\uffa5\122\uffa5\124\uffa5\146\uffa5\153\uffa5\154\uffa5\170" +
    "\uffa5\173\uffa5\204\uffa5\207\uffa5\234\uffa5\237\uffa5\262\uffa5" +
    "\304\uffa5\321\uffa5\363\uffa5\372\uffa5\376\uffa5\u0127\uffa5\u012c" +
    "\uffa5\u0137\uffa5\u0138\uffa5\u015a\uffa5\001\002\000\140\004\uffa6" +
    "\005\uffa6\006\uffa6\011\uffa6\012\uffa6\013\uffa6\015\uffa6\016" +
    "\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\032\uffa6" +
    "\033\uffa6\044\uffa6\051\uffa6\054\uffa6\055\uffa6\067\uffa6\071" +
    "\uffa6\102\uffa6\105\uffa6\107\uffa6\121\uffa6\122\uffa6\124\uffa6" +
    "\146\uffa6\153\uffa6\154\uffa6\170\uffa6\173\uffa6\204\uffa6\207" +
    "\uffa6\234\uffa6\237\uffa6\262\uffa6\304\uffa6\321\uffa6\363\uffa6" +
    "\372\uffa6\376\uffa6\u0127\uffa6\u012c\uffa6\u0137\uffa6\u0138\uffa6\u015a" +
    "\uffa6\001\002\000\012\007\171\011\052\012\172\032\053" +
    "\001\002\000\144\004\uff9d\005\uff9d\006\uff9d\007\uff9d\010" +
    "\uff9d\011\uff9d\012\uff9d\013\uff9d\015\uff9d\016\uff9d\017\uff9d" +
    "\020\uff9d\021\uff9d\022\uff9d\023\uff9d\032\uff9d\033\uff9d\044" +
    "\uff9d\051\uff9d\054\uff9d\055\uff9d\067\uff9d\071\uff9d\102\uff9d" +
    "\105\uff9d\107\uff9d\121\uff9d\122\uff9d\124\uff9d\146\uff9d\153" +
    "\uff9d\154\uff9d\170\uff9d\173\uff9d\204\uff9d\207\uff9d\234\uff9d" +
    "\237\uff9d\262\uff9d\304\uff9d\321\uff9d\363\uff9d\372\uff9d\376" +
    "\uff9d\u0127\uff9d\u012c\uff9d\u0137\uff9d\u0138\uff9d\u015a\uff9d\001\002" +
    "\000\034\011\052\012\146\013\165\032\053\033\160\044" +
    "\155\237\162\252\276\372\156\u0127\145\u012c\163\u0137\161" +
    "\u0138\157\001\002\000\014\022\uff41\023\277\102\uff41\321" +
    "\uff41\376\uff41\001\002\000\014\022\uff43\023\uff43\102\uff43" +
    "\321\uff43\376\uff43\001\002\000\014\022\uff44\023\uff44\102" +
    "\uff44\321\uff44\376\uff44\001\002\000\006\011\052\032\053" +
    "\001\002\000\012\022\uff45\102\uff45\321\uff45\376\uff45\001" +
    "\002\000\012\022\uff42\102\uff42\321\uff42\376\uff42\001\002" +
    "\000\160\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011" +
    "\uffe5\012\uffe5\013\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5" +
    "\021\uffe5\022\uffe5\023\uffe5\032\uffe5\033\uffe5\044\uffe5\051" +
    "\uffe5\053\uffe5\054\uffe5\055\uffe5\061\uffe5\067\uffe5\071\uffe5" +
    "\102\uffe5\105\uffe5\107\uffe5\121\uffe5\122\uffe5\124\uffe5\146" +
    "\uffe5\153\uffe5\154\uffe5\170\uffe5\171\uffe5\173\uffe5\204\uffe5" +
    "\207\uffe5\234\uffe5\237\uffe5\252\uffe5\262\uffe5\301\uffe5\302" +
    "\uffe5\304\uffe5\321\uffe5\363\uffe5\372\uffe5\376\uffe5\u0127\uffe5" +
    "\u012c\uffe5\u0137\uffe5\u0138\uffe5\u015a\uffe5\001\002\000\006\011" +
    "\052\032\053\001\002\000\202\004\uffe6\005\uffe6\006\uffe6" +
    "\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\015\uffe6\016" +
    "\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\307" +
    "\025\uffe6\032\uffe6\033\uffe6\044\uffe6\051\uffe6\053\uffe6\054" +
    "\uffe6\055\uffe6\061\uffe6\067\uffe6\071\uffe6\072\uffe6\075\uffe6" +
    "\102\uffe6\105\uffe6\107\uffe6\121\uffe6\122\uffe6\124\uffe6\134" +
    "\uffe6\146\uffe6\153\uffe6\154\uffe6\167\uffe6\170\uffe6\171\uffe6" +
    "\173\uffe6\204\uffe6\207\uffe6\234\uffe6\237\uffe6\252\uffe6\261" +
    "\uffe6\262\uffe6\301\uffe6\302\uffe6\304\uffe6\321\uffe6\327\uffe6" +
    "\331\uffe6\363\uffe6\372\uffe6\376\uffe6\u0127\uffe6\u012c\uffe6\u0137" +
    "\uffe6\u0138\uffe6\u015a\uffe6\001\002\000\160\004\uffe4\005\uffe4" +
    "\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\015" +
    "\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4" +
    "\032\uffe4\033\uffe4\044\uffe4\051\uffe4\053\uffe4\054\uffe4\055" +
    "\uffe4\061\uffe4\067\uffe4\071\uffe4\102\uffe4\105\uffe4\107\uffe4" +
    "\121\uffe4\122\uffe4\124\uffe4\146\uffe4\153\uffe4\154\uffe4\170" +
    "\uffe4\171\uffe4\173\uffe4\204\uffe4\207\uffe4\234\uffe4\237\uffe4" +
    "\252\uffe4\262\uffe4\301\uffe4\302\uffe4\304\uffe4\321\uffe4\363" +
    "\uffe4\372\uffe4\376\uffe4\u0127\uffe4\u012c\uffe4\u0137\uffe4\u0138\uffe4" +
    "\u015a\uffe4\001\002\000\200\004\uffe8\005\uffe8\006\uffe8\007" +
    "\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\015\uffe8\016\uffe8" +
    "\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\025\uffe8\032" +
    "\uffe8\033\uffe8\044\uffe8\051\uffe8\053\uffe8\054\uffe8\055\uffe8" +
    "\061\uffe8\067\uffe8\071\uffe8\072\uffe8\075\uffe8\102\uffe8\105" +
    "\uffe8\107\uffe8\121\uffe8\122\uffe8\124\uffe8\134\uffe8\146\uffe8" +
    "\153\uffe8\154\uffe8\167\uffe8\170\uffe8\171\uffe8\173\uffe8\204" +
    "\uffe8\207\uffe8\234\uffe8\237\uffe8\252\uffe8\261\uffe8\262\uffe8" +
    "\301\uffe8\302\uffe8\304\uffe8\321\uffe8\327\uffe8\331\uffe8\363" +
    "\uffe8\372\uffe8\376\uffe8\u0127\uffe8\u012c\uffe8\u0137\uffe8\u0138\uffe8" +
    "\u015a\uffe8\001\002\000\006\011\052\032\053\001\002\000" +
    "\200\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7" +
    "\012\uffe7\013\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021" +
    "\uffe7\022\uffe7\023\uffe7\025\uffe7\032\uffe7\033\uffe7\044\uffe7" +
    "\051\uffe7\053\uffe7\054\uffe7\055\uffe7\061\uffe7\067\uffe7\071" +
    "\uffe7\072\uffe7\075\uffe7\102\uffe7\105\uffe7\107\uffe7\121\uffe7" +
    "\122\uffe7\124\uffe7\134\uffe7\146\uffe7\153\uffe7\154\uffe7\167" +
    "\uffe7\170\uffe7\171\uffe7\173\uffe7\204\uffe7\207\uffe7\234\uffe7" +
    "\237\uffe7\252\uffe7\261\uffe7\262\uffe7\301\uffe7\302\uffe7\304" +
    "\uffe7\321\uffe7\327\uffe7\331\uffe7\363\uffe7\372\uffe7\376\uffe7" +
    "\u0127\uffe7\u012c\uffe7\u0137\uffe7\u0138\uffe7\u015a\uffe7\001\002\000" +
    "\012\011\uff4d\032\uff4d\102\312\266\uff4d\001\002\000\010" +
    "\011\uff4e\032\uff4e\266\uff4e\001\002\000\010\011\052\032" +
    "\053\266\316\001\002\000\006\022\uff4f\376\uff4f\001\002" +
    "\000\004\102\325\001\002\000\004\033\317\001\002\000" +
    "\006\011\052\032\053\001\002\000\006\022\uff4c\376\uff4c" +
    "\001\002\000\004\023\322\001\002\000\004\012\323\001" +
    "\002\000\004\051\324\001\002\000\006\022\uff47\376\uff47" +
    "\001\002\000\006\011\052\032\053\001\002\000\010\022" +
    "\uff7b\321\140\376\uff7b\001\002\000\006\022\uff4b\376\uff4b" +
    "\001\002\000\012\022\uff48\023\134\321\uff48\376\uff48\001" +
    "\002\000\010\022\uff4a\321\uff4a\376\uff4a\001\002\000\040" +
    "\002\ufffe\003\035\061\032\104\024\125\022\141\011\152" +
    "\010\157\027\161\023\206\026\246\012\247\042\255\037" +
    "\267\040\301\034\001\002\000\004\002\uffff\001\002\000" +
    "\006\022\uffc5\376\uffc5\001\002\000\006\022\uffc3\376\uffc3" +
    "\001\002\000\010\011\uffde\032\uffde\143\347\001\002\000" +
    "\010\011\uffde\032\uffde\143\347\001\002\000\010\011\uffde" +
    "\032\uffde\143\347\001\002\000\006\022\uffc4\376\uffc4\001" +
    "\002\000\010\011\uffde\032\uffde\143\347\001\002\000\010" +
    "\011\uffde\032\uffde\143\347\001\002\000\006\022\uffc6\376" +
    "\uffc6\001\002\000\006\022\uffc1\376\uffc1\001\002\000\006" +
    "\022\uffc2\376\uffc2\001\002\000\004\333\356\001\002\000" +
    "\006\011\052\032\053\001\002\000\010\022\uffbe\023\352" +
    "\376\uffbe\001\002\000\006\011\052\032\053\001\002\000" +
    "\006\022\uffc0\376\uffc0\001\002\000\010\022\uffbe\023\352" +
    "\376\uffbe\001\002\000\006\022\uffbf\376\uffbf\001\002\000" +
    "\006\011\uffdf\032\uffdf\001\002\000\006\011\052\032\053" +
    "\001\002\000\010\022\uffb7\023\361\376\uffb7\001\002\000" +
    "\006\011\052\032\053\001\002\000\006\022\uffb9\376\uffb9" +
    "\001\002\000\010\022\uffb7\023\361\376\uffb7\001\002\000" +
    "\006\022\uffb8\376\uffb8\001\002\000\006\011\052\032\053" +
    "\001\002\000\006\022\uffbd\376\uffbd\001\002\000\006\011" +
    "\052\032\053\001\002\000\004\u015a\376\001\002\000\010" +
    "\022\uffb3\023\373\376\uffb3\001\002\000\006\022\uffb6\376" +
    "\uffb6\001\002\000\006\011\052\032\053\001\002\000\010" +
    "\022\uffb3\023\373\376\uffb3\001\002\000\006\022\uffb4\376" +
    "\uffb4\001\002\000\006\011\052\032\053\001\002\000\010" +
    "\022\uffb5\023\uffb5\376\uffb5\001\002\000\006\011\052\032" +
    "\053\001\002\000\010\022\uffba\023\u0102\376\uffba\001\002" +
    "\000\006\011\052\032\053\001\002\000\006\022\uffbc\376" +
    "\uffbc\001\002\000\010\022\uffba\023\u0102\376\uffba\001\002" +
    "\000\006\022\uffbb\376\uffbb\001\002\000\006\022\ufeb0\376" +
    "\ufeb0\001\002\000\006\022\ufeab\376\ufeab\001\002\000\006" +
    "\337\u01f9\365\u01f7\001\002\000\010\011\052\032\053\214" +
    "\u01ef\001\002\000\006\022\ufeac\376\ufeac\001\002\000\006" +
    "\011\052\032\053\001\002\000\006\022\ufeaf\376\ufeaf\001" +
    "\002\000\006\022\ufeae\376\ufeae\001\002\000\006\022\ufeb1" +
    "\376\ufeb1\001\002\000\006\011\052\032\053\001\002\000" +
    "\006\011\052\032\053\001\002\000\006\022\ufead\376\ufead" +
    "\001\002\000\006\033\u0114\071\ufea2\001\002\000\004\071" +
    "\ufea3\001\002\000\006\011\052\032\053\001\002\000\004" +
    "\071\u0116\001\002\000\004\152\010\001\002\000\006\022" +
    "\ufea4\376\ufea4\001\002\000\004\051\u0119\001\002\000\020" +
    "\022\uff76\071\uff76\252\uff76\302\uff76\321\uff76\376\uff76\u015a" +
    "\uff76\001\002\000\010\053\u011d\061\u011c\301\u0120\001\002" +
    "\000\006\022\ufea1\376\ufea1\001\002\000\004\156\u01de\001" +
    "\002\000\022\011\052\032\053\072\ufed1\134\ufed1\151\u012d" +
    "\167\u0131\261\ufed1\331\ufed1\001\002\000\006\022\ufe9e\376" +
    "\ufe9e\001\002\000\006\022\ufea0\376\ufea0\001\002\000\014" +
    "\011\ufe91\032\ufe91\143\ufe91\156\u0122\167\u0123\001\002\000" +
    "\010\022\ufe8f\023\u0129\376\ufe8f\001\002\000\010\011\uffde" +
    "\032\uffde\143\347\001\002\000\010\011\ufe92\032\ufe92\143" +
    "\ufe92\001\002\000\010\011\uffde\032\uffde\143\347\001\002" +
    "\000\006\011\052\032\053\001\002\000\010\022\ufe94\023" +
    "\ufe94\376\ufe94\001\002\000\006\011\052\032\053\001\002" +
    "\000\010\022\ufe93\023\ufe93\376\ufe93\001\002\000\014\011" +
    "\ufe91\032\ufe91\143\ufe91\156\u0122\167\u0123\001\002\000\006" +
    "\022\ufe95\376\ufe95\001\002\000\010\022\ufe8f\023\u0129\376" +
    "\ufe8f\001\002\000\006\022\ufe90\376\ufe90\001\002\000\006" +
    "\011\052\032\053\001\002\000\012\022\ufef6\023\ufef6\051" +
    "\ufef6\376\ufef6\001\002\000\012\022\ufef7\023\ufef7\051\ufef7" +
    "\376\ufef7\001\002\000\010\022\ufef3\023\u01d7\376\ufef3\001" +
    "\002\000\006\011\052\032\053\001\002\000\042\032\u017b" +
    "\233\u017a\276\u0188\357\u017f\371\u0186\377\u0180\u010c\u0177\u0115" +
    "\u0181\u0118\u0176\u011b\u0183\u012e\u0182\u013a\u0179\u0144\u0178\u0147\u017c" +
    "\u0154\u0185\u0155\u017e\001\002\000\012\072\u0136\134\u0135\261" +
    "\u0139\331\u0137\001\002\000\012\022\ufef5\023\ufef5\051\ufef5" +
    "\376\ufef5\001\002\000\006\033\ufefc\234\u0155\001\002\000" +
    "\004\176\u014c\001\002\000\004\176\u0149\001\002\000\012" +
    "\022\ufebd\023\ufebd\051\ufebd\376\ufebd\001\002\000\010\033" +
    "\ufeca\145\u013a\231\u013b\001\002\000\032\022\ufecc\023\ufecc" +
    "\033\ufecc\051\ufecc\072\ufecc\075\ufecc\134\ufecc\151\ufecc\167" +
    "\ufecc\261\ufecc\331\ufecc\376\ufecc\001\002\000\032\022\ufecb" +
    "\023\ufecb\033\ufecb\051\ufecb\072\ufecb\075\ufecb\134\ufecb\151" +
    "\ufecb\167\ufecb\261\ufecb\331\ufecb\376\ufecb\001\002\000\004" +
    "\033\u013d\001\002\000\006\011\052\032\053\001\002\000" +
    "\012\022\ufebb\023\ufebb\051\ufebb\376\ufebb\001\002\000\012" +
    "\023\uff66\051\uff66\262\u0140\363\u0141\001\002\000\044\011" +
    "\uff67\012\uff67\013\uff67\022\uff67\023\uff67\032\uff67\033\uff67" +
    "\044\uff67\051\uff67\067\uff67\237\uff67\372\uff67\376\uff67\u0127" +
    "\uff67\u012c\uff67\u0137\uff67\u0138\uff67\001\002\000\044\011\uff68" +
    "\012\uff68\013\uff68\022\uff68\023\uff68\032\uff68\033\uff68\044" +
    "\uff68\051\uff68\067\uff68\237\uff68\372\uff68\376\uff68\u0127\uff68" +
    "\u012c\uff68\u0137\uff68\u0138\uff68\001\002\000\006\023\u0143\051" +
    "\ufeb6\001\002\000\006\011\052\032\053\001\002\000\004" +
    "\051\u0145\001\002\000\012\022\ufeb8\023\ufeb8\051\ufeb8\376" +
    "\ufeb8\001\002\000\012\023\uff66\051\uff66\262\u0140\363\u0141" +
    "\001\002\000\006\023\u0143\051\ufeb6\001\002\000\004\051" +
    "\ufeb7\001\002\000\010\033\ufeca\145\u013a\231\u013b\001\002" +
    "\000\004\033\u013d\001\002\000\012\022\ufebc\023\ufebc\051" +
    "\ufebc\376\ufebc\001\002\000\004\033\u014d\001\002\000\006" +
    "\011\052\032\053\001\002\000\004\075\u014f\001\002\000" +
    "\006\011\052\032\053\001\002\000\020\022\ufec6\023\ufec6" +
    "\033\u0151\051\ufec6\234\ufec6\376\ufec6\u015a\ufec6\001\002\000" +
    "\006\011\052\032\053\001\002\000\016\022\ufec4\023\ufec4" +
    "\051\ufec4\234\ufec4\376\ufec4\u015a\u0153\001\002\000\006\255" +
    "\u0160\267\u0161\001\002\000\014\022\ufefc\023\ufefc\051\ufefc" +
    "\234\u0155\376\ufefc\001\002\000\006\067\u0157\237\u0159\001" +
    "\002\000\012\022\ufeba\023\ufeba\051\ufeba\376\ufeba\001\002" +
    "\000\004\100\u015a\001\002\000\032\022\ufefd\023\ufefd\033" +
    "\ufefd\051\ufefd\072\ufefd\075\ufefd\133\ufefd\134\ufefd\167\ufefd" +
    "\261\ufefd\331\ufefd\376\ufefd\001\002\000\032\022\ufefa\023" +
    "\ufefa\033\ufefa\051\ufefa\072\ufefa\075\ufefa\133\ufefa\134\ufefa" +
    "\167\ufefa\261\ufefa\331\ufefa\376\ufefa\001\002\000\034\022" +
    "\ufef8\023\ufef8\033\ufef8\051\ufef8\072\ufef8\075\ufef8\133\ufef8" +
    "\134\ufef8\167\ufef8\234\u015b\261\ufef8\331\ufef8\376\ufef8\001" +
    "\002\000\034\022\ufed7\023\ufed7\033\ufed7\051\ufed7\072\ufed7" +
    "\075\ufed7\133\ufed7\134\ufed7\167\ufed7\237\u015e\261\ufed7\331" +
    "\ufed7\376\ufed7\001\002\000\032\022\ufefb\023\ufefb\033\ufefb" +
    "\051\ufefb\072\ufefb\075\ufefb\133\ufefb\134\ufefb\167\ufefb\261" +
    "\ufefb\331\ufefb\376\ufefb\001\002\000\032\022\ufef9\023\ufef9" +
    "\033\ufef9\051\ufef9\072\ufef9\075\ufef9\133\ufef9\134\ufef9\167" +
    "\ufef9\261\ufef9\331\ufef9\376\ufef9\001\002\000\032\022\ufed8" +
    "\023\ufed8\033\ufed8\051\ufed8\072\ufed8\075\ufed8\133\ufed8\134" +
    "\ufed8\167\ufed8\261\ufed8\331\ufed8\376\ufed8\001\002\000\032" +
    "\022\ufec4\023\ufec4\051\ufec4\072\ufec4\075\ufec4\134\ufec4\167" +
    "\ufec4\234\ufec4\261\ufec4\331\ufec4\376\ufec4\u015a\u0153\001\002" +
    "\000\006\126\u0164\171\u0163\001\002\000\006\126\u0164\171" +
    "\u0163\001\002\000\032\022\ufec2\023\ufec2\051\ufec2\072\ufec2" +
    "\075\ufec2\134\ufec2\167\ufec2\234\ufec2\261\ufec2\331\ufec2\376" +
    "\ufec2\u015a\ufec2\001\002\000\006\237\u0167\252\u0165\001\002" +
    "\000\032\022\ufebf\023\ufebf\051\ufebf\072\ufebf\075\ufebf\134" +
    "\ufebf\167\ufebf\234\ufebf\261\ufebf\331\ufebf\376\ufebf\u015a\ufebf" +
    "\001\002\000\032\022\ufec0\023\ufec0\051\ufec0\072\ufec0\075" +
    "\ufec0\134\ufec0\167\ufec0\234\ufec0\261\ufec0\331\ufec0\376\ufec0" +
    "\u015a\ufec0\001\002\000\032\022\ufebe\023\ufebe\051\ufebe\072" +
    "\ufebe\075\ufebe\134\ufebe\167\ufebe\234\ufebe\261\ufebe\331\ufebe" +
    "\376\ufebe\u015a\ufebe\001\002\000\032\022\ufec1\023\ufec1\051" +
    "\ufec1\072\ufec1\075\ufec1\134\ufec1\167\ufec1\234\ufec1\261\ufec1" +
    "\331\ufec1\376\ufec1\u015a\ufec1\001\002\000\032\022\ufec3\023" +
    "\ufec3\051\ufec3\072\ufec3\075\ufec3\134\ufec3\167\ufec3\234\ufec3" +
    "\261\ufec3\331\ufec3\376\ufec3\u015a\ufec3\001\002\000\030\022" +
    "\ufec5\023\ufec5\051\ufec5\072\ufec5\075\ufec5\134\ufec5\167\ufec5" +
    "\234\ufec5\261\ufec5\331\ufec5\376\ufec5\001\002\000\004\051" +
    "\u016b\001\002\000\032\022\ufec7\023\ufec7\051\ufec7\072\ufec7" +
    "\075\ufec7\134\ufec7\167\ufec7\234\ufec7\261\ufec7\331\ufec7\376" +
    "\ufec7\u015a\ufec7\001\002\000\006\023\u016e\051\ufeb3\001\002" +
    "\000\004\051\u0171\001\002\000\006\011\052\032\053\001" +
    "\002\000\006\023\u016e\051\ufeb3\001\002\000\004\051\ufeb4" +
    "\001\002\000\004\075\ufeb5\001\002\000\004\033\u0173\001" +
    "\002\000\034\011\uff94\012\uff94\013\uff94\032\uff94\033\uff94" +
    "\044\uff94\234\144\237\uff94\372\uff94\u0127\uff94\u012c\uff94\u0137" +
    "\uff94\u0138\uff94\001\002\000\004\051\u0175\001\002\000\012" +
    "\022\ufeb9\023\ufeb9\051\ufeb9\376\ufeb9\001\002\000\062\004" +
    "\uffce\022\uffce\023\uffce\033\uffce\050\uffce\051\uffce\067\uffce" +
    "\071\uffce\072\uffce\075\uffce\132\uffce\133\uffce\134\uffce\153" +
    "\uffce\167\uffce\234\uffce\237\uffce\252\uffce\261\uffce\327\uffce" +
    "\331\uffce\376\uffce\u0161\uffce\u0164\uffce\001\002\000\062\004" +
    "\uffd3\022\uffd3\023\uffd3\033\uffd3\050\uffd3\051\uffd3\067\uffd3" +
    "\071\uffd3\072\uffd3\075\uffd3\132\uffd3\133\uffd3\134\uffd3\153" +
    "\uffd3\167\uffd3\234\uffd3\237\uffd3\252\uffd3\261\uffd3\327\uffd3" +
    "\331\uffd3\376\uffd3\u0161\uffd3\u0164\uffd3\001\002\000\062\004" +
    "\uffcd\022\uffcd\023\uffcd\033\uffcd\050\uffcd\051\uffcd\067\uffcd" +
    "\071\uffcd\072\uffcd\075\uffcd\132\uffcd\133\uffcd\134\uffcd\153" +
    "\uffcd\167\uffcd\234\uffcd\237\uffcd\252\uffcd\261\uffcd\327\uffcd" +
    "\331\uffcd\376\uffcd\u0161\uffcd\u0164\uffcd\001\002\000\062\004" +
    "\uffd6\022\uffd6\023\uffd6\033\uffd6\050\uffd6\051\uffd6\067\uffd6" +
    "\071\uffd6\072\uffd6\075\uffd6\132\uffd6\133\uffd6\134\uffd6\153" +
    "\uffd6\167\uffd6\234\uffd6\237\uffd6\252\uffd6\261\uffd6\327\uffd6" +
    "\331\uffd6\376\uffd6\u0161\uffd6\u0164\uffd6\001\002\000\050\022" +
    "\uffd2\023\uffd2\033\uffd2\050\uffd2\051\uffd2\067\uffd2\072\uffd2" +
    "\075\uffd2\132\uffd2\133\uffd2\134\uffd2\153\uffd2\167\uffd2\234" +
    "\uffd2\237\uffd2\252\uffd2\261\uffd2\331\uffd2\376\uffd2\001\002" +
    "\000\040\233\u017a\276\u0188\357\u017f\371\u0186\377\u0180\u010c" +
    "\u0177\u0115\u0181\u0118\u0176\u011b\u0183\u012e\u0182\u013a\u0179\u0144\u0178" +
    "\u0147\u017c\u0154\u0185\u0155\u017e\001\002\000\062\004\uffd1\022" +
    "\uffd1\023\uffd1\033\uffd1\050\uffd1\051\uffd1\067\uffd1\071\uffd1" +
    "\072\uffd1\075\uffd1\132\uffd1\133\uffd1\134\uffd1\153\uffd1\167" +
    "\uffd1\234\uffd1\237\uffd1\252\uffd1\261\uffd1\327\uffd1\331\uffd1" +
    "\376\uffd1\u0161\uffd1\u0164\uffd1\001\002\000\044\022\ufee1\023" +
    "\ufee1\051\ufee1\067\ufee1\072\ufee1\075\ufee1\132\ufee1\133\ufee1" +
    "\134\ufee1\153\u0190\167\ufee1\234\ufee1\237\ufee1\252\ufee1\261" +
    "\ufee1\331\ufee1\376\ufee1\001\002\000\062\004\uffd9\022\uffd9" +
    "\023\uffd9\033\uffd9\050\uffd9\051\uffd9\067\uffd9\071\uffd9\072" +
    "\uffd9\075\uffd9\132\uffd9\133\uffd9\134\uffd9\153\uffd9\167\uffd9" +
    "\234\uffd9\237\uffd9\252\uffd9\261\uffd9\327\uffd9\331\uffd9\376" +
    "\uffd9\u0161\uffd9\u0164\uffd9\001\002\000\062\004\uffd7\022\uffd7" +
    "\023\uffd7\033\uffd7\050\uffd7\051\uffd7\067\uffd7\071\uffd7\072" +
    "\uffd7\075\uffd7\132\uffd7\133\uffd7\134\uffd7\153\uffd7\167\uffd7" +
    "\234\uffd7\237\uffd7\252\uffd7\261\uffd7\327\uffd7\331\uffd7\376" +
    "\uffd7\u0161\uffd7\u0164\uffd7\001\002\000\062\004\uffd5\022\uffd5" +
    "\023\uffd5\033\uffd5\050\uffd5\051\uffd5\067\uffd5\071\uffd5\072" +
    "\uffd5\075\uffd5\132\uffd5\133\uffd5\134\uffd5\153\uffd5\167\uffd5" +
    "\234\uffd5\237\uffd5\252\uffd5\261\uffd5\327\uffd5\331\uffd5\376" +
    "\uffd5\u0161\uffd5\u0164\uffd5\001\002\000\062\004\uffcc\022\uffcc" +
    "\023\uffcc\033\uffcc\050\uffcc\051\uffcc\067\uffcc\071\uffcc\072" +
    "\uffcc\075\uffcc\132\uffcc\133\uffcc\134\uffcc\153\uffcc\167\uffcc" +
    "\234\uffcc\237\uffcc\252\uffcc\261\uffcc\327\uffcc\331\uffcc\376" +
    "\uffcc\u0161\uffcc\u0164\uffcc\001\002\000\062\004\uffcf\022\uffcf" +
    "\023\uffcf\033\uffcf\050\uffcf\051\uffcf\067\uffcf\071\uffcf\072" +
    "\uffcf\075\uffcf\132\uffcf\133\uffcf\134\uffcf\153\uffcf\167\uffcf" +
    "\234\uffcf\237\uffcf\252\uffcf\261\uffcf\327\uffcf\331\uffcf\376" +
    "\uffcf\u0161\uffcf\u0164\uffcf\001\002\000\062\004\uffd8\022\uffd8" +
    "\023\uffd8\033\uffd8\050\uffd8\051\uffd8\067\uffd8\071\uffd8\072" +
    "\uffd8\075\uffd8\132\uffd8\133\uffd8\134\uffd8\153\uffd8\167\uffd8" +
    "\234\uffd8\237\uffd8\252\uffd8\261\uffd8\327\uffd8\331\uffd8\376" +
    "\uffd8\u0161\uffd8\u0164\uffd8\001\002\000\046\022\uffc9\023\uffc9" +
    "\033\u0189\051\uffc9\067\uffc9\072\uffc9\075\uffc9\132\uffc9\133" +
    "\uffc9\134\uffc9\153\uffc9\167\uffc9\234\uffc9\237\uffc9\252\uffc9" +
    "\261\uffc9\331\uffc9\376\uffc9\001\002\000\062\004\uffcb\022" +
    "\uffcb\023\uffcb\033\uffcb\050\uffcb\051\uffcb\067\uffcb\071\uffcb" +
    "\072\uffcb\075\uffcb\132\uffcb\133\uffcb\134\uffcb\153\uffcb\167" +
    "\uffcb\234\uffcb\237\uffcb\252\uffcb\261\uffcb\327\uffcb\331\uffcb" +
    "\376\uffcb\u0161\uffcb\u0164\uffcb\001\002\000\062\004\uffd0\022" +
    "\uffd0\023\uffd0\033\uffd0\050\uffd0\051\uffd0\067\uffd0\071\uffd0" +
    "\072\uffd0\075\uffd0\132\uffd0\133\uffd0\134\uffd0\153\uffd0\167" +
    "\uffd0\234\uffd0\237\uffd0\252\uffd0\261\uffd0\327\uffd0\331\uffd0" +
    "\376\uffd0\u0161\uffd0\u0164\uffd0\001\002\000\046\022\uffdb\023" +
    "\uffdb\033\uffdb\051\uffdb\067\uffdb\072\uffdb\075\uffdb\132\uffdb" +
    "\133\uffdb\134\uffdb\153\uffdb\167\uffdb\234\uffdb\237\uffdb\252" +
    "\uffdb\261\uffdb\331\uffdb\376\uffdb\001\002\000\062\004\uffd4" +
    "\022\uffd4\023\uffd4\033\uffd4\050\uffd4\051\uffd4\067\uffd4\071" +
    "\uffd4\072\uffd4\075\uffd4\132\uffd4\133\uffd4\134\uffd4\153\uffd4" +
    "\167\uffd4\234\uffd4\237\uffd4\252\uffd4\261\uffd4\327\uffd4\331" +
    "\uffd4\376\uffd4\u0161\uffd4\u0164\uffd4\001\002\000\004\012\u018b" +
    "\001\002\000\044\022\uffdc\023\uffdc\051\uffdc\067\uffdc\072" +
    "\uffdc\075\uffdc\132\uffdc\133\uffdc\134\uffdc\153\uffdc\167\uffdc" +
    "\234\uffdc\237\uffdc\252\uffdc\261\uffdc\331\uffdc\376\uffdc\001" +
    "\002\000\006\023\u018c\051\uffc7\001\002\000\004\012\u018f" +
    "\001\002\000\004\051\u018e\001\002\000\044\022\uffca\023" +
    "\uffca\051\uffca\067\uffca\072\uffca\075\uffca\132\uffca\133\uffca" +
    "\134\uffca\153\uffca\167\uffca\234\uffca\237\uffca\252\uffca\261" +
    "\uffca\331\uffca\376\uffca\001\002\000\004\051\uffc8\001\002" +
    "\000\006\011\052\032\053\001\002\000\042\022\ufeef\023" +
    "\ufeef\051\ufeef\067\ufee8\072\u019f\075\ufec8\132\u0192\133\u0199" +
    "\134\u019c\167\u0198\234\u019d\237\ufee8\252\u0197\261\u0196\331" +
    "\u019e\376\ufeef\001\002\000\034\022\ufed9\023\ufed9\033\u01be" +
    "\051\ufed9\072\ufed9\075\ufed9\133\ufed9\134\ufed9\167\ufed9\234" +
    "\ufed9\261\ufed9\331\ufed9\376\ufed9\001\002\000\012\022\ufef2" +
    "\023\ufef2\051\ufef2\376\ufef2\001\002\000\012\022\ufef0\023" +
    "\ufef0\051\ufef0\376\ufef0\001\002\000\006\067\u01c5\237\u01c6" +
    "\001\002\000\032\022\ufeca\023\ufeca\051\ufeca\072\ufeca\075" +
    "\ufeca\134\ufeca\145\u013a\167\ufeca\231\u013b\261\ufeca\331\ufeca" +
    "\376\ufeca\001\002\000\012\012\u01b6\013\u01b5\044\u01b7\237" +
    "\u01b4\001\002\000\006\011\052\032\053\001\002\000\026" +
    "\022\ufed3\023\ufed3\051\ufed3\072\ufed1\075\ufed1\134\ufed1\167" +
    "\u0131\261\ufed1\331\ufed1\376\ufed3\001\002\000\004\075\u01ab" +
    "\001\002\000\026\022\ufed3\023\ufed3\051\ufed3\072\ufed1\075" +
    "\ufed1\134\ufed1\167\u0131\261\ufed1\331\ufed1\376\ufed3\001\002" +
    "\000\006\033\ufefc\234\u0155\001\002\000\006\067\ufee9\237" +
    "\ufee9\001\002\000\004\176\u01a1\001\002\000\004\176\u01a0" +
    "\001\002\000\004\075\ufec9\001\002\000\032\022\ufeca\023" +
    "\ufeca\051\ufeca\072\ufeca\075\ufeca\134\ufeca\145\u013a\167\ufeca" +
    "\231\u013b\261\ufeca\331\ufeca\376\ufeca\001\002\000\026\022" +
    "\ufed0\023\ufed0\051\ufed0\072\ufed0\075\ufed0\134\ufed0\167\ufed0" +
    "\261\ufed0\331\ufed0\376\ufed0\001\002\000\004\033\u01a4\001" +
    "\002\000\034\011\uff94\012\uff94\013\uff94\032\uff94\033\uff94" +
    "\044\uff94\234\144\237\uff94\372\uff94\u0127\uff94\u012c\uff94\u0137" +
    "\uff94\u0138\uff94\001\002\000\004\051\u01a6\001\002\000\026" +
    "\022\ufecd\023\ufecd\051\ufecd\072\ufecd\075\ufecd\134\ufecd\167" +
    "\ufecd\261\ufecd\331\ufecd\376\ufecd\001\002\000\012\022\ufeea" +
    "\023\ufeea\051\ufeea\376\ufeea\001\002\000\014\072\u019f\075" +
    "\ufec8\134\u019c\261\u0196\331\u019e\001\002\000\026\022\ufed3" +
    "\023\ufed3\051\ufed3\072\ufed1\075\ufed1\134\ufed1\167\u0131\261" +
    "\ufed1\331\ufed1\376\ufed3\001\002\000\012\022\ufed4\023\ufed4" +
    "\051\ufed4\376\ufed4\001\002\000\006\011\052\032\053\001" +
    "\002\000\034\022\ufec6\023\ufec6\033\u0151\051\ufec6\072\ufec6" +
    "\075\ufec6\134\ufec6\167\ufec6\234\ufec6\261\ufec6\331\ufec6\376" +
    "\ufec6\u015a\ufec6\001\002\000\032\022\ufec4\023\ufec4\051\ufec4" +
    "\072\ufec4\075\ufec4\134\ufec4\167\ufec4\234\ufec4\261\ufec4\331" +
    "\ufec4\376\ufec4\u015a\u0153\001\002\000\030\022\ufefc\023\ufefc" +
    "\051\ufefc\072\ufefc\075\ufefc\134\ufefc\167\ufefc\234\u0155\261" +
    "\ufefc\331\ufefc\376\ufefc\001\002\000\026\022\ufece\023\ufece" +
    "\051\ufece\072\ufece\075\ufece\134\ufece\167\ufece\261\ufece\331" +
    "\ufece\376\ufece\001\002\000\012\022\ufeeb\023\ufeeb\051\ufeeb" +
    "\376\ufeeb\001\002\000\030\067\ufee8\072\u019f\075\ufec8\132" +
    "\u0192\133\u0199\134\u019c\234\u019d\237\ufee8\252\u0197\261\u0196" +
    "\331\u019e\001\002\000\012\022\ufef1\023\ufef1\051\ufef1\376" +
    "\ufef1\001\002\000\034\022\ufedb\023\ufedb\051\ufedb\072\ufedb" +
    "\075\ufedb\132\u01b8\133\ufedb\134\ufedb\167\ufedb\234\ufedb\261" +
    "\ufedb\331\ufedb\376\ufedb\001\002\000\034\022\ufedd\023\ufedd" +
    "\051\ufedd\072\ufedd\075\ufedd\132\ufedd\133\ufedd\134\ufedd\167" +
    "\ufedd\234\ufedd\261\ufedd\331\ufedd\376\ufedd\001\002\000\034" +
    "\022\ufedf\023\ufedf\051\ufedf\072\ufedf\075\ufedf\132\ufedf\133" +
    "\ufedf\134\ufedf\167\ufedf\234\ufedf\261\ufedf\331\ufedf\376\ufedf" +
    "\001\002\000\034\022\ufee0\023\ufee0\051\ufee0\072\ufee0\075" +
    "\ufee0\132\ufee0\133\ufee0\134\ufee0\167\ufee0\234\ufee0\261\ufee0" +
    "\331\ufee0\376\ufee0\001\002\000\034\022\ufede\023\ufede\051" +
    "\ufede\072\ufede\075\ufede\132\ufede\133\ufede\134\ufede\167\ufede" +
    "\234\ufede\261\ufede\331\ufede\376\ufede\001\002\000\034\022" +
    "\ufed9\023\ufed9\033\u01be\051\ufed9\072\ufed9\075\ufed9\133\ufed9" +
    "\134\ufed9\167\ufed9\234\ufed9\261\ufed9\331\ufed9\376\ufed9\001" +
    "\002\000\032\022\ufefc\023\ufefc\051\ufefc\072\ufefc\075\ufefc" +
    "\133\ufefc\134\ufefc\167\ufefc\234\u0155\261\ufefc\331\ufefc\376" +
    "\ufefc\001\002\000\030\022\ufed5\023\ufed5\051\ufed5\072\ufed5" +
    "\075\ufed5\133\u01bb\134\ufed5\167\ufed5\261\ufed5\331\ufed5\376" +
    "\ufed5\001\002\000\026\022\ufed6\023\ufed6\051\ufed6\072\ufed6" +
    "\075\ufed6\134\ufed6\167\ufed6\261\ufed6\331\ufed6\376\ufed6\001" +
    "\002\000\026\022\ufed3\023\ufed3\051\ufed3\072\ufed1\075\ufed1" +
    "\134\ufed1\167\u0131\261\ufed1\331\ufed1\376\ufed3\001\002\000" +
    "\012\022\ufeee\023\ufeee\051\ufeee\376\ufeee\001\002\000\004" +
    "\012\u01c0\001\002\000\032\022\ufedc\023\ufedc\051\ufedc\072" +
    "\ufedc\075\ufedc\133\ufedc\134\ufedc\167\ufedc\234\ufedc\261\ufedc" +
    "\331\ufedc\376\ufedc\001\002\000\004\023\u01c1\001\002\000" +
    "\004\012\u01c2\001\002\000\004\051\u01c3\001\002\000\032" +
    "\022\ufeda\023\ufeda\051\ufeda\072\ufeda\075\ufeda\133\ufeda\134" +
    "\ufeda\167\ufeda\234\ufeda\261\ufeda\331\ufeda\376\ufeda\001\002" +
    "\000\026\022\ufecf\023\ufecf\051\ufecf\072\ufecf\075\ufecf\134" +
    "\ufecf\167\ufecf\261\ufecf\331\ufecf\376\ufecf\001\002\000\004" +
    "\100\u01ca\001\002\000\030\022\ufee7\023\ufee7\051\ufee7\072" +
    "\ufee7\075\ufee7\133\ufee7\134\ufee7\167\ufee7\261\ufee7\331\ufee7" +
    "\376\ufee7\001\002\000\030\022\ufed5\023\ufed5\051\ufed5\072" +
    "\ufed5\075\ufed5\133\u01bb\134\ufed5\167\ufed5\261\ufed5\331\ufed5" +
    "\376\ufed5\001\002\000\026\022\ufed3\023\ufed3\051\ufed3\072" +
    "\ufed1\075\ufed1\134\ufed1\167\u0131\261\ufed1\331\ufed1\376\ufed3" +
    "\001\002\000\012\022\ufeec\023\ufeec\051\ufeec\376\ufeec\001" +
    "\002\000\034\022\ufee3\023\ufee3\051\ufee3\072\ufee3\075\ufee3" +
    "\133\ufee3\134\ufee3\167\ufee3\234\u01cc\237\u01cd\261\ufee3\331" +
    "\ufee3\376\ufee3\001\002\000\030\022\ufee6\023\ufee6\051\ufee6" +
    "\072\ufee6\075\ufee6\133\ufee6\134\ufee6\167\ufee6\261\ufee6\331" +
    "\ufee6\376\ufee6\001\002\000\004\237\u01ce\001\002\000\030" +
    "\022\ufee4\023\ufee4\051\ufee4\072\ufee4\075\ufee4\133\ufee4\134" +
    "\ufee4\167\ufee4\261\ufee4\331\ufee4\376\ufee4\001\002\000\030" +
    "\022\ufee5\023\ufee5\051\ufee5\072\ufee5\075\ufee5\133\ufee5\134" +
    "\ufee5\167\ufee5\261\ufee5\331\ufee5\376\ufee5\001\002\000\032" +
    "\022\ufefc\023\ufefc\051\ufefc\072\ufefc\075\ufefc\133\ufefc\134" +
    "\ufefc\167\ufefc\234\u0155\261\ufefc\331\ufefc\376\ufefc\001\002" +
    "\000\030\022\ufed5\023\ufed5\051\ufed5\072\ufed5\075\ufed5\133" +
    "\u01bb\134\ufed5\167\ufed5\261\ufed5\331\ufed5\376\ufed5\001\002" +
    "\000\026\022\ufed3\023\ufed3\051\ufed3\072\ufed1\075\ufed1\134" +
    "\ufed1\167\u0131\261\ufed1\331\ufed1\376\ufed3\001\002\000\012" +
    "\022\ufeed\023\ufeed\051\ufeed\376\ufeed\001\002\000\042\022" +
    "\ufee2\023\ufee2\051\ufee2\067\ufee2\072\ufee2\075\ufee2\132\ufee2" +
    "\133\ufee2\134\ufee2\167\ufee2\234\ufee2\237\ufee2\252\ufee2\261" +
    "\ufee2\331\ufee2\376\ufee2\001\002\000\004\050\u01d5\001\002" +
    "\000\046\022\uffda\023\uffda\033\uffda\051\uffda\067\uffda\072" +
    "\uffda\075\uffda\132\uffda\133\uffda\134\uffda\153\uffda\167\uffda" +
    "\234\uffda\237\uffda\252\uffda\261\uffda\331\uffda\376\uffda\001" +
    "\002\000\014\072\ufed2\075\ufed2\134\ufed2\261\ufed2\331\ufed2" +
    "\001\002\000\022\011\052\032\053\072\ufed1\134\ufed1\151" +
    "\u012d\167\u0131\261\ufed1\331\ufed1\001\002\000\006\022\ufe9f" +
    "\376\ufe9f\001\002\000\012\022\ufef3\023\u01d7\051\ufef3\376" +
    "\ufef3\001\002\000\010\022\ufef4\051\ufef4\376\ufef4\001\002" +
    "\000\010\033\ufeca\145\u013a\231\u013b\001\002\000\004\033" +
    "\u013d\001\002\000\012\022\ufeb2\023\ufeb2\051\ufeb2\376\ufeb2" +
    "\001\002\000\006\011\052\032\053\001\002\000\046\032" +
    "\u017b\053\u01e1\233\u017a\276\u0188\301\u01e2\357\u017f\371\u0186" +
    "\377\u0180\u010c\u0177\u0115\u0181\u0118\u0176\u011b\u0183\u012e\u0182\u013a" +
    "\u0179\u0144\u0178\u0147\u017c\u0154\u0185\u0155\u017e\001\002\000\012" +
    "\022\ufee1\153\u0190\237\ufee1\376\ufee1\001\002\000\006\133" +
    "\ufe99\234\ufe99\001\002\000\006\133\ufe98\234\ufe98\001\002" +
    "\000\006\133\u01e6\234\u01e7\001\002\000\006\022\ufe9d\376" +
    "\ufe9d\001\002\000\006\022\ufe9c\376\ufe9c\001\002\000\006" +
    "\022\ufe97\376\ufe97\001\002\000\004\067\u01e9\001\002\000" +
    "\006\022\ufe9b\376\ufe9b\001\002\000\004\100\u01ea\001\002" +
    "\000\006\022\ufe96\376\ufe96\001\002\000\010\022\ufed7\237" +
    "\u015e\376\ufed7\001\002\000\006\022\ufe9a\376\ufe9a\001\002" +
    "\000\006\022\ufea5\376\ufea5\001\002\000\006\153\ufea9\171" +
    "\ufea9\001\002\000\006\153\ufea8\171\ufea8\001\002\000\006" +
    "\153\u01f1\171\u01f3\001\002\000\006\011\052\032\053\001" +
    "\002\000\006\022\ufeaa\376\ufeaa\001\002\000\004\125\u01f4" +
    "\001\002\000\004\u0106\u01f5\001\002\000\006\022\ufea6\376" +
    "\ufea6\001\002\000\006\022\ufea7\376\ufea7\001\002\000\006" +
    "\011\ufe77\032\ufe77\001\002\000\006\011\052\032\053\001" +
    "\002\000\006\011\ufe78\032\ufe78\001\002\000\014\022\u01fb" +
    "\025\ufe75\067\ufe75\071\ufe75\327\ufe75\001\002\000\004\012" +
    "\u0236\001\002\000\012\025\u0200\067\ufe73\071\ufe73\327\ufe73" +
    "\001\002\000\010\067\ufe65\071\ufe65\327\u0213\001\002\000" +
    "\044\011\052\032\053\233\u0202\276\u0188\357\u017f\371\u0186" +
    "\377\u0180\u010c\u0177\u0115\u0181\u0118\u0176\u011b\u0183\u012e\u0182\u013a" +
    "\u0179\u0144\u0178\u0147\u017c\u0154\u0185\u0155\u017e\001\002\000\010" +
    "\067\ufe74\071\ufe74\327\ufe74\001\002\000\004\011\u0201\001" +
    "\002\000\052\011\uffdd\022\uffdd\032\uffdd\233\uffdd\276\uffdd" +
    "\327\uffdd\357\uffdd\371\uffdd\376\uffdd\377\uffdd\u010c\uffdd\u0115" +
    "\uffdd\u0118\uffdd\u011b\uffdd\u012e\uffdd\u013a\uffdd\u0144\uffdd\u0147\uffdd" +
    "\u0154\uffdd\u0155\uffdd\001\002\000\022\004\uffd2\023\uffd2\067" +
    "\uffd2\071\uffd2\327\uffd2\u0158\u0211\u0161\uffd2\u0164\uffd2\001\002" +
    "\000\004\u0165\u0210\001\002\000\012\023\u020e\067\ufe70\071" +
    "\ufe70\327\ufe70\001\002\000\020\004\u0207\023\ufe6b\067\ufe6b" +
    "\071\ufe6b\327\ufe6b\u0161\ufe6b\u0164\ufe6b\001\002\000\016\023" +
    "\ufe69\067\ufe69\071\ufe69\327\ufe69\u0161\u020b\u0164\u020a\001\002" +
    "\000\004\252\u0208\001\002\000\016\023\ufe6c\067\ufe6c\071" +
    "\ufe6c\327\ufe6c\u0161\ufe6c\u0164\ufe6c\001\002\000\012\023\ufe6f" +
    "\067\ufe6f\071\ufe6f\327\ufe6f\001\002\000\012\023\ufe68\067" +
    "\ufe68\071\ufe68\327\ufe68\001\002\000\012\023\ufe67\067\ufe67" +
    "\071\ufe67\327\ufe67\001\002\000\012\023\ufe6a\067\ufe6a\071" +
    "\ufe6a\327\ufe6a\001\002\000\010\067\ufe72\071\ufe72\327\ufe72" +
    "\001\002\000\004\025\u0200\001\002\000\010\067\ufe71\071" +
    "\ufe71\327\ufe71\001\002\000\012\023\ufe6d\067\ufe6d\071\ufe6d" +
    "\327\ufe6d\001\002\000\006\u0161\u020b\u0164\u020a\001\002\000" +
    "\012\023\ufe6e\067\ufe6e\071\ufe6e\327\ufe6e\001\002\000\012" +
    "\325\u022a\330\u0226\u0166\u0229\u016e\u022c\001\002\000\006\067" +
    "\u0216\071\ufe57\001\002\000\004\071\u0218\001\002\000\004" +
    "\100\u0217\001\002\000\004\071\ufe58\001\002\000\014\104" +
    "\u021c\152\010\157\027\255\037\267\040\001\002\000\006" +
    "\022\ufe79\376\ufe79\001\002\000\006\022\047\376\046\001" +
    "\002\000\006\022\ufe55\376\ufe55\001\002\000\012\152\010" +
    "\157\027\255\037\267\040\001\002\000\004\311\u021e\001" +
    "\002\000\006\022\ufe56\376\ufe56\001\002\000\020\022\ufe52" +
    "\152\010\157\027\255\037\267\040\311\ufe52\376\ufe52\001" +
    "\002\000\006\022\047\376\046\001\002\000\010\022\ufe54" +
    "\311\ufe54\376\ufe54\001\002\000\020\022\ufe50\152\010\157" +
    "\027\255\037\267\040\311\ufe50\376\ufe50\001\002\000\006" +
    "\022\047\376\046\001\002\000\010\022\ufe53\311\ufe53\376" +
    "\ufe53\001\002\000\010\022\ufe51\311\ufe51\376\ufe51\001\002" +
    "\000\004\071\ufe60\001\002\000\010\023\u0234\067\ufe5d\071" +
    "\ufe5d\001\002\000\006\067\ufe66\071\ufe66\001\002\000\010" +
    "\023\ufe63\067\ufe63\071\ufe63\001\002\000\004\071\ufe5f\001" +
    "\002\000\004\071\u022d\001\002\000\010\023\ufe62\067\ufe62" +
    "\071\ufe62\001\002\000\014\011\052\032\053\u016b\u022e\u016c" +
    "\u0232\u016d\u0230\001\002\000\010\023\ufe5c\067\ufe5c\071\ufe5c" +
    "\001\002\000\010\023\ufe59\067\ufe59\071\ufe59\001\002\000" +
    "\010\023\ufe5a\067\ufe5a\071\ufe5a\001\002\000\010\023\ufe61" +
    "\067\ufe61\071\ufe61\001\002\000\010\023\ufe5b\067\ufe5b\071" +
    "\ufe5b\001\002\000\006\067\ufe64\071\ufe64\001\002\000\012" +
    "\325\u022a\330\u0226\u0166\u0229\u016e\u022c\001\002\000\006\067" +
    "\ufe5e\071\ufe5e\001\002\000\012\025\ufe76\067\ufe76\071\ufe76" +
    "\327\ufe76\001\002\000\010\011\uff5d\032\uff5d\165\u0239\001" +
    "\002\000\006\011\052\032\053\001\002\000\006\011\uff5e" +
    "\032\uff5e\001\002\000\010\033\u0114\252\uff5b\302\uff5b\001" +
    "\002\000\006\252\uff5c\302\uff5c\001\002\000\006\252\u023d" +
    "\302\u023e\001\002\000\004\302\u0252\001\002\000\004\033" +
    "\u0240\001\002\000\006\022\uff5f\376\uff5f\001\002\000\012" +
    "\012\u0246\013\u0244\044\u0245\252\u0241\001\002\000\006\023" +
    "\uff59\051\uff59\001\002\000\004\051\u024b\001\002\000\006" +
    "\023\u0247\051\uff54\001\002\000\006\023\uff57\051\uff57\001" +
    "\002\000\006\023\uff56\051\uff56\001\002\000\006\023\uff58" +
    "\051\uff58\001\002\000\012\012\u0246\013\u0244\044\u0245\252" +
    "\u0241\001\002\000\004\051\uff5a\001\002\000\006\023\u0247" +
    "\051\uff54\001\002\000\004\051\uff55\001\002\000\010\022" +
    "\uff50\023\u024d\376\uff50\001\002\000\006\022\uff53\376\uff53" +
    "\001\002\000\004\033\u024e\001\002\000\012\012\u0246\013" +
    "\u0244\044\u0245\252\u0241\001\002\000\004\051\u0250\001\002" +
    "\000\010\022\uff50\023\u024d\376\uff50\001\002\000\006\022" +
    "\uff51\376\uff51\001\002\000\006\022\uff52\376\uff52\001\002" +
    "\000\006\022\uff2a\376\uff2a\001\002\000\006\022\uff2c\376" +
    "\uff2c\001\002\000\006\022\uff30\376\uff30\001\002\000\006" +
    "\022\uff2b\376\uff2b\001\002\000\006\011\052\032\053\001" +
    "\002\000\004\011\u0286\001\002\000\010\145\uff0a\151\uff0a" +
    "\231\uff0a\001\002\000\006\022\uff2f\376\uff2f\001\002\000" +
    "\006\022\uff31\376\uff31\001\002\000\006\011\052\032\053" +
    "\001\002\000\006\011\052\032\053\001\002\000\006\022" +
    "\uff2e\376\uff2e\001\002\000\006\022\uff2d\376\uff2d\001\002" +
    "\000\010\145\u013a\151\ufeca\231\u013b\001\002\000\004\151" +
    "\u0262\001\002\000\006\011\052\032\053\001\002\000\004" +
    "\u015a\u0264\001\002\000\006\011\052\032\053\001\002\000" +
    "\004\033\u0266\001\002\000\006\011\052\032\053\001\002" +
    "\000\014\022\uff03\321\uff03\376\uff03\u010b\u0268\u015a\uff03\001" +
    "\002\000\004\033\u0114\001\002\000\012\022\uff7b\321\140" +
    "\376\uff7b\u015a\uff7b\001\002\000\010\022\uff01\376\uff01\u015a" +
    "\u026b\001\002\000\006\011\052\032\053\001\002\000\006" +
    "\022\uff0b\376\uff0b\001\002\000\004\033\u026e\001\002\000" +
    "\006\011\052\032\053\001\002\000\004\051\u0270\001\002" +
    "\000\006\022\uff02\376\uff02\001\002\000\012\022\uff04\321" +
    "\uff04\376\uff04\u015a\uff04\001\002\000\012\023\uff66\051\uff66" +
    "\262\u0140\363\u0141\001\002\000\004\051\u0274\001\002\000" +
    "\014\022\uff08\321\uff08\376\uff08\u010b\uff08\u015a\uff08\001\002" +
    "\000\006\023\u0277\051\uff05\001\002\000\004\051\uff07\001" +
    "\002\000\006\011\052\032\053\001\002\000\012\023\uff66" +
    "\051\uff66\262\u0140\363\u0141\001\002\000\006\023\u0277\051" +
    "\uff05\001\002\000\004\051\uff06\001\002\000\004\033\u027c" +
    "\001\002\000\022\011\052\032\053\072\ufed1\134\ufed1\151" +
    "\u012d\167\u0131\261\ufed1\331\ufed1\001\002\000\006\023\u01d7" +
    "\051\ufef3\001\002\000\004\051\u027f\001\002\000\010\022" +
    "\ufefe\376\ufefe\u015a\u0281\001\002\000\006\022\uff00\376\uff00" +
    "\001\002\000\004\331\u0282\001\002\000\006\022\ufeff\376" +
    "\ufeff\001\002\000\004\071\u0284\001\002\000\004\152\010" +
    "\001\002\000\006\022\uff0c\376\uff0c\001\002\000\006\022" +
    "\uff29\376\uff29\001\002\000\012\022\uff25\153\uff25\376\uff25" +
    "\u015a\u0289\001\002\000\010\022\uff1e\153\u02b5\376\uff1e\001" +
    "\002\000\006\033\uff23\331\u028b\001\002\000\006\022\uff28" +
    "\376\uff28\001\002\000\004\033\uff24\001\002\000\004\033" +
    "\u028d\001\002\000\004\u0179\u0292\001\002\000\010\022\uff26" +
    "\153\uff26\376\uff26\001\002\000\012\022\uff21\023\u0290\153" +
    "\uff21\376\uff21\001\002\000\004\033\u028d\001\002\000\010" +
    "\022\uff22\153\uff22\376\uff22\001\002\000\004\004\u0293\001" +
    "\002\000\004\044\u0294\001\002\000\004\023\u0295\001\002" +
    "\000\004\u017a\u0296\001\002\000\004\004\u0297\001\002\000" +
    "\004\044\u0298\001\002\000\006\023\u029a\051\uff1c\001\002" +
    "\000\004\051\u02b4\001\002\000\010\u0113\u02a1\u017f\u02a0\u0181" +
    "\u029f\001\002\000\006\023\uff1a\051\uff1a\001\002\000\006" +
    "\023\uff19\051\uff19\001\002\000\006\023\uff1b\051\uff1b\001" +
    "\002\000\006\023\u029a\051\uff1c\001\002\000\004\004\u02ae" +
    "\001\002\000\004\004\u02a9\001\002\000\004\004\u02a2\001" +
    "\002\000\004\012\u02a3\001\002\000\012\u017b\u02a6\u017c\u02a7" +
    "\u017d\u02a5\u017e\u02a8\001\002\000\006\023\uff18\051\uff18\001" +
    "\002\000\006\023\uff14\051\uff14\001\002\000\006\023\uff17" +
    "\051\uff17\001\002\000\006\023\uff15\051\uff15\001\002\000" +
    "\006\023\uff16\051\uff16\001\002\000\006\012\u02ac\u0180\u02ab" +
    "\001\002\000\006\023\uff13\051\uff13\001\002\000\006\023" +
    "\uff11\051\uff11\001\002\000\012\u017b\u02a6\u017c\u02a7\u017d\u02a5" +
    "\u017e\u02a8\001\002\000\006\023\uff12\051\uff12\001\002\000" +
    "\004\012\u02af\001\002\000\020\023\uff0d\051\uff0d\u017b\u02a6" +
    "\u017c\u02a7\u017d\u02a5\u017e\u02a8\u0182\u02b1\001\002\000\006\023" +
    "\uff0f\051\uff0f\001\002\000\006\023\uff0e\051\uff0e\001\002" +
    "\000\006\023\uff10\051\uff10\001\002\000\004\051\uff1d\001" +
    "\002\000\012\022\uff20\023\uff20\153\uff20\376\uff20\001\002" +
    "\000\006\011\052\032\053\001\002\000\006\022\uff27\376" +
    "\uff27\001\002\000\006\022\uff1f\376\uff1f\001\002\000\014" +
    "\011\ufe80\022\ufe80\025\ufe80\032\ufe80\376\ufe80\001\002\000" +
    "\014\011\052\022\ufe8c\025\u0200\032\053\376\ufe8c\001\002" +
    "\000\014\011\ufe81\022\ufe81\025\ufe81\032\ufe81\376\ufe81\001" +
    "\002\000\010\022\ufe8a\327\u02bf\376\ufe8a\001\002\000\010" +
    "\022\ufe86\327\ufe86\376\ufe86\001\002\000\010\022\ufe85\327" +
    "\ufe85\376\ufe85\001\002\000\006\022\ufe8e\376\ufe8e\001\002" +
    "\000\004\u016f\u02c1\001\002\000\006\022\ufe8d\376\ufe8d\001" +
    "\002\000\010\022\ufe88\044\u02c3\376\ufe88\001\002\000\006" +
    "\022\ufe8b\376\ufe8b\001\002\000\006\022\ufe89\376\ufe89\001" +
    "\002\000\006\022\ufe7f\376\ufe7f\001\002\000\014\011\052" +
    "\022\ufe82\025\u0200\032\053\376\ufe82\001\002\000\006\022" +
    "\ufe84\376\ufe84\001\002\000\006\022\ufe83\376\ufe83\001\002" +
    "\000\006\022\ufe7e\376\ufe7e\001\002\000\006\022\ufe7c\376" +
    "\ufe7c\001\002\000\014\011\052\022\ufe82\025\u0200\032\053" +
    "\376\ufe82\001\002\000\006\022\ufe7b\376\ufe7b\001\002\000" +
    "\006\011\052\032\053\001\002\000\006\022\uffb2\376\uffb2" +
    "\001\002\000\010\011\052\025\u0200\032\053\001\002\000" +
    "\006\022\ufe87\376\ufe87\001\002\000\036\007\uff70\011\uff70" +
    "\012\uff70\013\uff70\032\uff70\033\uff70\044\uff70\232\uff70\237" +
    "\uff70\372\uff70\u0127\uff70\u012c\uff70\u0137\uff70\u0138\uff70\001\002" +
    "\000\036\007\uff71\011\uff71\012\uff71\013\uff71\032\uff71\033" +
    "\uff71\044\uff71\232\uff71\237\uff71\372\uff71\u0127\uff71\u012c\uff71" +
    "\u0137\uff71\u0138\uff71\001\002\000\036\007\uff92\011\uff92\012" +
    "\uff92\013\uff92\032\uff92\033\uff92\044\uff92\232\116\237\uff92" +
    "\372\uff92\u0127\uff92\u012c\uff92\u0137\uff92\u0138\uff92\001\002\000" +
    "\034\007\u02d6\011\052\012\146\013\165\032\053\033\160" +
    "\044\155\237\162\372\156\u0127\145\u012c\163\u0137\161\u0138" +
    "\157\001\002\000\034\011\052\022\uffaf\023\uffaf\032\053" +
    "\044\u02de\067\uffaf\071\u02dc\102\uffaf\121\uffaf\124\uffaf\304" +
    "\uffaf\321\uffaf\376\uffaf\001\002\000\022\022\uff3d\067\uff3d" +
    "\102\u02e2\121\uff3d\124\uff3d\304\uff3d\321\uff3d\376\uff3d\001" +
    "\002\000\024\022\uff77\023\u02d7\067\uff77\102\uff77\121\uff77" +
    "\124\uff77\304\uff77\321\uff77\376\uff77\001\002\000\032\011" +
    "\052\012\146\013\165\032\053\033\160\044\155\237\162" +
    "\372\156\u0127\145\u012c\163\u0137\161\u0138\157\001\002\000" +
    "\022\022\uff79\067\uff79\102\uff79\121\uff79\124\uff79\304\uff79" +
    "\321\uff79\376\uff79\001\002\000\034\011\052\022\uffaf\023" +
    "\uffaf\032\053\044\u02de\067\uffaf\071\u02dc\102\uffaf\121\uffaf" +
    "\124\uffaf\304\uffaf\321\uffaf\376\uffaf\001\002\000\040\022" +
    "\uffae\023\uffae\067\uffae\102\uffae\105\uffae\121\uffae\122\uffae" +
    "\124\uffae\154\uffae\173\uffae\204\uffae\304\uffae\321\uffae\376" +
    "\uffae\u015a\uffae\001\002\000\040\022\uffb0\023\uffb0\067\uffb0" +
    "\102\uffb0\105\uffb0\121\uffb0\122\uffb0\124\uffb0\154\uffb0\173" +
    "\uffb0\204\uffb0\304\uffb0\321\uffb0\376\uffb0\u015a\uffb0\001\002" +
    "\000\010\011\052\032\053\044\u02de\001\002\000\024\022" +
    "\uff77\023\u02d7\067\uff77\102\uff77\121\uff77\124\uff77\304\uff77" +
    "\321\uff77\376\uff77\001\002\000\040\022\uffad\023\uffad\067" +
    "\uffad\102\uffad\105\uffad\121\uffad\122\uffad\124\uffad\154\uffad" +
    "\173\uffad\204\uffad\304\uffad\321\uffad\376\uffad\u015a\uffad\001" +
    "\002\000\022\022\uff78\067\uff78\102\uff78\121\uff78\124\uff78" +
    "\304\uff78\321\uff78\376\uff78\001\002\000\040\022\uffb1\023" +
    "\uffb1\067\uffb1\102\uffb1\105\uffb1\121\uffb1\122\uffb1\124\uffb1" +
    "\154\uffb1\173\uffb1\204\uffb1\304\uffb1\321\uffb1\376\uffb1\u015a" +
    "\uffb1\001\002\000\020\022\uff7b\067\uff7b\121\uff7b\124\uff7b" +
    "\304\uff7b\321\140\376\uff7b\001\002\000\006\011\052\032" +
    "\053\001\002\000\044\011\052\022\uffaf\023\uffaf\032\053" +
    "\044\u02de\067\uffaf\071\u02dc\105\uffaf\121\uffaf\122\uffaf\124" +
    "\uffaf\154\uffaf\173\uffaf\204\uffaf\304\uffaf\321\uffaf\376\uffaf" +
    "\001\002\000\034\022\uff39\023\uff39\067\uff39\105\u02ea\121" +
    "\uff39\122\u02e8\124\uff39\154\u02e5\173\uff34\204\u02e7\304\uff39" +
    "\321\uff39\376\uff39\001\002\000\004\173\uff38\001\002\000" +
    "\004\173\u02f4\001\002\000\006\173\uff32\307\u02eb\001\002" +
    "\000\006\173\uff32\307\u02eb\001\002\000\022\022\uff3b\023" +
    "\u02ed\067\uff3b\121\uff3b\124\uff3b\304\uff3b\321\uff3b\376\uff3b" +
    "\001\002\000\006\173\uff32\307\u02eb\001\002\000\004\173" +
    "\uff33\001\002\000\004\173\uff35\001\002\000\006\011\052" +
    "\032\053\001\002\000\020\022\uff3e\067\uff3e\121\uff3e\124" +
    "\uff3e\304\uff3e\321\uff3e\376\uff3e\001\002\000\042\011\052" +
    "\022\uffaf\032\053\044\u02de\067\uffaf\071\u02dc\105\uffaf\121" +
    "\uffaf\122\uffaf\124\uffaf\154\uffaf\173\uffaf\204\uffaf\304\uffaf" +
    "\321\uffaf\376\uffaf\001\002\000\032\022\uff39\067\uff39\105" +
    "\u02ea\121\uff39\122\u02e8\124\uff39\154\u02e5\173\uff34\204\u02e7" +
    "\304\uff39\321\uff39\376\uff39\001\002\000\020\022\uff3c\067" +
    "\uff3c\121\uff3c\124\uff3c\304\uff3c\321\uff3c\376\uff3c\001\002" +
    "\000\004\173\uff37\001\002\000\004\173\uff36\001\002\000" +
    "\006\011\052\032\053\001\002\000\014\011\052\032\053" +
    "\044\u02de\071\u02dc\u015a\uffaf\001\002\000\004\u015a\u02f7\001" +
    "\002\000\034\011\uff94\012\uff94\013\uff94\032\uff94\033\uff94" +
    "\044\uff94\234\144\237\uff94\372\uff94\u0127\uff94\u012c\uff94\u0137" +
    "\uff94\u0138\uff94\001\002\000\034\022\uff39\023\uff39\067\uff39" +
    "\105\u02ea\121\uff39\122\u02e8\124\uff39\154\u02e5\173\uff34\204" +
    "\u02e7\304\uff39\321\uff39\376\uff39\001\002\000\022\022\uff3a" +
    "\023\uff3a\067\uff3a\121\uff3a\124\uff3a\304\uff3a\321\uff3a\376" +
    "\uff3a\001\002\000\016\022\uff62\067\uff62\121\u02fc\124\uff62" +
    "\304\uff62\376\uff62\001\002\000\014\022\uff6d\067\uff6d\124" +
    "\u0303\304\uff6d\376\uff6d\001\002\000\004\123\u02fd\001\002" +
    "\000\032\011\052\012\146\013\165\032\053\033\160\044" +
    "\155\237\162\372\156\u0127\145\u012c\163\u0137\161\u0138\157" +
    "\001\002\000\016\022\uff60\023\u02ff\067\uff60\124\uff60\304" +
    "\uff60\376\uff60\001\002\000\032\011\052\012\146\013\165" +
    "\032\053\033\160\044\155\237\162\372\156\u0127\145\u012c" +
    "\163\u0137\161\u0138\157\001\002\000\014\022\uff63\067\uff63" +
    "\124\uff63\304\uff63\376\uff63\001\002\000\016\022\uff60\023" +
    "\u02ff\067\uff60\124\uff60\304\uff60\376\uff60\001\002\000\014" +
    "\022\uff61\067\uff61\124\uff61\304\uff61\376\uff61\001\002\000" +
    "\034\011\uff94\012\uff94\013\uff94\032\uff94\033\uff94\044\uff94" +
    "\234\144\237\uff94\372\uff94\u0127\uff94\u012c\uff94\u0137\uff94\u0138" +
    "\uff94\001\002\000\012\022\uff6b\067\uff6b\304\u0305\376\uff6b" +
    "\001\002\000\004\123\u0307\001\002\000\010\022\uff72\067" +
    "\uff72\376\uff72\001\002\000\032\011\052\012\146\013\165" +
    "\032\053\033\160\044\155\237\162\372\156\u0127\145\u012c" +
    "\163\u0137\161\u0138\157\001\002\000\046\011\uff69\012\uff69" +
    "\013\uff69\022\uff69\032\uff69\033\uff69\044\uff69\067\uff69\153" +
    "\u0309\237\uff69\262\uff69\363\uff69\372\uff69\376\uff69\u0127\uff69" +
    "\u012c\uff69\u0137\uff69\u0138\uff69\001\002\000\006\011\052\032" +
    "\053\001\002\000\044\011\uff66\012\uff66\013\uff66\022\uff66" +
    "\032\uff66\033\uff66\044\uff66\067\uff66\237\uff66\262\u0140\363" +
    "\u0141\372\uff66\376\uff66\u0127\uff66\u012c\uff66\u0137\uff66\u0138\uff66" +
    "\001\002\000\040\011\052\012\146\013\165\022\uff64\032" +
    "\053\033\160\044\155\067\uff64\237\162\372\156\376\uff64" +
    "\u0127\145\u012c\163\u0137\161\u0138\157\001\002\000\010\022" +
    "\uff6c\067\uff6c\376\uff6c\001\002\000\016\022\uff69\067\uff69" +
    "\153\u0309\262\uff69\363\uff69\376\uff69\001\002\000\014\022" +
    "\uff66\067\uff66\262\u0140\363\u0141\376\uff66\001\002\000\010" +
    "\022\uff65\067\uff65\376\uff65\001\002\000\044\011\uff6a\012" +
    "\uff6a\013\uff6a\022\uff6a\032\uff6a\033\uff6a\044\uff6a\067\uff6a" +
    "\237\uff6a\262\uff6a\363\uff6a\372\uff6a\376\uff6a\u0127\uff6a\u012c" +
    "\uff6a\u0137\uff6a\u0138\uff6a\001\002\000\012\022\uff6e\067\uff6e" +
    "\304\uff6e\376\uff6e\001\002\000\024\022\uff77\023\u02d7\067" +
    "\uff77\102\uff77\121\uff77\124\uff77\304\uff77\321\uff77\376\uff77" +
    "\001\002\000\022\022\uff7a\067\uff7a\102\uff7a\121\uff7a\124" +
    "\uff7a\304\uff7a\321\uff7a\376\uff7a\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0312\000\050\003\006\004\042\005\013\006\012\007" +
    "\032\010\020\030\030\044\005\075\027\106\043\116\014" +
    "\124\015\136\040\227\016\253\024\257\003\263\035\265" +
    "\017\340\004\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\076\u02d1\001" +
    "\001\000\004\262\u02cd\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\262\u02c9\266\u02c8\001\001\000\006\262\u02c4\264" +
    "\u02c3\001\001\000\004\262\u02b8\001\001\000\002\001\001" +
    "\000\026\137\u025a\140\u025e\141\u0259\162\u0253\163\u025d\164" +
    "\u025f\172\u0254\267\u0255\314\u0252\316\u0107\001\001\000\004" +
    "\057\u0236\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\230\u010d\231\u010c\234\u010b\235\u0110\237\u0105\267\u0109" +
    "\314\u0106\316\u0107\001\001\000\002\001\001\000\016\031" +
    "\343\032\333\034\340\035\334\037\345\041\344\001\001" +
    "\000\004\011\331\001\001\000\002\001\001\000\004\057" +
    "\310\001\001\000\004\057\114\001\001\000\002\001\001" +
    "\000\004\012\050\001\001\000\004\011\044\001\001\000" +
    "\002\001\001\000\050\003\047\004\042\005\013\006\012" +
    "\007\032\010\020\030\030\044\005\075\027\106\043\116" +
    "\014\124\015\136\040\227\016\253\024\257\003\263\035" +
    "\265\017\340\004\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\341\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\342\062\001\001\000\002\001\001\000\004\343" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\344\071\001\001\000" +
    "\002\001\001\000\004\345\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\075\100\001\001\000\004\346\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\347" +
    "\104\001\001\000\002\001\001\000\006\012\106\073\107" +
    "\001\001\000\004\074\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\112\001\001\000\004\074\113" +
    "\001\001\000\002\001\001\000\006\012\123\015\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\060\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\301\001\001\000\002\001\001\000\006" +
    "\012\126\125\127\001\001\000\002\001\001\000\004\130" +
    "\130\001\001\000\004\067\140\001\001\000\006\012\123" +
    "\015\132\001\001\000\004\122\134\001\001\000\006\012" +
    "\123\015\135\001\001\000\002\001\001\000\004\122\136" +
    "\001\001\000\002\001\001\000\006\056\141\062\142\001" +
    "\001\000\002\001\001\000\020\012\152\017\163\047\150" +
    "\051\151\053\147\054\146\064\153\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\052\262\001\001\000\010\002" +
    "\247\056\244\065\253\001\001\000\004\050\236\001\001" +
    "\000\004\020\231\001\001\000\004\063\226\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\012\152\017\163\047\177\051\151\053\147\054\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\152\017" +
    "\166\055\167\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\152\017\166" +
    "\055\176\001\001\000\002\001\001\000\004\066\203\001" +
    "\001\000\016\012\152\017\163\047\217\051\151\053\147" +
    "\054\146\001\001\000\002\001\001\000\016\012\152\017" +
    "\163\047\205\051\151\053\147\054\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\012" +
    "\152\017\163\047\207\051\151\053\147\054\146\001\001" +
    "\000\002\001\001\000\016\012\152\017\163\047\211\051" +
    "\151\053\147\054\146\001\001\000\004\061\213\001\001" +
    "\000\016\012\152\017\163\047\215\051\151\053\147\054" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\061\216\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\152\017\166\055\221\001\001\000\002\001\001" +
    "\000\010\012\152\017\166\055\223\001\001\000\002\001" +
    "\001\000\006\056\141\062\230\001\001\000\006\056\141" +
    "\062\227\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\123\015\233" +
    "\001\001\000\002\001\001\000\014\012\152\017\163\051" +
    "\241\053\147\054\146\001\001\000\014\012\152\017\163" +
    "\051\237\053\147\054\146\001\001\000\002\001\001\000" +
    "\004\050\240\001\001\000\002\001\001\000\004\050\242" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\066" +
    "\260\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\012\152\017\163\047\257\051\151\053\147\054\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\056\255\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\012\152\017\163\053\266\054\146\001\001\000" +
    "\002\001\001\000\012\012\152\017\163\053\264\054\146" +
    "\001\001\000\004\052\265\001\001\000\002\001\001\000" +
    "\004\052\267\001\001\000\002\001\001\000\010\012\152" +
    "\017\166\055\271\001\001\000\002\001\001\000\020\012" +
    "\152\017\163\047\274\051\151\053\147\054\146\126\273" +
    "\001\001\000\004\127\277\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\126\125\300\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\303\013\304\001\001\000\004\014\305\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\307\001\001\000" +
    "\002\001\001\000\004\117\312\001\001\000\002\001\001" +
    "\000\010\012\123\015\314\120\313\001\001\000\002\001" +
    "\001\000\004\121\325\001\001\000\004\123\317\001\001" +
    "\000\004\012\320\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\123\015\327\001\001\000\004\067\326\001" +
    "\001\000\002\001\001\000\004\122\330\001\001\000\002" +
    "\001\001\000\050\003\332\004\042\005\013\006\012\007" +
    "\032\010\020\030\030\044\005\075\027\106\043\116\014" +
    "\124\015\136\040\227\016\253\024\257\003\263\035\265" +
    "\017\340\004\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\377\001\001\000\004\021" +
    "\366\001\001\000\004\021\364\001\001\000\002\001\001" +
    "\000\004\021\356\001\001\000\004\021\347\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\123\015\350\001\001\000\004\033" +
    "\352\001\001\000\006\012\123\015\353\001\001\000\002" +
    "\001\001\000\004\033\354\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\303\013\357\001\001\000\004" +
    "\040\361\001\001\000\006\012\303\013\362\001\001\000" +
    "\002\001\001\000\004\040\363\001\001\000\002\001\001" +
    "\000\004\012\365\001\001\000\002\001\001\000\006\012" +
    "\367\042\370\001\001\000\002\001\001\000\004\043\371" +
    "\001\001\000\002\001\001\000\006\012\367\042\373\001" +
    "\001\000\004\043\374\001\001\000\002\001\001\000\006" +
    "\012\123\015\376\001\001\000\002\001\001\000\004\012" +
    "\u0100\001\001\000\004\036\u0102\001\001\000\004\012\u0103" +
    "\001\001\000\002\001\001\000\004\036\u0104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\270\u01f7\001\001\000\006\012\u01ed\232\u01ef\001\001\000" +
    "\002\001\001\000\004\012\u01ec\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\123\015" +
    "\u0119\001\001\000\006\012\303\013\u0111\001\001\000\002" +
    "\001\001\000\006\072\u0112\236\u0114\001\001\000\002\001" +
    "\001\000\006\012\106\073\u0117\001\001\000\002\001\001" +
    "\000\004\075\u0116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\240\u011a\241\u011e\246\u011d" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\012" +
    "\u0131\175\u012f\177\u012e\207\u0132\220\u012d\226\u0133\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\247\u0120\250" +
    "\u0123\001\001\000\004\251\u0129\001\001\000\004\021\u0126" +
    "\001\001\000\002\001\001\000\004\021\u0124\001\001\000" +
    "\004\012\u0125\001\001\000\002\001\001\000\004\012\u0127" +
    "\001\001\000\002\001\001\000\006\247\u012a\250\u0123\001" +
    "\001\000\002\001\001\000\004\251\u012b\001\001\000\002" +
    "\001\001\000\004\012\u01da\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\176\u01d7\001\001\000\004\012\u01d5" +
    "\001\001\000\010\023\u017c\024\u0183\025\u0186\001\001\000" +
    "\004\221\u0137\001\001\000\002\001\001\000\004\174\u0171" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\211\u013b\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\222\u013d\001\001\000\004\012\u013e\001" +
    "\001\000\002\001\001\000\004\102\u0141\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\223\u0143\001\001\000" +
    "\004\012\u0145\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\102\u0146\001\001\000\004\223\u0147\001\001\000" +
    "\002\001\001\000\004\211\u0149\001\001\000\004\222\u014a" +
    "\001\001\000\002\001\001\000\004\224\u014d\001\001\000" +
    "\004\012\u016b\001\001\000\002\001\001\000\006\012\303" +
    "\013\u014f\001\001\000\004\213\u0151\001\001\000\004\012" +
    "\u0169\001\001\000\004\214\u0153\001\001\000\004\215\u015e" +
    "\001\001\000\004\174\u0155\001\001\000\004\351\u0157\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\352\u015b\001\001\000\004\204" +
    "\u015c\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\214\u0168\001\001\000\004\217\u0167\001" +
    "\001\000\004\217\u0161\001\001\000\002\001\001\000\004" +
    "\216\u0165\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\225" +
    "\u016c\001\001\000\002\001\001\000\004\012\u016e\001\001" +
    "\000\004\225\u016f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\056\141\062\u0173\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\u01d3\001\001\000\002\001\001\000" +
    "\004\200\u0190\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\u0189\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\u018c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\u01d2\001\001\000\014\210\u019a" +
    "\212\u0199\354\u0194\356\u0192\357\u0193\001\001\000\004\203" +
    "\u01ce\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\355\u01c6\001\001\000\004\211\u01c3\001\001\000\004\201" +
    "\u01b2\001\001\000\004\012\u01b0\001\001\000\006\206\u01af" +
    "\207\u01a7\001\001\000\002\001\001\000\006\206\u01a6\207" +
    "\u01a7\001\001\000\004\174\u01a2\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\211\u01a1\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\056\141\062\u01a4\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\210\u01a8\212\u0199" +
    "\001\001\000\006\206\u01a9\207\u01a7\001\001\000\002\001" +
    "\001\000\006\012\303\013\u01ab\001\001\000\004\213\u01ac" +
    "\001\001\000\004\214\u01ad\001\001\000\004\174\u01ae\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\210\u019a" +
    "\212\u0199\354\u0194\357\u01b1\001\001\000\002\001\001\000" +
    "\004\202\u01b8\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\203\u01be\001" +
    "\001\000\004\174\u01b9\001\001\000\004\205\u01bb\001\001" +
    "\000\002\001\001\000\006\206\u01bc\207\u01a7\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\205\u01c7\001\001\000\006\206\u01c8\207\u01a7\001" +
    "\001\000\002\001\001\000\004\353\u01ca\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\174\u01cf\001\001\000\004\205\u01d0\001\001" +
    "\000\006\206\u01d1\207\u01a7\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\012\u0131\175\u01d8\177\u012e\207\u0132\220" +
    "\u012d\226\u0133\001\001\000\002\001\001\000\004\176\u01d9" +
    "\001\001\000\002\001\001\000\004\211\u01db\001\001\000" +
    "\004\222\u01dc\001\001\000\002\001\001\000\004\012\u01de" +
    "\001\001\000\016\023\u01df\024\u0183\025\u0186\242\u01e3\243" +
    "\u01e4\244\u01e2\001\001\000\004\200\u01ea\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\245\u01e7\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\204\u01eb\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\233" +
    "\u01f1\001\001\000\004\012\u01f5\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\303\013\u01f9" +
    "\001\001\000\002\001\001\000\004\271\u01fb\001\001\000" +
    "\002\001\001\000\010\022\u01fd\272\u01fc\273\u01fe\001\001" +
    "\000\004\301\u0213\001\001\000\010\012\u0202\025\u0204\275" +
    "\u0203\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\274" +
    "\u020c\001\001\000\004\276\u0205\001\001\000\006\277\u0208" +
    "\300\u020b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\022\u01fd\273\u020e\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\300\u0211" +
    "\001\001\000\002\001\001\000\010\302\u0227\303\u0226\304" +
    "\u022a\001\001\000\004\307\u0214\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\005\u0219\075" +
    "\027\106\043\116\014\124\015\310\u0218\311\u021a\001\001" +
    "\000\002\001\001\000\004\011\u021e\001\001\000\002\001" +
    "\001\000\016\005\u0219\075\027\106\043\116\014\124\015" +
    "\311\u021c\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\005\u021f\075\027\106\043\116\014\124\015\312\u0220" +
    "\001\001\000\004\011\u0221\001\001\000\002\001\001\000" +
    "\016\005\u0222\075\027\106\043\116\014\124\015\313\u0223" +
    "\001\001\000\004\011\u0224\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\305\u0232\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\u022e\306\u0230" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\302\u0234\303\u0226\304\u022a\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\107\u0237\001\001\000\006" +
    "\012\123\015\u0239\001\001\000\002\001\001\000\006\072" +
    "\u023a\110\u023b\001\001\000\002\001\001\000\004\114\u023e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\111\u0241\112\u0242\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\113\u0247\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\112\u0248" +
    "\001\001\000\002\001\001\000\004\113\u0249\001\001\000" +
    "\002\001\001\000\004\115\u024b\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\111\u024e\112\u0242\001\001\000" +
    "\002\001\001\000\004\115\u0250\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\u0286\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\303\013\u0282\001\001\000\006" +
    "\012\123\015\u027a\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\211\u0260\001\001\000\002\001\001\000\004" +
    "\012\u0262\001\001\000\002\001\001\000\006\012\123\015" +
    "\u0264\001\001\000\004\165\u0266\001\001\000\006\012\u0271" +
    "\166\u0272\001\001\000\004\170\u0268\001\001\000\004\072" +
    "\u0270\001\001\000\004\067\u0269\001\001\000\004\171\u026b" +
    "\001\001\000\004\012\u026c\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\u026e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\102\u0274\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\167\u0275" +
    "\001\001\000\002\001\001\000\004\012\u0277\001\001\000" +
    "\004\102\u0278\001\001\000\004\167\u0279\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\012\u0131\175\u027c\177" +
    "\u012e\207\u0132\220\u012d\226\u0133\001\001\000\004\176\u027d" +
    "\001\001\000\002\001\001\000\004\173\u027f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\075\u0284\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\142\u0289\143\u0287\001\001\000\004" +
    "\147\u02b5\001\001\000\004\144\u028b\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\145\u028d\146\u028e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\145\u0290\146\u028e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\151\u0298" +
    "\001\001\000\002\001\001\000\012\153\u029d\154\u029c\156" +
    "\u029a\160\u029b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\151\u02b2\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\155\u02a3\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\157\u02a9\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\155\u02ac\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\155\u02af\161\u02b1\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\u02b6\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\012\u02bb" +
    "\022\u02bc\254\u02bd\260\u02ba\001\001\000\002\001\001\000" +
    "\004\255\u02bf\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\256\u02c1\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\u02c5\022\u02c6\261\u02c7\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\u02c5\022\u02c6\261\u02ca\001" +
    "\001\000\002\001\001\000\006\012\123\015\u02cc\001\001" +
    "\000\002\001\001\000\010\012\u02bb\022\u02bc\260\u02ce\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\057\u02d2\001\001\000\020\012\152\017\163\047" +
    "\u02d3\051\151\053\147\054\146\070\u02d4\001\001\000\010" +
    "\012\u02d9\045\u0311\046\u02da\001\001\000\004\131\u02e0\001" +
    "\001\000\004\071\u02d7\001\001\000\016\012\152\017\163" +
    "\047\u02d8\051\151\053\147\054\146\001\001\000\002\001" +
    "\001\000\010\012\u02d9\045\u02dc\046\u02da\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\u02d9\046\u02df\001" +
    "\001\000\004\071\u02de\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\067\u02f9\001\001\000" +
    "\006\012\123\015\u02e2\001\001\000\010\012\u02d9\045\u02e3" +
    "\046\u02da\001\001\000\006\133\u02e8\134\u02e5\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\135\u02f2\001\001" +
    "\000\004\135\u02f1\001\001\000\004\132\u02ed\001\001\000" +
    "\004\135\u02eb\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\123\015\u02ee\001\001\000\002\001\001\000" +
    "\010\012\u02d9\045\u02ef\046\u02da\001\001\000\006\133\u02f0" +
    "\134\u02e5\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\123\015\u02f4\001\001\000\010" +
    "\012\u02d9\045\u02f5\046\u02da\001\001\000\002\001\001\000" +
    "\006\056\141\062\u02f7\001\001\000\006\133\u02f8\134\u02e5" +
    "\001\001\000\002\001\001\000\004\104\u02fa\001\001\000" +
    "\004\077\u0303\001\001\000\002\001\001\000\016\012\152" +
    "\017\163\047\u02fd\051\151\053\147\054\146\001\001\000" +
    "\004\105\u02ff\001\001\000\016\012\152\017\163\047\u0300" +
    "\051\151\053\147\054\146\001\001\000\002\001\001\000" +
    "\004\105\u0301\001\001\000\002\001\001\000\006\056\141" +
    "\062\u0310\001\001\000\004\100\u0305\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\012\152\017\163\047\u0307" +
    "\051\151\053\147\054\146\001\001\000\004\101\u0309\001" +
    "\001\000\004\012\u030f\001\001\000\004\102\u030a\001\001" +
    "\000\020\012\152\017\163\047\u030c\051\151\053\147\054" +
    "\146\103\u030b\001\001\000\002\001\001\000\004\101\u030d" +
    "\001\001\000\004\102\u030e\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\071\u0312\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 

    public List<CupError> SyntacticErrors = new ArrayList<CupError>();
    private Symbol s;

    public void syntax_error(Symbol cur_token){
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) cur_token);
        List<Integer> ids = expected_token_ids();
        List<String> list = new ArrayList<String>();
	    for (Integer expected : ids) {
            list.add(symbl_name_from_id(expected));
        }
        SyntacticErrors.add(new CupError(s.left,s.right,s.value.toString(),list));
    }

    public void unrecovered_syntax_error(Symbol cur_token){
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) cur_token);
        List<Integer> ids = expected_token_ids();
        List<String> list = new ArrayList<String>();
	    for (Integer expected : ids) {
            list.add(symbl_name_from_id(expected));
        }
        SyntacticErrors.add(new CupError(s.left,s.right,s.value.toString(),list));
    }

    public String symbl_name_from_id(int id) {
        Field[] fields = getSymbolContainer().getFields();
        for(Field f : fields){
            try {
                if (f.getInt(null)==id) return f.getName();
            } catch (IllegalArgumentException e) {
            } catch (IllegalAccessException e) {
            }
        }
        return "Simbolo Invalido";
    }

    public List<Integer> expected_token_ids() {
        List<Integer> ret = new ArrayList<Integer>();
        int parse_state = ((Symbol)stack.peek()).parse_state ;
        short[] row = action_tab[parse_state];
        for (int i = 0; i<row.length; i+=2){
            if (row[i]==-1) continue;
            if (!validate_expected_symbol(row[i])) continue;
            ret.add(new Integer(row[i]));
        }
        return ret;
    }

    protected static final int _error_sync_size(){
        return 1;
    }

    private boolean validate_expected_symbol(int id){
        short lhs,rhs_size;
        int act;
        try {
            virtual_parse_stack vstack = new virtual_parse_stack(stack);
            for (;;)
            {
                act = get_action(vstack.top(), id);
                if (act == 0) return false;
                if (act > 0)
                {
                    vstack.push(act-1);
                    if (!advance_lookahead()) return true;
                }
                else
                {
                    if ((-act)-1 == start_production())  return true;
                    lhs = production_tab[(-act)-1][0];
                    rhs_size = production_tab[(-act)-1][1];
                    for (int i = 0; i < rhs_size; i++) vstack.pop();
                    vstack.push(get_reduce(vstack.top(), lhs));
                }
            }
        } catch (Exception e) {
        }
        return true;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // CursorDeclareg ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareg",229, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // CursorDeclareg ::= OF ColumnListA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareg",229, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // CursorDeclaref ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaref",228, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // CursorDeclaref ::= FOR UPDATE CursorDeclareg 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaref",228, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // CursorDeclaree ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaree",227, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // CursorDeclaree ::= TYPE_WARNING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaree",227, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // CursorDeclared ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",226, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // CursorDeclared ::= OPTIMISTIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",226, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // CursorDeclared ::= SCROLL_LOCKS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",226, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // CursorDeclared ::= READ_ONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",226, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // CursorDeclarec ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // CursorDeclarec ::= FAST_FORWARD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // CursorDeclarec ::= DYNAMIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // CursorDeclarec ::= KEYSET 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // CursorDeclarec ::= STATIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // CursorDeclareb ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareb",224, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // CursorDeclareb ::= FORWARD_ONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareb",224, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // CursorDeclareb ::= SCROLL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareb",224, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // CursorDeclarea ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarea",223, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // CursorDeclarea ::= GLOBAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarea",223, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // CursorDeclarea ::= LOCAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarea",223, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // CursorDeclare ::= DECLARE ID CURSOR CursorDeclarea CursorDeclareb CursorDeclarec CursorDeclared CursorDeclaree FOR Select CursorDeclaref 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclare",222, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // StmtSP2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP2",201, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // StmtSP2 ::= DML Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP2",201, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // StmtSP1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP1",200, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // StmtSP1 ::= DML Final StmtSP2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP1",200, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // StmtSP ::= DML Final StmtSP1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP",199, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // StartSP ::= StmtSP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StartSP",198, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // StartSP ::= BEGIN StmtSP END 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StartSP",198, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // ReplicationSP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReplicationSP",197, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // ReplicationSP ::= FOR REPLICATION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReplicationSP",197, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // Clause ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clause",196, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // Clause ::= OWNER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clause",196, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // Clause ::= SELF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clause",196, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // Clause ::= CALLER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clause",196, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // ProcOptionRec ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOptionRec",195, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // ProcOptionRec ::= Coma ProcOption1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOptionRec",195, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // ClauseExec ::= EXEC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ClauseExec",194, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // ClauseExec ::= EXECUTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ClauseExec",194, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // ProcOption2 ::= ClauseExec AS Clause 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption2",193, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // ProcOption2 ::= RECOMPILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption2",193, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // ProcOption2 ::= ENCRYPTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption2",193, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // ProcOption1 ::= ProcOption2 ProcOptionRec 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption1",192, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // ProcOption ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption",191, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // ProcOption ::= WITH ProcOption1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption",191, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // TipoD_SP3 ::= OUTPUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP3",190, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // TipoD_SP3 ::= OUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP3",190, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // TipoD_SP2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP2",189, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // TipoD_SP2 ::= TipoD_SP3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP2",189, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // TipoD_SP1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP1",188, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // TipoD_SP1 ::= Igual DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP1",188, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // TipoD_SP ::= ID READONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP",187, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // TipoD_SP ::= CURSOR VARYING TipoD_SP3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP",187, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // TipoD_SP ::= Tipo_datoA TipoD_SP1 TipoD_SP2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP",187, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // ParamsB_SP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsB_SP",186, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // ParamsB_SP ::= Coma ParamsA_SP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsB_SP",186, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // ParamsA_SP ::= Variable TipoD_SP ParamsB_SP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsA_SP",185, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // ParamsSP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsSP",184, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // ParamsSP ::= ParamsA_SP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsSP",184, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // NumSP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NumSP",183, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // NumSP ::= PyC Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NumSP",183, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // SP_Reservada ::= PROCEDURE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SP_Reservada",182, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // SP_Reservada ::= PROC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SP_Reservada",182, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // Procedure ::= OrAlter SP_Reservada Object2 NumSP ParamsSP ProcOption ReplicationSP AS StartSP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Procedure",181, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // RollbackA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RollbackA",180, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // RollbackA ::= TranName NameA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RollbackA",180, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // Rollback ::= ROLLBACK RollbackA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Rollback",179, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // CommitA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CommitA",178, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // CommitA ::= TranName NameA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CommitA",178, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // Commit ::= COMMIT CommitA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Commit",177, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // TranName ::= TRANSACTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TranName",176, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // TranName ::= TRAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TranName",176, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // NameA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NameA",175, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // NameA ::= Variable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NameA",175, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // NameA ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NameA",175, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // Name ::= Variable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Name",174, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // Name ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Name",174, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // SavePoint ::= SAVE TranName Name 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SavePoint",173, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // BeginTranC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranC",172, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // BeginTranC ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranC",172, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // BeginTranB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranB",171, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // BeginTranB ::= WITH MARK BeginTranC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranB",171, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // BeginTranA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranA",170, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // BeginTranA ::= Name BeginTranB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranA",170, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // BeginTran ::= BEGIN TranName BeginTranA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTran",169, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // AlterTableDropC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropC",167, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // AlterTableDropC ::= Coma AlterTableDropA AlterTableDropC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropC",167, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // AlterTableDropB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropB",166, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // AlterTableDropB ::= CONSTRAINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropB",166, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // AlterTableDropA ::= COLUMN IFE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropA",165, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // AlterTableDropA ::= AlterTableDropB IFE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropA",165, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // AlterTableDrop ::= DROP AlterTableDropA AlterTableDropC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDrop",164, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // AlterColumnE ::= NOT FOR REPLICATION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnE",163, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // AlterColumnE ::= ROWGUIDCOL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnE",163, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // AlterColumnD ::= DROP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnD",162, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // AlterColumnD ::= ADD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnD",162, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // AlterColumnA ::= Tipo_dato ColumnDefA ColumnDefG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnA",161, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // AlterColumnC ::= AlterColumnD AlterColumnE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnC",160, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // AlterColumnC ::= AlterColumnA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnC",160, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // AlterColumn ::= ALTER COLUMN ID AlterColumnC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumn",159, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // AlterTableA ::= AlterTableDrop 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableA",158, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // AlterTableA ::= ADD CNC CNCA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableA",158, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // AlterTableA ::= AlterColumn 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableA",158, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // AlterTable ::= TABLE Object3 AlterTableA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTable",157, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // AlterViewA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterViewA",156, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // AlterViewA ::= ColumnList 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterViewA",156, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // AlterView ::= VIEW Object2 AlterViewA AS Select 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterView",155, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // AlterUser ::= USER ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterUser",154, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // AlterDBB ::= SET ROLLBACK IMMEDIATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDBB",153, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // AlterDBB ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDBB",153, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // AlterDBA ::= CURRENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDBA",152, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // AlterDBA ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDBA",152, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // AlterDatabase ::= DATABASE AlterDBA AlterDBB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDatabase",151, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // AlterA ::= Function 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // AlterA ::= Procedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // AlterA ::= AlterView 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // AlterA ::= AlterDatabase 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // AlterA ::= AlterUser 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // AlterA ::= AlterTable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // Alter ::= ALTER AlterA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alter",149, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // TableIndex ::= INDEX ID ColumnConstrC TableConstrB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableIndex",148, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // TableConstrE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrE",147, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // TableConstrE ::= Coma ID TableConstrE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrE",147, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // TableConstrD ::= AbreParentesis ID TableConstrE CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrD",146, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // TableConstrC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrC",145, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // TableConstrC ::= Coma ID OrderB TableConstrC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrC",145, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // TableConstrB ::= AbreParentesis ID OrderB TableConstrC CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrB",144, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // TableConstrA ::= CHECK NFR AbreParentesis SearchCondition CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // TableConstrA ::= FOREIGN KEY TableConstrD REFERENCES Object2 ColumnConstrE ColumnConstrF NFR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // TableConstrA ::= UNIQUE ColumnConstrC TableConstrB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // TableConstrA ::= PRIMARY KEY ColumnConstrC TableConstrB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // TableConstr ::= ColumnConstrA TableConstrA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstr",142, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // ColumnConstrI ::= SET ColumnConstrH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrI",141, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // ColumnConstrI ::= CASCADE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrI",141, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // ColumnConstrH ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrH",140, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // ColumnConstrH ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrH",140, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // ColumnConstrG ::= UPDATE ColumnConstrI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrG",139, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // ColumnConstrG ::= DELETE ColumnConstrI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrG",139, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // ColumnConstrF ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrF",138, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // ColumnConstrF ::= ON ColumnConstrG ColumnConstrF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrF",138, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // ColumnConstrE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrE",137, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // ColumnConstrE ::= AbreParentesis ID CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrE",137, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // ColumnConstrD ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrD",136, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // ColumnConstrD ::= FOREIGN KEY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrD",136, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // ColumnConstrC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrC",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // ColumnConstrC ::= NONCLUSTERED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrC",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // ColumnConstrC ::= CLUSTERED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrC",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // ColumnConstrB ::= CHECK NFR AbreParentesis SearchCondition CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // ColumnConstrB ::= ColumnConstrD REFERENCES Object2 ColumnConstrE ColumnConstrF NFR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // ColumnConstrB ::= UNIQUE ColumnConstrC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // ColumnConstrB ::= PRIMARY KEY ColumnConstrC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // ColumnConstrA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrA",133, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // ColumnConstrA ::= CONSTRAINT ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrA",133, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // ColumnConstr ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstr",132, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // ColumnConstr ::= ColumnConstrA ColumnConstrB ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstr",132, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // ColumnDefH ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefH",131, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // ColumnDefH ::= ROWGUIDCOL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefH",131, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // ColumnDefG ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefG",130, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // ColumnDefG ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefG",130, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // ColumnDefF ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefF",129, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // ColumnDefF ::= AbreParentesis Entero Coma Entero CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefF",129, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // ColumnDefE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefE",128, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // ColumnDefE ::= IDENTITY ColumnDefF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefE",128, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // ColumnDefD ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // ColumnDefD ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // ColumnDefD ::= Flotan 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // ColumnDefD ::= Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // ColumnDefA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefA",126, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // ColumnDefA ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefA",126, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // ColumnDefV ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefV",233, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // ColumnDefV ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefV",233, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // ColumnDefV ::= NOT NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefV",233, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // ColumnDefW ::= FOR REPLICATION ColumnDefV 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefW",235, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // ColumnDefW ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefW",235, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // ColumnDefX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefX",234, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // ColumnDefX ::= NOT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefX",234, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // ColumnDefY ::= ColumnConstrB ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // ColumnDefY ::= ROWGUIDCOL ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // ColumnDefY ::= ColumnDefX ColumnDefW ColumnDefH ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // ColumnDefY ::= IDENTITY ColumnDefF NFR ColumnDefH ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // ColumnDefY ::= DEFAULT ColumnDefD ColumnDefE NFR ColumnDefH ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // ColumnDefZ ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefZ",236, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // ColumnDefZ ::= ColumnDefY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefZ",236, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // ColumnDefZ ::= CONSTRAINT ID ColumnDefY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefZ",236, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // ColumnDef ::= ID Tipo_dato ColumnDefA ColumnDefZ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDef",125, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // CNCA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNCA",124, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // CNCA ::= Coma CNC CNCA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNCA",124, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // CNC ::= TableIndex 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNC",123, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // CNC ::= TableConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNC",123, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // CNC ::= ColumnDef 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNC",123, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // NFR2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR2",232, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // NFR2 ::= NOT ColumnDefG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR2",232, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // NFR1 ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR1",231, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // NFR1 ::= FOR REPLICATION NFR2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR1",231, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // NFR ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR",122, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // NFR ::= NOT NFR1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR",122, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // FileGroup ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileGroup",121, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // FileGroup ::= ON PRIMARY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileGroup",121, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // CreateTable ::= TABLE Object3 AbreParentesis CNC CNCA CierraParentesis FileGroup 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateTable",120, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // OptionalOn ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OptionalOn",119, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // OptionalOn ::= ON ID AbreParentesis ID CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OptionalOn",119, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // IncludeIndex ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IncludeIndex",118, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // IncludeIndex ::= INCLUDE ColumnList 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IncludeIndex",118, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // ColumnIndexB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndexB",117, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // ColumnIndexB ::= Coma ID OrderB ColumnIndexB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndexB",117, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // ColumnIndexA ::= ID OrderB ColumnIndexB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndexA",116, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // ColumnIndex ::= AbreParentesis ColumnIndexA CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndex",115, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // CreateIndexA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateIndexA",114, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // CreateIndexA ::= UNIQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateIndexA",114, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // CreateIndex ::= CreateIndexA ColumnConstrC INDEX ID ON Object3 ColumnIndex IncludeIndex Where OptionalOn 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateIndex",113, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // CreateView ::= VIEW Object2 AS Select 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateView",112, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // Filegrowth_A ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth_A",111, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // Filegrowth_A ::= MODULAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth_A",111, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // Filegrowth_A ::= Size_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth_A",111, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // Filegrowth ::= FILEGROWTH Igual Entero Filegrowth_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth",110, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // Maxsize_A ::= UNLIMITED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Maxsize_A",109, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // Maxsize_A ::= Entero Size_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Maxsize_A",109, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // Maxsize ::= MAXSIZE Igual Maxsize_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Maxsize",108, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // Size_A ::= TB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size_A",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // Size_A ::= GB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size_A",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // Size_A ::= MB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size_A",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // Size_A ::= KB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size_A",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // Size ::= SIZE Igual Entero Size_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size",106, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // Optional ::= Filegrowth 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optional",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // Optional ::= Maxsize 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optional",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // Optional ::= Size 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optional",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // Optionals ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optionals",103, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // Optionals ::= Coma Optional Optionals 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optionals",103, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // COLLATEDB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLLATEDB",101, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // COLLATEDB ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLLATEDB",101, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // FileSpec ::= AbreParentesis NAME Igual Cadena Coma FILENAME Igual Cadena Optionals CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileSpec",100, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // FileSpecs ::= FileSpec 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileSpecs",99, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // FileSpecs ::= FileSpec Coma FileSpecs 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileSpecs",99, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // Primary ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Primary",98, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // Primary ::= PRIMARY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Primary",98, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // CreateDBB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDBB",97, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // CreateDBB ::= ON Primary FileSpecs 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDBB",97, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // CreateDBA ::= CreateDBB COLLATEDB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDBA",96, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // CreateDB ::= DATABASE ID CreateDBA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDB",95, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // CreateUser ::= USER Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateUser",94, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // CreateA ::= Function 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // CreateA ::= Procedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // CreateA ::= CreateView 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // CreateA ::= CreateUser 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // CreateA ::= CreateIndex 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // CreateA ::= CreateDB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // CreateA ::= CreateTable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // Create ::= CREATE CreateA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Create",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // Outer ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Outer",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // Outer ::= OUTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Outer",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // Type ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // Type ::= FULL Outer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // Type ::= LEFT Outer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // Type ::= RIGHT Outer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // Type ::= INNER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // Join ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Join",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // Join ::= Type JOIN Object3 Alias ON SearchCondition Join 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Join",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // FromSelectA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromSelectA",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // FromSelectA ::= Coma Object3 Alias Join 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromSelectA",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // FromSelect ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromSelect",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // FromSelect ::= FROM Object3 Alias Join FromSelectA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromSelect",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // FromUpdate ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromUpdate",86, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // FromUpdate ::= FROM Object3 DeleteC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromUpdate",86, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // UpdateC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateC",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // UpdateC ::= Coma UpdateA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateC",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // UpdateB ::= Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateB",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // UpdateB ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateB",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // UpdateA ::= ID Igual UpdateB UpdateC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateA",83, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // Update ::= UPDATE Top Object3 SET UpdateA FromUpdate Where 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Update",82, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // Server ::= AbreParentesis ID Coma Entero CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Server",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // DeleteC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteC",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // DeleteC ::= Coma Object3 DeleteC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteC",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // DeleteB ::= FROM Object3 DeleteC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteB",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // DeleteA ::= Object3 DeleteB Where 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteA",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // DeleteA ::= OPENQUERY Server 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteA",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // FromDelete ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromDelete",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // FromDelete ::= FROM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromDelete",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // Delete ::= DELETE Top FromDelete DeleteA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Delete",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // InsertValoresA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValoresA",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // InsertValoresA ::= Coma AbreParentesis InsertExpresion CierraParentesis InsertValoresA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValoresA",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // InsertValores ::= DEFAULT VALUES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValores",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // InsertValores ::= VALUES AbreParentesis InsertExpresion CierraParentesis InsertValoresA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValores",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // InsertExpresionB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionB",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // InsertExpresionB ::= Coma InsertExpresionA InsertExpresionB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionB",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // InsertExpresionA ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // InsertExpresionA ::= Flotan 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // InsertExpresionA ::= Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // InsertExpresionA ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // InsertExpresion ::= InsertExpresionA InsertExpresionB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresion",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // InsertColumnList ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertColumnList",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // InsertColumnList ::= ColumnList 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertColumnList",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // InsertInto ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertInto",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // InsertInto ::= INTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertInto",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // Insert ::= INSERT Top InsertInto Object3 InsertColumnList InsertValores 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Insert",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // GroupA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GroupA",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // GroupA ::= Coma Expresion GroupA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GroupA",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Group ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Group",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Group ::= GROUP BY Expresion GroupA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Group",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // OrderC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderC",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // OrderC ::= Expresion OrderA OrderB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderC",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // OrderB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderB",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // OrderB ::= DESC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderB",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // OrderB ::= ASC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderB",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // OrderA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderA",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // OrderA ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderA",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Order ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Order",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Order ::= ORDER BY Expresion OrderA OrderB OrderC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Order",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Having ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Having",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Having ::= HAVING SearchCondition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Having",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // SelectA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectA",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // SelectA ::= DISTINCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectA",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // SelectA ::= ALL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectA",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Select ::= SELECT SelectA Top SelectColumns FromSelect Where Group Having Order 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Select",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ColumnListB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnListB",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ColumnListB ::= Coma ID ColumnListB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnListB",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ColumnListA ::= ID ColumnListB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnListA",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ColumnList ::= AbreParentesis ColumnListA CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnList",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // SelectColumnsA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectColumnsA",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // SelectColumnsA ::= Coma Expresion Alias SelectColumnsA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectColumnsA",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // SelectColumns ::= Multiplicacion SelectColumnsA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectColumns",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // SelectColumns ::= Expresion Alias SelectColumnsA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectColumns",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Where ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Where",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Where ::= WHERE SearchCondition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Where",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // PredicadoC ::= LIKE Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoC",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // PredicadoC ::= BETWEEN Expresion AND Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoC",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // PredicadoC ::= IN AbreParentesis Expresion Expresiones CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoC",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // PredicadoA ::= Not PredicadoC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoA",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // PredicadoA ::= IS Not NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoA",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // PredicadoA ::= OperadoresBooleanos Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoA",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OperadoresBooleanos ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OperadoresBooleanos ::= Menor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OperadoresBooleanos ::= MayorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OperadoresBooleanos ::= Mayor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OperadoresBooleanos ::= NoIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OperadoresBooleanos ::= Igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Predicado ::= Expresion PredicadoA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Predicado",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // SearchConditionA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchConditionA",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SearchConditionA ::= OR SearchCondition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchConditionA",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // SearchConditionA ::= AND SearchCondition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchConditionA",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // SearchCondition ::= Not Predicado SearchConditionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchCondition",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Expresiones ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Expresiones",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Expresiones ::= Coma Expresion Expresiones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Expresiones",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // TopA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TopA",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // TopA ::= PERCENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TopA",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Top ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Top",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Top ::= TOP AbreParentesis Entero CierraParentesis TopA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Top",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Not ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Not",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Not ::= NOT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Not",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ExpresionF ::= Multiplicacion CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionF",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ExpresionF ::= Entero CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionF",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ExpresionF ::= Object4 CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionF",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ExpresionE ::= COUNT AbreParentesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ExpresionE ::= MAX AbreParentesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ExpresionE ::= MIN AbreParentesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ExpresionE ::= AVG AbreParentesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ExpresionE ::= SUM AbreParentesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ExpresionE ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ExpresionE ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ExpresionE ::= Flotan 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ExpresionE ::= Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ExpresionE ::= Object4 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ExpresionD ::= ExpresionE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionD",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ExpresionD ::= AbreParentesis Expresion PredicadoC CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionD",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ExpresionC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionC",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ExpresionC ::= Division ExpresionD ExpresionC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionC",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ExpresionC ::= Multiplicacion ExpresionD ExpresionC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionC",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ExpresionB ::= ExpresionD ExpresionC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionB",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ExpresionA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ExpresionA ::= Resta ExpresionB ExpresionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ExpresionA ::= Suma ExpresionB ExpresionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expresion ::= ExpresionB ExpresionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Expresion",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // AliasA ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AliasA",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // AliasA ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AliasA",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Alias ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alias",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Alias ::= AliasA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alias",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Alias ::= AS AliasA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alias",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Truncate ::= TRUNCATE TABLE Object3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Truncate",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DropIndexB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndexB",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DropIndexB ::= Coma DropIndexA DropIndexB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndexB",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DropIndexA ::= ID ON Object3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndexA",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DropIndex ::= INDEX IFE DropIndexA DropIndexB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndex",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DropViewA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropViewA",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DropViewA ::= Coma Object2 DropViewA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropViewA",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DropView ::= VIEW IFE Object2 DropViewA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropView",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DropDatabaseA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropDatabaseA",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DropDatabaseA ::= Coma ID DropDatabaseA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropDatabaseA",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DropDatabase ::= DATABASE IFE ID DropDatabaseA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropDatabase",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DropUser ::= USER IFE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropUser",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DropTableA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropTableA",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DropTableA ::= Coma Object3 DropTableA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropTableA",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DropTable ::= TABLE IFE Object3 DropTableA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropTable",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DropA ::= DropIndex 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DropA ::= DropView 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DropA ::= DropDatabase 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DropA ::= DropUser 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DropA ::= DropTable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Drop ::= DROP DropA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Drop",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Tipo_datoC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoC",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Tipo_datoC ::= Coma Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoC",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Tipo_datoB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoB",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Tipo_datoB ::= AbreParentesis Entero Tipo_datoC CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoB",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Tipo_datoA ::= NUMERIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Tipo_datoA ::= SMALLINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Tipo_datoA ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Tipo_datoA ::= INT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Tipo_datoA ::= TIME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Tipo_datoA ::= REAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Tipo_datoA ::= NCHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Tipo_datoA ::= CURSOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Tipo_datoA ::= CHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Tipo_datoA ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Tipo_datoA ::= BIT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Tipo_datoA ::= DATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Tipo_datoA ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Tipo_datoA ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Tipo_datoA ::= VARCHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Tipo_datoD ::= AbreCorchetes Tipo_datoA CierraCorchetes 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoD",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Tipo_datoD ::= Tipo_datoA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoD",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Tipo_dato ::= Tipo_datoD Tipo_datoB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_dato",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Variable ::= Arroba Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variable",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IFE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IFE ::= IF EXISTS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Object4A ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object4A",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Object4A ::= Punto Object3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object4A",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Object4 ::= ID Object4A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object4",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Object3A ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object3A",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Object3A ::= Punto Object2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object3A",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Object3 ::= ID Object3A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object3",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Object2A ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object2A",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Object2A ::= Punto ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object2A",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Object2 ::= ID Object2A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object2",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ID ::= AbreCorchetes Identificador CierraCorchetes 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ID",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ID ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ID",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Final ::= GO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Final",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Final ::= PyC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Final",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TSQL ::= CursorDeclare 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TSQL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TCL ::= SavePoint 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TCL ::= Commit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TCL ::= Rollback 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TCL ::= BeginTran 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DDL ::= Truncate 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DDL ::= Drop 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DDL ::= Alter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DDL ::= Create 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DML ::= Update 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DML ::= Delete 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DML ::= Insert 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DML ::= Select 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // InicialA ::= TSQL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // InicialA ::= TCL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // InicialA ::= DDL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // InicialA ::= DML 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Inicial ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicial",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Inicial ::= error Final Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicial",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicial ::= InicialA Final Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicial",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

