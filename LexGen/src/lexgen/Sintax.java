
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package lexgen;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.virtual_parse_stack;
import java.lang.reflect.Field;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u01c8\000\002\002\004\000\002\003\005\000\002\003" +
    "\005\000\002\003\002\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\010\003\000\002\011\003\000" +
    "\002\011\003\000\002\012\003\000\002\012\005\000\002" +
    "\013\004\000\002\014\004\000\002\014\002\000\002\015" +
    "\004\000\002\016\004\000\002\016\002\000\002\017\004" +
    "\000\002\020\004\000\002\020\002\000\002\021\004\000" +
    "\002\021\002\000\002\022\004\000\002\023\004\000\002" +
    "\024\003\000\002\024\005\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\026\006\000\002\026\002\000\002\027\004" +
    "\000\002\027\002\000\002\030\004\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\032\006\000\002\033\005\000\002\033" +
    "\002\000\002\034\005\000\002\035\006\000\002\036\005" +
    "\000\002\036\002\000\002\037\006\000\002\040\005\000" +
    "\002\040\002\000\002\041\006\000\002\042\005\000\002" +
    "\043\005\000\002\043\002\000\002\044\005\000\002\045" +
    "\004\000\002\045\003\000\002\045\002\000\002\046\003" +
    "\000\002\046\003\000\002\047\004\000\002\050\005\000" +
    "\002\050\005\000\002\050\002\000\002\051\004\000\002" +
    "\052\005\000\002\052\005\000\002\052\002\000\002\053" +
    "\006\000\002\053\003\000\002\054\003\000\002\054\003" +
    "\000\002\054\003\000\002\054\003\000\002\054\003\000" +
    "\002\054\005\000\002\054\005\000\002\054\005\000\002" +
    "\054\005\000\002\054\005\000\002\055\004\000\002\055" +
    "\004\000\002\055\004\000\002\056\003\000\002\056\002" +
    "\000\002\057\007\000\002\057\002\000\002\060\003\000" +
    "\002\060\002\000\002\061\005\000\002\061\002\000\002" +
    "\062\005\000\002\063\004\000\002\063\004\000\002\063" +
    "\002\000\002\064\004\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\065\004\000\002\065\005\000\002" +
    "\065\004\000\002\066\007\000\002\066\006\000\002\066" +
    "\004\000\002\067\004\000\002\067\002\000\002\070\005" +
    "\000\002\070\004\000\002\071\006\000\002\071\002\000" +
    "\002\072\005\000\002\073\004\000\002\074\005\000\002" +
    "\074\002\000\002\075\013\000\002\076\003\000\002\076" +
    "\003\000\002\076\002\000\002\077\004\000\002\077\002" +
    "\000\002\100\010\000\002\100\002\000\002\101\004\000" +
    "\002\101\002\000\002\102\003\000\002\102\003\000\002" +
    "\102\002\000\002\103\005\000\002\103\002\000\002\104" +
    "\006\000\002\104\002\000\002\105\005\000\002\105\002" +
    "\000\002\106\010\000\002\107\003\000\002\107\002\000" +
    "\002\110\003\000\002\110\002\000\002\111\004\000\002" +
    "\112\003\000\002\112\003\000\002\112\003\000\002\112" +
    "\003\000\002\113\005\000\002\113\002\000\002\114\007" +
    "\000\002\114\004\000\002\115\007\000\002\115\002\000" +
    "\002\116\006\000\002\117\003\000\002\117\002\000\002" +
    "\120\004\000\002\120\005\000\002\121\005\000\002\122" +
    "\005\000\002\122\002\000\002\123\007\000\002\124\011" +
    "\000\002\125\006\000\002\126\003\000\002\126\003\000" +
    "\002\127\004\000\002\127\002\000\002\130\005\000\002" +
    "\130\002\000\002\131\007\000\002\131\002\000\002\132" +
    "\006\000\002\132\002\000\002\133\011\000\002\133\002" +
    "\000\002\134\003\000\002\134\004\000\002\134\004\000" +
    "\002\134\004\000\002\134\002\000\002\135\003\000\002" +
    "\135\002\000\002\136\004\000\002\137\003\000\002\137" +
    "\003\000\002\137\003\000\002\137\003\000\002\137\003" +
    "\000\002\137\003\000\002\137\003\000\002\140\004\000" +
    "\002\141\005\000\002\142\004\000\002\143\005\000\002" +
    "\143\002\000\002\144\003\000\002\144\002\000\002\145" +
    "\005\000\002\145\003\000\002\146\014\000\002\147\004" +
    "\000\002\147\002\000\002\151\005\000\002\151\002\000" +
    "\002\153\003\000\002\153\003\000\002\153\003\000\002" +
    "\154\006\000\002\155\003\000\002\155\003\000\002\155" +
    "\003\000\002\155\003\000\002\156\005\000\002\157\004" +
    "\000\002\157\003\000\002\160\006\000\002\161\003\000" +
    "\002\161\003\000\002\161\002\000\002\162\006\000\002" +
    "\163\014\000\002\164\003\000\002\164\002\000\002\165" +
    "\005\000\002\166\005\000\002\167\006\000\002\167\002" +
    "\000\002\170\004\000\002\170\002\000\002\171\007\000" +
    "\002\171\002\000\002\172\011\000\002\173\004\000\002" +
    "\173\002\000\002\174\004\000\002\174\002\000\002\351" +
    "\005\000\002\351\003\000\002\352\004\000\002\352\002" +
    "\000\002\175\003\000\002\175\003\000\002\175\003\000" +
    "\002\176\005\000\002\176\002\000\002\177\006\000\002" +
    "\356\005\000\002\356\003\000\002\356\002\000\002\357" +
    "\010\000\002\357\007\000\002\357\006\000\002\357\004" +
    "\000\002\357\004\000\002\354\003\000\002\354\002\000" +
    "\002\355\003\000\002\355\005\000\002\353\004\000\002" +
    "\353\003\000\002\353\002\000\002\200\004\000\002\200" +
    "\002\000\002\201\003\000\002\201\003\000\002\201\003" +
    "\000\002\201\003\000\002\202\004\000\002\202\002\000" +
    "\002\203\007\000\002\203\002\000\002\204\003\000\002" +
    "\204\002\000\002\205\003\000\002\205\002\000\002\206" +
    "\005\000\002\206\002\000\002\207\004\000\002\207\002" +
    "\000\002\210\005\000\002\210\004\000\002\210\010\000" +
    "\002\210\007\000\002\211\003\000\002\211\003\000\002" +
    "\211\002\000\002\212\004\000\002\212\002\000\002\213" +
    "\005\000\002\213\002\000\002\214\005\000\002\214\002" +
    "\000\002\215\004\000\002\215\004\000\002\216\003\000" +
    "\002\216\003\000\002\217\003\000\002\217\004\000\002" +
    "\220\004\000\002\221\006\000\002\221\005\000\002\221" +
    "\012\000\002\221\007\000\002\222\007\000\002\223\006" +
    "\000\002\223\002\000\002\224\006\000\002\225\005\000" +
    "\002\225\002\000\002\226\006\000\002\227\004\000\002" +
    "\230\003\000\002\230\003\000\002\230\003\000\002\230" +
    "\003\000\002\230\003\000\002\230\003\000\002\231\005" +
    "\000\002\232\003\000\002\232\003\000\002\233\004\000" +
    "\002\233\005\000\002\234\004\000\002\235\007\000\002" +
    "\236\003\000\002\236\002\000\002\237\005\000\002\240" +
    "\003\000\002\240\005\000\002\240\003\000\002\241\006" +
    "\000\002\242\003\000\002\242\004\000\002\243\005\000" +
    "\002\244\003\000\002\244\003\000\002\245\003\000\002" +
    "\245\005\000\002\246\005\000\002\247\005\000\002\247" +
    "\005\000\002\250\003\000\002\250\002\000\002\251\005" +
    "\000\002\251\002\000\002\253\005\000\002\254\004\000" +
    "\002\254\002\000\002\255\005\000\002\255\002\000\002" +
    "\256\003\000\002\256\002\000\002\257\005\000\002\260" +
    "\003\000\002\260\003\000\002\261\003\000\002\261\003" +
    "\000\002\261\002\000\002\262\003\000\002\262\003\000" +
    "\002\263\004\000\002\264\004\000\002\264\002\000\002" +
    "\265\004\000\002\266\004\000\002\266\002\000\002\267" +
    "\013\000\002\270\003\000\002\270\003\000\002\271\004" +
    "\000\002\271\002\000\002\272\003\000\002\272\002\000" +
    "\002\273\005\000\002\274\004\000\002\274\002\000\002" +
    "\275\005\000\002\275\005\000\002\275\004\000\002\276" +
    "\004\000\002\276\002\000\002\277\003\000\002\277\002" +
    "\000\002\300\003\000\002\300\003\000\002\301\004\000" +
    "\002\301\002\000\002\302\004\000\002\303\003\000\002" +
    "\303\003\000\002\303\005\000\002\304\003\000\002\304" +
    "\003\000\002\305\004\000\002\305\002\000\002\306\003" +
    "\000\002\306\003\000\002\306\003\000\002\306\003\000" +
    "\002\307\004\000\002\307\002\000\002\310\005\000\002" +
    "\310\003\000\002\311\005\000\002\312\005\000\002\312" +
    "\002\000\002\313\004\000\002\313\002\000\002\340\015" +
    "\000\002\341\003\000\002\341\003\000\002\341\002\000" +
    "\002\342\003\000\002\342\003\000\002\342\002\000\002" +
    "\343\003\000\002\343\003\000\002\343\003\000\002\343" +
    "\003\000\002\343\002\000\002\344\003\000\002\344\003" +
    "\000\002\344\003\000\002\344\002\000\002\345\003\000" +
    "\002\345\002\000\002\346\005\000\002\346\002\000\002" +
    "\347\004\000\002\347\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0312\000\040\002\ufffe\003\035\046\032\071\024\112" +
    "\022\126\011\137\010\144\027\146\023\173\026\233\012" +
    "\234\042\242\037\254\040\266\034\001\002\000\006\023" +
    "\uffee\363\uffee\001\002\000\006\023\uffed\363\uffed\001\002" +
    "\000\006\023\ufff2\363\ufff2\001\002\000\004\002\u0314\001" +
    "\002\000\042\007\uff6f\011\uff6f\012\uff6f\013\uff6f\014\uff6f" +
    "\033\uff6f\034\uff6f\217\uff6f\224\uff6f\255\u02d0\334\u02d1\357" +
    "\uff6f\u011c\uff6f\u0121\uff6f\u012c\uff6f\u012d\uff6f\001\002\000\006" +
    "\222\u02ba\225\u02b8\001\002\000\004\200\u02cc\001\002\000" +
    "\006\023\ufffc\363\ufffc\001\002\000\006\023\ufffd\363\ufffd" +
    "\001\002\000\006\023\ufff7\363\ufff7\001\002\000\006\023" +
    "\ufff6\363\ufff6\001\002\000\006\023\ufff4\363\ufff4\001\002" +
    "\000\006\023\ufff0\363\ufff0\001\002\000\006\023\ufffa\363" +
    "\ufffa\001\002\000\012\023\ufe7a\222\u02ba\225\u02b8\363\ufe7a" +
    "\001\002\000\012\023\ufe7d\222\u02ba\225\u02b8\363\ufe7d\001" +
    "\002\000\006\222\u02ba\225\u02b8\001\002\000\006\023\ufff1" +
    "\363\ufff1\001\002\000\022\132\uff09\136\uff09\200\u025d\216" +
    "\uff09\223\u0257\246\u0259\265\u0258\275\u025c\001\002\000\012" +
    "\011\uff92\033\uff92\152\uff92\217\116\001\002\000\006\023" +
    "\ufff9\363\ufff9\001\002\000\006\023\ufff3\363\ufff3\001\002" +
    "\000\012\200\u010f\223\u0109\265\u010b\275\u0110\001\002\000" +
    "\006\023\ufffb\363\ufffb\001\002\000\014\136\337\200\343" +
    "\223\336\265\340\275\342\001\002\000\006\023\047\363" +
    "\046\001\002\000\006\023\uffef\363\uffef\001\002\000\014" +
    "\011\uff92\033\uff92\067\uff92\217\116\253\uff92\001\002\000" +
    "\010\011\uff92\033\uff92\217\116\001\002\000\006\023\ufff5" +
    "\363\ufff5\001\002\000\006\011\052\033\053\001\002\000" +
    "\006\023\047\363\046\001\002\000\006\023\ufff8\363\ufff8" +
    "\001\002\000\040\002\ufffe\003\035\046\032\071\024\112" +
    "\022\126\011\137\010\144\027\146\023\173\026\233\012" +
    "\234\042\242\037\254\040\266\034\001\002\000\046\002" +
    "\uffeb\003\uffeb\023\uffeb\046\uffeb\071\uffeb\112\uffeb\126\uffeb" +
    "\137\uffeb\144\uffeb\146\uffeb\173\uffeb\233\uffeb\234\uffeb\242" +
    "\uffeb\254\uffeb\266\uffeb\276\uffeb\363\uffeb\001\002\000\046" +
    "\002\uffec\003\uffec\023\uffec\046\uffec\071\uffec\112\uffec\126" +
    "\uffec\137\uffec\144\uffec\146\uffec\173\uffec\233\uffec\234\uffec" +
    "\242\uffec\254\uffec\266\uffec\276\uffec\363\uffec\001\002\000" +
    "\004\002\000\001\002\000\004\220\056\001\002\000\252" +
    "\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea\012" +
    "\uffea\013\uffea\014\uffea\016\uffea\017\uffea\020\uffea\021\uffea" +
    "\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\033\uffea\034" +
    "\uffea\036\uffea\040\uffea\041\uffea\042\uffea\046\uffea\054\uffea" +
    "\056\uffea\057\uffea\062\uffea\067\uffea\072\uffea\074\uffea\106" +
    "\uffea\107\uffea\111\uffea\117\uffea\120\uffea\121\uffea\132\uffea" +
    "\133\uffea\140\uffea\141\uffea\154\uffea\155\uffea\156\uffea\160" +
    "\uffea\171\uffea\174\uffea\216\uffea\220\uffea\221\uffea\224\uffea" +
    "\237\uffea\246\uffea\247\uffea\263\uffea\266\uffea\267\uffea\271" +
    "\uffea\306\uffea\314\uffea\316\uffea\344\uffea\350\uffea\356\uffea" +
    "\357\uffea\363\uffea\364\uffea\u0101\uffea\u010a\uffea\u010d\uffea\u0110" +
    "\uffea\u011c\uffea\u0121\uffea\u0123\uffea\u012c\uffea\u012d\uffea\u012f\uffea" +
    "\u0139\uffea\u013c\uffea\u0149\uffea\u014a\uffea\u014f\uffea\u015a\uffea\001" +
    "\002\000\004\011\054\001\002\000\004\035\055\001\002" +
    "\000\252\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011" +
    "\uffe9\012\uffe9\013\uffe9\014\uffe9\016\uffe9\017\uffe9\020\uffe9" +
    "\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\033" +
    "\uffe9\034\uffe9\036\uffe9\040\uffe9\041\uffe9\042\uffe9\046\uffe9" +
    "\054\uffe9\056\uffe9\057\uffe9\062\uffe9\067\uffe9\072\uffe9\074" +
    "\uffe9\106\uffe9\107\uffe9\111\uffe9\117\uffe9\120\uffe9\121\uffe9" +
    "\132\uffe9\133\uffe9\140\uffe9\141\uffe9\154\uffe9\155\uffe9\156" +
    "\uffe9\160\uffe9\171\uffe9\174\uffe9\216\uffe9\220\uffe9\221\uffe9" +
    "\224\uffe9\237\uffe9\246\uffe9\247\uffe9\263\uffe9\266\uffe9\267" +
    "\uffe9\271\uffe9\306\uffe9\314\uffe9\316\uffe9\344\uffe9\350\uffe9" +
    "\356\uffe9\357\uffe9\363\uffe9\364\uffe9\u0101\uffe9\u010a\uffe9\u010d" +
    "\uffe9\u0110\uffe9\u011c\uffe9\u0121\uffe9\u0123\uffe9\u012c\uffe9\u012d\uffe9" +
    "\u012f\uffe9\u0139\uffe9\u013c\uffe9\u0149\uffe9\u014a\uffe9\u014f\uffe9\u015a" +
    "\uffe9\001\002\000\034\054\ufe4c\361\057\372\ufe4c\u0127\060" +
    "\u0165\ufe4c\u0166\ufe4c\u0167\ufe4c\u0168\ufe4c\u0169\ufe4c\u016a\ufe4c\u016b" +
    "\ufe4c\u016c\ufe4c\u016d\ufe4c\001\002\000\030\054\ufe4d\372\ufe4d" +
    "\u0165\ufe4d\u0166\ufe4d\u0167\ufe4d\u0168\ufe4d\u0169\ufe4d\u016a\ufe4d\u016b" +
    "\ufe4d\u016c\ufe4d\u016d\ufe4d\001\002\000\030\054\ufe4e\372\ufe4e" +
    "\u0165\ufe4e\u0166\ufe4e\u0167\ufe4e\u0168\ufe4e\u0169\ufe4e\u016a\ufe4e\u016b" +
    "\ufe4e\u016c\ufe4e\u016d\ufe4e\001\002\000\030\054\ufe49\372\064" +
    "\u0165\062\u0166\ufe49\u0167\ufe49\u0168\ufe49\u0169\ufe49\u016a\ufe49\u016b" +
    "\ufe49\u016c\ufe49\u016d\ufe49\001\002\000\024\054\ufe4a\u0166\ufe4a" +
    "\u0167\ufe4a\u0168\ufe4a\u0169\ufe4a\u016a\ufe4a\u016b\ufe4a\u016c\ufe4a\u016d" +
    "\ufe4a\001\002\000\024\054\ufe44\u0166\065\u0167\066\u0168\067" +
    "\u0169\071\u016a\ufe44\u016b\ufe44\u016c\ufe44\u016d\ufe44\001\002\000" +
    "\024\054\ufe4b\u0166\ufe4b\u0167\ufe4b\u0168\ufe4b\u0169\ufe4b\u016a\ufe4b" +
    "\u016b\ufe4b\u016c\ufe4b\u016d\ufe4b\001\002\000\014\054\ufe48\u016a" +
    "\ufe48\u016b\ufe48\u016c\ufe48\u016d\ufe48\001\002\000\014\054\ufe47" +
    "\u016a\ufe47\u016b\ufe47\u016c\ufe47\u016d\ufe47\001\002\000\014\054" +
    "\ufe46\u016a\ufe46\u016b\ufe46\u016c\ufe46\u016d\ufe46\001\002\000\014" +
    "\054\ufe40\u016a\075\u016b\073\u016c\074\u016d\ufe40\001\002\000" +
    "\014\054\ufe45\u016a\ufe45\u016b\ufe45\u016c\ufe45\u016d\ufe45\001\002" +
    "\000\006\054\ufe3e\u016d\077\001\002\000\006\054\ufe42\u016d" +
    "\ufe42\001\002\000\006\054\ufe41\u016d\ufe41\001\002\000\006" +
    "\054\ufe43\u016d\ufe43\001\002\000\004\054\100\001\002\000" +
    "\004\054\ufe3f\001\002\000\004\137\010\001\002\000\010" +
    "\023\ufe3c\054\103\363\ufe3c\001\002\000\006\023\ufe4f\363" +
    "\ufe4f\001\002\000\004\254\104\001\002\000\010\023\ufe3a" +
    "\232\106\363\ufe3a\001\002\000\006\023\ufe3d\363\ufe3d\001" +
    "\002\000\006\011\052\033\053\001\002\000\012\023\uff73" +
    "\024\112\036\uff73\363\uff73\001\002\000\006\023\ufe3b\363" +
    "\ufe3b\001\002\000\010\023\uff75\036\uff75\363\uff75\001\002" +
    "\000\006\011\052\033\053\001\002\000\012\023\uff73\024" +
    "\112\036\uff73\363\uff73\001\002\000\010\023\uff74\036\uff74" +
    "\363\uff74\001\002\000\006\011\052\033\053\001\002\000" +
    "\004\034\117\001\002\000\004\012\120\001\002\000\004" +
    "\036\121\001\002\000\044\007\uff90\011\uff90\012\uff90\013" +
    "\uff90\014\uff90\033\uff90\034\uff90\067\uff90\152\uff90\224\uff90" +
    "\253\uff90\302\123\357\uff90\u011c\uff90\u0121\uff90\u012c\uff90\u012d" +
    "\uff90\001\002\000\042\007\uff93\011\uff93\012\uff93\013\uff93" +
    "\014\uff93\033\uff93\034\uff93\067\uff93\152\uff93\224\uff93\253" +
    "\uff93\357\uff93\u011c\uff93\u0121\uff93\u012c\uff93\u012d\uff93\001\002" +
    "\000\042\007\uff91\011\uff91\012\uff91\013\uff91\014\uff91\033" +
    "\uff91\034\uff91\067\uff91\152\uff91\224\uff91\253\uff91\357\uff91" +
    "\u011c\uff91\u0121\uff91\u012c\uff91\u012d\uff91\001\002\000\162\004" +
    "\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3" +
    "\013\uffe3\014\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022" +
    "\uffe3\023\uffe3\024\uffe3\025\303\033\uffe3\034\uffe3\036\uffe3" +
    "\040\uffe3\041\uffe3\042\uffe3\046\uffe3\054\uffe3\056\uffe3\067" +
    "\uffe3\072\uffe3\074\uffe3\106\uffe3\107\uffe3\111\uffe3\133\uffe3" +
    "\140\uffe3\141\uffe3\155\uffe3\156\uffe3\160\uffe3\171\uffe3\174" +
    "\uffe3\221\uffe3\224\uffe3\237\uffe3\247\uffe3\266\uffe3\267\uffe3" +
    "\271\uffe3\306\uffe3\350\uffe3\357\uffe3\363\uffe3\u011c\uffe3\u0121" +
    "\uffe3\u012c\uffe3\u012d\uffe3\u014f\uffe3\001\002\000\004\156\126" +
    "\001\002\000\006\011\052\033\053\001\002\000\004\004" +
    "\273\001\002\000\012\023\uff3f\067\132\306\uff3f\363\uff3f" +
    "\001\002\000\010\023\uff7b\306\140\363\uff7b\001\002\000" +
    "\006\011\052\033\053\001\002\000\012\023\uff48\024\134" +
    "\306\uff48\363\uff48\001\002\000\006\011\052\033\053\001" +
    "\002\000\010\023\uff40\306\uff40\363\uff40\001\002\000\012" +
    "\023\uff48\024\134\306\uff48\363\uff48\001\002\000\010\023" +
    "\uff49\306\uff49\363\uff49\001\002\000\034\011\uff94\012\uff94" +
    "\013\uff94\014\uff94\033\uff94\034\uff94\221\144\224\uff94\357" +
    "\uff94\u011c\uff94\u0121\uff94\u012c\uff94\u012d\uff94\001\002\000\006" +
    "\023\uff46\363\uff46\001\002\000\032\011\052\012\160\013" +
    "\145\014\155\033\053\034\161\224\163\357\156\u011c\146" +
    "\u0121\164\u012c\162\u012d\157\001\002\000\020\023\uff7c\054" +
    "\uff7c\106\uff7c\111\uff7c\271\uff7c\363\uff7c\u014f\uff7c\001\002" +
    "\000\040\011\uff95\012\uff95\013\uff95\014\uff95\033\uff95\034" +
    "\uff95\074\uff95\133\uff95\174\uff95\224\uff95\357\uff95\u011c\uff95" +
    "\u0121\uff95\u012c\uff95\u012d\uff95\001\002\000\144\004\uff9f\005" +
    "\uff9f\006\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f\013\uff9f" +
    "\014\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f\023" +
    "\uff9f\024\uff9f\033\uff9f\034\uff9f\036\uff9f\041\uff9f\042\uff9f" +
    "\054\uff9f\056\uff9f\067\uff9f\072\uff9f\074\uff9f\106\uff9f\107" +
    "\uff9f\111\uff9f\133\uff9f\140\uff9f\141\uff9f\155\uff9f\160\uff9f" +
    "\171\uff9f\174\uff9f\221\uff9f\224\uff9f\247\uff9f\271\uff9f\306" +
    "\uff9f\350\uff9f\357\uff9f\363\uff9f\u011c\uff9f\u0121\uff9f\u012c\uff9f" +
    "\u012d\uff9f\u014f\uff9f\001\002\000\004\034\271\001\002\000" +
    "\144\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3" +
    "\012\uffa3\013\uffa3\014\uffa3\016\uffa3\017\uffa3\020\uffa3\021" +
    "\uffa3\022\uffa3\023\uffa3\024\uffa3\033\uffa3\034\uffa3\036\uffa3" +
    "\041\uffa3\042\uffa3\054\uffa3\056\uffa3\067\uffa3\072\uffa3\074" +
    "\uffa3\106\uffa3\107\uffa3\111\uffa3\133\uffa3\140\uffa3\141\uffa3" +
    "\155\uffa3\160\uffa3\171\uffa3\174\uffa3\221\uffa3\224\uffa3\247" +
    "\uffa3\271\uffa3\306\uffa3\350\uffa3\357\uffa3\363\uffa3\u011c\uffa3" +
    "\u0121\uffa3\u012c\uffa3\u012d\uffa3\u014f\uffa3\001\002\000\144\004" +
    "\uffa5\005\uffa5\006\uffa5\007\264\010\262\011\uffa5\012\uffa5" +
    "\013\uffa5\014\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022" +
    "\uffa5\023\uffa5\024\uffa5\033\uffa5\034\uffa5\036\uffa5\041\uffa5" +
    "\042\uffa5\054\uffa5\056\uffa5\067\uffa5\072\uffa5\074\uffa5\106" +
    "\uffa5\107\uffa5\111\uffa5\133\uffa5\140\uffa5\141\uffa5\155\uffa5" +
    "\160\uffa5\171\uffa5\174\uffa5\221\uffa5\224\uffa5\247\uffa5\271" +
    "\uffa5\306\uffa5\350\uffa5\357\uffa5\363\uffa5\u011c\uffa5\u0121\uffa5" +
    "\u012c\uffa5\u012d\uffa5\u014f\uffa5\001\002\000\030\004\253\016" +
    "\246\017\247\020\252\021\251\022\244\074\uff94\133\uff94" +
    "\155\255\174\uff94\221\144\001\002\000\140\004\uffa9\005" +
    "\236\006\235\011\uffa9\012\uffa9\013\uffa9\014\uffa9\016\uffa9" +
    "\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\033" +
    "\uffa9\034\uffa9\036\uffa9\041\uffa9\042\uffa9\054\uffa9\056\uffa9" +
    "\067\uffa9\072\uffa9\074\uffa9\106\uffa9\107\uffa9\111\uffa9\133" +
    "\uffa9\140\uffa9\141\uffa9\155\uffa9\160\uffa9\171\uffa9\174\uffa9" +
    "\221\uffa9\224\uffa9\247\uffa9\271\uffa9\306\uffa9\350\uffa9\357" +
    "\uffa9\363\uffa9\u011c\uffa9\u0121\uffa9\u012c\uffa9\u012d\uffa9\u014f\uffa9" +
    "\001\002\000\146\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010" +
    "\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\016\uffe0\017\uffe0" +
    "\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\233\033" +
    "\uffe0\034\uffe0\036\uffe0\041\uffe0\042\uffe0\054\uffe0\056\uffe0" +
    "\067\uffe0\072\uffe0\074\uffe0\106\uffe0\107\uffe0\111\uffe0\133" +
    "\uffe0\140\uffe0\141\uffe0\155\uffe0\160\uffe0\171\uffe0\174\uffe0" +
    "\221\uffe0\224\uffe0\247\uffe0\271\uffe0\306\uffe0\350\uffe0\357" +
    "\uffe0\363\uffe0\u011c\uffe0\u0121\uffe0\u012c\uffe0\u012d\uffe0\u014f\uffe0" +
    "\001\002\000\044\023\uff8a\024\uff8a\036\uff8a\041\225\042" +
    "\226\054\uff8a\072\uff8a\106\uff8a\107\uff8a\111\uff8a\141\uff8a" +
    "\160\uff8a\171\uff8a\271\uff8a\306\uff8a\363\uff8a\u014f\uff8a\001" +
    "\002\000\144\004\uffa0\005\uffa0\006\uffa0\007\uffa0\010\uffa0" +
    "\011\uffa0\012\uffa0\013\uffa0\014\uffa0\016\uffa0\017\uffa0\020" +
    "\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\033\uffa0\034\uffa0" +
    "\036\uffa0\041\uffa0\042\uffa0\054\uffa0\056\uffa0\067\uffa0\072" +
    "\uffa0\074\uffa0\106\uffa0\107\uffa0\111\uffa0\133\uffa0\140\uffa0" +
    "\141\uffa0\155\uffa0\160\uffa0\171\uffa0\174\uffa0\221\uffa0\224" +
    "\uffa0\247\uffa0\271\uffa0\306\uffa0\350\uffa0\357\uffa0\363\uffa0" +
    "\u011c\uffa0\u0121\uffa0\u012c\uffa0\u012d\uffa0\u014f\uffa0\001\002\000" +
    "\004\034\223\001\002\000\004\034\221\001\002\000\144" +
    "\004\uffa1\005\uffa1\006\uffa1\007\uffa1\010\uffa1\011\uffa1\012" +
    "\uffa1\013\uffa1\014\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1" +
    "\022\uffa1\023\uffa1\024\uffa1\033\uffa1\034\uffa1\036\uffa1\041" +
    "\uffa1\042\uffa1\054\uffa1\056\uffa1\067\uffa1\072\uffa1\074\uffa1" +
    "\106\uffa1\107\uffa1\111\uffa1\133\uffa1\140\uffa1\141\uffa1\155" +
    "\uffa1\160\uffa1\171\uffa1\174\uffa1\221\uffa1\224\uffa1\247\uffa1" +
    "\271\uffa1\306\uffa1\350\uffa1\357\uffa1\363\uffa1\u011c\uffa1\u0121" +
    "\uffa1\u012c\uffa1\u012d\uffa1\u014f\uffa1\001\002\000\032\011\052" +
    "\012\160\013\145\014\155\033\053\034\161\224\163\357" +
    "\156\u011c\146\u0121\164\u012c\162\u012d\157\001\002\000\004" +
    "\034\176\001\002\000\144\004\uff9e\005\uff9e\006\uff9e\007" +
    "\uff9e\010\uff9e\011\uff9e\012\uff9e\013\uff9e\014\uff9e\016\uff9e" +
    "\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\024\uff9e\033" +
    "\uff9e\034\uff9e\036\uff9e\041\uff9e\042\uff9e\054\uff9e\056\uff9e" +
    "\067\uff9e\072\uff9e\074\uff9e\106\uff9e\107\uff9e\111\uff9e\133" +
    "\uff9e\140\uff9e\141\uff9e\155\uff9e\160\uff9e\171\uff9e\174\uff9e" +
    "\221\uff9e\224\uff9e\247\uff9e\271\uff9e\306\uff9e\350\uff9e\357" +
    "\uff9e\363\uff9e\u011c\uff9e\u0121\uff9e\u012c\uff9e\u012d\uff9e\u014f\uff9e" +
    "\001\002\000\004\034\166\001\002\000\144\004\uffa2\005" +
    "\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2" +
    "\014\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\023" +
    "\uffa2\024\uffa2\033\uffa2\034\uffa2\036\uffa2\041\uffa2\042\uffa2" +
    "\054\uffa2\056\uffa2\067\uffa2\072\uffa2\074\uffa2\106\uffa2\107" +
    "\uffa2\111\uffa2\133\uffa2\140\uffa2\141\uffa2\155\uffa2\160\uffa2" +
    "\171\uffa2\174\uffa2\221\uffa2\224\uffa2\247\uffa2\271\uffa2\306" +
    "\uffa2\350\uffa2\357\uffa2\363\uffa2\u011c\uffa2\u0121\uffa2\u012c\uffa2" +
    "\u012d\uffa2\u014f\uffa2\001\002\000\012\007\172\011\052\012" +
    "\170\033\053\001\002\000\004\036\175\001\002\000\004" +
    "\036\174\001\002\000\144\004\uff99\005\uff99\006\uff99\007" +
    "\uff99\010\uff99\011\uff99\012\uff99\013\uff99\014\uff99\016\uff99" +
    "\017\uff99\020\uff99\021\uff99\022\uff99\023\uff99\024\uff99\033" +
    "\uff99\034\uff99\036\uff99\041\uff99\042\uff99\054\uff99\056\uff99" +
    "\067\uff99\072\uff99\074\uff99\106\uff99\107\uff99\111\uff99\133" +
    "\uff99\140\uff99\141\uff99\155\uff99\160\uff99\171\uff99\174\uff99" +
    "\221\uff99\224\uff99\247\uff99\271\uff99\306\uff99\350\uff99\357" +
    "\uff99\363\uff99\u011c\uff99\u0121\uff99\u012c\uff99\u012d\uff99\u014f\uff99" +
    "\001\002\000\004\036\173\001\002\000\144\004\uff96\005" +
    "\uff96\006\uff96\007\uff96\010\uff96\011\uff96\012\uff96\013\uff96" +
    "\014\uff96\016\uff96\017\uff96\020\uff96\021\uff96\022\uff96\023" +
    "\uff96\024\uff96\033\uff96\034\uff96\036\uff96\041\uff96\042\uff96" +
    "\054\uff96\056\uff96\067\uff96\072\uff96\074\uff96\106\uff96\107" +
    "\uff96\111\uff96\133\uff96\140\uff96\141\uff96\155\uff96\160\uff96" +
    "\171\uff96\174\uff96\221\uff96\224\uff96\247\uff96\271\uff96\306" +
    "\uff96\350\uff96\357\uff96\363\uff96\u011c\uff96\u0121\uff96\u012c\uff96" +
    "\u012d\uff96\u014f\uff96\001\002\000\144\004\uff97\005\uff97\006" +
    "\uff97\007\uff97\010\uff97\011\uff97\012\uff97\013\uff97\014\uff97" +
    "\016\uff97\017\uff97\020\uff97\021\uff97\022\uff97\023\uff97\024" +
    "\uff97\033\uff97\034\uff97\036\uff97\041\uff97\042\uff97\054\uff97" +
    "\056\uff97\067\uff97\072\uff97\074\uff97\106\uff97\107\uff97\111" +
    "\uff97\133\uff97\140\uff97\141\uff97\155\uff97\160\uff97\171\uff97" +
    "\174\uff97\221\uff97\224\uff97\247\uff97\271\uff97\306\uff97\350" +
    "\uff97\357\uff97\363\uff97\u011c\uff97\u0121\uff97\u012c\uff97\u012d\uff97" +
    "\u014f\uff97\001\002\000\144\004\uff98\005\uff98\006\uff98\007" +
    "\uff98\010\uff98\011\uff98\012\uff98\013\uff98\014\uff98\016\uff98" +
    "\017\uff98\020\uff98\021\uff98\022\uff98\023\uff98\024\uff98\033" +
    "\uff98\034\uff98\036\uff98\041\uff98\042\uff98\054\uff98\056\uff98" +
    "\067\uff98\072\uff98\074\uff98\106\uff98\107\uff98\111\uff98\133" +
    "\uff98\140\uff98\141\uff98\155\uff98\160\uff98\171\uff98\174\uff98" +
    "\221\uff98\224\uff98\247\uff98\271\uff98\306\uff98\350\uff98\357" +
    "\uff98\363\uff98\u011c\uff98\u0121\uff98\u012c\uff98\u012d\uff98\u014f\uff98" +
    "\001\002\000\012\007\172\011\052\012\170\033\053\001" +
    "\002\000\144\004\uff9a\005\uff9a\006\uff9a\007\uff9a\010\uff9a" +
    "\011\uff9a\012\uff9a\013\uff9a\014\uff9a\016\uff9a\017\uff9a\020" +
    "\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a\033\uff9a\034\uff9a" +
    "\036\uff9a\041\uff9a\042\uff9a\054\uff9a\056\uff9a\067\uff9a\072" +
    "\uff9a\074\uff9a\106\uff9a\107\uff9a\111\uff9a\133\uff9a\140\uff9a" +
    "\141\uff9a\155\uff9a\160\uff9a\171\uff9a\174\uff9a\221\uff9a\224" +
    "\uff9a\247\uff9a\271\uff9a\306\uff9a\350\uff9a\357\uff9a\363\uff9a" +
    "\u011c\uff9a\u0121\uff9a\u012c\uff9a\u012d\uff9a\u014f\uff9a\001\002\000" +
    "\010\074\203\133\202\174\201\001\002\000\032\011\052" +
    "\012\160\013\145\014\155\033\053\034\161\224\163\357" +
    "\156\u011c\146\u0121\164\u012c\162\u012d\157\001\002\000\004" +
    "\034\211\001\002\000\032\011\052\012\160\013\145\014" +
    "\155\033\053\034\161\224\163\357\156\u011c\146\u0121\164" +
    "\u012c\162\u012d\157\001\002\000\004\036\205\001\002\000" +
    "\144\004\uffa4\005\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4" +
    "\012\uffa4\013\uffa4\014\uffa4\016\uffa4\017\uffa4\020\uffa4\021" +
    "\uffa4\022\uffa4\023\uffa4\024\uffa4\033\uffa4\034\uffa4\036\uffa4" +
    "\041\uffa4\042\uffa4\054\uffa4\056\uffa4\067\uffa4\072\uffa4\074" +
    "\uffa4\106\uffa4\107\uffa4\111\uffa4\133\uffa4\140\uffa4\141\uffa4" +
    "\155\uffa4\160\uffa4\171\uffa4\174\uffa4\221\uffa4\224\uffa4\247" +
    "\uffa4\271\uffa4\306\uffa4\350\uffa4\357\uffa4\363\uffa4\u011c\uffa4" +
    "\u0121\uffa4\u012c\uffa4\u012d\uffa4\u014f\uffa4\001\002\000\004\041" +
    "\207\001\002\000\032\011\052\012\160\013\145\014\155" +
    "\033\053\034\161\224\163\357\156\u011c\146\u0121\164\u012c" +
    "\162\u012d\157\001\002\000\044\023\uff7e\024\uff7e\036\uff7e" +
    "\041\uff7e\042\uff7e\054\uff7e\072\uff7e\106\uff7e\107\uff7e\111" +
    "\uff7e\141\uff7e\160\uff7e\171\uff7e\271\uff7e\306\uff7e\363\uff7e" +
    "\u014f\uff7e\001\002\000\032\011\052\012\160\013\145\014" +
    "\155\033\053\034\161\224\163\357\156\u011c\146\u0121\164" +
    "\u012c\162\u012d\157\001\002\000\006\024\213\036\uff8e\001" +
    "\002\000\032\011\052\012\160\013\145\014\155\033\053" +
    "\034\161\224\163\357\156\u011c\146\u0121\164\u012c\162\u012d" +
    "\157\001\002\000\004\036\215\001\002\000\044\023\uff7f" +
    "\024\uff7f\036\uff7f\041\uff7f\042\uff7f\054\uff7f\072\uff7f\106" +
    "\uff7f\107\uff7f\111\uff7f\141\uff7f\160\uff7f\171\uff7f\271\uff7f" +
    "\306\uff7f\363\uff7f\u014f\uff7f\001\002\000\006\024\213\036" +
    "\uff8e\001\002\000\004\036\uff8f\001\002\000\044\023\uff7d" +
    "\024\uff7d\036\uff7d\041\uff7d\042\uff7d\054\uff7d\072\uff7d\106" +
    "\uff7d\107\uff7d\111\uff7d\141\uff7d\160\uff7d\171\uff7d\271\uff7d" +
    "\306\uff7d\363\uff7d\u014f\uff7d\001\002\000\012\007\172\011" +
    "\052\012\170\033\053\001\002\000\144\004\uff9b\005\uff9b" +
    "\006\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b\013\uff9b\014" +
    "\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b" +
    "\024\uff9b\033\uff9b\034\uff9b\036\uff9b\041\uff9b\042\uff9b\054" +
    "\uff9b\056\uff9b\067\uff9b\072\uff9b\074\uff9b\106\uff9b\107\uff9b" +
    "\111\uff9b\133\uff9b\140\uff9b\141\uff9b\155\uff9b\160\uff9b\171" +
    "\uff9b\174\uff9b\221\uff9b\224\uff9b\247\uff9b\271\uff9b\306\uff9b" +
    "\350\uff9b\357\uff9b\363\uff9b\u011c\uff9b\u0121\uff9b\u012c\uff9b\u012d" +
    "\uff9b\u014f\uff9b\001\002\000\012\007\172\011\052\012\170" +
    "\033\053\001\002\000\144\004\uff9c\005\uff9c\006\uff9c\007" +
    "\uff9c\010\uff9c\011\uff9c\012\uff9c\013\uff9c\014\uff9c\016\uff9c" +
    "\017\uff9c\020\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c\033" +
    "\uff9c\034\uff9c\036\uff9c\041\uff9c\042\uff9c\054\uff9c\056\uff9c" +
    "\067\uff9c\072\uff9c\074\uff9c\106\uff9c\107\uff9c\111\uff9c\133" +
    "\uff9c\140\uff9c\141\uff9c\155\uff9c\160\uff9c\171\uff9c\174\uff9c" +
    "\221\uff9c\224\uff9c\247\uff9c\271\uff9c\306\uff9c\350\uff9c\357" +
    "\uff9c\363\uff9c\u011c\uff9c\u0121\uff9c\u012c\uff9c\u012d\uff9c\u014f\uff9c" +
    "\001\002\000\034\011\uff94\012\uff94\013\uff94\014\uff94\033" +
    "\uff94\034\uff94\221\144\224\uff94\357\uff94\u011c\uff94\u0121\uff94" +
    "\u012c\uff94\u012d\uff94\001\002\000\034\011\uff94\012\uff94\013" +
    "\uff94\014\uff94\033\uff94\034\uff94\221\144\224\uff94\357\uff94" +
    "\u011c\uff94\u0121\uff94\u012c\uff94\u012d\uff94\001\002\000\040\023" +
    "\uff8d\024\uff8d\036\uff8d\054\uff8d\072\uff8d\106\uff8d\107\uff8d" +
    "\111\uff8d\141\uff8d\160\uff8d\171\uff8d\271\uff8d\306\uff8d\363" +
    "\uff8d\u014f\uff8d\001\002\000\040\023\uff8b\024\uff8b\036\uff8b" +
    "\054\uff8b\072\uff8b\106\uff8b\107\uff8b\111\uff8b\141\uff8b\160" +
    "\uff8b\171\uff8b\271\uff8b\306\uff8b\363\uff8b\u014f\uff8b\001\002" +
    "\000\040\023\uff8c\024\uff8c\036\uff8c\054\uff8c\072\uff8c\106" +
    "\uff8c\107\uff8c\111\uff8c\141\uff8c\160\uff8c\171\uff8c\271\uff8c" +
    "\306\uff8c\363\uff8c\u014f\uff8c\001\002\000\144\004\uffe2\005" +
    "\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2" +
    "\014\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023" +
    "\uffe2\024\uffe2\033\uffe2\034\uffe2\036\uffe2\041\uffe2\042\uffe2" +
    "\054\uffe2\056\uffe2\067\uffe2\072\uffe2\074\uffe2\106\uffe2\107" +
    "\uffe2\111\uffe2\133\uffe2\140\uffe2\141\uffe2\155\uffe2\160\uffe2" +
    "\171\uffe2\174\uffe2\221\uffe2\224\uffe2\247\uffe2\271\uffe2\306" +
    "\uffe2\350\uffe2\357\uffe2\363\uffe2\u011c\uffe2\u0121\uffe2\u012c\uffe2" +
    "\u012d\uffe2\u014f\uffe2\001\002\000\006\011\052\033\053\001" +
    "\002\000\144\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1" +
    "\011\uffe1\012\uffe1\013\uffe1\014\uffe1\016\uffe1\017\uffe1\020" +
    "\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\033\uffe1\034\uffe1" +
    "\036\uffe1\041\uffe1\042\uffe1\054\uffe1\056\uffe1\067\uffe1\072" +
    "\uffe1\074\uffe1\106\uffe1\107\uffe1\111\uffe1\133\uffe1\140\uffe1" +
    "\141\uffe1\155\uffe1\160\uffe1\171\uffe1\174\uffe1\221\uffe1\224" +
    "\uffe1\247\uffe1\271\uffe1\306\uffe1\350\uffe1\357\uffe1\363\uffe1" +
    "\u011c\uffe1\u0121\uffe1\u012c\uffe1\u012d\uffe1\u014f\uffe1\001\002\000" +
    "\032\011\052\012\160\013\145\014\155\033\053\034\161" +
    "\224\163\357\156\u011c\146\u0121\164\u012c\162\u012d\157\001" +
    "\002\000\032\011\052\012\160\013\145\014\155\033\053" +
    "\034\161\224\163\357\156\u011c\146\u0121\164\u012c\162\u012d" +
    "\157\001\002\000\134\004\uffac\011\uffac\012\uffac\013\uffac" +
    "\014\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023" +
    "\uffac\024\uffac\033\uffac\034\uffac\036\uffac\041\uffac\042\uffac" +
    "\054\uffac\056\uffac\067\uffac\072\uffac\074\uffac\106\uffac\107" +
    "\uffac\111\uffac\133\uffac\140\uffac\141\uffac\155\uffac\160\uffac" +
    "\171\uffac\174\uffac\221\uffac\224\uffac\247\uffac\271\uffac\306" +
    "\uffac\350\uffac\357\uffac\363\uffac\u011c\uffac\u0121\uffac\u012c\uffac" +
    "\u012d\uffac\u014f\uffac\001\002\000\140\004\uffa9\005\236\006" +
    "\235\011\uffa9\012\uffa9\013\uffa9\014\uffa9\016\uffa9\017\uffa9" +
    "\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\033\uffa9\034" +
    "\uffa9\036\uffa9\041\uffa9\042\uffa9\054\uffa9\056\uffa9\067\uffa9" +
    "\072\uffa9\074\uffa9\106\uffa9\107\uffa9\111\uffa9\133\uffa9\140" +
    "\uffa9\141\uffa9\155\uffa9\160\uffa9\171\uffa9\174\uffa9\221\uffa9" +
    "\224\uffa9\247\uffa9\271\uffa9\306\uffa9\350\uffa9\357\uffa9\363" +
    "\uffa9\u011c\uffa9\u0121\uffa9\u012c\uffa9\u012d\uffa9\u014f\uffa9\001\002" +
    "\000\134\004\uffab\011\uffab\012\uffab\013\uffab\014\uffab\016" +
    "\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab\024\uffab" +
    "\033\uffab\034\uffab\036\uffab\041\uffab\042\uffab\054\uffab\056" +
    "\uffab\067\uffab\072\uffab\074\uffab\106\uffab\107\uffab\111\uffab" +
    "\133\uffab\140\uffab\141\uffab\155\uffab\160\uffab\171\uffab\174" +
    "\uffab\221\uffab\224\uffab\247\uffab\271\uffab\306\uffab\350\uffab" +
    "\357\uffab\363\uffab\u011c\uffab\u0121\uffab\u012c\uffab\u012d\uffab\u014f" +
    "\uffab\001\002\000\140\004\uffa9\005\236\006\235\011\uffa9" +
    "\012\uffa9\013\uffa9\014\uffa9\016\uffa9\017\uffa9\020\uffa9\021" +
    "\uffa9\022\uffa9\023\uffa9\024\uffa9\033\uffa9\034\uffa9\036\uffa9" +
    "\041\uffa9\042\uffa9\054\uffa9\056\uffa9\067\uffa9\072\uffa9\074" +
    "\uffa9\106\uffa9\107\uffa9\111\uffa9\133\uffa9\140\uffa9\141\uffa9" +
    "\155\uffa9\160\uffa9\171\uffa9\174\uffa9\221\uffa9\224\uffa9\247" +
    "\uffa9\271\uffa9\306\uffa9\350\uffa9\357\uffa9\363\uffa9\u011c\uffa9" +
    "\u0121\uffa9\u012c\uffa9\u012d\uffa9\u014f\uffa9\001\002\000\134\004" +
    "\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa\016\uffaa\017\uffaa" +
    "\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\033\uffaa\034" +
    "\uffaa\036\uffaa\041\uffaa\042\uffaa\054\uffaa\056\uffaa\067\uffaa" +
    "\072\uffaa\074\uffaa\106\uffaa\107\uffaa\111\uffaa\133\uffaa\140" +
    "\uffaa\141\uffaa\155\uffaa\160\uffaa\171\uffaa\174\uffaa\221\uffaa" +
    "\224\uffaa\247\uffaa\271\uffaa\306\uffaa\350\uffaa\357\uffaa\363" +
    "\uffaa\u011c\uffaa\u0121\uffaa\u012c\uffaa\u012d\uffaa\u014f\uffaa\001\002" +
    "\000\032\011\uff87\012\uff87\013\uff87\014\uff87\033\uff87\034" +
    "\uff87\224\uff87\357\uff87\u011c\uff87\u0121\uff87\u012c\uff87\u012d\uff87" +
    "\001\002\000\010\074\203\133\202\174\201\001\002\000" +
    "\032\011\uff84\012\uff84\013\uff84\014\uff84\033\uff84\034\uff84" +
    "\224\uff84\357\uff84\u011c\uff84\u0121\uff84\u012c\uff84\u012d\uff84\001" +
    "\002\000\032\011\uff83\012\uff83\013\uff83\014\uff83\033\uff83" +
    "\034\uff83\224\uff83\357\uff83\u011c\uff83\u0121\uff83\u012c\uff83\u012d" +
    "\uff83\001\002\000\032\011\052\012\160\013\145\014\155" +
    "\033\053\034\161\224\163\357\156\u011c\146\u0121\164\u012c" +
    "\162\u012d\157\001\002\000\032\011\uff85\012\uff85\013\uff85" +
    "\014\uff85\033\uff85\034\uff85\224\uff85\357\uff85\u011c\uff85\u0121" +
    "\uff85\u012c\uff85\u012d\uff85\001\002\000\032\011\uff86\012\uff86" +
    "\013\uff86\014\uff86\033\uff86\034\uff86\224\uff86\357\uff86\u011c" +
    "\uff86\u0121\uff86\u012c\uff86\u012d\uff86\001\002\000\032\011\uff88" +
    "\012\uff88\013\uff88\014\uff88\033\uff88\034\uff88\224\uff88\357" +
    "\uff88\u011c\uff88\u0121\uff88\u012c\uff88\u012d\uff88\001\002\000\044" +
    "\023\uff89\024\uff89\036\uff89\041\uff89\042\uff89\054\uff89\072" +
    "\uff89\106\uff89\107\uff89\111\uff89\141\uff89\160\uff89\171\uff89" +
    "\271\uff89\306\uff89\363\uff89\u014f\uff89\001\002\000\006\221" +
    "\144\224\uff94\001\002\000\004\224\257\001\002\000\044" +
    "\023\uff81\024\uff81\036\uff81\041\uff81\042\uff81\054\uff81\072" +
    "\uff81\106\uff81\107\uff81\111\uff81\141\uff81\160\uff81\171\uff81" +
    "\271\uff81\306\uff81\363\uff81\u014f\uff81\001\002\000\044\023" +
    "\uff82\024\uff82\036\uff82\041\uff82\042\uff82\054\uff82\072\uff82" +
    "\106\uff82\107\uff82\111\uff82\141\uff82\160\uff82\171\uff82\271" +
    "\uff82\306\uff82\363\uff82\u014f\uff82\001\002\000\044\023\uff80" +
    "\024\uff80\036\uff80\041\uff80\042\uff80\054\uff80\072\uff80\106" +
    "\uff80\107\uff80\111\uff80\141\uff80\160\uff80\171\uff80\271\uff80" +
    "\306\uff80\363\uff80\u014f\uff80\001\002\000\032\011\052\012" +
    "\160\013\145\014\155\033\053\034\161\224\163\357\156" +
    "\u011c\146\u0121\164\u012c\162\u012d\157\001\002\000\140\004" +
    "\uffa8\005\uffa8\006\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8" +
    "\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024" +
    "\uffa8\033\uffa8\034\uffa8\036\uffa8\041\uffa8\042\uffa8\054\uffa8" +
    "\056\uffa8\067\uffa8\072\uffa8\074\uffa8\106\uffa8\107\uffa8\111" +
    "\uffa8\133\uffa8\140\uffa8\141\uffa8\155\uffa8\160\uffa8\171\uffa8" +
    "\174\uffa8\221\uffa8\224\uffa8\247\uffa8\271\uffa8\306\uffa8\350" +
    "\uffa8\357\uffa8\363\uffa8\u011c\uffa8\u0121\uffa8\u012c\uffa8\u012d\uffa8" +
    "\u014f\uffa8\001\002\000\032\011\052\012\160\013\145\014" +
    "\155\033\053\034\161\224\163\357\156\u011c\146\u0121\164" +
    "\u012c\162\u012d\157\001\002\000\144\004\uffa5\005\uffa5\006" +
    "\uffa5\007\264\010\262\011\uffa5\012\uffa5\013\uffa5\014\uffa5" +
    "\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024" +
    "\uffa5\033\uffa5\034\uffa5\036\uffa5\041\uffa5\042\uffa5\054\uffa5" +
    "\056\uffa5\067\uffa5\072\uffa5\074\uffa5\106\uffa5\107\uffa5\111" +
    "\uffa5\133\uffa5\140\uffa5\141\uffa5\155\uffa5\160\uffa5\171\uffa5" +
    "\174\uffa5\221\uffa5\224\uffa5\247\uffa5\271\uffa5\306\uffa5\350" +
    "\uffa5\357\uffa5\363\uffa5\u011c\uffa5\u0121\uffa5\u012c\uffa5\u012d\uffa5" +
    "\u014f\uffa5\001\002\000\140\004\uffa7\005\uffa7\006\uffa7\011" +
    "\uffa7\012\uffa7\013\uffa7\014\uffa7\016\uffa7\017\uffa7\020\uffa7" +
    "\021\uffa7\022\uffa7\023\uffa7\024\uffa7\033\uffa7\034\uffa7\036" +
    "\uffa7\041\uffa7\042\uffa7\054\uffa7\056\uffa7\067\uffa7\072\uffa7" +
    "\074\uffa7\106\uffa7\107\uffa7\111\uffa7\133\uffa7\140\uffa7\141" +
    "\uffa7\155\uffa7\160\uffa7\171\uffa7\174\uffa7\221\uffa7\224\uffa7" +
    "\247\uffa7\271\uffa7\306\uffa7\350\uffa7\357\uffa7\363\uffa7\u011c" +
    "\uffa7\u0121\uffa7\u012c\uffa7\u012d\uffa7\u014f\uffa7\001\002\000\144" +
    "\004\uffa5\005\uffa5\006\uffa5\007\264\010\262\011\uffa5\012" +
    "\uffa5\013\uffa5\014\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5" +
    "\022\uffa5\023\uffa5\024\uffa5\033\uffa5\034\uffa5\036\uffa5\041" +
    "\uffa5\042\uffa5\054\uffa5\056\uffa5\067\uffa5\072\uffa5\074\uffa5" +
    "\106\uffa5\107\uffa5\111\uffa5\133\uffa5\140\uffa5\141\uffa5\155" +
    "\uffa5\160\uffa5\171\uffa5\174\uffa5\221\uffa5\224\uffa5\247\uffa5" +
    "\271\uffa5\306\uffa5\350\uffa5\357\uffa5\363\uffa5\u011c\uffa5\u0121" +
    "\uffa5\u012c\uffa5\u012d\uffa5\u014f\uffa5\001\002\000\140\004\uffa6" +
    "\005\uffa6\006\uffa6\011\uffa6\012\uffa6\013\uffa6\014\uffa6\016" +
    "\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6" +
    "\033\uffa6\034\uffa6\036\uffa6\041\uffa6\042\uffa6\054\uffa6\056" +
    "\uffa6\067\uffa6\072\uffa6\074\uffa6\106\uffa6\107\uffa6\111\uffa6" +
    "\133\uffa6\140\uffa6\141\uffa6\155\uffa6\160\uffa6\171\uffa6\174" +
    "\uffa6\221\uffa6\224\uffa6\247\uffa6\271\uffa6\306\uffa6\350\uffa6" +
    "\357\uffa6\363\uffa6\u011c\uffa6\u0121\uffa6\u012c\uffa6\u012d\uffa6\u014f" +
    "\uffa6\001\002\000\012\007\172\011\052\012\170\033\053" +
    "\001\002\000\144\004\uff9d\005\uff9d\006\uff9d\007\uff9d\010" +
    "\uff9d\011\uff9d\012\uff9d\013\uff9d\014\uff9d\016\uff9d\017\uff9d" +
    "\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d\033\uff9d\034" +
    "\uff9d\036\uff9d\041\uff9d\042\uff9d\054\uff9d\056\uff9d\067\uff9d" +
    "\072\uff9d\074\uff9d\106\uff9d\107\uff9d\111\uff9d\133\uff9d\140" +
    "\uff9d\141\uff9d\155\uff9d\160\uff9d\171\uff9d\174\uff9d\221\uff9d" +
    "\224\uff9d\247\uff9d\271\uff9d\306\uff9d\350\uff9d\357\uff9d\363" +
    "\uff9d\u011c\uff9d\u0121\uff9d\u012c\uff9d\u012d\uff9d\u014f\uff9d\001\002" +
    "\000\034\011\052\012\160\013\145\014\155\033\053\034" +
    "\161\224\163\237\276\357\156\u011c\146\u0121\164\u012c\162" +
    "\u012d\157\001\002\000\014\023\uff41\024\277\067\uff41\306" +
    "\uff41\363\uff41\001\002\000\014\023\uff43\024\uff43\067\uff43" +
    "\306\uff43\363\uff43\001\002\000\014\023\uff44\024\uff44\067" +
    "\uff44\306\uff44\363\uff44\001\002\000\006\011\052\033\053" +
    "\001\002\000\012\023\uff45\067\uff45\306\uff45\363\uff45\001" +
    "\002\000\012\023\uff42\067\uff42\306\uff42\363\uff42\001\002" +
    "\000\160\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011" +
    "\uffe5\012\uffe5\013\uffe5\014\uffe5\016\uffe5\017\uffe5\020\uffe5" +
    "\021\uffe5\022\uffe5\023\uffe5\024\uffe5\033\uffe5\034\uffe5\036" +
    "\uffe5\040\uffe5\041\uffe5\042\uffe5\046\uffe5\054\uffe5\056\uffe5" +
    "\067\uffe5\072\uffe5\074\uffe5\106\uffe5\107\uffe5\111\uffe5\133" +
    "\uffe5\140\uffe5\141\uffe5\155\uffe5\156\uffe5\160\uffe5\171\uffe5" +
    "\174\uffe5\221\uffe5\224\uffe5\237\uffe5\247\uffe5\266\uffe5\267" +
    "\uffe5\271\uffe5\306\uffe5\350\uffe5\357\uffe5\363\uffe5\u011c\uffe5" +
    "\u0121\uffe5\u012c\uffe5\u012d\uffe5\u014f\uffe5\001\002\000\006\011" +
    "\052\033\053\001\002\000\202\004\uffe6\005\uffe6\006\uffe6" +
    "\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\016" +
    "\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6" +
    "\025\307\026\uffe6\033\uffe6\034\uffe6\036\uffe6\040\uffe6\041" +
    "\uffe6\042\uffe6\046\uffe6\054\uffe6\056\uffe6\057\uffe6\062\uffe6" +
    "\067\uffe6\072\uffe6\074\uffe6\106\uffe6\107\uffe6\111\uffe6\121" +
    "\uffe6\133\uffe6\140\uffe6\141\uffe6\154\uffe6\155\uffe6\156\uffe6" +
    "\160\uffe6\171\uffe6\174\uffe6\221\uffe6\224\uffe6\237\uffe6\246" +
    "\uffe6\247\uffe6\266\uffe6\267\uffe6\271\uffe6\306\uffe6\314\uffe6" +
    "\316\uffe6\350\uffe6\357\uffe6\363\uffe6\u011c\uffe6\u0121\uffe6\u012c" +
    "\uffe6\u012d\uffe6\u014f\uffe6\001\002\000\160\004\uffe4\005\uffe4" +
    "\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\014" +
    "\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4" +
    "\024\uffe4\033\uffe4\034\uffe4\036\uffe4\040\uffe4\041\uffe4\042" +
    "\uffe4\046\uffe4\054\uffe4\056\uffe4\067\uffe4\072\uffe4\074\uffe4" +
    "\106\uffe4\107\uffe4\111\uffe4\133\uffe4\140\uffe4\141\uffe4\155" +
    "\uffe4\156\uffe4\160\uffe4\171\uffe4\174\uffe4\221\uffe4\224\uffe4" +
    "\237\uffe4\247\uffe4\266\uffe4\267\uffe4\271\uffe4\306\uffe4\350" +
    "\uffe4\357\uffe4\363\uffe4\u011c\uffe4\u0121\uffe4\u012c\uffe4\u012d\uffe4" +
    "\u014f\uffe4\001\002\000\200\004\uffe8\005\uffe8\006\uffe8\007" +
    "\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\016\uffe8" +
    "\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\026" +
    "\uffe8\033\uffe8\034\uffe8\036\uffe8\040\uffe8\041\uffe8\042\uffe8" +
    "\046\uffe8\054\uffe8\056\uffe8\057\uffe8\062\uffe8\067\uffe8\072" +
    "\uffe8\074\uffe8\106\uffe8\107\uffe8\111\uffe8\121\uffe8\133\uffe8" +
    "\140\uffe8\141\uffe8\154\uffe8\155\uffe8\156\uffe8\160\uffe8\171" +
    "\uffe8\174\uffe8\221\uffe8\224\uffe8\237\uffe8\246\uffe8\247\uffe8" +
    "\266\uffe8\267\uffe8\271\uffe8\306\uffe8\314\uffe8\316\uffe8\350" +
    "\uffe8\357\uffe8\363\uffe8\u011c\uffe8\u0121\uffe8\u012c\uffe8\u012d\uffe8" +
    "\u014f\uffe8\001\002\000\006\011\052\033\053\001\002\000" +
    "\200\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7" +
    "\012\uffe7\013\uffe7\014\uffe7\016\uffe7\017\uffe7\020\uffe7\021" +
    "\uffe7\022\uffe7\023\uffe7\024\uffe7\026\uffe7\033\uffe7\034\uffe7" +
    "\036\uffe7\040\uffe7\041\uffe7\042\uffe7\046\uffe7\054\uffe7\056" +
    "\uffe7\057\uffe7\062\uffe7\067\uffe7\072\uffe7\074\uffe7\106\uffe7" +
    "\107\uffe7\111\uffe7\121\uffe7\133\uffe7\140\uffe7\141\uffe7\154" +
    "\uffe7\155\uffe7\156\uffe7\160\uffe7\171\uffe7\174\uffe7\221\uffe7" +
    "\224\uffe7\237\uffe7\246\uffe7\247\uffe7\266\uffe7\267\uffe7\271" +
    "\uffe7\306\uffe7\314\uffe7\316\uffe7\350\uffe7\357\uffe7\363\uffe7" +
    "\u011c\uffe7\u0121\uffe7\u012c\uffe7\u012d\uffe7\u014f\uffe7\001\002\000" +
    "\012\011\uff4d\033\uff4d\067\312\253\uff4d\001\002\000\010" +
    "\011\uff4e\033\uff4e\253\uff4e\001\002\000\010\011\052\033" +
    "\053\253\316\001\002\000\006\023\uff4f\363\uff4f\001\002" +
    "\000\004\067\325\001\002\000\004\034\317\001\002\000" +
    "\006\011\052\033\053\001\002\000\006\023\uff4c\363\uff4c" +
    "\001\002\000\004\024\322\001\002\000\004\012\323\001" +
    "\002\000\004\036\324\001\002\000\006\023\uff47\363\uff47" +
    "\001\002\000\006\011\052\033\053\001\002\000\010\023" +
    "\uff7b\306\140\363\uff7b\001\002\000\006\023\uff4b\363\uff4b" +
    "\001\002\000\012\023\uff48\024\134\306\uff48\363\uff48\001" +
    "\002\000\010\023\uff4a\306\uff4a\363\uff4a\001\002\000\040" +
    "\002\ufffe\003\035\046\032\071\024\112\022\126\011\137" +
    "\010\144\027\146\023\173\026\233\012\234\042\242\037" +
    "\254\040\266\034\001\002\000\004\002\uffff\001\002\000" +
    "\006\023\uffc5\363\uffc5\001\002\000\006\023\uffc3\363\uffc3" +
    "\001\002\000\010\011\uffde\033\uffde\130\347\001\002\000" +
    "\010\011\uffde\033\uffde\130\347\001\002\000\010\011\uffde" +
    "\033\uffde\130\347\001\002\000\006\023\uffc4\363\uffc4\001" +
    "\002\000\010\011\uffde\033\uffde\130\347\001\002\000\010" +
    "\011\uffde\033\uffde\130\347\001\002\000\006\023\uffc6\363" +
    "\uffc6\001\002\000\006\023\uffc1\363\uffc1\001\002\000\006" +
    "\023\uffc2\363\uffc2\001\002\000\004\320\356\001\002\000" +
    "\006\011\052\033\053\001\002\000\010\023\uffbe\024\352" +
    "\363\uffbe\001\002\000\006\011\052\033\053\001\002\000" +
    "\006\023\uffc0\363\uffc0\001\002\000\010\023\uffbe\024\352" +
    "\363\uffbe\001\002\000\006\023\uffbf\363\uffbf\001\002\000" +
    "\006\011\uffdf\033\uffdf\001\002\000\006\011\052\033\053" +
    "\001\002\000\010\023\uffb7\024\361\363\uffb7\001\002\000" +
    "\006\011\052\033\053\001\002\000\006\023\uffb9\363\uffb9" +
    "\001\002\000\010\023\uffb7\024\361\363\uffb7\001\002\000" +
    "\006\023\uffb8\363\uffb8\001\002\000\006\011\052\033\053" +
    "\001\002\000\006\023\uffbd\363\uffbd\001\002\000\006\011" +
    "\052\033\053\001\002\000\004\u014f\376\001\002\000\010" +
    "\023\uffb3\024\373\363\uffb3\001\002\000\006\023\uffb6\363" +
    "\uffb6\001\002\000\006\011\052\033\053\001\002\000\010" +
    "\023\uffb3\024\373\363\uffb3\001\002\000\006\023\uffb4\363" +
    "\uffb4\001\002\000\006\011\052\033\053\001\002\000\010" +
    "\023\uffb5\024\uffb5\363\uffb5\001\002\000\006\011\052\033" +
    "\053\001\002\000\010\023\uffba\024\u0102\363\uffba\001\002" +
    "\000\006\011\052\033\053\001\002\000\006\023\uffbc\363" +
    "\uffbc\001\002\000\010\023\uffba\024\u0102\363\uffba\001\002" +
    "\000\006\023\uffbb\363\uffbb\001\002\000\006\023\ufeb0\363" +
    "\ufeb0\001\002\000\006\023\ufeab\363\ufeab\001\002\000\006" +
    "\324\u01f9\352\u01f7\001\002\000\010\011\052\033\053\201" +
    "\u01ef\001\002\000\006\023\ufeac\363\ufeac\001\002\000\006" +
    "\011\052\033\053\001\002\000\006\023\ufeaf\363\ufeaf\001" +
    "\002\000\006\023\ufeae\363\ufeae\001\002\000\006\023\ufeb1" +
    "\363\ufeb1\001\002\000\006\011\052\033\053\001\002\000" +
    "\006\011\052\033\053\001\002\000\006\023\ufead\363\ufead" +
    "\001\002\000\006\034\u0114\056\ufea2\001\002\000\004\056" +
    "\ufea3\001\002\000\006\011\052\033\053\001\002\000\004" +
    "\056\u0116\001\002\000\004\137\010\001\002\000\006\023" +
    "\ufea4\363\ufea4\001\002\000\004\036\u0119\001\002\000\020" +
    "\023\uff76\056\uff76\237\uff76\267\uff76\306\uff76\363\uff76\u014f" +
    "\uff76\001\002\000\010\040\u011d\046\u011c\266\u0120\001\002" +
    "\000\006\023\ufea1\363\ufea1\001\002\000\004\143\u01de\001" +
    "\002\000\022\011\052\033\053\057\ufed1\121\ufed1\136\u012d" +
    "\154\u0131\246\ufed1\316\ufed1\001\002\000\006\023\ufe9e\363" +
    "\ufe9e\001\002\000\006\023\ufea0\363\ufea0\001\002\000\014" +
    "\011\ufe91\033\ufe91\130\ufe91\143\u0122\154\u0123\001\002\000" +
    "\010\023\ufe8f\024\u0129\363\ufe8f\001\002\000\010\011\uffde" +
    "\033\uffde\130\347\001\002\000\010\011\ufe92\033\ufe92\130" +
    "\ufe92\001\002\000\010\011\uffde\033\uffde\130\347\001\002" +
    "\000\006\011\052\033\053\001\002\000\010\023\ufe94\024" +
    "\ufe94\363\ufe94\001\002\000\006\011\052\033\053\001\002" +
    "\000\010\023\ufe93\024\ufe93\363\ufe93\001\002\000\014\011" +
    "\ufe91\033\ufe91\130\ufe91\143\u0122\154\u0123\001\002\000\006" +
    "\023\ufe95\363\ufe95\001\002\000\010\023\ufe8f\024\u0129\363" +
    "\ufe8f\001\002\000\006\023\ufe90\363\ufe90\001\002\000\006" +
    "\011\052\033\053\001\002\000\012\023\ufef6\024\ufef6\036" +
    "\ufef6\363\ufef6\001\002\000\012\023\ufef7\024\ufef7\036\ufef7" +
    "\363\ufef7\001\002\000\010\023\ufef3\024\u01d7\363\ufef3\001" +
    "\002\000\006\011\052\033\053\001\002\000\042\033\u017b" +
    "\220\u017a\263\u0188\344\u017f\356\u0186\364\u0180\u0101\u0177\u010a" +
    "\u0181\u010d\u0176\u0110\u0183\u0123\u0182\u012f\u0179\u0139\u0178\u013c\u017c" +
    "\u0149\u0185\u014a\u017e\001\002\000\012\057\u0136\121\u0135\246" +
    "\u0139\316\u0137\001\002\000\012\023\ufef5\024\ufef5\036\ufef5" +
    "\363\ufef5\001\002\000\006\034\ufefc\221\u0155\001\002\000" +
    "\004\163\u014c\001\002\000\004\163\u0149\001\002\000\012" +
    "\023\ufebd\024\ufebd\036\ufebd\363\ufebd\001\002\000\010\034" +
    "\ufeca\132\u013a\216\u013b\001\002\000\032\023\ufecc\024\ufecc" +
    "\034\ufecc\036\ufecc\057\ufecc\062\ufecc\121\ufecc\136\ufecc\154" +
    "\ufecc\246\ufecc\316\ufecc\363\ufecc\001\002\000\032\023\ufecb" +
    "\024\ufecb\034\ufecb\036\ufecb\057\ufecb\062\ufecb\121\ufecb\136" +
    "\ufecb\154\ufecb\246\ufecb\316\ufecb\363\ufecb\001\002\000\004" +
    "\034\u013d\001\002\000\006\011\052\033\053\001\002\000" +
    "\012\023\ufebb\024\ufebb\036\ufebb\363\ufebb\001\002\000\012" +
    "\024\uff66\036\uff66\247\u0140\350\u0141\001\002\000\044\011" +
    "\uff67\012\uff67\013\uff67\014\uff67\023\uff67\024\uff67\033\uff67" +
    "\034\uff67\036\uff67\054\uff67\224\uff67\357\uff67\363\uff67\u011c" +
    "\uff67\u0121\uff67\u012c\uff67\u012d\uff67\001\002\000\044\011\uff68" +
    "\012\uff68\013\uff68\014\uff68\023\uff68\024\uff68\033\uff68\034" +
    "\uff68\036\uff68\054\uff68\224\uff68\357\uff68\363\uff68\u011c\uff68" +
    "\u0121\uff68\u012c\uff68\u012d\uff68\001\002\000\006\024\u0143\036" +
    "\ufeb6\001\002\000\006\011\052\033\053\001\002\000\004" +
    "\036\u0145\001\002\000\012\023\ufeb8\024\ufeb8\036\ufeb8\363" +
    "\ufeb8\001\002\000\012\024\uff66\036\uff66\247\u0140\350\u0141" +
    "\001\002\000\006\024\u0143\036\ufeb6\001\002\000\004\036" +
    "\ufeb7\001\002\000\010\034\ufeca\132\u013a\216\u013b\001\002" +
    "\000\004\034\u013d\001\002\000\012\023\ufebc\024\ufebc\036" +
    "\ufebc\363\ufebc\001\002\000\004\034\u014d\001\002\000\006" +
    "\011\052\033\053\001\002\000\004\062\u014f\001\002\000" +
    "\006\011\052\033\053\001\002\000\020\023\ufec6\024\ufec6" +
    "\034\u0151\036\ufec6\221\ufec6\363\ufec6\u014f\ufec6\001\002\000" +
    "\006\011\052\033\053\001\002\000\016\023\ufec4\024\ufec4" +
    "\036\ufec4\221\ufec4\363\ufec4\u014f\u0153\001\002\000\006\242" +
    "\u0160\254\u0161\001\002\000\014\023\ufefc\024\ufefc\036\ufefc" +
    "\221\u0155\363\ufefc\001\002\000\006\054\u0157\224\u0159\001" +
    "\002\000\012\023\ufeba\024\ufeba\036\ufeba\363\ufeba\001\002" +
    "\000\004\065\u015a\001\002\000\032\023\ufefd\024\ufefd\034" +
    "\ufefd\036\ufefd\057\ufefd\062\ufefd\120\ufefd\121\ufefd\154\ufefd" +
    "\246\ufefd\316\ufefd\363\ufefd\001\002\000\032\023\ufefa\024" +
    "\ufefa\034\ufefa\036\ufefa\057\ufefa\062\ufefa\120\ufefa\121\ufefa" +
    "\154\ufefa\246\ufefa\316\ufefa\363\ufefa\001\002\000\034\023" +
    "\ufef8\024\ufef8\034\ufef8\036\ufef8\057\ufef8\062\ufef8\120\ufef8" +
    "\121\ufef8\154\ufef8\221\u015b\246\ufef8\316\ufef8\363\ufef8\001" +
    "\002\000\034\023\ufed7\024\ufed7\034\ufed7\036\ufed7\057\ufed7" +
    "\062\ufed7\120\ufed7\121\ufed7\154\ufed7\224\u015e\246\ufed7\316" +
    "\ufed7\363\ufed7\001\002\000\032\023\ufefb\024\ufefb\034\ufefb" +
    "\036\ufefb\057\ufefb\062\ufefb\120\ufefb\121\ufefb\154\ufefb\246" +
    "\ufefb\316\ufefb\363\ufefb\001\002\000\032\023\ufef9\024\ufef9" +
    "\034\ufef9\036\ufef9\057\ufef9\062\ufef9\120\ufef9\121\ufef9\154" +
    "\ufef9\246\ufef9\316\ufef9\363\ufef9\001\002\000\032\023\ufed8" +
    "\024\ufed8\034\ufed8\036\ufed8\057\ufed8\062\ufed8\120\ufed8\121" +
    "\ufed8\154\ufed8\246\ufed8\316\ufed8\363\ufed8\001\002\000\032" +
    "\023\ufec4\024\ufec4\036\ufec4\057\ufec4\062\ufec4\121\ufec4\154" +
    "\ufec4\221\ufec4\246\ufec4\316\ufec4\363\ufec4\u014f\u0153\001\002" +
    "\000\006\113\u0164\156\u0163\001\002\000\006\113\u0164\156" +
    "\u0163\001\002\000\032\023\ufec2\024\ufec2\036\ufec2\057\ufec2" +
    "\062\ufec2\121\ufec2\154\ufec2\221\ufec2\246\ufec2\316\ufec2\363" +
    "\ufec2\u014f\ufec2\001\002\000\006\224\u0167\237\u0165\001\002" +
    "\000\032\023\ufebf\024\ufebf\036\ufebf\057\ufebf\062\ufebf\121" +
    "\ufebf\154\ufebf\221\ufebf\246\ufebf\316\ufebf\363\ufebf\u014f\ufebf" +
    "\001\002\000\032\023\ufec0\024\ufec0\036\ufec0\057\ufec0\062" +
    "\ufec0\121\ufec0\154\ufec0\221\ufec0\246\ufec0\316\ufec0\363\ufec0" +
    "\u014f\ufec0\001\002\000\032\023\ufebe\024\ufebe\036\ufebe\057" +
    "\ufebe\062\ufebe\121\ufebe\154\ufebe\221\ufebe\246\ufebe\316\ufebe" +
    "\363\ufebe\u014f\ufebe\001\002\000\032\023\ufec1\024\ufec1\036" +
    "\ufec1\057\ufec1\062\ufec1\121\ufec1\154\ufec1\221\ufec1\246\ufec1" +
    "\316\ufec1\363\ufec1\u014f\ufec1\001\002\000\032\023\ufec3\024" +
    "\ufec3\036\ufec3\057\ufec3\062\ufec3\121\ufec3\154\ufec3\221\ufec3" +
    "\246\ufec3\316\ufec3\363\ufec3\u014f\ufec3\001\002\000\030\023" +
    "\ufec5\024\ufec5\036\ufec5\057\ufec5\062\ufec5\121\ufec5\154\ufec5" +
    "\221\ufec5\246\ufec5\316\ufec5\363\ufec5\001\002\000\004\036" +
    "\u016b\001\002\000\032\023\ufec7\024\ufec7\036\ufec7\057\ufec7" +
    "\062\ufec7\121\ufec7\154\ufec7\221\ufec7\246\ufec7\316\ufec7\363" +
    "\ufec7\u014f\ufec7\001\002\000\006\024\u016e\036\ufeb3\001\002" +
    "\000\004\036\u0171\001\002\000\006\011\052\033\053\001" +
    "\002\000\006\024\u016e\036\ufeb3\001\002\000\004\036\ufeb4" +
    "\001\002\000\004\062\ufeb5\001\002\000\004\034\u0173\001" +
    "\002\000\034\011\uff94\012\uff94\013\uff94\014\uff94\033\uff94" +
    "\034\uff94\221\144\224\uff94\357\uff94\u011c\uff94\u0121\uff94\u012c" +
    "\uff94\u012d\uff94\001\002\000\004\036\u0175\001\002\000\012" +
    "\023\ufeb9\024\ufeb9\036\ufeb9\363\ufeb9\001\002\000\062\004" +
    "\uffce\023\uffce\024\uffce\034\uffce\035\uffce\036\uffce\054\uffce" +
    "\056\uffce\057\uffce\062\uffce\117\uffce\120\uffce\121\uffce\140" +
    "\uffce\154\uffce\221\uffce\224\uffce\237\uffce\246\uffce\314\uffce" +
    "\316\uffce\363\uffce\u0156\uffce\u0159\uffce\001\002\000\062\004" +
    "\uffd3\023\uffd3\024\uffd3\034\uffd3\035\uffd3\036\uffd3\054\uffd3" +
    "\056\uffd3\057\uffd3\062\uffd3\117\uffd3\120\uffd3\121\uffd3\140" +
    "\uffd3\154\uffd3\221\uffd3\224\uffd3\237\uffd3\246\uffd3\314\uffd3" +
    "\316\uffd3\363\uffd3\u0156\uffd3\u0159\uffd3\001\002\000\062\004" +
    "\uffcd\023\uffcd\024\uffcd\034\uffcd\035\uffcd\036\uffcd\054\uffcd" +
    "\056\uffcd\057\uffcd\062\uffcd\117\uffcd\120\uffcd\121\uffcd\140" +
    "\uffcd\154\uffcd\221\uffcd\224\uffcd\237\uffcd\246\uffcd\314\uffcd" +
    "\316\uffcd\363\uffcd\u0156\uffcd\u0159\uffcd\001\002\000\062\004" +
    "\uffd6\023\uffd6\024\uffd6\034\uffd6\035\uffd6\036\uffd6\054\uffd6" +
    "\056\uffd6\057\uffd6\062\uffd6\117\uffd6\120\uffd6\121\uffd6\140" +
    "\uffd6\154\uffd6\221\uffd6\224\uffd6\237\uffd6\246\uffd6\314\uffd6" +
    "\316\uffd6\363\uffd6\u0156\uffd6\u0159\uffd6\001\002\000\050\023" +
    "\uffd2\024\uffd2\034\uffd2\035\uffd2\036\uffd2\054\uffd2\057\uffd2" +
    "\062\uffd2\117\uffd2\120\uffd2\121\uffd2\140\uffd2\154\uffd2\221" +
    "\uffd2\224\uffd2\237\uffd2\246\uffd2\316\uffd2\363\uffd2\001\002" +
    "\000\040\220\u017a\263\u0188\344\u017f\356\u0186\364\u0180\u0101" +
    "\u0177\u010a\u0181\u010d\u0176\u0110\u0183\u0123\u0182\u012f\u0179\u0139\u0178" +
    "\u013c\u017c\u0149\u0185\u014a\u017e\001\002\000\062\004\uffd1\023" +
    "\uffd1\024\uffd1\034\uffd1\035\uffd1\036\uffd1\054\uffd1\056\uffd1" +
    "\057\uffd1\062\uffd1\117\uffd1\120\uffd1\121\uffd1\140\uffd1\154" +
    "\uffd1\221\uffd1\224\uffd1\237\uffd1\246\uffd1\314\uffd1\316\uffd1" +
    "\363\uffd1\u0156\uffd1\u0159\uffd1\001\002\000\044\023\ufee1\024" +
    "\ufee1\036\ufee1\054\ufee1\057\ufee1\062\ufee1\117\ufee1\120\ufee1" +
    "\121\ufee1\140\u0190\154\ufee1\221\ufee1\224\ufee1\237\ufee1\246" +
    "\ufee1\316\ufee1\363\ufee1\001\002\000\062\004\uffd9\023\uffd9" +
    "\024\uffd9\034\uffd9\035\uffd9\036\uffd9\054\uffd9\056\uffd9\057" +
    "\uffd9\062\uffd9\117\uffd9\120\uffd9\121\uffd9\140\uffd9\154\uffd9" +
    "\221\uffd9\224\uffd9\237\uffd9\246\uffd9\314\uffd9\316\uffd9\363" +
    "\uffd9\u0156\uffd9\u0159\uffd9\001\002\000\062\004\uffd7\023\uffd7" +
    "\024\uffd7\034\uffd7\035\uffd7\036\uffd7\054\uffd7\056\uffd7\057" +
    "\uffd7\062\uffd7\117\uffd7\120\uffd7\121\uffd7\140\uffd7\154\uffd7" +
    "\221\uffd7\224\uffd7\237\uffd7\246\uffd7\314\uffd7\316\uffd7\363" +
    "\uffd7\u0156\uffd7\u0159\uffd7\001\002\000\062\004\uffd5\023\uffd5" +
    "\024\uffd5\034\uffd5\035\uffd5\036\uffd5\054\uffd5\056\uffd5\057" +
    "\uffd5\062\uffd5\117\uffd5\120\uffd5\121\uffd5\140\uffd5\154\uffd5" +
    "\221\uffd5\224\uffd5\237\uffd5\246\uffd5\314\uffd5\316\uffd5\363" +
    "\uffd5\u0156\uffd5\u0159\uffd5\001\002\000\062\004\uffcc\023\uffcc" +
    "\024\uffcc\034\uffcc\035\uffcc\036\uffcc\054\uffcc\056\uffcc\057" +
    "\uffcc\062\uffcc\117\uffcc\120\uffcc\121\uffcc\140\uffcc\154\uffcc" +
    "\221\uffcc\224\uffcc\237\uffcc\246\uffcc\314\uffcc\316\uffcc\363" +
    "\uffcc\u0156\uffcc\u0159\uffcc\001\002\000\062\004\uffcf\023\uffcf" +
    "\024\uffcf\034\uffcf\035\uffcf\036\uffcf\054\uffcf\056\uffcf\057" +
    "\uffcf\062\uffcf\117\uffcf\120\uffcf\121\uffcf\140\uffcf\154\uffcf" +
    "\221\uffcf\224\uffcf\237\uffcf\246\uffcf\314\uffcf\316\uffcf\363" +
    "\uffcf\u0156\uffcf\u0159\uffcf\001\002\000\062\004\uffd8\023\uffd8" +
    "\024\uffd8\034\uffd8\035\uffd8\036\uffd8\054\uffd8\056\uffd8\057" +
    "\uffd8\062\uffd8\117\uffd8\120\uffd8\121\uffd8\140\uffd8\154\uffd8" +
    "\221\uffd8\224\uffd8\237\uffd8\246\uffd8\314\uffd8\316\uffd8\363" +
    "\uffd8\u0156\uffd8\u0159\uffd8\001\002\000\046\023\uffc9\024\uffc9" +
    "\034\u0189\036\uffc9\054\uffc9\057\uffc9\062\uffc9\117\uffc9\120" +
    "\uffc9\121\uffc9\140\uffc9\154\uffc9\221\uffc9\224\uffc9\237\uffc9" +
    "\246\uffc9\316\uffc9\363\uffc9\001\002\000\062\004\uffcb\023" +
    "\uffcb\024\uffcb\034\uffcb\035\uffcb\036\uffcb\054\uffcb\056\uffcb" +
    "\057\uffcb\062\uffcb\117\uffcb\120\uffcb\121\uffcb\140\uffcb\154" +
    "\uffcb\221\uffcb\224\uffcb\237\uffcb\246\uffcb\314\uffcb\316\uffcb" +
    "\363\uffcb\u0156\uffcb\u0159\uffcb\001\002\000\062\004\uffd0\023" +
    "\uffd0\024\uffd0\034\uffd0\035\uffd0\036\uffd0\054\uffd0\056\uffd0" +
    "\057\uffd0\062\uffd0\117\uffd0\120\uffd0\121\uffd0\140\uffd0\154" +
    "\uffd0\221\uffd0\224\uffd0\237\uffd0\246\uffd0\314\uffd0\316\uffd0" +
    "\363\uffd0\u0156\uffd0\u0159\uffd0\001\002\000\046\023\uffdb\024" +
    "\uffdb\034\uffdb\036\uffdb\054\uffdb\057\uffdb\062\uffdb\117\uffdb" +
    "\120\uffdb\121\uffdb\140\uffdb\154\uffdb\221\uffdb\224\uffdb\237" +
    "\uffdb\246\uffdb\316\uffdb\363\uffdb\001\002\000\062\004\uffd4" +
    "\023\uffd4\024\uffd4\034\uffd4\035\uffd4\036\uffd4\054\uffd4\056" +
    "\uffd4\057\uffd4\062\uffd4\117\uffd4\120\uffd4\121\uffd4\140\uffd4" +
    "\154\uffd4\221\uffd4\224\uffd4\237\uffd4\246\uffd4\314\uffd4\316" +
    "\uffd4\363\uffd4\u0156\uffd4\u0159\uffd4\001\002\000\004\012\u018b" +
    "\001\002\000\044\023\uffdc\024\uffdc\036\uffdc\054\uffdc\057" +
    "\uffdc\062\uffdc\117\uffdc\120\uffdc\121\uffdc\140\uffdc\154\uffdc" +
    "\221\uffdc\224\uffdc\237\uffdc\246\uffdc\316\uffdc\363\uffdc\001" +
    "\002\000\006\024\u018c\036\uffc7\001\002\000\004\012\u018f" +
    "\001\002\000\004\036\u018e\001\002\000\044\023\uffca\024" +
    "\uffca\036\uffca\054\uffca\057\uffca\062\uffca\117\uffca\120\uffca" +
    "\121\uffca\140\uffca\154\uffca\221\uffca\224\uffca\237\uffca\246" +
    "\uffca\316\uffca\363\uffca\001\002\000\004\036\uffc8\001\002" +
    "\000\006\011\052\033\053\001\002\000\042\023\ufeef\024" +
    "\ufeef\036\ufeef\054\ufee8\057\u019f\062\ufec8\117\u0192\120\u0199" +
    "\121\u019c\154\u0198\221\u019d\224\ufee8\237\u0197\246\u0196\316" +
    "\u019e\363\ufeef\001\002\000\034\023\ufed9\024\ufed9\034\u01be" +
    "\036\ufed9\057\ufed9\062\ufed9\120\ufed9\121\ufed9\154\ufed9\221" +
    "\ufed9\246\ufed9\316\ufed9\363\ufed9\001\002\000\012\023\ufef2" +
    "\024\ufef2\036\ufef2\363\ufef2\001\002\000\012\023\ufef0\024" +
    "\ufef0\036\ufef0\363\ufef0\001\002\000\006\054\u01c5\224\u01c6" +
    "\001\002\000\032\023\ufeca\024\ufeca\036\ufeca\057\ufeca\062" +
    "\ufeca\121\ufeca\132\u013a\154\ufeca\216\u013b\246\ufeca\316\ufeca" +
    "\363\ufeca\001\002\000\012\012\u01b3\013\u01b4\014\u01b7\224" +
    "\u01b6\001\002\000\006\011\052\033\053\001\002\000\026" +
    "\023\ufed3\024\ufed3\036\ufed3\057\ufed1\062\ufed1\121\ufed1\154" +
    "\u0131\246\ufed1\316\ufed1\363\ufed3\001\002\000\004\062\u01ab" +
    "\001\002\000\026\023\ufed3\024\ufed3\036\ufed3\057\ufed1\062" +
    "\ufed1\121\ufed1\154\u0131\246\ufed1\316\ufed1\363\ufed3\001\002" +
    "\000\006\034\ufefc\221\u0155\001\002\000\006\054\ufee9\224" +
    "\ufee9\001\002\000\004\163\u01a1\001\002\000\004\163\u01a0" +
    "\001\002\000\004\062\ufec9\001\002\000\032\023\ufeca\024" +
    "\ufeca\036\ufeca\057\ufeca\062\ufeca\121\ufeca\132\u013a\154\ufeca" +
    "\216\u013b\246\ufeca\316\ufeca\363\ufeca\001\002\000\026\023" +
    "\ufed0\024\ufed0\036\ufed0\057\ufed0\062\ufed0\121\ufed0\154\ufed0" +
    "\246\ufed0\316\ufed0\363\ufed0\001\002\000\004\034\u01a4\001" +
    "\002\000\034\011\uff94\012\uff94\013\uff94\014\uff94\033\uff94" +
    "\034\uff94\221\144\224\uff94\357\uff94\u011c\uff94\u0121\uff94\u012c" +
    "\uff94\u012d\uff94\001\002\000\004\036\u01a6\001\002\000\026" +
    "\023\ufecd\024\ufecd\036\ufecd\057\ufecd\062\ufecd\121\ufecd\154" +
    "\ufecd\246\ufecd\316\ufecd\363\ufecd\001\002\000\012\023\ufeea" +
    "\024\ufeea\036\ufeea\363\ufeea\001\002\000\014\057\u019f\062" +
    "\ufec8\121\u019c\246\u0196\316\u019e\001\002\000\026\023\ufed3" +
    "\024\ufed3\036\ufed3\057\ufed1\062\ufed1\121\ufed1\154\u0131\246" +
    "\ufed1\316\ufed1\363\ufed3\001\002\000\012\023\ufed4\024\ufed4" +
    "\036\ufed4\363\ufed4\001\002\000\006\011\052\033\053\001" +
    "\002\000\034\023\ufec6\024\ufec6\034\u0151\036\ufec6\057\ufec6" +
    "\062\ufec6\121\ufec6\154\ufec6\221\ufec6\246\ufec6\316\ufec6\363" +
    "\ufec6\u014f\ufec6\001\002\000\032\023\ufec4\024\ufec4\036\ufec4" +
    "\057\ufec4\062\ufec4\121\ufec4\154\ufec4\221\ufec4\246\ufec4\316" +
    "\ufec4\363\ufec4\u014f\u0153\001\002\000\030\023\ufefc\024\ufefc" +
    "\036\ufefc\057\ufefc\062\ufefc\121\ufefc\154\ufefc\221\u0155\246" +
    "\ufefc\316\ufefc\363\ufefc\001\002\000\026\023\ufece\024\ufece" +
    "\036\ufece\057\ufece\062\ufece\121\ufece\154\ufece\246\ufece\316" +
    "\ufece\363\ufece\001\002\000\012\023\ufeeb\024\ufeeb\036\ufeeb" +
    "\363\ufeeb\001\002\000\030\054\ufee8\057\u019f\062\ufec8\117" +
    "\u0192\120\u0199\121\u019c\221\u019d\224\ufee8\237\u0197\246\u0196" +
    "\316\u019e\001\002\000\012\023\ufef1\024\ufef1\036\ufef1\363" +
    "\ufef1\001\002\000\034\023\ufee0\024\ufee0\036\ufee0\057\ufee0" +
    "\062\ufee0\117\ufee0\120\ufee0\121\ufee0\154\ufee0\221\ufee0\246" +
    "\ufee0\316\ufee0\363\ufee0\001\002\000\034\023\ufede\024\ufede" +
    "\036\ufede\057\ufede\062\ufede\117\ufede\120\ufede\121\ufede\154" +
    "\ufede\221\ufede\246\ufede\316\ufede\363\ufede\001\002\000\034" +
    "\023\ufedb\024\ufedb\036\ufedb\057\ufedb\062\ufedb\117\u01b8\120" +
    "\ufedb\121\ufedb\154\ufedb\221\ufedb\246\ufedb\316\ufedb\363\ufedb" +
    "\001\002\000\034\023\ufedd\024\ufedd\036\ufedd\057\ufedd\062" +
    "\ufedd\117\ufedd\120\ufedd\121\ufedd\154\ufedd\221\ufedd\246\ufedd" +
    "\316\ufedd\363\ufedd\001\002\000\034\023\ufedf\024\ufedf\036" +
    "\ufedf\057\ufedf\062\ufedf\117\ufedf\120\ufedf\121\ufedf\154\ufedf" +
    "\221\ufedf\246\ufedf\316\ufedf\363\ufedf\001\002\000\034\023" +
    "\ufed9\024\ufed9\034\u01be\036\ufed9\057\ufed9\062\ufed9\120\ufed9" +
    "\121\ufed9\154\ufed9\221\ufed9\246\ufed9\316\ufed9\363\ufed9\001" +
    "\002\000\032\023\ufefc\024\ufefc\036\ufefc\057\ufefc\062\ufefc" +
    "\120\ufefc\121\ufefc\154\ufefc\221\u0155\246\ufefc\316\ufefc\363" +
    "\ufefc\001\002\000\030\023\ufed5\024\ufed5\036\ufed5\057\ufed5" +
    "\062\ufed5\120\u01bb\121\ufed5\154\ufed5\246\ufed5\316\ufed5\363" +
    "\ufed5\001\002\000\026\023\ufed6\024\ufed6\036\ufed6\057\ufed6" +
    "\062\ufed6\121\ufed6\154\ufed6\246\ufed6\316\ufed6\363\ufed6\001" +
    "\002\000\026\023\ufed3\024\ufed3\036\ufed3\057\ufed1\062\ufed1" +
    "\121\ufed1\154\u0131\246\ufed1\316\ufed1\363\ufed3\001\002\000" +
    "\012\023\ufeee\024\ufeee\036\ufeee\363\ufeee\001\002\000\004" +
    "\012\u01c0\001\002\000\032\023\ufedc\024\ufedc\036\ufedc\057" +
    "\ufedc\062\ufedc\120\ufedc\121\ufedc\154\ufedc\221\ufedc\246\ufedc" +
    "\316\ufedc\363\ufedc\001\002\000\004\024\u01c1\001\002\000" +
    "\004\012\u01c2\001\002\000\004\036\u01c3\001\002\000\032" +
    "\023\ufeda\024\ufeda\036\ufeda\057\ufeda\062\ufeda\120\ufeda\121" +
    "\ufeda\154\ufeda\221\ufeda\246\ufeda\316\ufeda\363\ufeda\001\002" +
    "\000\026\023\ufecf\024\ufecf\036\ufecf\057\ufecf\062\ufecf\121" +
    "\ufecf\154\ufecf\246\ufecf\316\ufecf\363\ufecf\001\002\000\004" +
    "\065\u01ca\001\002\000\030\023\ufee7\024\ufee7\036\ufee7\057" +
    "\ufee7\062\ufee7\120\ufee7\121\ufee7\154\ufee7\246\ufee7\316\ufee7" +
    "\363\ufee7\001\002\000\030\023\ufed5\024\ufed5\036\ufed5\057" +
    "\ufed5\062\ufed5\120\u01bb\121\ufed5\154\ufed5\246\ufed5\316\ufed5" +
    "\363\ufed5\001\002\000\026\023\ufed3\024\ufed3\036\ufed3\057" +
    "\ufed1\062\ufed1\121\ufed1\154\u0131\246\ufed1\316\ufed1\363\ufed3" +
    "\001\002\000\012\023\ufeec\024\ufeec\036\ufeec\363\ufeec\001" +
    "\002\000\034\023\ufee3\024\ufee3\036\ufee3\057\ufee3\062\ufee3" +
    "\120\ufee3\121\ufee3\154\ufee3\221\u01cc\224\u01cd\246\ufee3\316" +
    "\ufee3\363\ufee3\001\002\000\030\023\ufee6\024\ufee6\036\ufee6" +
    "\057\ufee6\062\ufee6\120\ufee6\121\ufee6\154\ufee6\246\ufee6\316" +
    "\ufee6\363\ufee6\001\002\000\004\224\u01ce\001\002\000\030" +
    "\023\ufee4\024\ufee4\036\ufee4\057\ufee4\062\ufee4\120\ufee4\121" +
    "\ufee4\154\ufee4\246\ufee4\316\ufee4\363\ufee4\001\002\000\030" +
    "\023\ufee5\024\ufee5\036\ufee5\057\ufee5\062\ufee5\120\ufee5\121" +
    "\ufee5\154\ufee5\246\ufee5\316\ufee5\363\ufee5\001\002\000\032" +
    "\023\ufefc\024\ufefc\036\ufefc\057\ufefc\062\ufefc\120\ufefc\121" +
    "\ufefc\154\ufefc\221\u0155\246\ufefc\316\ufefc\363\ufefc\001\002" +
    "\000\030\023\ufed5\024\ufed5\036\ufed5\057\ufed5\062\ufed5\120" +
    "\u01bb\121\ufed5\154\ufed5\246\ufed5\316\ufed5\363\ufed5\001\002" +
    "\000\026\023\ufed3\024\ufed3\036\ufed3\057\ufed1\062\ufed1\121" +
    "\ufed1\154\u0131\246\ufed1\316\ufed1\363\ufed3\001\002\000\012" +
    "\023\ufeed\024\ufeed\036\ufeed\363\ufeed\001\002\000\042\023" +
    "\ufee2\024\ufee2\036\ufee2\054\ufee2\057\ufee2\062\ufee2\117\ufee2" +
    "\120\ufee2\121\ufee2\154\ufee2\221\ufee2\224\ufee2\237\ufee2\246" +
    "\ufee2\316\ufee2\363\ufee2\001\002\000\004\035\u01d5\001\002" +
    "\000\046\023\uffda\024\uffda\034\uffda\036\uffda\054\uffda\057" +
    "\uffda\062\uffda\117\uffda\120\uffda\121\uffda\140\uffda\154\uffda" +
    "\221\uffda\224\uffda\237\uffda\246\uffda\316\uffda\363\uffda\001" +
    "\002\000\014\057\ufed2\062\ufed2\121\ufed2\246\ufed2\316\ufed2" +
    "\001\002\000\022\011\052\033\053\057\ufed1\121\ufed1\136" +
    "\u012d\154\u0131\246\ufed1\316\ufed1\001\002\000\006\023\ufe9f" +
    "\363\ufe9f\001\002\000\012\023\ufef3\024\u01d7\036\ufef3\363" +
    "\ufef3\001\002\000\010\023\ufef4\036\ufef4\363\ufef4\001\002" +
    "\000\010\034\ufeca\132\u013a\216\u013b\001\002\000\004\034" +
    "\u013d\001\002\000\012\023\ufeb2\024\ufeb2\036\ufeb2\363\ufeb2" +
    "\001\002\000\006\011\052\033\053\001\002\000\046\033" +
    "\u017b\040\u01e1\220\u017a\263\u0188\266\u01e2\344\u017f\356\u0186" +
    "\364\u0180\u0101\u0177\u010a\u0181\u010d\u0176\u0110\u0183\u0123\u0182\u012f" +
    "\u0179\u0139\u0178\u013c\u017c\u0149\u0185\u014a\u017e\001\002\000\012" +
    "\023\ufee1\140\u0190\224\ufee1\363\ufee1\001\002\000\006\120" +
    "\ufe99\221\ufe99\001\002\000\006\120\ufe98\221\ufe98\001\002" +
    "\000\006\120\u01e6\221\u01e7\001\002\000\006\023\ufe9d\363" +
    "\ufe9d\001\002\000\006\023\ufe9c\363\ufe9c\001\002\000\006" +
    "\023\ufe97\363\ufe97\001\002\000\004\054\u01e9\001\002\000" +
    "\006\023\ufe9b\363\ufe9b\001\002\000\004\065\u01ea\001\002" +
    "\000\006\023\ufe96\363\ufe96\001\002\000\010\023\ufed7\224" +
    "\u015e\363\ufed7\001\002\000\006\023\ufe9a\363\ufe9a\001\002" +
    "\000\006\023\ufea5\363\ufea5\001\002\000\006\140\ufea9\156" +
    "\ufea9\001\002\000\006\140\ufea8\156\ufea8\001\002\000\006" +
    "\140\u01f1\156\u01f3\001\002\000\006\011\052\033\053\001" +
    "\002\000\006\023\ufeaa\363\ufeaa\001\002\000\004\112\u01f4" +
    "\001\002\000\004\373\u01f5\001\002\000\006\023\ufea6\363" +
    "\ufea6\001\002\000\006\023\ufea7\363\ufea7\001\002\000\006" +
    "\011\ufe77\033\ufe77\001\002\000\006\011\052\033\053\001" +
    "\002\000\006\011\ufe78\033\ufe78\001\002\000\014\023\u01fb" +
    "\026\ufe75\054\ufe75\056\ufe75\314\ufe75\001\002\000\004\012" +
    "\u0236\001\002\000\012\026\u0200\054\ufe73\056\ufe73\314\ufe73" +
    "\001\002\000\010\054\ufe65\056\ufe65\314\u0213\001\002\000" +
    "\044\011\052\033\053\220\u0202\263\u0188\344\u017f\356\u0186" +
    "\364\u0180\u0101\u0177\u010a\u0181\u010d\u0176\u0110\u0183\u0123\u0182\u012f" +
    "\u0179\u0139\u0178\u013c\u017c\u0149\u0185\u014a\u017e\001\002\000\010" +
    "\054\ufe74\056\ufe74\314\ufe74\001\002\000\004\011\u0201\001" +
    "\002\000\052\011\uffdd\023\uffdd\033\uffdd\220\uffdd\263\uffdd" +
    "\314\uffdd\344\uffdd\356\uffdd\363\uffdd\364\uffdd\u0101\uffdd\u010a" +
    "\uffdd\u010d\uffdd\u0110\uffdd\u0123\uffdd\u012f\uffdd\u0139\uffdd\u013c\uffdd" +
    "\u0149\uffdd\u014a\uffdd\001\002\000\022\004\uffd2\024\uffd2\054" +
    "\uffd2\056\uffd2\314\uffd2\u014d\u0211\u0156\uffd2\u0159\uffd2\001\002" +
    "\000\004\u015a\u0210\001\002\000\012\024\u020e\054\ufe70\056" +
    "\ufe70\314\ufe70\001\002\000\020\004\u0207\024\ufe6b\054\ufe6b" +
    "\056\ufe6b\314\ufe6b\u0156\ufe6b\u0159\ufe6b\001\002\000\016\024" +
    "\ufe69\054\ufe69\056\ufe69\314\ufe69\u0156\u020b\u0159\u020a\001\002" +
    "\000\004\237\u0208\001\002\000\016\024\ufe6c\054\ufe6c\056" +
    "\ufe6c\314\ufe6c\u0156\ufe6c\u0159\ufe6c\001\002\000\012\024\ufe6f" +
    "\054\ufe6f\056\ufe6f\314\ufe6f\001\002\000\012\024\ufe68\054" +
    "\ufe68\056\ufe68\314\ufe68\001\002\000\012\024\ufe67\054\ufe67" +
    "\056\ufe67\314\ufe67\001\002\000\012\024\ufe6a\054\ufe6a\056" +
    "\ufe6a\314\ufe6a\001\002\000\010\054\ufe72\056\ufe72\314\ufe72" +
    "\001\002\000\004\026\u0200\001\002\000\010\054\ufe71\056" +
    "\ufe71\314\ufe71\001\002\000\012\024\ufe6d\054\ufe6d\056\ufe6d" +
    "\314\ufe6d\001\002\000\006\u0156\u020b\u0159\u020a\001\002\000" +
    "\012\024\ufe6e\054\ufe6e\056\ufe6e\314\ufe6e\001\002\000\012" +
    "\312\u022a\315\u0226\u015b\u0229\u0163\u022c\001\002\000\006\054" +
    "\u0216\056\ufe57\001\002\000\004\056\u0218\001\002\000\004" +
    "\065\u0217\001\002\000\004\056\ufe58\001\002\000\014\071" +
    "\u021c\137\010\144\027\242\037\254\040\001\002\000\006" +
    "\023\ufe79\363\ufe79\001\002\000\006\023\047\363\046\001" +
    "\002\000\006\023\ufe55\363\ufe55\001\002\000\012\137\010" +
    "\144\027\242\037\254\040\001\002\000\004\276\u021e\001" +
    "\002\000\006\023\ufe56\363\ufe56\001\002\000\020\023\ufe52" +
    "\137\010\144\027\242\037\254\040\276\ufe52\363\ufe52\001" +
    "\002\000\006\023\047\363\046\001\002\000\010\023\ufe54" +
    "\276\ufe54\363\ufe54\001\002\000\020\023\ufe50\137\010\144" +
    "\027\242\037\254\040\276\ufe50\363\ufe50\001\002\000\006" +
    "\023\047\363\046\001\002\000\010\023\ufe53\276\ufe53\363" +
    "\ufe53\001\002\000\010\023\ufe51\276\ufe51\363\ufe51\001\002" +
    "\000\004\056\ufe60\001\002\000\010\024\u0234\054\ufe5d\056" +
    "\ufe5d\001\002\000\006\054\ufe66\056\ufe66\001\002\000\010" +
    "\024\ufe63\054\ufe63\056\ufe63\001\002\000\004\056\ufe5f\001" +
    "\002\000\004\056\u022d\001\002\000\010\024\ufe62\054\ufe62" +
    "\056\ufe62\001\002\000\014\011\052\033\053\u0160\u022e\u0161" +
    "\u0232\u0162\u0230\001\002\000\010\024\ufe5c\054\ufe5c\056\ufe5c" +
    "\001\002\000\010\024\ufe59\054\ufe59\056\ufe59\001\002\000" +
    "\010\024\ufe5a\054\ufe5a\056\ufe5a\001\002\000\010\024\ufe61" +
    "\054\ufe61\056\ufe61\001\002\000\010\024\ufe5b\054\ufe5b\056" +
    "\ufe5b\001\002\000\006\054\ufe64\056\ufe64\001\002\000\012" +
    "\312\u022a\315\u0226\u015b\u0229\u0163\u022c\001\002\000\006\054" +
    "\ufe5e\056\ufe5e\001\002\000\012\026\ufe76\054\ufe76\056\ufe76" +
    "\314\ufe76\001\002\000\010\011\uff5d\033\uff5d\152\u0239\001" +
    "\002\000\006\011\052\033\053\001\002\000\006\011\uff5e" +
    "\033\uff5e\001\002\000\010\034\u0114\237\uff5b\267\uff5b\001" +
    "\002\000\006\237\uff5c\267\uff5c\001\002\000\006\237\u023d" +
    "\267\u023e\001\002\000\004\267\u0252\001\002\000\004\034" +
    "\u0240\001\002\000\006\023\uff5f\363\uff5f\001\002\000\012" +
    "\012\u0243\013\u0242\014\u0246\237\u0241\001\002\000\006\024" +
    "\uff59\036\uff59\001\002\000\006\024\uff56\036\uff56\001\002" +
    "\000\006\024\uff58\036\uff58\001\002\000\004\036\u024b\001" +
    "\002\000\006\024\u0247\036\uff54\001\002\000\006\024\uff57" +
    "\036\uff57\001\002\000\012\012\u0243\013\u0242\014\u0246\237" +
    "\u0241\001\002\000\004\036\uff5a\001\002\000\006\024\u0247" +
    "\036\uff54\001\002\000\004\036\uff55\001\002\000\010\023" +
    "\uff50\024\u024d\363\uff50\001\002\000\006\023\uff53\363\uff53" +
    "\001\002\000\004\034\u024e\001\002\000\012\012\u0243\013" +
    "\u0242\014\u0246\237\u0241\001\002\000\004\036\u0250\001\002" +
    "\000\010\023\uff50\024\u024d\363\uff50\001\002\000\006\023" +
    "\uff51\363\uff51\001\002\000\006\023\uff52\363\uff52\001\002" +
    "\000\006\023\uff2a\363\uff2a\001\002\000\006\023\uff2c\363" +
    "\uff2c\001\002\000\006\023\uff30\363\uff30\001\002\000\006" +
    "\023\uff2b\363\uff2b\001\002\000\006\011\052\033\053\001" +
    "\002\000\004\011\u0286\001\002\000\010\132\uff0a\136\uff0a" +
    "\216\uff0a\001\002\000\006\023\uff2f\363\uff2f\001\002\000" +
    "\006\023\uff31\363\uff31\001\002\000\006\011\052\033\053" +
    "\001\002\000\006\011\052\033\053\001\002\000\006\023" +
    "\uff2e\363\uff2e\001\002\000\006\023\uff2d\363\uff2d\001\002" +
    "\000\010\132\u013a\136\ufeca\216\u013b\001\002\000\004\136" +
    "\u0262\001\002\000\006\011\052\033\053\001\002\000\004" +
    "\u014f\u0264\001\002\000\006\011\052\033\053\001\002\000" +
    "\004\034\u0266\001\002\000\006\011\052\033\053\001\002" +
    "\000\014\023\uff03\306\uff03\363\uff03\u0100\u0268\u014f\uff03\001" +
    "\002\000\004\034\u0114\001\002\000\012\023\uff7b\306\140" +
    "\363\uff7b\u014f\uff7b\001\002\000\010\023\uff01\363\uff01\u014f" +
    "\u026b\001\002\000\006\011\052\033\053\001\002\000\006" +
    "\023\uff0b\363\uff0b\001\002\000\004\034\u026e\001\002\000" +
    "\006\011\052\033\053\001\002\000\004\036\u0270\001\002" +
    "\000\006\023\uff02\363\uff02\001\002\000\012\023\uff04\306" +
    "\uff04\363\uff04\u014f\uff04\001\002\000\012\024\uff66\036\uff66" +
    "\247\u0140\350\u0141\001\002\000\004\036\u0274\001\002\000" +
    "\014\023\uff08\306\uff08\363\uff08\u0100\uff08\u014f\uff08\001\002" +
    "\000\006\024\u0277\036\uff05\001\002\000\004\036\uff07\001" +
    "\002\000\006\011\052\033\053\001\002\000\012\024\uff66" +
    "\036\uff66\247\u0140\350\u0141\001\002\000\006\024\u0277\036" +
    "\uff05\001\002\000\004\036\uff06\001\002\000\004\034\u027c" +
    "\001\002\000\022\011\052\033\053\057\ufed1\121\ufed1\136" +
    "\u012d\154\u0131\246\ufed1\316\ufed1\001\002\000\006\024\u01d7" +
    "\036\ufef3\001\002\000\004\036\u027f\001\002\000\010\023" +
    "\ufefe\363\ufefe\u014f\u0281\001\002\000\006\023\uff00\363\uff00" +
    "\001\002\000\004\316\u0282\001\002\000\006\023\ufeff\363" +
    "\ufeff\001\002\000\004\056\u0284\001\002\000\004\137\010" +
    "\001\002\000\006\023\uff0c\363\uff0c\001\002\000\006\023" +
    "\uff29\363\uff29\001\002\000\012\023\uff25\140\uff25\363\uff25" +
    "\u014f\u0289\001\002\000\010\023\uff1e\140\u02b5\363\uff1e\001" +
    "\002\000\006\034\uff23\316\u028b\001\002\000\006\023\uff28" +
    "\363\uff28\001\002\000\004\034\uff24\001\002\000\004\034" +
    "\u028d\001\002\000\004\u016e\u0292\001\002\000\010\023\uff26" +
    "\140\uff26\363\uff26\001\002\000\012\023\uff21\024\u0290\140" +
    "\uff21\363\uff21\001\002\000\004\034\u028d\001\002\000\010" +
    "\023\uff22\140\uff22\363\uff22\001\002\000\004\004\u0293\001" +
    "\002\000\004\013\u0294\001\002\000\004\024\u0295\001\002" +
    "\000\004\u016f\u0296\001\002\000\004\004\u0297\001\002\000" +
    "\004\013\u0298\001\002\000\006\024\u029a\036\uff1c\001\002" +
    "\000\004\036\u02b4\001\002\000\010\u0108\u02a1\u0174\u02a0\u0176" +
    "\u029f\001\002\000\006\024\uff1a\036\uff1a\001\002\000\006" +
    "\024\uff19\036\uff19\001\002\000\006\024\uff1b\036\uff1b\001" +
    "\002\000\006\024\u029a\036\uff1c\001\002\000\004\004\u02ae" +
    "\001\002\000\004\004\u02a9\001\002\000\004\004\u02a2\001" +
    "\002\000\004\012\u02a3\001\002\000\012\u0170\u02a6\u0171\u02a7" +
    "\u0172\u02a5\u0173\u02a8\001\002\000\006\024\uff18\036\uff18\001" +
    "\002\000\006\024\uff14\036\uff14\001\002\000\006\024\uff17" +
    "\036\uff17\001\002\000\006\024\uff15\036\uff15\001\002\000" +
    "\006\024\uff16\036\uff16\001\002\000\006\012\u02ab\u0175\u02ac" +
    "\001\002\000\006\024\uff13\036\uff13\001\002\000\012\u0170" +
    "\u02a6\u0171\u02a7\u0172\u02a5\u0173\u02a8\001\002\000\006\024\uff11" +
    "\036\uff11\001\002\000\006\024\uff12\036\uff12\001\002\000" +
    "\004\012\u02af\001\002\000\020\024\uff0d\036\uff0d\u0170\u02a6" +
    "\u0171\u02a7\u0172\u02a5\u0173\u02a8\u0177\u02b1\001\002\000\006\024" +
    "\uff0f\036\uff0f\001\002\000\006\024\uff0e\036\uff0e\001\002" +
    "\000\006\024\uff10\036\uff10\001\002\000\004\036\uff1d\001" +
    "\002\000\012\023\uff20\024\uff20\140\uff20\363\uff20\001\002" +
    "\000\006\011\052\033\053\001\002\000\006\023\uff27\363" +
    "\uff27\001\002\000\006\023\uff1f\363\uff1f\001\002\000\014" +
    "\011\ufe80\023\ufe80\026\ufe80\033\ufe80\363\ufe80\001\002\000" +
    "\014\011\052\023\ufe8c\026\u0200\033\053\363\ufe8c\001\002" +
    "\000\014\011\ufe81\023\ufe81\026\ufe81\033\ufe81\363\ufe81\001" +
    "\002\000\010\023\ufe8a\314\u02bf\363\ufe8a\001\002\000\010" +
    "\023\ufe86\314\ufe86\363\ufe86\001\002\000\010\023\ufe85\314" +
    "\ufe85\363\ufe85\001\002\000\006\023\ufe8e\363\ufe8e\001\002" +
    "\000\004\u0164\u02c1\001\002\000\006\023\ufe8d\363\ufe8d\001" +
    "\002\000\010\013\u02c2\023\ufe88\363\ufe88\001\002\000\006" +
    "\023\ufe89\363\ufe89\001\002\000\006\023\ufe8b\363\ufe8b\001" +
    "\002\000\006\023\ufe7f\363\ufe7f\001\002\000\014\011\052" +
    "\023\ufe82\026\u0200\033\053\363\ufe82\001\002\000\006\023" +
    "\ufe84\363\ufe84\001\002\000\006\023\ufe83\363\ufe83\001\002" +
    "\000\006\023\ufe7e\363\ufe7e\001\002\000\006\023\ufe7c\363" +
    "\ufe7c\001\002\000\014\011\052\023\ufe82\026\u0200\033\053" +
    "\363\ufe82\001\002\000\006\023\ufe7b\363\ufe7b\001\002\000" +
    "\006\011\052\033\053\001\002\000\006\023\uffb2\363\uffb2" +
    "\001\002\000\010\011\052\026\u0200\033\053\001\002\000" +
    "\006\023\ufe87\363\ufe87\001\002\000\036\007\uff70\011\uff70" +
    "\012\uff70\013\uff70\014\uff70\033\uff70\034\uff70\217\uff70\224" +
    "\uff70\357\uff70\u011c\uff70\u0121\uff70\u012c\uff70\u012d\uff70\001\002" +
    "\000\036\007\uff71\011\uff71\012\uff71\013\uff71\014\uff71\033" +
    "\uff71\034\uff71\217\uff71\224\uff71\357\uff71\u011c\uff71\u0121\uff71" +
    "\u012c\uff71\u012d\uff71\001\002\000\036\007\uff92\011\uff92\012" +
    "\uff92\013\uff92\014\uff92\033\uff92\034\uff92\217\116\224\uff92" +
    "\357\uff92\u011c\uff92\u0121\uff92\u012c\uff92\u012d\uff92\001\002\000" +
    "\034\007\u02d6\011\052\012\160\013\145\014\155\033\053" +
    "\034\161\224\163\357\156\u011c\146\u0121\164\u012c\162\u012d" +
    "\157\001\002\000\034\011\052\013\u02dd\023\uffaf\024\uffaf" +
    "\033\053\054\uffaf\056\u02dc\067\uffaf\106\uffaf\111\uffaf\271" +
    "\uffaf\306\uffaf\363\uffaf\001\002\000\022\023\uff3d\054\uff3d" +
    "\067\u02e2\106\uff3d\111\uff3d\271\uff3d\306\uff3d\363\uff3d\001" +
    "\002\000\024\023\uff77\024\u02d7\054\uff77\067\uff77\106\uff77" +
    "\111\uff77\271\uff77\306\uff77\363\uff77\001\002\000\032\011" +
    "\052\012\160\013\145\014\155\033\053\034\161\224\163" +
    "\357\156\u011c\146\u0121\164\u012c\162\u012d\157\001\002\000" +
    "\022\023\uff79\054\uff79\067\uff79\106\uff79\111\uff79\271\uff79" +
    "\306\uff79\363\uff79\001\002\000\034\011\052\013\u02dd\023" +
    "\uffaf\024\uffaf\033\053\054\uffaf\056\u02dc\067\uffaf\106\uffaf" +
    "\111\uffaf\271\uffaf\306\uffaf\363\uffaf\001\002\000\040\023" +
    "\uffae\024\uffae\054\uffae\067\uffae\072\uffae\106\uffae\107\uffae" +
    "\111\uffae\141\uffae\160\uffae\171\uffae\271\uffae\306\uffae\363" +
    "\uffae\u014f\uffae\001\002\000\040\023\uffb0\024\uffb0\054\uffb0" +
    "\067\uffb0\072\uffb0\106\uffb0\107\uffb0\111\uffb0\141\uffb0\160" +
    "\uffb0\171\uffb0\271\uffb0\306\uffb0\363\uffb0\u014f\uffb0\001\002" +
    "\000\010\011\052\013\u02dd\033\053\001\002\000\040\023" +
    "\uffad\024\uffad\054\uffad\067\uffad\072\uffad\106\uffad\107\uffad" +
    "\111\uffad\141\uffad\160\uffad\171\uffad\271\uffad\306\uffad\363" +
    "\uffad\u014f\uffad\001\002\000\024\023\uff77\024\u02d7\054\uff77" +
    "\067\uff77\106\uff77\111\uff77\271\uff77\306\uff77\363\uff77\001" +
    "\002\000\022\023\uff78\054\uff78\067\uff78\106\uff78\111\uff78" +
    "\271\uff78\306\uff78\363\uff78\001\002\000\040\023\uffb1\024" +
    "\uffb1\054\uffb1\067\uffb1\072\uffb1\106\uffb1\107\uffb1\111\uffb1" +
    "\141\uffb1\160\uffb1\171\uffb1\271\uffb1\306\uffb1\363\uffb1\u014f" +
    "\uffb1\001\002\000\020\023\uff7b\054\uff7b\106\uff7b\111\uff7b" +
    "\271\uff7b\306\140\363\uff7b\001\002\000\006\011\052\033" +
    "\053\001\002\000\044\011\052\013\u02dd\023\uffaf\024\uffaf" +
    "\033\053\054\uffaf\056\u02dc\072\uffaf\106\uffaf\107\uffaf\111" +
    "\uffaf\141\uffaf\160\uffaf\171\uffaf\271\uffaf\306\uffaf\363\uffaf" +
    "\001\002\000\034\023\uff39\024\uff39\054\uff39\072\u02ea\106" +
    "\uff39\107\u02e8\111\uff39\141\u02e5\160\uff34\171\u02e7\271\uff39" +
    "\306\uff39\363\uff39\001\002\000\004\160\uff38\001\002\000" +
    "\004\160\u02f4\001\002\000\006\160\uff32\274\u02eb\001\002" +
    "\000\006\160\uff32\274\u02eb\001\002\000\022\023\uff3b\024" +
    "\u02ed\054\uff3b\106\uff3b\111\uff3b\271\uff3b\306\uff3b\363\uff3b" +
    "\001\002\000\006\160\uff32\274\u02eb\001\002\000\004\160" +
    "\uff33\001\002\000\004\160\uff35\001\002\000\006\011\052" +
    "\033\053\001\002\000\020\023\uff3e\054\uff3e\106\uff3e\111" +
    "\uff3e\271\uff3e\306\uff3e\363\uff3e\001\002\000\042\011\052" +
    "\013\u02dd\023\uffaf\033\053\054\uffaf\056\u02dc\072\uffaf\106" +
    "\uffaf\107\uffaf\111\uffaf\141\uffaf\160\uffaf\171\uffaf\271\uffaf" +
    "\306\uffaf\363\uffaf\001\002\000\032\023\uff39\054\uff39\072" +
    "\u02ea\106\uff39\107\u02e8\111\uff39\141\u02e5\160\uff34\171\u02e7" +
    "\271\uff39\306\uff39\363\uff39\001\002\000\020\023\uff3c\054" +
    "\uff3c\106\uff3c\111\uff3c\271\uff3c\306\uff3c\363\uff3c\001\002" +
    "\000\004\160\uff37\001\002\000\004\160\uff36\001\002\000" +
    "\006\011\052\033\053\001\002\000\014\011\052\013\u02dd" +
    "\033\053\056\u02dc\u014f\uffaf\001\002\000\004\u014f\u02f7\001" +
    "\002\000\034\011\uff94\012\uff94\013\uff94\014\uff94\033\uff94" +
    "\034\uff94\221\144\224\uff94\357\uff94\u011c\uff94\u0121\uff94\u012c" +
    "\uff94\u012d\uff94\001\002\000\034\023\uff39\024\uff39\054\uff39" +
    "\072\u02ea\106\uff39\107\u02e8\111\uff39\141\u02e5\160\uff34\171" +
    "\u02e7\271\uff39\306\uff39\363\uff39\001\002\000\022\023\uff3a" +
    "\024\uff3a\054\uff3a\106\uff3a\111\uff3a\271\uff3a\306\uff3a\363" +
    "\uff3a\001\002\000\016\023\uff62\054\uff62\106\u02fc\111\uff62" +
    "\271\uff62\363\uff62\001\002\000\014\023\uff6d\054\uff6d\111" +
    "\u0303\271\uff6d\363\uff6d\001\002\000\004\110\u02fd\001\002" +
    "\000\032\011\052\012\160\013\145\014\155\033\053\034" +
    "\161\224\163\357\156\u011c\146\u0121\164\u012c\162\u012d\157" +
    "\001\002\000\016\023\uff60\024\u02ff\054\uff60\111\uff60\271" +
    "\uff60\363\uff60\001\002\000\032\011\052\012\160\013\145" +
    "\014\155\033\053\034\161\224\163\357\156\u011c\146\u0121" +
    "\164\u012c\162\u012d\157\001\002\000\014\023\uff63\054\uff63" +
    "\111\uff63\271\uff63\363\uff63\001\002\000\016\023\uff60\024" +
    "\u02ff\054\uff60\111\uff60\271\uff60\363\uff60\001\002\000\014" +
    "\023\uff61\054\uff61\111\uff61\271\uff61\363\uff61\001\002\000" +
    "\034\011\uff94\012\uff94\013\uff94\014\uff94\033\uff94\034\uff94" +
    "\221\144\224\uff94\357\uff94\u011c\uff94\u0121\uff94\u012c\uff94\u012d" +
    "\uff94\001\002\000\012\023\uff6b\054\uff6b\271\u0305\363\uff6b" +
    "\001\002\000\004\110\u0307\001\002\000\010\023\uff72\054" +
    "\uff72\363\uff72\001\002\000\032\011\052\012\160\013\145" +
    "\014\155\033\053\034\161\224\163\357\156\u011c\146\u0121" +
    "\164\u012c\162\u012d\157\001\002\000\046\011\uff69\012\uff69" +
    "\013\uff69\014\uff69\023\uff69\033\uff69\034\uff69\054\uff69\140" +
    "\u0309\224\uff69\247\uff69\350\uff69\357\uff69\363\uff69\u011c\uff69" +
    "\u0121\uff69\u012c\uff69\u012d\uff69\001\002\000\006\011\052\033" +
    "\053\001\002\000\044\011\uff66\012\uff66\013\uff66\014\uff66" +
    "\023\uff66\033\uff66\034\uff66\054\uff66\224\uff66\247\u0140\350" +
    "\u0141\357\uff66\363\uff66\u011c\uff66\u0121\uff66\u012c\uff66\u012d\uff66" +
    "\001\002\000\040\011\052\012\160\013\145\014\155\023" +
    "\uff64\033\053\034\161\054\uff64\224\163\357\156\363\uff64" +
    "\u011c\146\u0121\164\u012c\162\u012d\157\001\002\000\010\023" +
    "\uff6c\054\uff6c\363\uff6c\001\002\000\016\023\uff69\054\uff69" +
    "\140\u0309\247\uff69\350\uff69\363\uff69\001\002\000\014\023" +
    "\uff66\054\uff66\247\u0140\350\u0141\363\uff66\001\002\000\010" +
    "\023\uff65\054\uff65\363\uff65\001\002\000\044\011\uff6a\012" +
    "\uff6a\013\uff6a\014\uff6a\023\uff6a\033\uff6a\034\uff6a\054\uff6a" +
    "\224\uff6a\247\uff6a\350\uff6a\357\uff6a\363\uff6a\u011c\uff6a\u0121" +
    "\uff6a\u012c\uff6a\u012d\uff6a\001\002\000\012\023\uff6e\054\uff6e" +
    "\271\uff6e\363\uff6e\001\002\000\024\023\uff77\024\u02d7\054" +
    "\uff77\067\uff77\106\uff77\111\uff77\271\uff77\306\uff77\363\uff77" +
    "\001\002\000\022\023\uff7a\054\uff7a\067\uff7a\106\uff7a\111" +
    "\uff7a\271\uff7a\306\uff7a\363\uff7a\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0312\000\050\003\006\004\042\005\013\006\012\007" +
    "\032\010\020\030\030\044\005\075\027\106\043\116\014" +
    "\124\015\136\040\227\016\253\024\257\003\263\035\265" +
    "\017\340\004\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\076\u02d1\001" +
    "\001\000\004\262\u02cd\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\262\u02c9\266\u02c8\001\001\000\006\262\u02c4\264" +
    "\u02c3\001\001\000\004\262\u02b8\001\001\000\002\001\001" +
    "\000\026\137\u025a\140\u025e\141\u0259\162\u0253\163\u025d\164" +
    "\u025f\172\u0254\267\u0255\314\u0252\316\u0107\001\001\000\004" +
    "\057\u0236\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\230\u010d\231\u010c\234\u010b\235\u0110\237\u0105\267\u0109" +
    "\314\u0106\316\u0107\001\001\000\002\001\001\000\016\031" +
    "\343\032\333\034\340\035\334\037\345\041\344\001\001" +
    "\000\004\011\331\001\001\000\002\001\001\000\004\057" +
    "\310\001\001\000\004\057\114\001\001\000\002\001\001" +
    "\000\004\012\050\001\001\000\004\011\044\001\001\000" +
    "\002\001\001\000\050\003\047\004\042\005\013\006\012" +
    "\007\032\010\020\030\030\044\005\075\027\106\043\116" +
    "\014\124\015\136\040\227\016\253\024\257\003\263\035" +
    "\265\017\340\004\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\341\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\342\062\001\001\000\002\001\001\000\004\343" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\344\071\001\001\000" +
    "\002\001\001\000\004\345\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\075\100\001\001\000\004\346\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\347" +
    "\104\001\001\000\002\001\001\000\006\012\106\073\107" +
    "\001\001\000\004\074\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\112\001\001\000\004\074\113" +
    "\001\001\000\002\001\001\000\006\012\123\015\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\060\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\301\001\001\000\002\001\001\000\006" +
    "\012\126\125\127\001\001\000\002\001\001\000\004\130" +
    "\130\001\001\000\004\067\140\001\001\000\006\012\123" +
    "\015\132\001\001\000\004\122\134\001\001\000\006\012" +
    "\123\015\135\001\001\000\002\001\001\000\004\122\136" +
    "\001\001\000\002\001\001\000\006\056\141\062\142\001" +
    "\001\000\002\001\001\000\020\012\152\017\164\047\150" +
    "\051\151\053\147\054\146\064\153\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\052\262\001\001\000\010\002" +
    "\247\056\244\065\253\001\001\000\004\050\236\001\001" +
    "\000\004\020\231\001\001\000\004\063\226\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\012\152\017\164\047\177\051\151\053" +
    "\147\054\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\152\017" +
    "\166\055\170\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\152\017\166" +
    "\055\176\001\001\000\002\001\001\000\004\066\203\001" +
    "\001\000\016\012\152\017\164\047\217\051\151\053\147" +
    "\054\146\001\001\000\002\001\001\000\016\012\152\017" +
    "\164\047\205\051\151\053\147\054\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\012" +
    "\152\017\164\047\207\051\151\053\147\054\146\001\001" +
    "\000\002\001\001\000\016\012\152\017\164\047\211\051" +
    "\151\053\147\054\146\001\001\000\004\061\213\001\001" +
    "\000\016\012\152\017\164\047\215\051\151\053\147\054" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\061\216\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\152\017\166\055\221\001\001\000\002\001\001" +
    "\000\010\012\152\017\166\055\223\001\001\000\002\001" +
    "\001\000\006\056\141\062\230\001\001\000\006\056\141" +
    "\062\227\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\123\015\233" +
    "\001\001\000\002\001\001\000\014\012\152\017\164\051" +
    "\241\053\147\054\146\001\001\000\014\012\152\017\164" +
    "\051\237\053\147\054\146\001\001\000\002\001\001\000" +
    "\004\050\240\001\001\000\002\001\001\000\004\050\242" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\066" +
    "\260\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\012\152\017\164\047\257\051\151\053\147\054\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\056\255\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\012\152\017\164\053\266\054\146\001\001\000" +
    "\002\001\001\000\012\012\152\017\164\053\264\054\146" +
    "\001\001\000\004\052\265\001\001\000\002\001\001\000" +
    "\004\052\267\001\001\000\002\001\001\000\010\012\152" +
    "\017\166\055\271\001\001\000\002\001\001\000\020\012" +
    "\152\017\164\047\274\051\151\053\147\054\146\126\273" +
    "\001\001\000\004\127\277\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\126\125\300\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\303\013\304\001\001\000\004\014\305\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\307\001\001\000" +
    "\002\001\001\000\004\117\312\001\001\000\002\001\001" +
    "\000\010\012\123\015\314\120\313\001\001\000\002\001" +
    "\001\000\004\121\325\001\001\000\004\123\317\001\001" +
    "\000\004\012\320\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\123\015\327\001\001\000\004\067\326\001" +
    "\001\000\002\001\001\000\004\122\330\001\001\000\002" +
    "\001\001\000\050\003\332\004\042\005\013\006\012\007" +
    "\032\010\020\030\030\044\005\075\027\106\043\116\014" +
    "\124\015\136\040\227\016\253\024\257\003\263\035\265" +
    "\017\340\004\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\377\001\001\000\004\021" +
    "\366\001\001\000\004\021\364\001\001\000\002\001\001" +
    "\000\004\021\356\001\001\000\004\021\347\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\123\015\350\001\001\000\004\033" +
    "\352\001\001\000\006\012\123\015\353\001\001\000\002" +
    "\001\001\000\004\033\354\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\303\013\357\001\001\000\004" +
    "\040\361\001\001\000\006\012\303\013\362\001\001\000" +
    "\002\001\001\000\004\040\363\001\001\000\002\001\001" +
    "\000\004\012\365\001\001\000\002\001\001\000\006\012" +
    "\367\042\370\001\001\000\002\001\001\000\004\043\371" +
    "\001\001\000\002\001\001\000\006\012\367\042\373\001" +
    "\001\000\004\043\374\001\001\000\002\001\001\000\006" +
    "\012\123\015\376\001\001\000\002\001\001\000\004\012" +
    "\u0100\001\001\000\004\036\u0102\001\001\000\004\012\u0103" +
    "\001\001\000\002\001\001\000\004\036\u0104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\270\u01f7\001\001\000\006\012\u01ed\232\u01ef\001\001\000" +
    "\002\001\001\000\004\012\u01ec\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\123\015" +
    "\u0119\001\001\000\006\012\303\013\u0111\001\001\000\002" +
    "\001\001\000\006\072\u0112\236\u0114\001\001\000\002\001" +
    "\001\000\006\012\106\073\u0117\001\001\000\002\001\001" +
    "\000\004\075\u0116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\240\u011a\241\u011e\246\u011d" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\012" +
    "\u0131\175\u012f\177\u012e\207\u0132\220\u012d\226\u0133\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\247\u0120\250" +
    "\u0123\001\001\000\004\251\u0129\001\001\000\004\021\u0126" +
    "\001\001\000\002\001\001\000\004\021\u0124\001\001\000" +
    "\004\012\u0125\001\001\000\002\001\001\000\004\012\u0127" +
    "\001\001\000\002\001\001\000\006\247\u012a\250\u0123\001" +
    "\001\000\002\001\001\000\004\251\u012b\001\001\000\002" +
    "\001\001\000\004\012\u01da\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\176\u01d7\001\001\000\004\012\u01d5" +
    "\001\001\000\010\023\u017c\024\u0183\025\u0186\001\001\000" +
    "\004\221\u0137\001\001\000\002\001\001\000\004\174\u0171" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\211\u013b\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\222\u013d\001\001\000\004\012\u013e\001" +
    "\001\000\002\001\001\000\004\102\u0141\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\223\u0143\001\001\000" +
    "\004\012\u0145\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\102\u0146\001\001\000\004\223\u0147\001\001\000" +
    "\002\001\001\000\004\211\u0149\001\001\000\004\222\u014a" +
    "\001\001\000\002\001\001\000\004\224\u014d\001\001\000" +
    "\004\012\u016b\001\001\000\002\001\001\000\006\012\303" +
    "\013\u014f\001\001\000\004\213\u0151\001\001\000\004\012" +
    "\u0169\001\001\000\004\214\u0153\001\001\000\004\215\u015e" +
    "\001\001\000\004\174\u0155\001\001\000\004\351\u0157\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\352\u015b\001\001\000\004\204" +
    "\u015c\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\214\u0168\001\001\000\004\217\u0167\001" +
    "\001\000\004\217\u0161\001\001\000\002\001\001\000\004" +
    "\216\u0165\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\225" +
    "\u016c\001\001\000\002\001\001\000\004\012\u016e\001\001" +
    "\000\004\225\u016f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\056\141\062\u0173\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\u01d3\001\001\000\002\001\001\000" +
    "\004\200\u0190\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\u0189\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\u018c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\u01d2\001\001\000\014\210\u019a" +
    "\212\u0199\354\u0194\356\u0192\357\u0193\001\001\000\004\203" +
    "\u01ce\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\355\u01c6\001\001\000\004\211\u01c3\001\001\000\004\201" +
    "\u01b4\001\001\000\004\012\u01b0\001\001\000\006\206\u01af" +
    "\207\u01a7\001\001\000\002\001\001\000\006\206\u01a6\207" +
    "\u01a7\001\001\000\004\174\u01a2\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\211\u01a1\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\056\141\062\u01a4\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\210\u01a8\212\u0199" +
    "\001\001\000\006\206\u01a9\207\u01a7\001\001\000\002\001" +
    "\001\000\006\012\303\013\u01ab\001\001\000\004\213\u01ac" +
    "\001\001\000\004\214\u01ad\001\001\000\004\174\u01ae\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\210\u019a" +
    "\212\u0199\354\u0194\357\u01b1\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\202\u01b8\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\203\u01be\001" +
    "\001\000\004\174\u01b9\001\001\000\004\205\u01bb\001\001" +
    "\000\002\001\001\000\006\206\u01bc\207\u01a7\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\205\u01c7\001\001\000\006\206\u01c8\207\u01a7\001" +
    "\001\000\002\001\001\000\004\353\u01ca\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\174\u01cf\001\001\000\004\205\u01d0\001\001" +
    "\000\006\206\u01d1\207\u01a7\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\012\u0131\175\u01d8\177\u012e\207\u0132\220" +
    "\u012d\226\u0133\001\001\000\002\001\001\000\004\176\u01d9" +
    "\001\001\000\002\001\001\000\004\211\u01db\001\001\000" +
    "\004\222\u01dc\001\001\000\002\001\001\000\004\012\u01de" +
    "\001\001\000\016\023\u01df\024\u0183\025\u0186\242\u01e3\243" +
    "\u01e4\244\u01e2\001\001\000\004\200\u01ea\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\245\u01e7\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\204\u01eb\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\233" +
    "\u01f1\001\001\000\004\012\u01f5\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\303\013\u01f9" +
    "\001\001\000\002\001\001\000\004\271\u01fb\001\001\000" +
    "\002\001\001\000\010\022\u01fd\272\u01fc\273\u01fe\001\001" +
    "\000\004\301\u0213\001\001\000\010\012\u0202\025\u0204\275" +
    "\u0203\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\274" +
    "\u020c\001\001\000\004\276\u0205\001\001\000\006\277\u0208" +
    "\300\u020b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\022\u01fd\273\u020e\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\300\u0211" +
    "\001\001\000\002\001\001\000\010\302\u0227\303\u0226\304" +
    "\u022a\001\001\000\004\307\u0214\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\005\u0219\075" +
    "\027\106\043\116\014\124\015\310\u0218\311\u021a\001\001" +
    "\000\002\001\001\000\004\011\u021e\001\001\000\002\001" +
    "\001\000\016\005\u0219\075\027\106\043\116\014\124\015" +
    "\311\u021c\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\005\u021f\075\027\106\043\116\014\124\015\312\u0220" +
    "\001\001\000\004\011\u0221\001\001\000\002\001\001\000" +
    "\016\005\u0222\075\027\106\043\116\014\124\015\313\u0223" +
    "\001\001\000\004\011\u0224\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\305\u0232\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\u022e\306\u0230" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\302\u0234\303\u0226\304\u022a\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\107\u0237\001\001\000\006" +
    "\012\123\015\u0239\001\001\000\002\001\001\000\006\072" +
    "\u023a\110\u023b\001\001\000\002\001\001\000\004\114\u023e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\111\u0243\112\u0244\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\113\u0247\001\001\000\002\001\001\000\004\112\u0248" +
    "\001\001\000\002\001\001\000\004\113\u0249\001\001\000" +
    "\002\001\001\000\004\115\u024b\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\111\u024e\112\u0244\001\001\000" +
    "\002\001\001\000\004\115\u0250\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\u0286\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\303\013\u0282\001\001\000\006" +
    "\012\123\015\u027a\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\211\u0260\001\001\000\002\001\001\000\004" +
    "\012\u0262\001\001\000\002\001\001\000\006\012\123\015" +
    "\u0264\001\001\000\004\165\u0266\001\001\000\006\012\u0271" +
    "\166\u0272\001\001\000\004\170\u0268\001\001\000\004\072" +
    "\u0270\001\001\000\004\067\u0269\001\001\000\004\171\u026b" +
    "\001\001\000\004\012\u026c\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\u026e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\102\u0274\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\167\u0275" +
    "\001\001\000\002\001\001\000\004\012\u0277\001\001\000" +
    "\004\102\u0278\001\001\000\004\167\u0279\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\012\u0131\175\u027c\177" +
    "\u012e\207\u0132\220\u012d\226\u0133\001\001\000\004\176\u027d" +
    "\001\001\000\002\001\001\000\004\173\u027f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\075\u0284\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\142\u0289\143\u0287\001\001\000\004" +
    "\147\u02b5\001\001\000\004\144\u028b\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\145\u028d\146\u028e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\145\u0290\146\u028e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\151\u0298" +
    "\001\001\000\002\001\001\000\012\153\u029d\154\u029c\156" +
    "\u029a\160\u029b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\151\u02b2\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\155\u02a3\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\157\u02a9\001\001\000\002\001\001\000\004\155" +
    "\u02ac\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\155\u02af\161\u02b1\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\u02b6\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\012\u02bb" +
    "\022\u02bc\254\u02bd\260\u02ba\001\001\000\002\001\001\000" +
    "\004\255\u02bf\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\256\u02c2\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\u02c5\022\u02c6\261\u02c7\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\u02c5\022\u02c6\261\u02ca\001" +
    "\001\000\002\001\001\000\006\012\123\015\u02cc\001\001" +
    "\000\002\001\001\000\010\012\u02bb\022\u02bc\260\u02ce\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\057\u02d2\001\001\000\020\012\152\017\164\047" +
    "\u02d3\051\151\053\147\054\146\070\u02d4\001\001\000\010" +
    "\012\u02d9\045\u0311\046\u02da\001\001\000\004\131\u02e0\001" +
    "\001\000\004\071\u02d7\001\001\000\016\012\152\017\164" +
    "\047\u02d8\051\151\053\147\054\146\001\001\000\002\001" +
    "\001\000\010\012\u02d9\045\u02dd\046\u02da\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\u02d9\046\u02df\001" +
    "\001\000\002\001\001\000\004\071\u02de\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\067\u02f9\001\001\000" +
    "\006\012\123\015\u02e2\001\001\000\010\012\u02d9\045\u02e3" +
    "\046\u02da\001\001\000\006\133\u02e8\134\u02e5\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\135\u02f2\001\001" +
    "\000\004\135\u02f1\001\001\000\004\132\u02ed\001\001\000" +
    "\004\135\u02eb\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\123\015\u02ee\001\001\000\002\001\001\000" +
    "\010\012\u02d9\045\u02ef\046\u02da\001\001\000\006\133\u02f0" +
    "\134\u02e5\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\123\015\u02f4\001\001\000\010" +
    "\012\u02d9\045\u02f5\046\u02da\001\001\000\002\001\001\000" +
    "\006\056\141\062\u02f7\001\001\000\006\133\u02f8\134\u02e5" +
    "\001\001\000\002\001\001\000\004\104\u02fa\001\001\000" +
    "\004\077\u0303\001\001\000\002\001\001\000\016\012\152" +
    "\017\164\047\u02fd\051\151\053\147\054\146\001\001\000" +
    "\004\105\u02ff\001\001\000\016\012\152\017\164\047\u0300" +
    "\051\151\053\147\054\146\001\001\000\002\001\001\000" +
    "\004\105\u0301\001\001\000\002\001\001\000\006\056\141" +
    "\062\u0310\001\001\000\004\100\u0305\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\012\152\017\164\047\u0307" +
    "\051\151\053\147\054\146\001\001\000\004\101\u0309\001" +
    "\001\000\004\012\u030f\001\001\000\004\102\u030a\001\001" +
    "\000\020\012\152\017\164\047\u030c\051\151\053\147\054" +
    "\146\103\u030b\001\001\000\002\001\001\000\004\101\u030d" +
    "\001\001\000\004\102\u030e\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\071\u0312\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 

    public List<CupError> SyntacticErrors = new ArrayList<CupError>();
    private Symbol s;

    public final Class getSymbolContainer() {
        return sym.class;
    }

    public void syntax_error(Symbol cur_token){
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) cur_token);
        List<Integer> ids = expected_token_ids();
        List<String> list = new ArrayList<String>();
	    for (Integer expected : ids) {
            list.add(symbl_name_from_id(expected));
        }
        SyntacticErrors.add(new CupError(s.left,s.right,s.value,list));
    }

    public void unrecovered_syntax_error(Symbol cur_token){
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) cur_token);
        List<Integer> ids = expected_token_ids();
        List<String> list = new ArrayList<String>();
	    for (Integer expected : ids) {
            list.add(symbl_name_from_id(expected));
        }
        SyntacticErrors.add(new CupError(s.left,s.right,s.value,list));
    }

    public String symbl_name_from_id(int id) {
        Field[] fields = getSymbolContainer().getFields();
        for(Field f : fields){
            try {
                if (f.getInt(null)==id) return f.getName();
            } catch (IllegalArgumentException e) {
            } catch (IllegalAccessException e) {
            }
        }
        return "Simbolo Invalido";
    }

    public List<Integer> expected_token_ids() {
        List<Integer> ret = new LinkedList<Integer>();
        int parse_state = ((Symbol)stack.peek()).parse_state ;
        short[] row = action_tab[parse_state];
        for (int i = 0; i<row.length; i+=2){
            if (row[i]==-1) continue;
            if (!validate_expected_symbol(row[i])) continue;
            ret.add(new Integer(row[i]));
        }
        return ret;
    }

    protected static final int _error_sync_size(){
        return 1;
    }

    private boolean validate_expected_symbol(int id){
        short lhs,rhs_size;
        int act;
        try {
            virtual_parse_stack vstack = new virtual_parse_stack(stack);
            for (;;)
            {
                act = get_action(vstack.top(), id);
                if (act == 0) return false;
                if (act > 0)
                {
                    vstack.push(act-1);
                    if (!advance_lookahead()) return true;
                }
                else
                {
                    if ((-act)-1 == start_production())  return true;
                    lhs = production_tab[(-act)-1][0];
                    rhs_size = production_tab[(-act)-1][1];
                    for (int i = 0; i < rhs_size; i++) vstack.pop();
                    vstack.push(get_reduce(vstack.top(), lhs));
                }
            }
        } catch (Exception e) {
        }
        return true;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicial ::= InicialA Final Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicial",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Inicial ::= error Final Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicial",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Inicial ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicial",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // InicialA ::= DML 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // InicialA ::= DDL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // InicialA ::= TCL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // InicialA ::= TSQL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DML ::= Select 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DML ::= Insert 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DML ::= Delete 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DML ::= Update 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DDL ::= Create 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DDL ::= Alter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DDL ::= Drop 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DDL ::= Truncate 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TCL ::= BeginTran 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TCL ::= Rollback 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TCL ::= Commit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TCL ::= SavePoint 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TSQL ::= CursorDeclare 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TSQL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Final ::= PyC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Final",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Final ::= GO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Final",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ID ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ID",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ID ::= AbreCorchetes identificador CierraCorchetes 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ID",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Object2 ::= ID Object2A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object2",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Object2A ::= Punto ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object2A",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Object2A ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object2A",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Object3 ::= ID Object3A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object3",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Object3A ::= Punto Object2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object3A",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Object3A ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object3A",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Object4 ::= ID Object4A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object4",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Object4A ::= Punto Object3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object4A",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Object4A ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object4A",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IFE ::= IF EXISTS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IFE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Variable ::= Arroba identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variable",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Tipo_dato ::= Tipo_datoD Tipo_datoB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_dato",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Tipo_datoD ::= Tipo_datoA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoD",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Tipo_datoD ::= AbreCorchetes Tipo_datoA CierraCorchetes 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoD",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Tipo_datoA ::= VARCHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Tipo_datoA ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Tipo_datoA ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Tipo_datoA ::= DATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Tipo_datoA ::= BIT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Tipo_datoA ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Tipo_datoA ::= CHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Tipo_datoA ::= CURSOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Tipo_datoA ::= NCHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Tipo_datoA ::= REAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Tipo_datoA ::= TIME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Tipo_datoA ::= INT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Tipo_datoA ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Tipo_datoA ::= SMALLINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Tipo_datoA ::= NUMERIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Tipo_datoB ::= AbreParentesis entero Tipo_datoC CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoB",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Tipo_datoB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoB",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Tipo_datoC ::= Coma entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoC",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Tipo_datoC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoC",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Drop ::= DROP DropA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Drop",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DropA ::= DropTable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DropA ::= DropUser 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DropA ::= DropDatabase 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DropA ::= DropView 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DropA ::= DropIndex 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DropTable ::= TABLE IFE Object3 DropTableA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropTable",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DropTableA ::= Coma Object3 DropTableA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropTableA",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DropTableA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropTableA",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DropUser ::= USER IFE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropUser",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DropDatabase ::= DATABASE IFE ID DropDatabaseA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropDatabase",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DropDatabaseA ::= Coma ID DropDatabaseA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropDatabaseA",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DropDatabaseA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropDatabaseA",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DropView ::= VIEW IFE Object2 DropViewA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropView",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DropViewA ::= Coma Object2 DropViewA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropViewA",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DropViewA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropViewA",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DropIndex ::= INDEX IFE DropIndexA DropIndexB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndex",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DropIndexA ::= ID ON Object3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndexA",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DropIndexB ::= Coma DropIndexA DropIndexB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndexB",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DropIndexB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndexB",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Truncate ::= TRUNCATE TABLE Object3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Truncate",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Alias ::= AS AliasA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alias",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Alias ::= AliasA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alias",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Alias ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alias",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // AliasA ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AliasA",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // AliasA ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AliasA",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expresion ::= ExpresionB ExpresionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Expresion",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ExpresionA ::= Suma ExpresionB ExpresionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ExpresionA ::= Resta ExpresionB ExpresionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ExpresionA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ExpresionB ::= ExpresionD ExpresionC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionB",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ExpresionC ::= Multiplicacion ExpresionD ExpresionC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionC",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ExpresionC ::= Division ExpresionD ExpresionC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionC",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ExpresionC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionC",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ExpresionD ::= AbreParentesis Expresion PredicadoC CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionD",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ExpresionD ::= ExpresionE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionD",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ExpresionE ::= Object4 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ExpresionE ::= entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ExpresionE ::= flotan 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ExpresionE ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ExpresionE ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ExpresionE ::= SUM AbreParentesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ExpresionE ::= AVG AbreParentesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ExpresionE ::= MIN AbreParentesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ExpresionE ::= MAX AbreParentesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ExpresionE ::= COUNT AbreParentesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ExpresionF ::= Object4 CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionF",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ExpresionF ::= entero CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionF",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ExpresionF ::= Multiplicacion CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionF",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Not ::= NOT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Not",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Not ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Not",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Top ::= TOP AbreParentesis entero CierraParentesis TopA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Top",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Top ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Top",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // TopA ::= PERCENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TopA",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // TopA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TopA",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Expresiones ::= Coma Expresion Expresiones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Expresiones",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Expresiones ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Expresiones",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // SearchCondition ::= Not Predicado SearchConditionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchCondition",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // SearchConditionA ::= AND SearchCondition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchConditionA",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SearchConditionA ::= OR SearchCondition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchConditionA",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // SearchConditionA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchConditionA",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Predicado ::= Expresion PredicadoA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Predicado",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OperadoresBooleanos ::= Igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OperadoresBooleanos ::= NoIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OperadoresBooleanos ::= Mayor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OperadoresBooleanos ::= MayorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OperadoresBooleanos ::= Menor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OperadoresBooleanos ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // PredicadoA ::= OperadoresBooleanos Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoA",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // PredicadoA ::= IS Not NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoA",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // PredicadoA ::= Not PredicadoC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoA",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // PredicadoC ::= IN AbreParentesis Expresion Expresiones CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoC",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // PredicadoC ::= BETWEEN Expresion AND Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoC",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // PredicadoC ::= LIKE Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoC",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Where ::= WHERE SearchCondition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Where",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Where ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Where",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // SelectColumns ::= Expresion Alias SelectColumnsA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectColumns",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // SelectColumns ::= Multiplicacion SelectColumnsA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectColumns",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // SelectColumnsA ::= Coma Expresion Alias SelectColumnsA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectColumnsA",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // SelectColumnsA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectColumnsA",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ColumnList ::= AbreParentesis ColumnListA CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnList",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ColumnListA ::= ID ColumnListB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnListA",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ColumnListB ::= Coma ID ColumnListB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnListB",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ColumnListB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnListB",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Select ::= SELECT SelectA Top SelectColumns FromSelect Where Group Having Order 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Select",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // SelectA ::= ALL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectA",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // SelectA ::= DISTINCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectA",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // SelectA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectA",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Having ::= HAVING SearchCondition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Having",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Having ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Having",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Order ::= ORDER BY Expresion OrderA OrderB OrderC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Order",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Order ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Order",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // OrderA ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderA",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // OrderA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderA",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // OrderB ::= ASC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderB",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // OrderB ::= DESC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderB",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // OrderB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderB",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // OrderC ::= Expresion OrderA OrderB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderC",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // OrderC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderC",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Group ::= GROUP BY Expresion GroupA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Group",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Group ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Group",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // GroupA ::= Coma Expresion GroupA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GroupA",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // GroupA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GroupA",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // Insert ::= INSERT Top InsertInto Object3 InsertColumnList InsertValores 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Insert",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // InsertInto ::= INTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertInto",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // InsertInto ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertInto",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // InsertColumnList ::= ColumnList 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertColumnList",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // InsertColumnList ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertColumnList",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // InsertExpresion ::= InsertExpresionA InsertExpresionB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresion",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // InsertExpresionA ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // InsertExpresionA ::= entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // InsertExpresionA ::= flotan 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // InsertExpresionA ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // InsertExpresionB ::= Coma InsertExpresionA InsertExpresionB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionB",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // InsertExpresionB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionB",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // InsertValores ::= VALUES AbreParentesis InsertExpresion CierraParentesis InsertValoresA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValores",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // InsertValores ::= DEFAULT VALUES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValores",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // InsertValoresA ::= Coma AbreParentesis InsertExpresion CierraParentesis InsertValoresA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValoresA",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // InsertValoresA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValoresA",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // Delete ::= DELETE Top FromDelete DeleteA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Delete",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // FromDelete ::= FROM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromDelete",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // FromDelete ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromDelete",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // DeleteA ::= OPENQUERY Server 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteA",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // DeleteA ::= Object3 DeleteB Where 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteA",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // DeleteB ::= FROM Object3 DeleteC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteB",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // DeleteC ::= Coma Object3 DeleteC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteC",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // DeleteC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteC",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // Server ::= AbreParentesis ID Coma entero CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Server",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // Update ::= UPDATE Top Object3 SET UpdateA FromUpdate Where 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Update",82, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // UpdateA ::= ID Igual UpdateB UpdateC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateA",83, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // UpdateB ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateB",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // UpdateB ::= Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateB",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // UpdateC ::= Coma UpdateA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateC",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // UpdateC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateC",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // FromUpdate ::= FROM Object3 DeleteC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromUpdate",86, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // FromUpdate ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromUpdate",86, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // FromSelect ::= FROM Object3 Alias Join FromSelectA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromSelect",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // FromSelect ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromSelect",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // FromSelectA ::= Coma Object3 Alias Join 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromSelectA",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // FromSelectA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromSelectA",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // Join ::= Type JOIN Object3 Alias ON SearchCondition Join 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Join",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // Join ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Join",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // Type ::= INNER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // Type ::= RIGHT Outer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // Type ::= LEFT Outer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // Type ::= FULL Outer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // Type ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // Outer ::= OUTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Outer",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // Outer ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Outer",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // Create ::= CREATE CreateA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Create",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // CreateA ::= CreateTable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // CreateA ::= CreateDB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // CreateA ::= CreateIndex 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // CreateA ::= CreateUser 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // CreateA ::= CreateView 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // CreateA ::= Procedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // CreateA ::= Function 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // CreateUser ::= USER identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateUser",94, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // CreateDB ::= DATABASE ID CreateDBA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDB",95, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // CreateDBA ::= CreateDBB COLLATEDB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDBA",96, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // CreateDBB ::= ON Primary FileSpecs 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDBB",97, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // CreateDBB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDBB",97, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // Primary ::= PRIMARY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Primary",98, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // Primary ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Primary",98, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // FileSpecs ::= FileSpec Coma FileSpecs 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileSpecs",99, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // FileSpecs ::= FileSpec 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileSpecs",99, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // FileSpec ::= AbreParentesis NAME Igual cadena Coma FILENAME Igual cadena Optionals CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileSpec",100, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // COLLATEDB ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLLATEDB",101, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // COLLATEDB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLLATEDB",101, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // Optionals ::= Coma Optional Optionals 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optionals",103, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // Optionals ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optionals",103, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // Optional ::= Size 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optional",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // Optional ::= Maxsize 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optional",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // Optional ::= Filegrowth 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optional",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // Size ::= SIZE Igual entero Size_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size",106, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // Size_A ::= KB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size_A",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // Size_A ::= MB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size_A",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // Size_A ::= GB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size_A",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // Size_A ::= TB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size_A",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // Maxsize ::= MAXSIZE Igual Maxsize_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Maxsize",108, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // Maxsize_A ::= entero Size_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Maxsize_A",109, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // Maxsize_A ::= UNLIMITED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Maxsize_A",109, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // Filegrowth ::= FILEGROWTH Igual entero Filegrowth_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth",110, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // Filegrowth_A ::= Size_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth_A",111, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // Filegrowth_A ::= MODULAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth_A",111, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // Filegrowth_A ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth_A",111, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // CreateView ::= VIEW Object2 AS Select 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateView",112, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // CreateIndex ::= CreateIndexA ColumnConstrC INDEX ID ON Object3 ColumnIndex IncludeIndex Where OptionalOn 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateIndex",113, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // CreateIndexA ::= UNIQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateIndexA",114, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // CreateIndexA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateIndexA",114, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // ColumnIndex ::= AbreParentesis ColumnIndexA CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndex",115, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // ColumnIndexA ::= ID OrderB ColumnIndexB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndexA",116, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // ColumnIndexB ::= Coma ID OrderB ColumnIndexB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndexB",117, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // ColumnIndexB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndexB",117, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // IncludeIndex ::= INCLUDE ColumnList 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IncludeIndex",118, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // IncludeIndex ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IncludeIndex",118, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // OptionalOn ::= ON ID AbreParentesis ID CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OptionalOn",119, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // OptionalOn ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OptionalOn",119, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // CreateTable ::= TABLE Object3 AbreParentesis CNC CNCA CierraParentesis FileGroup 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateTable",120, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // FileGroup ::= ON PRIMARY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileGroup",121, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // FileGroup ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileGroup",121, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // NFR ::= NOT NFR1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR",122, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // NFR ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR",122, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // NFR1 ::= FOR REPLICATION NFR2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR1",231, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // NFR1 ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR1",231, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // NFR2 ::= NOT ColumnDefG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR2",232, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // NFR2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR2",232, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // CNC ::= ColumnDef 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNC",123, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // CNC ::= TableConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNC",123, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // CNC ::= TableIndex 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNC",123, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // CNCA ::= Coma CNC CNCA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNCA",124, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // CNCA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNCA",124, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // ColumnDef ::= ID Tipo_dato ColumnDefA ColumnDefZ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDef",125, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // ColumnDefZ ::= CONSTRAINT ID ColumnDefY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefZ",236, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // ColumnDefZ ::= ColumnDefY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefZ",236, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // ColumnDefZ ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefZ",236, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // ColumnDefY ::= DEFAULT ColumnDefD ColumnDefE NFR ColumnDefH ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // ColumnDefY ::= IDENTITY ColumnDefF NFR ColumnDefH ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // ColumnDefY ::= ColumnDefX ColumnDefW ColumnDefH ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // ColumnDefY ::= ROWGUIDCOL ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // ColumnDefY ::= ColumnConstrB ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // ColumnDefX ::= NOT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefX",234, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // ColumnDefX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefX",234, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // ColumnDefW ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefW",235, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // ColumnDefW ::= FOR REPLICATION ColumnDefV 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefW",235, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // ColumnDefV ::= NOT NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefV",233, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // ColumnDefV ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefV",233, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // ColumnDefV ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefV",233, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // ColumnDefA ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefA",126, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // ColumnDefA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefA",126, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // ColumnDefD ::= entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // ColumnDefD ::= flotan 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // ColumnDefD ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // ColumnDefD ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // ColumnDefE ::= IDENTITY ColumnDefF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefE",128, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // ColumnDefE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefE",128, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // ColumnDefF ::= AbreParentesis entero Coma entero CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefF",129, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // ColumnDefF ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefF",129, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // ColumnDefG ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefG",130, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // ColumnDefG ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefG",130, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // ColumnDefH ::= ROWGUIDCOL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefH",131, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000001(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // ColumnDefH ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefH",131, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // ColumnConstr ::= ColumnConstrA ColumnConstrB ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstr",132, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // ColumnConstr ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstr",132, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // ColumnConstrA ::= CONSTRAINT ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrA",133, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // ColumnConstrA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrA",133, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // ColumnConstrB ::= PRIMARY KEY ColumnConstrC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // ColumnConstrB ::= UNIQUE ColumnConstrC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // ColumnConstrB ::= ColumnConstrD REFERENCES Object2 ColumnConstrE ColumnConstrF NFR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // ColumnConstrB ::= CHECK NFR AbreParentesis SearchCondition CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // ColumnConstrC ::= CLUSTERED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrC",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // ColumnConstrC ::= NONCLUSTERED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrC",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // ColumnConstrC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrC",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // ColumnConstrD ::= FOREIGN KEY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrD",136, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // ColumnConstrD ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrD",136, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // ColumnConstrE ::= AbreParentesis ID CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrE",137, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // ColumnConstrE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrE",137, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // ColumnConstrF ::= ON ColumnConstrG ColumnConstrF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrF",138, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // ColumnConstrF ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrF",138, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // ColumnConstrG ::= DELETE ColumnConstrI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrG",139, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // ColumnConstrG ::= UPDATE ColumnConstrI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrG",139, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // ColumnConstrH ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrH",140, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // ColumnConstrH ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrH",140, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // ColumnConstrI ::= CASCADE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrI",141, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // ColumnConstrI ::= SET ColumnConstrH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrI",141, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // TableConstr ::= ColumnConstrA TableConstrA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstr",142, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // TableConstrA ::= PRIMARY KEY ColumnConstrC TableConstrB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // TableConstrA ::= UNIQUE ColumnConstrC TableConstrB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // TableConstrA ::= FOREIGN KEY TableConstrD REFERENCES Object2 ColumnConstrE ColumnConstrF NFR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // TableConstrA ::= CHECK NFR AbreParentesis SearchCondition CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // TableConstrB ::= AbreParentesis ID OrderB TableConstrC CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrB",144, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // TableConstrC ::= Coma ID OrderB TableConstrC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrC",145, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // TableConstrC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrC",145, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // TableConstrD ::= AbreParentesis ID TableConstrE CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrD",146, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // TableConstrE ::= Coma ID TableConstrE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrE",147, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // TableConstrE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrE",147, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // TableIndex ::= INDEX ID ColumnConstrC TableConstrB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableIndex",148, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // Alter ::= ALTER AlterA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alter",149, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // AlterA ::= AlterTable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // AlterA ::= AlterUser 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // AlterA ::= AlterDatabase 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // AlterA ::= AlterView 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // AlterA ::= Procedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // AlterA ::= Function 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // AlterDatabase ::= DATABASE AlterDBA AlterDBB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDatabase",151, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // AlterDBA ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDBA",152, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // AlterDBA ::= CURRENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDBA",152, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // AlterDBB ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDBB",153, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // AlterDBB ::= SET ROLLBACK IMMEDIATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDBB",153, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // AlterUser ::= USER ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterUser",154, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // AlterView ::= VIEW Object2 AlterViewA AS Select 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterView",155, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // AlterViewA ::= ColumnList 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterViewA",156, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // AlterViewA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterViewA",156, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // AlterTable ::= TABLE Object3 AlterTableA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTable",157, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // AlterTableA ::= AlterColumn 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableA",158, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // AlterTableA ::= ADD CNC CNCA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableA",158, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // AlterTableA ::= AlterTableDrop 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableA",158, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // AlterColumn ::= ALTER COLUMN ID AlterColumnC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumn",159, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // AlterColumnC ::= AlterColumnA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnC",160, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // AlterColumnC ::= AlterColumnD AlterColumnE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnC",160, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // AlterColumnA ::= Tipo_dato ColumnDefA ColumnDefG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnA",161, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // AlterColumnD ::= ADD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnD",162, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // AlterColumnD ::= DROP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnD",162, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // AlterColumnE ::= ROWGUIDCOL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnE",163, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // AlterColumnE ::= NOT FOR REPLICATION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnE",163, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // AlterTableDrop ::= DROP AlterTableDropA AlterTableDropC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDrop",164, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // AlterTableDropA ::= AlterTableDropB IFE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropA",165, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // AlterTableDropA ::= COLUMN IFE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropA",165, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // AlterTableDropB ::= CONSTRAINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropB",166, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // AlterTableDropB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropB",166, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // AlterTableDropC ::= Coma AlterTableDropA AlterTableDropC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropC",167, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // AlterTableDropC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropC",167, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // BeginTran ::= BEGIN TranName BeginTranA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTran",169, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // BeginTranA ::= Name BeginTranB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranA",170, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // BeginTranA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranA",170, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // BeginTranB ::= WITH MARK BeginTranC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranB",171, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // BeginTranB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranB",171, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // BeginTranC ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranC",172, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // BeginTranC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranC",172, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // SavePoint ::= SAVE TranName Name 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SavePoint",173, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // Name ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Name",174, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // Name ::= Variable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Name",174, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // NameA ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NameA",175, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // NameA ::= Variable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NameA",175, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // NameA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NameA",175, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // TranName ::= TRAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TranName",176, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // TranName ::= TRANSACTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TranName",176, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // Commit ::= COMMIT CommitA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Commit",177, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // CommitA ::= TranName NameA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CommitA",178, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // CommitA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CommitA",178, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // Rollback ::= ROLLBACK RollbackA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Rollback",179, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // RollbackA ::= TranName NameA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RollbackA",180, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // RollbackA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RollbackA",180, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // Procedure ::= OrAlter SP_Reservada Object2 NumSP ParamsSP ProcOption ReplicationSP AS StartSP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Procedure",181, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // SP_Reservada ::= PROC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SP_Reservada",182, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // SP_Reservada ::= PROCEDURE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SP_Reservada",182, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // NumSP ::= PyC entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NumSP",183, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // NumSP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NumSP",183, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // ParamsSP ::= ParamsA_SP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsSP",184, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // ParamsSP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsSP",184, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // ParamsA_SP ::= Variable TipoD_SP ParamsB_SP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsA_SP",185, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // ParamsB_SP ::= Coma ParamsA_SP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsB_SP",186, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // ParamsB_SP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsB_SP",186, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // TipoD_SP ::= Tipo_datoA TipoD_SP1 TipoD_SP2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP",187, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // TipoD_SP ::= CURSOR VARYING TipoD_SP3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP",187, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // TipoD_SP ::= ID READONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP",187, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // TipoD_SP1 ::= Igual DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP1",188, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // TipoD_SP1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP1",188, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // TipoD_SP2 ::= TipoD_SP3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP2",189, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // TipoD_SP2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP2",189, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // TipoD_SP3 ::= OUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP3",190, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // TipoD_SP3 ::= OUTPUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP3",190, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // ProcOption ::= WITH ProcOption1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption",191, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // ProcOption ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption",191, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // ProcOption1 ::= ProcOption2 ProcOptionRec 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption1",192, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // ProcOption2 ::= ENCRYPTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption2",193, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // ProcOption2 ::= RECOMPILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption2",193, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // ProcOption2 ::= ClauseExec AS Clause 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption2",193, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // ClauseExec ::= EXECUTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ClauseExec",194, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // ClauseExec ::= EXEC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ClauseExec",194, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // ProcOptionRec ::= Coma ProcOption1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOptionRec",195, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // ProcOptionRec ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOptionRec",195, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // Clause ::= CALLER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clause",196, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // Clause ::= SELF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clause",196, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // Clause ::= OWNER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clause",196, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // Clause ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clause",196, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // ReplicationSP ::= FOR REPLICATION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReplicationSP",197, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // ReplicationSP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReplicationSP",197, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // StartSP ::= BEGIN StmtSP END 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StartSP",198, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // StartSP ::= StmtSP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StartSP",198, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // StmtSP ::= DML Final StmtSP1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP",199, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // StmtSP1 ::= DML Final StmtSP2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP1",200, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // StmtSP1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP1",200, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // StmtSP2 ::= DML Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP2",201, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // StmtSP2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP2",201, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // CursorDeclare ::= DECLARE ID CURSOR CursorDeclarea CursorDeclareb CursorDeclarec CursorDeclared CursorDeclaree FOR Select CursorDeclaref 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclare",222, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // CursorDeclarea ::= LOCAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarea",223, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // CursorDeclarea ::= GLOBAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarea",223, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // CursorDeclarea ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarea",223, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // CursorDeclareb ::= SCROLL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareb",224, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // CursorDeclareb ::= FORWARD_ONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareb",224, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // CursorDeclareb ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareb",224, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // CursorDeclarec ::= STATIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // CursorDeclarec ::= KEYSET 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // CursorDeclarec ::= DYNAMIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // CursorDeclarec ::= FAST_FORWARD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // CursorDeclarec ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // CursorDeclared ::= READ_ONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",226, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // CursorDeclared ::= SCROLL_LOCKS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",226, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // CursorDeclared ::= OPTIMISTIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",226, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // CursorDeclared ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",226, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // CursorDeclaree ::= TYPE_WARNING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaree",227, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // CursorDeclaree ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaree",227, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // CursorDeclaref ::= FOR UPDATE CursorDeclareg 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaref",228, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // CursorDeclaref ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaref",228, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // CursorDeclareg ::= OF ColumnListA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareg",229, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // CursorDeclareg ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareg",229, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$Sintax$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$Sintax$do_action_part00000001(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
